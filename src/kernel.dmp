00001  0000             ; KERNEL FOR THE C64
00002  0001             ; ZP ADDRESS THAT ARE SAFE TO USE: $02; $2A; $52; $73-$90; $FB-$FE;
00003  0001             
00004  0001             CHARSET    2 ; UPPER/LOWER CASED CHARACTERS
00005  0001                        
00006  0001             ;; SYS 3840
00007  0001             ;;#REGION BASIC START UP CODE
00008  0001             ;;; ; 10 POKE 2303, 1
00009  0001             ;;; 20 SYS (2304)
00010  0001             ;;; 30 NEW
00011  0001             ;;*=$0801
00012  0001             ;;        ;BYTE    $0E, $08, $0A, $00, $97, $20, $32, $33, $30, $33, $2C, $20, $31, $00 ; 10 POKE 2303, 1
00013  0001             ;;        ;BYTE    $0E, $08, $0A, $00, $9E, $20, $28,  $32, $30, $38, $30, $29, $00 ; 10 SYS (2080)
00014  0001             ;;        BYTE    $0E, $08, $14, $00, $9E, $20, $28,  $32, $33, $30, $34, $29, $00 ; 20 SYS (2304)
00015  0001             ;;        BYTE    $0E, $08, $1E, $00, $A2, $00 ; 30 NEW
00016  0001             ;;#ENDREGION
00017  0001             
00018  0001             
00019  0001             ;; SYS 3856
00020  0001             ;*=$0801
00021  0001             ;        BYTE    $0E, $08, $14, $00, $9E, $20, $28,  $33, $38, $35, $36, $29, $00 ; 20 SYS (3856)
00022  0001             ;        BYTE    $00, $00, $00
00023  0001             ;        ;BYTE    $0E, $08, $1E, $00, $A2, $00, $00, $00 ; 30 NEW
00024  0001             
00025  0001             ;; SYS 3849
00026  0001             ;*=$0801
00027  0001             ;        BYTE    $0E, $08, $14, $00, $9E, $20, $28,  $33, $38, $34, $39, $29, $00 ; 20 SYS (3849)
00028  0001             ;        BYTE    $00, $00, $00
00029  0001             
00030  0001             ; SYS 3840
00031  0001             *=$0801
00032  0801  0E 08 14              BYTE    $0E, $08, $14, $00, $9E, $20, $28,  $33, $38, $34, $30, $29, $00 ; 20 SYS (3840)
00033  080E  00 00 00              BYTE    $00, $00, $00
00034  0811             
00035  0811             
00036  0811             ;*=$1A00
00037  0811             ;CONSOLE.READSTR.BUFADDRESS = *
00038  0811             ;INCASM "BUFFER256.ASM"
00039  0811             CONSOLE.READSTR.BUFADDRESS = $0900
00040  0811             
00041  0811             
00042  0811             
00043  0811             ;*=$1B00
00044  0811             ;GRAPHICS.Y_TABLE_LO_ADDRESS = *
00045  0811             ;INCASM "BUFFER256.ASM"
00046  0811             GRAPHICS.Y_TABLE_LO_ADDRESS = $0A00
00047  0811             ;*=$1C00
00048  0811             ;GRAPHICS.Y_TABLE_HI_ADDRESS = *
00049  0811             ;INCASM "BUFFER256.ASM"
00050  0811             GRAPHICS.Y_TABLE_HI_ADDRESS = $0B00
00051  0811             ;*=$1D00
00052  0811             ;GRAPHICS.X_TABLE_ADDRESS = *
00053  0811             ;INCASM "BUFFER256.ASM"
00054  0811             GRAPHICS.X_TABLE_ADDRESS = $0C00
00055  0811             ;*=$1E00
00056  0811             ;GRAPHICS.BITMASK_ADDRESS = *
00057  0811             ;INCASM "BUFFER256.ASM"
00058  0811             GRAPHICS.BITMASK_ADDRESS = $0D00
00059  0811             
00060  0811             
00061  0811             
00062  0811             ;*=$1F00
00063  0811             ;*=$0D00
00064  0811             ;MEMORY.BACKUPZPADDRESS
00065  0811             ;INCASM "BUFFER256.ASM"
00066  0811             MEMORY.BACKUPZPADDRESS = $0E00
00067  0811             
00068  0811             
00069  0811             
00070  0811             *=$2000
00071  2000             FONT.MEMORYADDRESS = *
00072  2000  38 44 5C              BYTE    $38,$44,$5C,$54,$5C,$40,$38,$00 ; CHARACTER 0
00073  2008  00 00 38              BYTE    $00,$00,$38,$04,$3C,$44,$3C,$00 ; CHARACTER 1
00074  2010  00 40 40              BYTE    $00,$40,$40,$78,$44,$44,$78,$00 ; CHARACTER 2
00075  2018  00 00 3C              BYTE    $00,$00,$3C,$40,$40,$40,$3C,$00 ; CHARACTER 3
00076  2020  00 04 04              BYTE    $00,$04,$04,$3C,$44,$44,$3C,$00 ; CHARACTER 4
00077  2028  00 00 38              BYTE    $00,$00,$38,$44,$7C,$40,$38,$00 ; CHARACTER 5
00078  2030  00 0C 10              BYTE    $00,$0C,$10,$3C,$10,$10,$10,$00 ; CHARACTER 6
00079  2038  00 00 3C              BYTE    $00,$00,$3C,$44,$44,$3C,$04,$78 ; CHARACTER 7
00080  2040  00 40 40              BYTE    $00,$40,$40,$78,$44,$44,$44,$00 ; CHARACTER 8
00081  2048  00 10 00              BYTE    $00,$10,$00,$30,$10,$10,$38,$00 ; CHARACTER 9
00082  2050  00 04 00              BYTE    $00,$04,$00,$04,$04,$04,$04,$38 ; CHARACTER 10
00083  2058  00 40 40              BYTE    $00,$40,$40,$58,$60,$50,$4C,$00 ; CHARACTER 11
00084  2060  00 30 10              BYTE    $00,$30,$10,$10,$10,$10,$38,$00 ; CHARACTER 12
00085  2068  00 00 68              BYTE    $00,$00,$68,$54,$54,$54,$54,$00 ; CHARACTER 13
00086  2070  00 00 78              BYTE    $00,$00,$78,$44,$44,$44,$44,$00 ; CHARACTER 14
00087  2078  00 00 38              BYTE    $00,$00,$38,$44,$44,$44,$38,$00 ; CHARACTER 15
00088  2080  00 00 78              BYTE    $00,$00,$78,$44,$44,$78,$40,$40 ; CHARACTER 16
00089  2088  00 00 3C              BYTE    $00,$00,$3C,$44,$44,$3C,$04,$04 ; CHARACTER 17
00090  2090  00 00 78              BYTE    $00,$00,$78,$44,$40,$40,$40,$00 ; CHARACTER 18
00091  2098  00 00 3C              BYTE    $00,$00,$3C,$40,$38,$04,$78,$00 ; CHARACTER 19
00092  20A0  00 10 7C              BYTE    $00,$10,$7C,$10,$10,$10,$0C,$00 ; CHARACTER 20
00093  20A8  00 00 44              BYTE    $00,$00,$44,$44,$44,$44,$3C,$00 ; CHARACTER 21
00094  20B0  00 00 44              BYTE    $00,$00,$44,$44,$44,$28,$10,$00 ; CHARACTER 22
00095  20B8  00 00 44              BYTE    $00,$00,$44,$54,$54,$54,$28,$00 ; CHARACTER 23
00096  20C0  00 00 44              BYTE    $00,$00,$44,$28,$10,$28,$44,$00 ; CHARACTER 24
00097  20C8  00 00 44              BYTE    $00,$00,$44,$44,$44,$3C,$08,$70 ; CHARACTER 25
00098  20D0  00 00 7C              BYTE    $00,$00,$7C,$08,$10,$20,$7C,$00 ; CHARACTER 26
00099  20D8  38 20 20              BYTE    $38,$20,$20,$20,$20,$20,$38,$00 ; CHARACTER 27
00100  20E0  08 14 10              BYTE    $08,$14,$10,$38,$10,$24,$78,$00 ; CHARACTER 28
00101  20E8  38 08 08              BYTE    $38,$08,$08,$08,$08,$08,$38,$00 ; CHARACTER 29
00102  20F0  00 10 38              BYTE    $00,$10,$38,$7C,$10,$10,$10,$10 ; CHARACTER 30
00103  20F8  00 10 30              BYTE    $00,$10,$30,$7F,$30,$10,$00,$00 ; CHARACTER 31
00104  2100  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00 ; CHARACTER 32
00105  2108  10 10 10              BYTE    $10,$10,$10,$10,$00,$00,$10,$00 ; CHARACTER 33
00106  2110  24 24 24              BYTE    $24,$24,$24,$00,$00,$00,$00,$00 ; CHARACTER 34
00107  2118  28 28 7C              BYTE    $28,$28,$7C,$28,$7C,$28,$28,$00 ; CHARACTER 35
00108  2120  10 3C 40              BYTE    $10,$3C,$40,$38,$04,$78,$10,$00 ; CHARACTER 36
00109  2128  44 44 08              BYTE    $44,$44,$08,$10,$20,$44,$44,$00 ; CHARACTER 37
00110  2130  30 48 30              BYTE    $30,$48,$30,$20,$54,$48,$34,$00 ; CHARACTER 38
00111  2138  04 08 10              BYTE    $04,$08,$10,$00,$00,$00,$00,$00 ; CHARACTER 39
00112  2140  08 10 20              BYTE    $08,$10,$20,$20,$20,$10,$08,$00 ; CHARACTER 40
00113  2148  20 10 08              BYTE    $20,$10,$08,$08,$08,$10,$20,$00 ; CHARACTER 41
00114  2150  00 44 28              BYTE    $00,$44,$28,$7C,$28,$44,$00,$00 ; CHARACTER 42
00115  2158  00 10 10              BYTE    $00,$10,$10,$7C,$10,$10,$00,$00 ; CHARACTER 43
00116  2160  00 00 00              BYTE    $00,$00,$00,$00,$00,$10,$10,$20 ; CHARACTER 44
00117  2168  00 00 00              BYTE    $00,$00,$00,$7C,$00,$00,$00,$00 ; CHARACTER 45
00118  2170  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$10,$00 ; CHARACTER 46
00119  2178  00 02 04              BYTE    $00,$02,$04,$08,$10,$20,$40,$00 ; CHARACTER 47
00120  2180  38 44 4C              BYTE    $38,$44,$4C,$54,$64,$44,$38,$00 ; CHARACTER 48
00121  2188  10 30 10              BYTE    $10,$30,$10,$10,$10,$10,$38,$00 ; CHARACTER 49
00122  2190  38 44 04              BYTE    $38,$44,$04,$18,$20,$40,$7C,$00 ; CHARACTER 50
00123  2198  38 44 04              BYTE    $38,$44,$04,$18,$04,$44,$38,$00 ; CHARACTER 51
00124  21A0  08 18 28              BYTE    $08,$18,$28,$48,$7C,$08,$08,$00 ; CHARACTER 52
00125  21A8  7C 40 78              BYTE    $7C,$40,$78,$04,$04,$44,$38,$00 ; CHARACTER 53
00126  21B0  38 44 40              BYTE    $38,$44,$40,$78,$44,$44,$38,$00 ; CHARACTER 54
00127  21B8  7C 44 08              BYTE    $7C,$44,$08,$10,$10,$10,$10,$00 ; CHARACTER 55
00128  21C0  38 44 44              BYTE    $38,$44,$44,$38,$44,$44,$38,$00 ; CHARACTER 56
00129  21C8  38 44 44              BYTE    $38,$44,$44,$3C,$04,$44,$38,$00 ; CHARACTER 57
00130  21D0  00 00 10              BYTE    $00,$00,$10,$00,$00,$10,$00,$00 ; CHARACTER 58
00131  21D8  00 00 10              BYTE    $00,$00,$10,$00,$00,$10,$10,$20 ; CHARACTER 59
00132  21E0  0C 10 20              BYTE    $0C,$10,$20,$40,$20,$10,$0C,$00 ; CHARACTER 60
00133  21E8  00 00 7C              BYTE    $00,$00,$7C,$00,$7C,$00,$00,$00 ; CHARACTER 61
00134  21F0  60 10 08              BYTE    $60,$10,$08,$04,$08,$10,$60,$00 ; CHARACTER 62
00135  21F8  38 44 04              BYTE    $38,$44,$04,$08,$10,$00,$10,$00 ; CHARACTER 63
00136  2200  00 00 00              BYTE    $00,$00,$00,$FF,$FF,$00,$00,$00 ; CHARACTER 64
00137  2208  10 28 44              BYTE    $10,$28,$44,$7C,$44,$44,$44,$00 ; CHARACTER 65
00138  2210  78 44 44              BYTE    $78,$44,$44,$78,$44,$44,$78,$00 ; CHARACTER 66
00139  2218  38 44 40              BYTE    $38,$44,$40,$40,$40,$44,$38,$00 ; CHARACTER 67
00140  2220  70 48 44              BYTE    $70,$48,$44,$44,$44,$48,$70,$00 ; CHARACTER 68
00141  2228  7C 40 40              BYTE    $7C,$40,$40,$78,$40,$40,$7C,$00 ; CHARACTER 69
00142  2230  7C 40 40              BYTE    $7C,$40,$40,$70,$40,$40,$40,$00 ; CHARACTER 70
00143  2238  38 44 40              BYTE    $38,$44,$40,$4C,$44,$44,$38,$00 ; CHARACTER 71
00144  2240  44 44 44              BYTE    $44,$44,$44,$7C,$44,$44,$44,$00 ; CHARACTER 72
00145  2248  38 10 10              BYTE    $38,$10,$10,$10,$10,$10,$38,$00 ; CHARACTER 73
00146  2250  1C 08 08              BYTE    $1C,$08,$08,$08,$08,$48,$30,$00 ; CHARACTER 74
00147  2258  44 48 50              BYTE    $44,$48,$50,$60,$50,$48,$44,$00 ; CHARACTER 75
00148  2260  40 40 40              BYTE    $40,$40,$40,$40,$40,$40,$7C,$00 ; CHARACTER 76
00149  2268  44 6C 54              BYTE    $44,$6C,$54,$44,$44,$44,$44,$00 ; CHARACTER 77
00150  2270  44 44 64              BYTE    $44,$44,$64,$54,$4C,$44,$44,$00 ; CHARACTER 78
00151  2278  38 44 44              BYTE    $38,$44,$44,$44,$44,$44,$38,$00 ; CHARACTER 79
00152  2280  78 44 44              BYTE    $78,$44,$44,$78,$40,$40,$40,$00 ; CHARACTER 80
00153  2288  38 44 44              BYTE    $38,$44,$44,$44,$44,$38,$0C,$00 ; CHARACTER 81
00154  2290  78 44 44              BYTE    $78,$44,$44,$78,$50,$48,$44,$00 ; CHARACTER 82
00155  2298  38 44 40              BYTE    $38,$44,$40,$38,$04,$44,$38,$00 ; CHARACTER 83
00156  22A0  7C 10 10              BYTE    $7C,$10,$10,$10,$10,$10,$10,$00 ; CHARACTER 84
00157  22A8  44 44 44              BYTE    $44,$44,$44,$44,$44,$44,$38,$00 ; CHARACTER 85
00158  22B0  44 44 44              BYTE    $44,$44,$44,$44,$44,$28,$10,$00 ; CHARACTER 86
00159  22B8  44 44 44              BYTE    $44,$44,$44,$44,$54,$6C,$44,$00 ; CHARACTER 87
00160  22C0  44 44 28              BYTE    $44,$44,$28,$10,$28,$44,$44,$00 ; CHARACTER 88
00161  22C8  44 44 44              BYTE    $44,$44,$44,$28,$10,$10,$10,$00 ; CHARACTER 89
00162  22D0  7C 04 08              BYTE    $7C,$04,$08,$10,$20,$40,$7C,$00 ; CHARACTER 90
00163  22D8  18 18 18              BYTE    $18,$18,$18,$FF,$FF,$18,$18,$18 ; CHARACTER 91
00164  22E0  C0 C0 30              BYTE    $C0,$C0,$30,$30,$C0,$C0,$30,$30 ; CHARACTER 92
00165  22E8  18 18 18              BYTE    $18,$18,$18,$18,$18,$18,$18,$18 ; CHARACTER 93
00166  22F0  33 33 CC              BYTE    $33,$33,$CC,$CC,$33,$33,$CC,$CC ; CHARACTER 94
00167  22F8  33 99 CC              BYTE    $33,$99,$CC,$66,$33,$99,$CC,$66 ; CHARACTER 95
00168  2300  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00 ; CHARACTER 96
00169  2308  F0 F0 F0              BYTE    $F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0 ; CHARACTER 97
00170  2310  00 00 00              BYTE    $00,$00,$00,$00,$FF,$FF,$FF,$FF ; CHARACTER 98
00171  2318  FF 00 00              BYTE    $FF,$00,$00,$00,$00,$00,$00,$00 ; CHARACTER 99
00172  2320  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$FF ; CHARACTER 100
00173  2328  C0 C0 C0              BYTE    $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0 ; CHARACTER 101
00174  2330  CC CC 33              BYTE    $CC,$CC,$33,$33,$CC,$CC,$33,$33 ; CHARACTER 102
00175  2338  03 03 03              BYTE    $03,$03,$03,$03,$03,$03,$03,$03 ; CHARACTER 103
00176  2340  00 00 00              BYTE    $00,$00,$00,$00,$CC,$CC,$33,$33 ; CHARACTER 104
00177  2348  CC 99 33              BYTE    $CC,$99,$33,$66,$CC,$99,$33,$66 ; CHARACTER 105
00178  2350  03 03 03              BYTE    $03,$03,$03,$03,$03,$03,$03,$03 ; CHARACTER 106
00179  2358  18 18 18              BYTE    $18,$18,$18,$1F,$1F,$18,$18,$18 ; CHARACTER 107
00180  2360  00 00 00              BYTE    $00,$00,$00,$00,$0F,$0F,$0F,$0F ; CHARACTER 108
00181  2368  18 18 18              BYTE    $18,$18,$18,$1F,$1F,$00,$00,$00 ; CHARACTER 109
00182  2370  00 00 00              BYTE    $00,$00,$00,$F8,$F8,$18,$18,$18 ; CHARACTER 110
00183  2378  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$FF,$FF ; CHARACTER 111
00184  2380  00 00 00              BYTE    $00,$00,$00,$1F,$1F,$18,$18,$18 ; CHARACTER 112
00185  2388  18 18 18              BYTE    $18,$18,$18,$FF,$FF,$00,$00,$00 ; CHARACTER 113
00186  2390  00 00 00              BYTE    $00,$00,$00,$FF,$FF,$18,$18,$18 ; CHARACTER 114
00187  2398  18 18 18              BYTE    $18,$18,$18,$F8,$F8,$18,$18,$18 ; CHARACTER 115
00188  23A0  C0 C0 C0              BYTE    $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0 ; CHARACTER 116
00189  23A8  E0 E0 E0              BYTE    $E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0 ; CHARACTER 117
00190  23B0  07 07 07              BYTE    $07,$07,$07,$07,$07,$07,$07,$07 ; CHARACTER 118
00191  23B8  FF FF 00              BYTE    $FF,$FF,$00,$00,$00,$00,$00,$00 ; CHARACTER 119
00192  23C0  FF FF FF              BYTE    $FF,$FF,$FF,$00,$00,$00,$00,$00 ; CHARACTER 120
00193  23C8  00 00 00              BYTE    $00,$00,$00,$00,$00,$FF,$FF,$FF ; CHARACTER 121
00194  23D0  00 02 04              BYTE    $00,$02,$04,$48,$50,$60,$40,$00 ; CHARACTER 122
00195  23D8  00 00 00              BYTE    $00,$00,$00,$00,$F0,$F0,$F0,$F0 ; CHARACTER 123
00196  23E0  0F 0F 0F              BYTE    $0F,$0F,$0F,$0F,$00,$00,$00,$00 ; CHARACTER 124
00197  23E8  18 18 18              BYTE    $18,$18,$18,$F8,$F8,$00,$00,$00 ; CHARACTER 125
00198  23F0  F0 F0 F0              BYTE    $F0,$F0,$F0,$F0,$00,$00,$00,$00 ; CHARACTER 126
00199  23F8  F0 F0 F0              BYTE    $F0,$F0,$F0,$F0,$0F,$0F,$0F,$0F ; CHARACTER 127
00200  2400  C6 BA A2              BYTE    $C6,$BA,$A2,$AA,$A2,$BE,$C6,$FE ; CHARACTER 128
00201  2408  FE FE C6              BYTE    $FE,$FE,$C6,$FA,$C2,$BA,$C2,$FE ; CHARACTER 129
00202  2410  FE BE BE              BYTE    $FE,$BE,$BE,$86,$BA,$BA,$86,$FE ; CHARACTER 130
00203  2418  FE FE C2              BYTE    $FE,$FE,$C2,$BE,$BE,$BE,$C2,$FE ; CHARACTER 131
00204  2420  FE FA FA              BYTE    $FE,$FA,$FA,$C2,$BA,$BA,$C2,$FE ; CHARACTER 132
00205  2428  FE FE C6              BYTE    $FE,$FE,$C6,$BA,$82,$BE,$C6,$FE ; CHARACTER 133
00206  2430  FE F2 EE              BYTE    $FE,$F2,$EE,$C2,$EE,$EE,$EE,$FE ; CHARACTER 134
00207  2438  FE FE C2              BYTE    $FE,$FE,$C2,$BA,$BA,$C2,$FA,$86 ; CHARACTER 135
00208  2440  FE BE BE              BYTE    $FE,$BE,$BE,$86,$BA,$BA,$BA,$FE ; CHARACTER 136
00209  2448  FE EE FE              BYTE    $FE,$EE,$FE,$CE,$EE,$EE,$C6,$FE ; CHARACTER 137
00210  2450  FE FA FE              BYTE    $FE,$FA,$FE,$FA,$FA,$FA,$FA,$C6 ; CHARACTER 138
00211  2458  FE BE BE              BYTE    $FE,$BE,$BE,$A6,$9E,$AE,$B2,$FE ; CHARACTER 139
00212  2460  FE CE EE              BYTE    $FE,$CE,$EE,$EE,$EE,$EE,$C6,$FE ; CHARACTER 140
00213  2468  FE FE 96              BYTE    $FE,$FE,$96,$AA,$AA,$AA,$AA,$FE ; CHARACTER 141
00214  2470  FE FE 86              BYTE    $FE,$FE,$86,$BA,$BA,$BA,$BA,$FE ; CHARACTER 142
00215  2478  FE FE C6              BYTE    $FE,$FE,$C6,$BA,$BA,$BA,$C6,$FE ; CHARACTER 143
00216  2480  FE FE 86              BYTE    $FE,$FE,$86,$BA,$BA,$86,$BE,$BE ; CHARACTER 144
00217  2488  FE FE C2              BYTE    $FE,$FE,$C2,$BA,$BA,$C2,$FA,$FA ; CHARACTER 145
00218  2490  FE FE 86              BYTE    $FE,$FE,$86,$BA,$BE,$BE,$BE,$FE ; CHARACTER 146
00219  2498  FE FE C2              BYTE    $FE,$FE,$C2,$BE,$C6,$FA,$86,$FE ; CHARACTER 147
00220  24A0  FE EE 82              BYTE    $FE,$EE,$82,$EE,$EE,$EE,$F2,$FE ; CHARACTER 148
00221  24A8  FE FE BA              BYTE    $FE,$FE,$BA,$BA,$BA,$BA,$C2,$FE ; CHARACTER 149
00222  24B0  FE FE BA              BYTE    $FE,$FE,$BA,$BA,$BA,$D6,$EE,$FE ; CHARACTER 150
00223  24B8  FE FE BA              BYTE    $FE,$FE,$BA,$AA,$AA,$AA,$D6,$FE ; CHARACTER 151
00224  24C0  FE FE BA              BYTE    $FE,$FE,$BA,$D6,$EE,$D6,$BA,$FE ; CHARACTER 152
00225  24C8  FE FE BA              BYTE    $FE,$FE,$BA,$BA,$BA,$C2,$F6,$8E ; CHARACTER 153
00226  24D0  FE FE 82              BYTE    $FE,$FE,$82,$F6,$EE,$DE,$82,$FE ; CHARACTER 154
00227  24D8  C6 DE DE              BYTE    $C6,$DE,$DE,$DE,$DE,$DE,$C6,$FE ; CHARACTER 155
00228  24E0  F6 EA EE              BYTE    $F6,$EA,$EE,$C6,$EE,$DA,$86,$FE ; CHARACTER 156
00229  24E8  C6 F6 F6              BYTE    $C6,$F6,$F6,$F6,$F6,$F6,$C6,$FE ; CHARACTER 157
00230  24F0  FE EE C6              BYTE    $FE,$EE,$C6,$82,$EE,$EE,$EE,$EE ; CHARACTER 158
00231  24F8  FE EE CE              BYTE    $FE,$EE,$CE,$80,$CE,$EE,$FE,$FE ; CHARACTER 159
00232  2500  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 160
00233  2508  EE EE EE              BYTE    $EE,$EE,$EE,$EE,$FE,$FE,$EE,$FE ; CHARACTER 161
00234  2510  DA DA DA              BYTE    $DA,$DA,$DA,$FE,$FE,$FE,$FE,$FE ; CHARACTER 162
00235  2518  D6 D6 82              BYTE    $D6,$D6,$82,$D6,$82,$D6,$D6,$FE ; CHARACTER 163
00236  2520  EE C2 BE              BYTE    $EE,$C2,$BE,$C6,$FA,$86,$EE,$FE ; CHARACTER 164
00237  2528  BA BA F6              BYTE    $BA,$BA,$F6,$EE,$DE,$BA,$BA,$FE ; CHARACTER 165
00238  2530  CE B6 CE              BYTE    $CE,$B6,$CE,$DE,$AA,$B6,$CA,$FE ; CHARACTER 166
00239  2538  FA F6 EE              BYTE    $FA,$F6,$EE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 167
00240  2540  F6 EE DE              BYTE    $F6,$EE,$DE,$DE,$DE,$EE,$F6,$FE ; CHARACTER 168
00241  2548  DE EE F6              BYTE    $DE,$EE,$F6,$F6,$F6,$EE,$DE,$FE ; CHARACTER 169
00242  2550  FE BA D6              BYTE    $FE,$BA,$D6,$82,$D6,$BA,$FE,$FE ; CHARACTER 170
00243  2558  FE EE EE              BYTE    $FE,$EE,$EE,$82,$EE,$EE,$FE,$FE ; CHARACTER 171
00244  2560  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$EE,$EE,$DE ; CHARACTER 172
00245  2568  FE FE FE              BYTE    $FE,$FE,$FE,$82,$FE,$FE,$FE,$FE ; CHARACTER 173
00246  2570  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$E6,$E6,$FE ; CHARACTER 174
00247  2578  FE FC FA              BYTE    $FE,$FC,$FA,$F6,$EE,$DE,$BE,$FE ; CHARACTER 175
00248  2580  C6 BA B2              BYTE    $C6,$BA,$B2,$AA,$9A,$BA,$C6,$FE ; CHARACTER 176
00249  2588  EE CE EE              BYTE    $EE,$CE,$EE,$EE,$EE,$EE,$C6,$FE ; CHARACTER 177
00250  2590  C6 BA FA              BYTE    $C6,$BA,$FA,$E6,$DE,$BE,$82,$FE ; CHARACTER 178
00251  2598  C6 BA FA              BYTE    $C6,$BA,$FA,$E6,$FA,$BA,$C6,$FE ; CHARACTER 179
00252  25A0  F6 E6 D6              BYTE    $F6,$E6,$D6,$B6,$82,$F6,$F6,$FE ; CHARACTER 180
00253  25A8  82 BE 86              BYTE    $82,$BE,$86,$FA,$FA,$BA,$C6,$FE ; CHARACTER 181
00254  25B0  C6 BA BE              BYTE    $C6,$BA,$BE,$86,$BA,$BA,$C6,$FE ; CHARACTER 182
00255  25B8  82 BA F6              BYTE    $82,$BA,$F6,$EE,$EE,$EE,$EE,$FE ; CHARACTER 183
00256  25C0  C6 BA BA              BYTE    $C6,$BA,$BA,$C6,$BA,$BA,$C6,$FE ; CHARACTER 184
00257  25C8  C6 BA BA              BYTE    $C6,$BA,$BA,$C2,$FA,$BA,$C6,$FE ; CHARACTER 185
00258  25D0  FE FE EE              BYTE    $FE,$FE,$EE,$FE,$FE,$EE,$FE,$FE ; CHARACTER 186
00259  25D8  FE FE EE              BYTE    $FE,$FE,$EE,$FE,$FE,$EE,$EE,$DE ; CHARACTER 187
00260  25E0  F2 EE DE              BYTE    $F2,$EE,$DE,$BE,$DE,$EE,$F2,$FE ; CHARACTER 188
00261  25E8  FE FE 82              BYTE    $FE,$FE,$82,$FE,$82,$FE,$FE,$FE ; CHARACTER 189
00262  25F0  9E EE F6              BYTE    $9E,$EE,$F6,$FA,$F6,$EE,$9E,$FE ; CHARACTER 190
00263  25F8  C6 BA FA              BYTE    $C6,$BA,$FA,$F6,$EE,$FE,$EE,$FE ; CHARACTER 191
00264  2600  FE FE FE              BYTE    $FE,$FE,$FE,$00,$00,$FE,$FE,$FE ; CHARACTER 192
00265  2608  EE D6 BA              BYTE    $EE,$D6,$BA,$82,$BA,$BA,$BA,$FE ; CHARACTER 193
00266  2610  86 BA BA              BYTE    $86,$BA,$BA,$86,$BA,$BA,$86,$FE ; CHARACTER 194
00267  2618  C6 BA BE              BYTE    $C6,$BA,$BE,$BE,$BE,$BA,$C6,$FE ; CHARACTER 195
00268  2620  8E B6 BA              BYTE    $8E,$B6,$BA,$BA,$BA,$B6,$8E,$FE ; CHARACTER 196
00269  2628  82 BE BE              BYTE    $82,$BE,$BE,$86,$BE,$BE,$82,$FE ; CHARACTER 197
00270  2630  82 BE BE              BYTE    $82,$BE,$BE,$8E,$BE,$BE,$BE,$FE ; CHARACTER 198
00271  2638  C6 BA BE              BYTE    $C6,$BA,$BE,$B2,$BA,$BA,$C6,$FE ; CHARACTER 199
00272  2640  BA BA BA              BYTE    $BA,$BA,$BA,$82,$BA,$BA,$BA,$FE ; CHARACTER 200
00273  2648  C6 EE EE              BYTE    $C6,$EE,$EE,$EE,$EE,$EE,$C6,$FE ; CHARACTER 201
00274  2650  E2 F6 F6              BYTE    $E2,$F6,$F6,$F6,$F6,$B6,$CE,$FE ; CHARACTER 202
00275  2658  BA B6 AE              BYTE    $BA,$B6,$AE,$9E,$AE,$B6,$BA,$FE ; CHARACTER 203
00276  2660  BE BE BE              BYTE    $BE,$BE,$BE,$BE,$BE,$BE,$82,$FE ; CHARACTER 204
00277  2668  BA 92 AA              BYTE    $BA,$92,$AA,$BA,$BA,$BA,$BA,$FE ; CHARACTER 205
00278  2670  BA BA 9A              BYTE    $BA,$BA,$9A,$AA,$B2,$BA,$BA,$FE ; CHARACTER 206
00279  2678  C6 BA BA              BYTE    $C6,$BA,$BA,$BA,$BA,$BA,$C6,$FE ; CHARACTER 207
00280  2680  86 BA BA              BYTE    $86,$BA,$BA,$86,$BE,$BE,$BE,$FE ; CHARACTER 208
00281  2688  C6 BA BA              BYTE    $C6,$BA,$BA,$BA,$BA,$C6,$F2,$FE ; CHARACTER 209
00282  2690  86 BA BA              BYTE    $86,$BA,$BA,$86,$AE,$B6,$BA,$FE ; CHARACTER 210
00283  2698  C6 BA BE              BYTE    $C6,$BA,$BE,$C6,$FA,$BA,$C6,$FE ; CHARACTER 211
00284  26A0  82 EE EE              BYTE    $82,$EE,$EE,$EE,$EE,$EE,$EE,$FE ; CHARACTER 212
00285  26A8  BA BA BA              BYTE    $BA,$BA,$BA,$BA,$BA,$BA,$C6,$FE ; CHARACTER 213
00286  26B0  BA BA BA              BYTE    $BA,$BA,$BA,$BA,$BA,$D6,$EE,$FE ; CHARACTER 214
00287  26B8  BA BA BA              BYTE    $BA,$BA,$BA,$BA,$AA,$92,$BA,$FE ; CHARACTER 215
00288  26C0  BA BA D6              BYTE    $BA,$BA,$D6,$EE,$D6,$BA,$BA,$FE ; CHARACTER 216
00289  26C8  BA BA BA              BYTE    $BA,$BA,$BA,$D6,$EE,$EE,$EE,$FE ; CHARACTER 217
00290  26D0  82 FA F6              BYTE    $82,$FA,$F6,$EE,$DE,$BE,$82,$FE ; CHARACTER 218
00291  26D8  E6 E6 E6              BYTE    $E6,$E6,$E6,$00,$00,$E6,$E6,$E6 ; CHARACTER 219
00292  26E0  3E 3E CE              BYTE    $3E,$3E,$CE,$CE,$3E,$3E,$CE,$CE ; CHARACTER 220
00293  26E8  E6 E6 E6              BYTE    $E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6 ; CHARACTER 221
00294  26F0  CC CC 32              BYTE    $CC,$CC,$32,$32,$CC,$CC,$32,$32 ; CHARACTER 222
00295  26F8  CC 66 32              BYTE    $CC,$66,$32,$98,$CC,$66,$32,$98 ; CHARACTER 223
00296  2700  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 224
00297  2708  0E 0E 0E              BYTE    $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E ; CHARACTER 225
00298  2710  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$00,$00,$00,$00 ; CHARACTER 226
00299  2718  00 FE FE              BYTE    $00,$FE,$FE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 227
00300  2720  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$FE,$FE,$00 ; CHARACTER 228
00301  2728  3E 3E 3E              BYTE    $3E,$3E,$3E,$3E,$3E,$3E,$3E,$3E ; CHARACTER 229
00302  2730  32 32 CC              BYTE    $32,$32,$CC,$CC,$32,$32,$CC,$CC ; CHARACTER 230
00303  2738  FC FC FC              BYTE    $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC ; CHARACTER 231
00304  2740  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$32,$32,$CC,$CC ; CHARACTER 232
00305  2748  FE 66 CC              BYTE    $FE,$66,$CC,$98,$32,$66,$CC,$98 ; CHARACTER 233
00306  2750  FE FC FC              BYTE    $FE,$FC,$FC,$FC,$FC,$FC,$FC,$FC ; CHARACTER 234
00307  2758  E6 E6 E6              BYTE    $E6,$E6,$E6,$E0,$E0,$E6,$E6,$E6 ; CHARACTER 235
00308  2760  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$F0,$F0,$F0,$F0 ; CHARACTER 236
00309  2768  E6 E6 E6              BYTE    $E6,$E6,$E6,$E0,$E0,$FE,$FE,$FE ; CHARACTER 237
00310  2770  FE FE FE              BYTE    $FE,$FE,$FE,$06,$06,$E6,$E6,$E6 ; CHARACTER 238
00311  2778  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$FE,$00,$00 ; CHARACTER 239
00312  2780  FE FE FE              BYTE    $FE,$FE,$FE,$E0,$E0,$E6,$E6,$E6 ; CHARACTER 240
00313  2788  E6 E6 E6              BYTE    $E6,$E6,$E6,$00,$00,$FE,$FE,$FE ; CHARACTER 241
00314  2790  FE FE FE              BYTE    $FE,$FE,$FE,$00,$00,$E6,$E6,$E6 ; CHARACTER 242
00315  2798  E6 E6 E6              BYTE    $E6,$E6,$E6,$06,$06,$E6,$E6,$E6 ; CHARACTER 243
00316  27A0  3E 3E 3E              BYTE    $3E,$3E,$3E,$3E,$3E,$3E,$3E,$3E ; CHARACTER 244
00317  27A8  1E 1E 1E              BYTE    $1E,$1E,$1E,$1E,$1E,$1E,$1E,$1E ; CHARACTER 245
00318  27B0  F8 F8 F8              BYTE    $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8 ; CHARACTER 246
00319  27B8  00 00 FE              BYTE    $00,$00,$FE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 247
00320  27C0  00 00 00              BYTE    $00,$00,$00,$FE,$FE,$FE,$FE,$FE ; CHARACTER 248
00321  27C8  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$00,$00,$00 ; CHARACTER 249
00322  27D0  FE FC F8              BYTE    $FE,$FC,$F8,$92,$86,$8E,$9E,$FE ; CHARACTER 250
00323  27D8  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$0E,$0E,$0E,$0E ; CHARACTER 251
00324  27E0  F0 F0 F0              BYTE    $F0,$F0,$F0,$F0,$FE,$FE,$FE,$FE ; CHARACTER 252
00325  27E8  E6 E6 E6              BYTE    $E6,$E6,$E6,$06,$06,$FE,$FE,$FE ; CHARACTER 253
00326  27F0  0E 0E 0E              BYTE    $0E,$0E,$0E,$0E,$FE,$FE,$FE,$FE ; CHARACTER 254
00327  27F8  0E 0E 0E              BYTE    $0E,$0E,$0E,$0E,$F0,$F0,$F0,$F0 ; CHARACTER 255
00328  2800             
00329  2800             
00330  2800             
00331  2800             
00332  2800             ;#REGION RESERVED ADDRESSES
00333  2800             ;*=$0400 ; CHARACTERS
00334  2800             ;        NOP
00335  2800             ;;*=$2000 ; CHARACTERMAP (DECLARED ABOVE)
00336  2800             ;;        NOP
00337  2800             ;*=$4200 ; SPRITE MEMORY
00338  2800             ;*=$4400 ; BITMAP COLOR MEMORY
00339  2800             ;        NOP
00340  2800             ;*=$6000 ; BITMAP DATA MEMORY (-$8FFF)
00341  2800             ;        NOP
00342  2800             ;*=$A000 ; HEAP (-$BFFF)
00343  2800             ;*=$D400 ; SOUND MEMORY
00344  2800             ;*=$C000 ; USER CODE (-$CFFF) *** NEED TO RELOCATE THE ZP BACKUP AND THE GRAPHICS CALC TABLES! ***
00345  2800             ;#ENDREGION
00346  2800             
00347  2800             ; UP9600
00348  2800             *=$4800
00349  4800             ;*=$C800
00350  4800                        
00351  4800                        ; UP9600 KERNAL ADAPTER
00352  4800                        ; ORIGINALLY BY DANIAL DALLMAN
00353  4800                        ; ADAPTED 2017 FOR KERNAL BY BO ZIMMERMAN
00354  4800                        ; MODIFIED ON 2/14/2017 1:26A
00355  4800                        ; .D @0:UP9600.BIN
00356  4800                        ;  PROVIDED FUNCTIONS
00357  4800  4C 18 48              JMP UP9600.INIT
00358  4803  4C 85 4A              JMP UP9600.INSTALL; INSTALL AND (PROBE FOR) UP9600 (C=ERROR)
00359  4806  4C E8 4A              JMP UP9600.ENABLE; (RE-)ENABLE INTERFACE
00360  4809  4C 88 4B              JMP UP9600.DISABLE; DISABLE INTERFACE (EG. FOR FLOPPY ACCESSES)
00361  480C                        ;  RSOUT AND RSIN BOTH MODIFY A AND X REGISTER
00362  480C  4C 48 4A              JMP UP9600.RSOUT; PUT BYTE TO RS232 (BLOCKING)
00363  480F  4C 25 4A              JMP UP9600.RSIN; READ BYTE FROM RS232 (C=TRYAGAIN)
00364  4812             UP9600.IRQVECT = 788
00365  4812             UP9600.JIFFIES = $A2; LOWEST BYTE OF SYSTEM'S JIFFIE COUNTER
00366  4812             UP9600.ORIGIRQ = $EA31; (MUST INCEASE JIFFIE-COUNTER !)
00367  4812             UP9600.ORIGNMI = $FE47
00368  4812             UP9600.NMIVECT = 792
00369  4812             UP9600.WRSPTR = 670; WRITE-POINTER INTO SEND BUFFER
00370  4812             UP9600.RDSPTR = 669; READ-POINTER INTO SEND BUFFER
00371  4812             UP9600.WRRPTR = 667; WRITE-POINTER INTO RECEIVE BUFFER
00372  4812             UP9600.RDRPTR = 668; READ-POINTER INTO RECEIVE BUFFER
00373  4812                        ;  STATIC VARIABLES
00374  4812             UP9600.STIME 
00375  4812  00                    BYTE 0;; COPY OF $A2=JIFFIES TO DETECT TIMEOUTS
00376  4813             UP9600.OUTSTAT = 169
00377  4813             UP9600.UPFLAG 
00378  4813  00                    BYTE 0
00379  4814             UP9600.SAVBYTE 
00380  4814  00 00 00              BYTE 0,0,0,0
00381  4818                        ; JIFFIES .BYTE 0
00382  4818             UP9600.RECPTR = 247; RECBUF = $CB00;; 247 - 248
00383  4818             UP9600.SNDPTR = 249; SNDBUF = $CC00;; 249 - 250
00384  4818                        ;
00385  4818                        ;
00386  4818             UP9600.INIT 
00387  4818  78                    SEI
00388  4819  A9 61                 LDA #<UP9600.DOOPEN
00389  481B  8D 1A 03              STA $031A
00390  481E  A9 48                 LDA #>UP9600.DOOPEN
00391  4820  8D 1B 03              STA $031B
00392  4823  A9 ED                 LDA #<UP9600.DOCLOSE
00393  4825  8D 1C 03              STA $031C
00394  4828  A9 48                 LDA #>UP9600.DOCLOSE
00395  482A  8D 1D 03              STA $031D
00396  482D  A9 10                 LDA #<UP9600.DOCHKIN
00397  482F  8D 1E 03              STA $031E
00398  4832  A9 49                 LDA #>UP9600.DOCHKIN
00399  4834  8D 1F 03              STA $031F
00400  4837  A9 40                 LDA #<UP9600.DOCHKOUT
00401  4839  8D 20 03              STA $0320
00402  483C  A9 49                 LDA #>UP9600.DOCHKOUT
00403  483E  8D 21 03              STA $0321
00404  4841  A9 89                 LDA #<UP9600.DOCHRIN
00405  4843  8D 24 03              STA $0324
00406  4846  A9 48                 LDA #>UP9600.DOCHRIN
00407  4848  8D 25 03              STA $0325
00408  484B  A9 97                 LDA #<UP9600.DOGETIN
00409  484D  8D 2A 03              STA $032A
00410  4850  A9 48                 LDA #>UP9600.DOGETIN
00411  4852  8D 2B 03              STA $032B
00412  4855  A9 CF                 LDA #<UP9600.DOPUT
00413  4857  8D 26 03              STA $0326
00414  485A  A9 48                 LDA #>UP9600.DOPUT
00415  485C  8D 27 03              STA $0327
00416  485F  58                    CLI
00417  4860  60                    RTS
00418  4861                        ;  *******************************
00419  4861             UP9600.DOOPEN 
00420  4861  48                    PHA
00421  4862  98                    TYA
00422  4863  48                    PHA
00423  4864  20 88 4B              JSR UP9600.DISABLE
00424  4867  20 4A F3              JSR $F34A; CALL IOPEN
00425  486A  A0 00                 LDY #$00
00426  486C  A5 BA                 LDA $BA
00427  486E  C9 02                 CMP #$02
00428  4870  D0 10                 BNE UP9600.EOPEN
00429  4872  A0 00                 LDY #$00
00430  4874  B1 BB                 LDA ($BB),Y
00431  4876  C9 0C                 CMP #$0C
00432  4878  90 08                 BCC UP9600.EOPEN
00433  487A  A9 01                 LDA #$01
00434  487C  8D 13 48              STA UP9600.UPFLAG
00435  487F  20 85 4A              JSR UP9600.INSTALL
00436  4882             UP9600.EOPEN 
00437  4882  68                    PLA
00438  4883  A8                    TAY
00439  4884  68                    PLA
00440  4885  A2 00                 LDX #$00
00441  4887  18                    CLC
00442  4888  60                    RTS
00443  4889                        ;  *******************************
00444  4889             UP9600.DOCHRIN 
00445  4889  AD 13 48              LDA UP9600.UPFLAG
00446  488C  F0 06                 BEQ UP9600.NOCHRIN
00447  488E  A5 99                 LDA $99
00448  4890  C9 02                 CMP #$02
00449  4892  F0 11                 BEQ UP9600.DOGET2
00450  4894             UP9600.NOCHRIN 
00451  4894  4C 57 F1              JMP $F157
00452  4897             UP9600.DOGETIN 
00453  4897  AD 13 48              LDA UP9600.UPFLAG
00454  489A  F0 06                 BEQ UP9600.NOGETIN
00455  489C  A5 99                 LDA $99
00456  489E  C9 02                 CMP #$02
00457  48A0  F0 03                 BEQ UP9600.DOGET2
00458  48A2             UP9600.NOGETIN 
00459  48A2  4C 3E F1              JMP $F13E
00460  48A5             UP9600.DOGET2 
00461  48A5  98                    TYA
00462  48A6  48                    PHA
00463  48A7  8A                    TXA
00464  48A8  48                    PHA
00465  48A9  A9 00                 LDA #$00
00466  48AB  8D 14 48              STA UP9600.SAVBYTE
00467  48AE  8D 97 02              STA $0297
00468  48B1  20 25 4A              JSR UP9600.RSIN
00469  48B4  90 0D                 BCC UP9600.DOGOTIN
00470  48B6  68                    PLA
00471  48B7  AA                    TAX
00472  48B8  68                    PLA
00473  48B9  A8                    TAY
00474  48BA  A9 08                 LDA #$08
00475  48BC  8D 97 02              STA $0297
00476  48BF  A9 00                 LDA #$00
00477  48C1  18                    CLC
00478  48C2  60                    RTS
00479  48C3             UP9600.DOGOTIN 
00480  48C3  8D 14 48              STA UP9600.SAVBYTE
00481  48C6             UP9600.DOGET4 
00482  48C6  68                    PLA
00483  48C7  AA                    TAX
00484  48C8  68                    PLA
00485  48C9  A8                    TAY
00486  48CA  AD 14 48              LDA UP9600.SAVBYTE
00487  48CD  18                    CLC
00488  48CE  60                    RTS
00489  48CF                        ;  *******************************
00490  48CF             UP9600.DOPUT 
00491  48CF  48                    PHA
00492  48D0  AD 13 48              LDA UP9600.UPFLAG
00493  48D3  F0 06                 BEQ UP9600.NOPUT1
00494  48D5  A5 9A                 LDA $9A
00495  48D7  C9 02                 CMP #$02
00496  48D9  F0 04                 BEQ UP9600.DOPUT2
00497  48DB             UP9600.NOPUT1 
00498  48DB  68                    PLA
00499  48DC  4C CA F1              JMP $F1CA
00500  48DF             UP9600.DOPUT2 
00501  48DF  18                    CLC
00502  48E0  68                    PLA
00503  48E1  20 48 4A              JSR UP9600.RSOUT
00504  48E4  A9 00                 LDA #$00
00505  48E6  8D 97 02              STA $0297
00506  48E9  18                    CLC
00507  48EA             UP9600.DOPUT4 
00508  48EA  60                    RTS
00509  48EB                        ;  *******************************
00510  48EB                        ; ;;;;;;;;;;;;;;;;
00511  48EB  EA                    NOP
00512  48EC  EA                    NOP
00513  48ED             UP9600.DOCLOSE 
00514  48ED  48                    PHA
00515  48EE  20 88 4B              JSR UP9600.DISABLE
00516  48F1  20 14 F3              JSR $F314
00517  48F4  F0 03                 BEQ UP9600.DOCLO2
00518  48F6  68                    PLA
00519  48F7  18                    CLC
00520  48F8  60                    RTS
00521  48F9             UP9600.DOCLO2 
00522  48F9  20 1F F3              JSR $F31F; SET BA
00523  48FC  A5 BA                 LDA $BA
00524  48FE  C9 02                 CMP #$02
00525  4900  F0 04                 BEQ UP9600.DOCLO4
00526  4902             UP9600.DOCLO3 
00527  4902  68                    PLA
00528  4903  4C 91 F2              JMP $F291
00529  4906             UP9600.DOCLO4 
00530  4906  A9 00                 LDA #$00
00531  4908  8D 13 48              STA UP9600.UPFLAG
00532  490B  68                    PLA
00533  490C  A2 00                 LDX #$00
00534  490E  18                    CLC
00535  490F  60                    RTS
00536  4910                        ;  *******************************
00537  4910             UP9600.DOCHKIN 
00538  4910  48                    PHA
00539  4911  AD 13 48              LDA UP9600.UPFLAG
00540  4914  D0 04                 BNE UP9600.DOCHKI1
00541  4916  68                    PLA
00542  4917  4C 0E F2              JMP $F20E
00543  491A             UP9600.DOCHKI1 
00544  491A  68                    PLA
00545  491B  20 0F F3              JSR $F30F
00546  491E  F0 03                 BEQ UP9600.DOCHKI2
00547  4920  4C 01 F7              JMP $F701
00548  4923             UP9600.DOCHKI2 
00549  4923  20 1F F3              JSR $F31F
00550  4926  A5 BA                 LDA $BA
00551  4928  C9 02                 CMP #$02
00552  492A  F0 0A                 BEQ UP9600.DOCHKI4
00553  492C  C9 04                 CMP #$04
00554  492E  90 0D                 BCC UP9600.NOCHKIN
00555  4930             UP9600.DOCHKI3 
00556  4930  20 88 4B              JSR UP9600.DISABLE
00557  4933  4C 3D 49              JMP UP9600.NOCHKIN
00558  4936             UP9600.DOCHKI4 
00559  4936  85 99                 STA $99
00560  4938  20 E8 4A              JSR UP9600.ENABLE
00561  493B  18                    CLC
00562  493C  60                    RTS
00563  493D             UP9600.NOCHKIN 
00564  493D  4C 19 F2              JMP $F219
00565  4940                        ;
00566  4940             UP9600.DOCHKOUT 
00567  4940  48                    PHA
00568  4941  AD 13 48              LDA UP9600.UPFLAG
00569  4944  D0 04                 BNE UP9600.DOCHKO1
00570  4946  68                    PLA
00571  4947  4C 50 F2              JMP $F250
00572  494A             UP9600.DOCHKO1 
00573  494A  68                    PLA
00574  494B  20 0F F3              JSR $F30F
00575  494E  F0 03                 BEQ UP9600.DOCHKO2
00576  4950  4C 01 F7              JMP $F701
00577  4953             UP9600.DOCHKO2 
00578  4953  20 1F F3              JSR $F31F
00579  4956  A5 BA                 LDA $BA
00580  4958  C9 02                 CMP #$02
00581  495A  F0 0A                 BEQ UP9600.DOCHKO4
00582  495C  C9 04                 CMP #$04
00583  495E  90 0D                 BCC UP9600.NOCHKOUT
00584  4960             UP9600.DOCHKO3 
00585  4960  20 88 4B              JSR UP9600.DISABLE
00586  4963  4C 6D 49              JMP UP9600.NOCHKOUT
00587  4966             UP9600.DOCHKO4 
00588  4966  85 9A                 STA $9A
00589  4968  20 E8 4A              JSR UP9600.ENABLE
00590  496B  18                    CLC
00591  496C  60                    RTS
00592  496D             UP9600.NOCHKOUT 
00593  496D  4C 5B F2              JMP $F25B
00594  4970                        ;  *******************************
00595  4970             UP9600.NMIDOBIT 
00596  4970  48                    PHA
00597  4971  2C 0D DD              BIT $DD0D; CHECK BIT 7 (STARTBIT PRINT)
00598  4974  10 12                 BPL UP9600.NMIDOBI2; NO STARTBIT RECEIVED, THEN SKIP
00599  4976  A9 13                 LDA #$13
00600  4978  8D 0F DD              STA $DD0F; START TIMER B (FORCED RELOAD, SIGNAL AT PB7)
00601  497B  8D 0D DD              STA $DD0D; DISABLE TIMER AND FLAG INTERRUPTS
00602  497E  A9 8A                 LDA #<UP9600.NMIBYTRY; ON NEXT NMI CALL NMIBYTRY
00603  4980  8D 18 03              STA UP9600.NMIVECT; (TRIGGERED BY SDR FULL)
00604  4983  A9 49                 LDA #>UP9600.NMIBYTRY
00605  4985  8D 19 03              STA UP9600.NMIVECT+1
00606  4988             UP9600.NMIDOBI2 
00607  4988  68                    PLA; IGNORE, IF NMI WAS TRIGGERED BY RESTORE-KEY
00608  4989  40                    RTI
00609  498A                        ;
00610  498A             UP9600.NMIBYTRY 
00611  498A  48                    PHA
00612  498B  2C 0D DD              BIT $DD0D; CHECK BIT 7 (SDR FULL PRINT)
00613  498E  10 F8                 BPL UP9600.NMIDOBI2; SDR NOT FULL, THEN SKIP (EG. RESTORE-KEY)
00614  4990  A9 92                 LDA #$92
00615  4992  8D 0F DD              STA $DD0F; STOP TIMER B (KEEP SIGNALLING AT PB7!)
00616  4995  8D 0D DD              STA $DD0D; ENABLE FLAG (AND TIMER) INTERRUPTS
00617  4998  A9 70                 LDA #<UP9600.NMIDOBIT; ON NEXT NMI CALL NMIDOBIT
00618  499A  8D 18 03              STA UP9600.NMIVECT; (TRIGGERED BY A STARTBIT)
00619  499D  A9 49                 LDA #>UP9600.NMIDOBIT
00620  499F  8D 19 03              STA UP9600.NMIVECT+1
00621  49A2  8A                    TXA
00622  49A3  48                    PHA
00623  49A4  98                    TYA
00624  49A5  48                    PHA
00625  49A6  AD 0C DD              LDA $DD0C; READ SDR (BIT0=DATABIT7,...,BIT7=DATABIT0)
00626  49A9  C9 80                 CMP #128; MOVE BIT7 INTO CARRY-FLAG
00627  49AB  29 7F                 AND #127
00628  49AD  AA                    TAX
00629  49AE  BD D7 4B              LDA UP9600.REVTAB,X; READ DATABITS 1-7 FROM LOOKUP TABLE
00630  49B1  69 00                 ADC #0; ADD DATABIT0
00631  49B3  AC 9B 02              LDY UP9600.WRRPTR; AND WRITE IT INTO THE RECEIVE BUFFER
00632  49B6  91 F7                 STA (UP9600.RECPTR),Y
00633  49B8  C8                    INY
00634  49B9  8C 9B 02              STY UP9600.WRRPTR
00635  49BC  38                    SEC;;START BUFFER FULL CHK
00636  49BD  98                    TYA
00637  49BE  ED 9C 02              SBC UP9600.RDRPTR
00638  49C1  C9 C8                 CMP #200
00639  49C3  90 08                 BCC UP9600.NMIBYTR2
00640  49C5  AD 01 DD              LDA $DD01;; MORE THAN 200 BYTES IN THE RECEIVE BUFFER
00641  49C8  29 FD                 AND #$FD;; THEN DISABLE RTS
00642  49CA  8D 01 DD              STA $DD01
00643  49CD             UP9600.NMIBYTR2 
00644  49CD  68                    PLA
00645  49CE  A8                    TAY
00646  49CF  68                    PLA
00647  49D0  AA                    TAX
00648  49D1  68                    PLA
00649  49D2  40                    RTI
00650  49D3                        ;  *******************************************************
00651  49D3                        ;  IRQ PART
00652  49D3             UP9600.NEWIRQ 
00653  49D3  AD 0D DC              LDA $DC0D
00654  49D6             UP9600.NEWIRQ1 
00655  49D6  4A                    LSR; READ IRQ-MASK
00656  49D7  4A                    LSR; MOVE BIT1 INTO CARRY-FLAG (TIMER B - FLAG)
00657  49D8  29 02                 AND #$02; TEST BIT3 (SDR - FLAG)
00658  49DA  F0 0C                 BEQ UP9600.NEWIRQ3; SDR NOT EMPTY, THEN SKIP THE FIRST PART
00659  49DC  A6 A9                 LDX UP9600.OUTSTAT
00660  49DE  F0 03                 BEQ UP9600.NEWIRQ2; SKIP, IF WE'RE NOT WAITING FOR AN EMPTY SDR
00661  49E0  CA                    DEX
00662  49E1  86 A9                 STX UP9600.OUTSTAT
00663  49E3             UP9600.NEWIRQ2 
00664  49E3                        ;BCC UP9600.NEWIRQ6
00665  49E3  B0 03                 BCS UP9600.NEWIRQ3
00666  49E5  4C 22 4A              JMP UP9600.NEWIRQ6
00667  49E8             UP9600.NEWIRQ3 
00668  49E8  58                    CLI
00669  49E9  20 EA FF              JSR $FFEA
00670  49EC  A5 CC                 LDA $CC
00671  49EE             
00672  49EE                        ;BNE UP9600.NEWIRQ5
00673  49EE  F0 03                 BEQ UP9600.NEWIRQ3_1
00674  49F0  4C 1F 4A              JMP UP9600.NEWIRQ5
00675  49F3             UP9600.NEWIRQ3_1 
00676  49F3             
00677  49F3  C6 CD                 DEC $CD
00678  49F5             
00679  49F5                        ;BNE UP9600.NEWIRQ5
00680  49F5  F0 03                 BEQ UP9600.NEWIRQ3_2
00681  49F7  4C 1F 4A              JMP UP9600.NEWIRQ5
00682  49FA             UP9600.NEWIRQ3_2 
00683  49FA             
00684  49FA  A9 14                 LDA #$14
00685  49FC  85 CD                 STA $CD
00686  49FE  A4 D3                 LDY $D3
00687  4A00  46 CF                 LSR $CF
00688  4A02  AE 87 02              LDX $0287
00689  4A05  B1 D1                 LDA ($D1),Y
00690  4A07  B0 11                 BCS UP9600.NEWIRQ4
00691  4A09  E6 CF                 INC $CF
00692  4A0B  85 CE                 STA $CE
00693  4A0D  20 24 EA              JSR $EA24
00694  4A10  B1 F3                 LDA ($F3),Y
00695  4A12  8D 87 02              STA $0287
00696  4A15  AE 86 02              LDX $0286
00697  4A18  A5 CE                 LDA $CE
00698  4A1A             UP9600.NEWIRQ4 
00699  4A1A  49 80                 EOR #$80
00700  4A1C  20 1C EA              JSR $EA1C
00701  4A1F             UP9600.NEWIRQ5 
00702  4A1F  20 87 EA              JSR $EA87
00703  4A22             UP9600.NEWIRQ6 
00704  4A22  4C 81 EA              JMP $EA81
00705  4A25                        ;  *******************************
00706  4A25                        ;  GET BYTE FROM SERIAL INTERFACE
00707  4A25             UP9600.RSIN 
00708  4A25  AC 9C 02              LDY UP9600.RDRPTR
00709  4A28  CC 9B 02              CPY UP9600.WRRPTR
00710  4A2B  F0 1A                 BEQ UP9600.RSIN3; SKIP (EMPTY BUFFER, RETURN WITH CARRY SET)
00711  4A2D  B1 F7                 LDA (UP9600.RECPTR),Y
00712  4A2F  C8                    INY
00713  4A30  8C 9C 02              STY UP9600.RDRPTR
00714  4A33  48                    PHA;;BEGIN BUFFER EMPTYING CHK
00715  4A34  98                    TYA
00716  4A35  38                    SEC
00717  4A36  ED 9B 02              SBC UP9600.WRRPTR
00718  4A39  C9 CE                 CMP #206;;256-50
00719  4A3B  90 09                 BCC UP9600.RSIN2
00720  4A3D  A9 02                 LDA #2
00721  4A3F  0D 01 DD              ORA $DD01
00722  4A42  8D 01 DD              STA $DD01;; ENABLE RTS
00723  4A45  18                    CLC
00724  4A46             UP9600.RSIN2 
00725  4A46  68                    PLA
00726  4A47             UP9600.RSIN3 
00727  4A47  60                    RTS
00728  4A48                        ;  ******************************
00729  4A48                        ;  PUT BYTE TO SERIAL INTERFACE
00730  4A48             UP9600.RSOUT 
00731  4A48  48                    PHA
00732  4A49  85 9E                 STA $9E
00733  4A4B  C9 80                 CMP #$80
00734  4A4D  29 7F                 AND #$7F
00735  4A4F  86 A8                 STX $A8
00736  4A51  84 A7                 STY $A7
00737  4A53  AA                    TAX
00738  4A54  20 72 4A              JSR UP9600.RSOUTX
00739  4A57             UP9600.RSOUT3 
00740  4A57  BD D7 4B              LDA UP9600.REVTAB,X
00741  4A5A  69 00                 ADC #$00
00742  4A5C  4A                    LSR
00743  4A5D  78                    SEI
00744  4A5E  8D 0C DC              STA $DC0C
00745  4A61  A9 02                 LDA #$02
00746  4A63  85 A9                 STA UP9600.OUTSTAT
00747  4A65  6A                    ROR
00748  4A66  09 7F                 ORA #$7F
00749  4A68  8D 0C DC              STA $DC0C
00750  4A6B  58                    CLI
00751  4A6C  A6 A8                 LDX $A8
00752  4A6E  A4 A7                 LDY $A7
00753  4A70  68                    PLA
00754  4A71  60                    RTS
00755  4A72             UP9600.RSOUTX 
00756  4A72  58                    CLI
00757  4A73  A9 FD                 LDA #$FD
00758  4A75  85 A2                 STA $A2
00759  4A77             UP9600.RSOUTX2 
00760  4A77  A5 A9                 LDA UP9600.OUTSTAT
00761  4A79  F0 04                 BEQ UP9600.RSOUTX3
00762  4A7B  24 A2                 BIT $A2
00763  4A7D  30 F8                 BMI UP9600.RSOUTX2
00764  4A7F             UP9600.RSOUTX3 
00765  4A7F  4C 90 F4              JMP $F490
00766  4A82                        ;  ******************************
00767  4A82                        ;  INSTALL (AND PROBE FOR) SERIAL INTERFACE
00768  4A82                        ;  RETURN WITH CARRY SET IF THERE WAS AN ERROR
00769  4A82             UP9600.INSTERR 
00770  4A82  58                    CLI
00771  4A83  38                    SEC
00772  4A84  60                    RTS
00773  4A85             UP9600.INSTALL 
00774  4A85  78                    SEI
00775  4A86  AD 14 03              LDA UP9600.IRQVECT
00776  4A89  C9 31                 CMP #<UP9600.ORIGIRQ
00777  4A8B  D0 F5                 BNE UP9600.INSTERR; IRQ-VECTOR ALREADY CHANGED
00778  4A8D  AD 15 03              LDA UP9600.IRQVECT+1
00779  4A90  C9 EA                 CMP #>UP9600.ORIGIRQ
00780  4A92  D0 EE                 BNE UP9600.INSTERR; IRQ-VECTOR ALREADY CHANGED
00781  4A94  AD 18 03              LDA UP9600.NMIVECT
00782  4A97  C9 47                 CMP #<UP9600.ORIGNMI
00783  4A99  D0 E7                 BNE UP9600.INSTERR; NMI-VECTOR ALREADY CHANGED
00784  4A9B  AD 19 03              LDA UP9600.NMIVECT+1
00785  4A9E  C9 FE                 CMP #>UP9600.ORIGNMI
00786  4AA0  D0 E0                 BNE UP9600.INSTERR; NMI-VECTOR ALREADY CHANGED
00787  4AA2  A0 00                 LDY #0
00788  4AA4  8C 9E 02              STY UP9600.WRSPTR
00789  4AA7  8C 9D 02              STY UP9600.RDSPTR
00790  4AAA  8C 9B 02              STY UP9600.WRRPTR
00791  4AAD  8C 9C 02              STY UP9600.RDRPTR
00792  4AB0                        ;  PROBE FOR RS232 INTERFACE
00793  4AB0  58                    CLI
00794  4AB1  A9 7F                 LDA #$7F
00795  4AB3  8D 0D DD              STA $DD0D; DISABLE ALL NMIS
00796  4AB6  A9 80                 LDA #$80
00797  4AB8  8D 03 DD              STA $DD03; PB7 USED AS OUTPUT
00798  4ABB  8D 0E DD              STA $DD0E; STOP TIMERA
00799  4ABE  8D 0F DD              STA $DD0F; STOP TIMERB
00800  4AC1  2C 0D DD              BIT $DD0D; CLEAR PENDING INTERRUPTS
00801  4AC4  A2 08                 LDX #8
00802  4AC6             UP9600.INSTALL2 
00803  4AC6  8E 01 DD              STX $DD01; TOGGLE TXD
00804  4AC9  8D 01 DD              STA $DD01; AND LOOK IF IT TRIGGERS AN
00805  4ACC  CA                    DEX; SHIFT-REGISTER INTERRUPT
00806  4ACD  D0 F7                 BNE UP9600.INSTALL2
00807  4ACF  AD 0D DD              LDA $DD0D; CHECK FOR BIT3 (SDR-FLAG)
00808  4AD2  29 08                 AND #8
00809  4AD4  F0 AC                 BEQ UP9600.INSTERR; NO INTERFACE DETECTED
00810  4AD6                        ;  GENERATE LOOKUP TABLE
00811  4AD6  A2 00                 LDX #0
00812  4AD8             UP9600.INSTALL3 
00813  4AD8  86 A9                 STX UP9600.OUTSTAT; OUTSTAT USED AS TEMPORARY VARIABLE
00814  4ADA  A0 08                 LDY #8
00815  4ADC             UP9600.INSTALL4 
00816  4ADC  06 A9                 ASL UP9600.OUTSTAT
00817  4ADE  6A                    ROR
00818  4ADF  88                    DEY
00819  4AE0  D0 FA                 BNE UP9600.INSTALL4
00820  4AE2  9D D7 4B              STA UP9600.REVTAB,X
00821  4AE5  E8                    INX
00822  4AE6  10 F0                 BPL UP9600.INSTALL3
00823  4AE8                        ;  ******************************
00824  4AE8                        ;  ENABLE SERIAL INTERFACE (IRQ+NMI)
00825  4AE8             UP9600.ENABLE 
00826  4AE8  48                    PHA
00827  4AE9  8A                    TXA
00828  4AEA  48                    PHA
00829  4AEB  98                    TYA
00830  4AEC  48                    PHA
00831  4AED  AD 14 03              LDA UP9600.IRQVECT
00832  4AF0  C9 D3                 CMP #<UP9600.NEWIRQ
00833  4AF2                        
00834  4AF2                        ;BNE UP9600.ENABL2
00835  4AF2  F0 07                 BEQ UP9600.ENABLE_1
00836  4AF4  4C 0B 4B              JMP UP9600.ENABL2
00837  4AF7  EA                    NOP
00838  4AF8  EA                    NOP
00839  4AF9  EA                    NOP
00840  4AFA  EA                    NOP
00841  4AFB             UP9600.ENABLE_1 
00842  4AFB             
00843  4AFB  AD 15 03              LDA UP9600.IRQVECT+1
00844  4AFE  C9 49                 CMP #>UP9600.NEWIRQ
00845  4B00                        
00846  4B00                        ;BNE UP9600.ENABL2
00847  4B00  F0 03                 BEQ UP9600.ENABLE_2
00848  4B02  4C 0B 4B              JMP UP9600.ENABL2
00849  4B05             UP9600.ENABLE_2 
00850  4B05             
00851  4B05  68                    PLA
00852  4B06  A8                    TAY
00853  4B07  68                    PLA
00854  4B08  AA                    TAX
00855  4B09  68                    PLA
00856  4B0A  60                    RTS
00857  4B0B             UP9600.ENABL2 
00858  4B0B  78                    SEI
00859  4B0C  A2 D3                 LDX #<UP9600.NEWIRQ; INSTALL NEW IRQ-HANDLER
00860  4B0E  A0 49                 LDY #>UP9600.NEWIRQ
00861  4B10  8E 14 03              STX UP9600.IRQVECT
00862  4B13  8C 15 03              STY UP9600.IRQVECT+1
00863  4B16  A2 70                 LDX #<UP9600.NMIDOBIT; INSTALL NEW NMI-HANDLER
00864  4B18  A0 49                 LDY #>UP9600.NMIDOBIT
00865  4B1A  8E 18 03              STX UP9600.NMIVECT
00866  4B1D  8C 19 03              STY UP9600.NMIVECT+1
00867  4B20  AE A6 02              LDX $2A6; PAL OR NTSC VERSION PRINT
00868  4B23  BD 84 4B              LDA UP9600.ILOTAB,X; (KEYSCAN INTERRUPT ONCE EVERY 1/64 SECOND)
00869  4B26  8D 06 DC              STA $DC06; (SORRY THIS WILL BREAK CODE, THAT USES
00870  4B29  BD 86 4B              LDA UP9600.IHITAB,X; THE TI$ - VARIABLE)
00871  4B2C  8D 07 DC              STA $DC07; START VALUE FOR TIMER B (OF CIA1)
00872  4B2F  8A                    TXA
00873  4B30  0A                    ASL
00874  4B31  49 33                 EOR #$33; ** TIME CONSTANT FOR SENDER **
00875  4B33  A2 00                 LDX #0; 51 OR 55 DEPENDING ON PAL/NTSC VERSION
00876  4B35  8D 04 DC              STA $DC04; START VALUE FOR TIMERA (OF CIA1)
00877  4B38  8E 05 DC              STX $DC05; (TIME IS AROUND 1/(2*BAUDRATE) )
00878  4B3B  0A                    ASL; ** TIME CONSTANT FOR RECEIVER **
00879  4B3C  09 01                 ORA #1; 103 OR 111 DEPENDING ON PAL/NTSC VERSION
00880  4B3E  8D 06 DD              STA $DD06; START VALUE FOR TIMERB (OF CIA2)
00881  4B41  8E 07 DD              STX $DD07; (TIME IS AROUND 1/BAUDRATE )
00882  4B44  A9 41                 LDA #$41; START TIMERA OF CIA1, SP1 USED AS OUTPUT
00883  4B46  8D 0E DC              STA $DC0E; GENERATES THE SENDER'S BIT CLOCK
00884  4B49  A9 01                 LDA #1
00885  4B4B  85 A9                 STA UP9600.OUTSTAT
00886  4B4D  8D 0D DC              STA $DC0D; DISABLE TIMERA (CIA1) INTERRUPT
00887  4B50  8D 0F DC              STA $DC0F; START TIMERB OF CIA1 (GENERATES KEYSCAN IRQ)
00888  4B53  A9 92                 LDA #$92; STOP TIMERB OF CIA2 (ENABLE SIGNAL AT PB7)
00889  4B55  8D 0F DD              STA $DD0F
00890  4B58  A9 98                 LDA #$98
00891  4B5A  2C 0D DD              BIT $DD0D; CLEAR PENDING NMIS
00892  4B5D  8D 0D DD              STA $DD0D; ENABLE NMI (SDR AND FLAG) (CIA2)
00893  4B60  A9 8A                 LDA #$8A
00894  4B62  8D 0D DC              STA $DC0D; ENABLE IRQ (TIMERB AND SDR) (CIA1)
00895  4B65  A9 FF                 LDA #$FF
00896  4B67  8D 01 DD              STA $DD01; PB0-7 DEFAULT TO 1
00897  4B6A  8D 0C DC              STA $DC0C; SP1 DEFAULTS TO 1
00898  4B6D  38                    SEC
00899  4B6E  AD 9B 02              LDA UP9600.WRRPTR
00900  4B71  ED 9C 02              SBC UP9600.RDRPTR
00901  4B74  C9 C8                 CMP #200
00902  4B76  B0 05                 BCS UP9600.ENABLE2;; DON'T ENABLE RTS IF REC-BUFFER IS FULL
00903  4B78  A9 02                 LDA #2;; ENABLE RTS
00904  4B7A  8D 03 DD              STA $DD03;; (THE RTS LINE IS THE ONLY OUTPUT)
00905  4B7D             UP9600.ENABLE2 
00906  4B7D  58                    CLI
00907  4B7E  68                    PLA
00908  4B7F  A8                    TAY
00909  4B80  68                    PLA
00910  4B81  AA                    TAX
00911  4B82  68                    PLA
00912  4B83  60                    RTS
00913  4B84                        ;  TABLE OF TIMER VALUES FOR PAL AND NTSC VERSION
00914  4B84             UP9600.ILOTAB 
00915  4B84  95 25                 BYTE 149,37
00916  4B86                        ;
00917  4B86             UP9600.IHITAB 
00918  4B86  42 40                 BYTE 66,64
00919  4B88                        ;  *******************************************************
00920  4B88                        ;  DISABLE SERIAL INTERFACE
00921  4B88             UP9600.DISABLE 
00922  4B88  48                    PHA
00923  4B89  8A                    TXA
00924  4B8A  48                    PHA
00925  4B8B  98                    TYA
00926  4B8C  48                    PHA
00927  4B8D  AD 14 03              LDA UP9600.IRQVECT
00928  4B90  C9 D3                 CMP #<UP9600.NEWIRQ
00929  4B92  D0 07                 BNE UP9600.NODIS
00930  4B94  AD 15 03              LDA UP9600.IRQVECT+1
00931  4B97  C9 49                 CMP #>UP9600.NEWIRQ
00932  4B99  F0 06                 BEQ UP9600.DISABL2
00933  4B9B             UP9600.NODIS 
00934  4B9B  68                    PLA
00935  4B9C  A8                    TAY
00936  4B9D  68                    PLA
00937  4B9E  AA                    TAX
00938  4B9F  68                    PLA
00939  4BA0  60                    RTS
00940  4BA1             UP9600.DISABL2 
00941  4BA1  78                    SEI
00942  4BA2  AD 01 DD              LDA $DD01; DISABLE RTS
00943  4BA5  29 FD                 AND #$FD
00944  4BA7  8D 01 DD              STA $DD01
00945  4BAA  A9 7F                 LDA #$7F
00946  4BAC  8D 0D DD              STA $DD0D; DISABLE ALL CIA INTERRUPTS
00947  4BAF  8D 0D DC              STA $DC0D
00948  4BB2  A9 41                 LDA #$41; QUICK (AND DIRTY) HACK TO SWITCH BACK
00949  4BB4  8D 05 DC              STA $DC05; TO THE DEFAULT CIA1 CONFIGURATION
00950  4BB7  A9 81                 LDA #$81
00951  4BB9  8D 0D DC              STA $DC0D; ENABLE TIMER1 (THIS IS DEFAULT)
00952  4BBC  A9 31                 LDA #<UP9600.ORIGIRQ; RESTORE OLD IRQ-HANDLER
00953  4BBE  8D 14 03              STA UP9600.IRQVECT
00954  4BC1  A9 EA                 LDA #>UP9600.ORIGIRQ
00955  4BC3  8D 15 03              STA UP9600.IRQVECT+1
00956  4BC6  A9 47                 LDA #<UP9600.ORIGNMI; RESTORE OLD NMI-HANDLER
00957  4BC8  8D 18 03              STA UP9600.NMIVECT
00958  4BCB  A9 FE                 LDA #>UP9600.ORIGNMI
00959  4BCD  8D 19 03              STA UP9600.NMIVECT+1
00960  4BD0  58                    CLI
00961  4BD1  68                    PLA
00962  4BD2  A8                    TAY
00963  4BD3  68                    PLA
00964  4BD4  AA                    TAX
00965  4BD5  68                    PLA
00966  4BD6  60                    RTS
00967  4BD7                        ;
00968  4BD7                        ;
00969  4BD7             UP9600.REVTAB 
00970  4BD7                        ; .BUF 128
00971  4BD7             UP9600.PRINT 
00972  4BD7  EA                    NOP; :F$="UP9600.BAS":OPEN1,8,15,"S0:UP9600*":CLOSE1:SAVEF$,8
00973  4BD8             
00974  4BD8             ;; T2400
00975  4BD8             ;*=$4E00
00976  4BD8             ; THERE APPEARS TO BE BUG IN THIS ROUTINE WHERE IT ADDS $90 TO EACH CHARACTER
00977  4BD8             ; ALSO THIS CHANGES THE 1200 BAUD SETTING TO BE ABLE GO AT 2400 BAUD, SO THE
00978  4BD8             ; COMMAND TO OPEN THE FILE IS THE SAME AS IT RUNNING AT 1200 BAUD.
00979  4BD8             ;INCASM "T2400.ASM"
00980  4BD8             
00981  4BD8             
00982  4BD8             ; KERNEL ENTRY POINT
00983  4BD8             ;*=$2000
00984  4BD8             
00985  4BD8             ;*=$08F0
00986  4BD8             ;*=$0FF0
00987  4BD8             *=$0F00
00988  0F00                        ;LDA #$01 ; IF DEBUGGING IN CBM PRG STUDIO, UNREMARK THIS LINE
00989  0F00  A9 00                 LDA #$00 ; IF RUNNING FROM DEPACKER, UNREMARK THIS LINE
00990  0F02  8D 0B 0F              STA KERNEL.DEBUGMODE$
00991  0F05                        ;JMP KERNEL.BEGIN
00992  0F05  20 10 0F              JSR KERNEL.BEGIN
00993  0F08  20 84 1F              JSR KERNEL.RESET$
00994  0F0B             
00995  0F0B  00         KERNEL.DEBUGMODE$ BYTE $00
00996  0F0C             
00997  0F0C                        ;LDA #$00
00998  0F0C                        ;STA KERNEL.DEBUGMODE$
00999  0F0C                        ;NOP
01000  0F0C                        ;NOP
01001  0F0C  EA                    NOP
01002  0F0D  EA                    NOP
01003  0F0E  EA                    NOP
01004  0F0F             
01005  0F0F             ;*=$0900
01006  0F0F             *=$0F10
01007  0F10             KERNEL.BEGIN 
01008  0F10  20 1A 0F              JSR KERNEL.START
01009  0F13                        ;JSR MAIN
01010  0F13  20 00 C0              JSR $C000
01011  0F16  20 34 0F              JSR KERNEL.END
01012  0F19  60                    RTS
01013  0F1A                        ;BRK
01014  0F1A             
01015  0F1A             
01016  0F1A             
01017  0F1A             
01018  0F1A             COLOR.BLACK$ = $00
01019  0F1A             COLOR.WHITE$ = $01
01020  0F1A             COLOR.RED$ = $02
01021  0F1A             COLOR.CYAN$ = $03
01022  0F1A             COLOR.PURPLE$ = $04
01023  0F1A             COLOR.GREEN$ = $05
01024  0F1A             COLOR.BLUE$ = $06
01025  0F1A             COLOR.YELLOW$ = $07
01026  0F1A             COLOR.ORANGE$ = $08
01027  0F1A             COLOR.BROWN$ = $09
01028  0F1A             COLOR.LIGHTRED$ = $0A
01029  0F1A             COLOR.DARKGREY$ = $0B
01030  0F1A             COLOR.GREY$ = $0C
01031  0F1A             COLOR.LIGHTGREEN$ = $0D
01032  0F1A             COLOR.LIGHTBLUE$ = $0E
01033  0F1A             COLOR.LIGHTGREY$ = $0F
01034  0F1A             
01035  0F1A             
01036  0F1A             
01037  0F1A             ;*=$C000 ; SYS 49152
01038  0F1A             ;*=$A000 ; SYS 40960
01039  0F1A             
01040  0F1A             ;ALIGN $100
01041  0F1A             
01042  0F1A             KERNEL.START 
01043  0F1A             
01044  0F1A                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:MEMORY_MANAGEMENT
01045  0F1A  A9 36                 LDA #$36 ; BANK SWITCH BASIC ROM INTO RAM
01046  0F1C  85 01                 STA $01
01047  0F1E             
01048  0F1E                        ; DISABLES C= (COMMODORE KEY) + SHIFT WHICH SWITCHES THE CHARACTERS
01049  0F1E                        ; AND MESSES WITH THE CHARACTERS ON THE SCREEN.
01050  0F1E  A9 08                 LDA #$08
01051  0F20  20 D2 FF              JSR $FFD2
01052  0F23             
01053  0F23  20 56 0F              JSR MEMORY.START
01054  0F26             
01055  0F26                        ;$DD00 = %XXXXXX11 -> BANK0: $0000-$3FFF
01056  0F26                        ;$DD00 = %XXXXXX10 -> BANK1: $4000-$7FFF
01057  0F26                        ;$DD00 = %XXXXXX01 -> BANK2: $8000-$BFFF
01058  0F26                        ;$DD00 = %XXXXXX00 -> BANK3: $C000-$FFFF
01059  0F26                        ; DEFAULT: 10010111
01060  0F26  AD 00 DD              LDA $DD00
01061  0F29  29 FC                 AND #%11111100
01062  0F2B                        ;ORA #%00000010 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
01063  0F2B  09 03                 ORA #%00000011 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
01064  0F2D  8D 00 DD              STA $DD00
01065  0F30             
01066  0F30  20 F6 12              JSR CONSOLE.START
01067  0F33             
01068  0F33                        ;; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:MEMORY_MANAGEMENT
01069  0F33             ;        LDA #$36 ; BANK SWITCH BASIC ROM INTO RAM
01070  0F33             ;        STA $01
01071  0F33             
01072  0F33             ;CHARSET 2 ; UPPER/LOWER CASED CHARACTERS
01073  0F33             ;           LDA $D018
01074  0F33             ;           ORA #$0E       ; SET CHARS LOCATION TO $3800 FOR DISPLAYING THE CUSTOM FONT
01075  0F33             ;           STA $D018      ; BITS 1-3 ($400+512BYTES * LOW NIBBLE VALUE) OF $D018 SETS CHAR LOCATION
01076  0F33             ;                          ; $400 + $200*$0E = $3800
01077  0F33             
01078  0F33                        ;JSR MAIN
01079  0F33                        
01080  0F33             
01081  0F33                        ;; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:MEMORY_MANAGEMENT
01082  0F33             ;        LDA #$37 ; BANK SWITCH RAM BACK INTO BASIC ROM
01083  0F33             ;        STA $01
01084  0F33                        
01085  0F33                        ;JSR KERNEL.RESET
01086  0F33             
01087  0F33  60                    RTS
01088  0F34                        ;BRK
01089  0F34             
01090  0F34             KERNEL.END 
01091  0F34  20 35 13              JSR CONSOLE.END
01092  0F37             
01093  0F37                        ;$DD00 = %XXXXXX11 -> BANK0: $0000-$3FFF
01094  0F37                        ;$DD00 = %XXXXXX10 -> BANK1: $4000-$7FFF
01095  0F37                        ;$DD00 = %XXXXXX01 -> BANK2: $8000-$BFFF
01096  0F37                        ;$DD00 = %XXXXXX00 -> BANK3: $C000-$FFFF
01097  0F37  AD 00 DD              LDA $DD00
01098  0F3A  29 FC                 AND #%11111100
01099  0F3C  09 03                 ORA #%00000011 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
01100  0F3E  8D 00 DD              STA $DD00
01101  0F41             
01102  0F41  20 5A 0F              JSR MEMORY.END
01103  0F44             
01104  0F44                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:MEMORY_MANAGEMENT
01105  0F44  A9 37                 LDA #$37 ; BANK SWITCH RAM BACK INTO BASIC ROM
01106  0F46  85 01                 STA $01
01107  0F48             
01108  0F48             ;        ; RESET THE COMPUTER.
01109  0F48             ;        ; IN ORDER TO PREVENT THE DEBUGGER FROM CRASHING JUST RETURN.
01110  0F48             ;        LDA KERNEL.DEBUGMODE$
01111  0F48             ;        CMP #$01
01112  0F48             ;        BNE @RESET
01113  0F48             ;        RTS
01114  0F48             ;@RESET
01115  0F48             ;        JSR KERNEL.RESET$
01116  0F48             
01117  0F48  60                    RTS
01118  0F49             
01119  0F49             ;KERNEL.RESET$
01120  0F49             ;        JMP ($FFFC)
01121  0F49             
01122  0F49             KERNEL.HALT$ 
01123  0F49             ;        JMP KERNEL.HALT$
01124  0F49             
01125  0F49  AD 0B 0F              LDA KERNEL.DEBUGMODE$
01126  0F4C  C9 00                 CMP #$00
01127  0F4E  F0 03                 BEQ @HALT
01128  0F50  4C 00 00              JMP $0000
01129  0F53             
01130  0F53             @HALT
01131  0F53  4C 53 0F              JMP @HALT
01132  0F56             
01133  0F56             
01134  0F56             
01135  0F56             
01136  0F56             ;ALIGN $100
01137  0F56             
01138  0F56             MEMORY.START 
01139  0F56  20 61 0F              JSR MEMORY.BACKUPZP
01140  0F59                        ;JSR MEMORY.STARTHEAP
01141  0F59  60                    RTS
01142  0F5A             
01143  0F5A             MEMORY.END 
01144  0F5A  20 97 10              JSR MEMORY.ENDHEAP$
01145  0F5D  20 6E 0F              JSR MEMORY.RESTOREZP
01146  0F60  60                    RTS
01147  0F61             
01148  0F61             MEMORY.BACKUPZP 
01149  0F61                        ; BACK ZERO PAGE MEMORY
01150  0F61  A2 00                 LDX #$00
01151  0F63             @LOOP
01152  0F63  B5 00                 LDA $00,X
01153  0F65                        ;STA $E3A2,X
01154  0F65                        ;STA $CF00,X
01155  0F65  9D 00 0E              STA MEMORY.BACKUPZPADDRESS,X
01156  0F68  E8                    INX
01157  0F69  E0 FF                 CPX #$FF
01158  0F6B  D0 F6                 BNE @LOOP
01159  0F6D  60                    RTS
01160  0F6E             
01161  0F6E             MEMORY.RESTOREZP 
01162  0F6E                        ; DO NOT RESTORE THE RTC VARIABLES SO THAT THE TICKS DO NOT RESET
01163  0F6E  A5 A0                 LDA $A0
01164  0F70  8D A0 0E              STA MEMORY.BACKUPZPADDRESS+$A0
01165  0F73  A5 A1                 LDA $A1
01166  0F75  8D A1 0E              STA MEMORY.BACKUPZPADDRESS+$A1
01167  0F78  A5 A2                 LDA $A2
01168  0F7A  8D A2 0E              STA MEMORY.BACKUPZPADDRESS+$A2
01169  0F7D             
01170  0F7D                        ; BACK ZERO PAGE MEMORY
01171  0F7D  A2 00                 LDX #$00
01172  0F7F             @LOOP
01173  0F7F                        ;LDA $CF00,X
01174  0F7F  BD 00 0E              LDA MEMORY.BACKUPZPADDRESS,X
01175  0F82  95 00                 STA $00,X
01176  0F84  E8                    INX
01177  0F85  E0 FF                 CPX #$FF
01178  0F87  D0 F6                 BNE @LOOP
01179  0F89  60                    RTS
01180  0F8A             
01181  0F8A             
01182  0F8A             MEMORY.COPY.SOURCE$ = $73 ; 2 BYTES
01183  0F8A             MEMORY.COPY.DESTINATION$ = $75 ; 2 BYTES
01184  0F8A             MEMORY.COPY.LENGTH$ = $77 ; 1 BYTE
01185  0F8A             
01186  0F8A             MEMORY.COPY$ 
01187  0F8A  A5 77                 LDA MEMORY.COPY.LENGTH$
01188  0F8C  C9 00                 CMP #$00
01189  0F8E  F0 0B                 BEQ @END
01190  0F90             
01191  0F90  A0 00                 LDY #$00
01192  0F92             @LOOP
01193  0F92  B1 73                 LDA (MEMORY.COPY.SOURCE$),Y
01194  0F94  91 75                 STA (MEMORY.COPY.DESTINATION$),Y
01195  0F96  C8                    INY
01196  0F97  C4 77                 CPY MEMORY.COPY.LENGTH$
01197  0F99  D0 F7                 BNE @LOOP
01198  0F9B             @END
01199  0F9B  60                    RTS
01200  0F9C             
01201  0F9C             MEMORY.COPY16.SOURCE$ = $73 ; 2 BYTES
01202  0F9C             MEMORY.COPY16.DESTINATION$ = $75 ; 2 BYTES
01203  0F9C             MEMORY.COPY16.LENGTH$ = $78 ; 2 BYTES
01204  0F9C             
01205  0F9C             MEMORY.COPY16$ 
01206  0F9C             @LOOP
01207  0F9C  A5 79                 LDA MEMORY.COPY16.LENGTH$+1
01208  0F9E  C9 00                 CMP #$00
01209  0FA0  F0 16                 BEQ @COPYLOW
01210  0FA2             
01211  0FA2  A9 FF                 LDA #$FF
01212  0FA4  85 77                 STA MEMORY.COPY.LENGTH$
01213  0FA6  20 8A 0F              JSR MEMORY.COPY$
01214  0FA9             
01215  0FA9  A0 FF                 LDY #$FF
01216  0FAB  B1 73                 LDA (MEMORY.COPY16.SOURCE$),Y
01217  0FAD  91 75                 STA (MEMORY.COPY16.DESTINATION$),Y
01218  0FAF             
01219  0FAF  E6 74                 INC MEMORY.COPY16.SOURCE$+1
01220  0FB1  E6 76                 INC MEMORY.COPY16.DESTINATION$+1
01221  0FB3  C6 79                 DEC MEMORY.COPY16.LENGTH$+1
01222  0FB5             
01223  0FB5  4C 9C 0F              JMP @LOOP
01224  0FB8             
01225  0FB8             @COPYLOW
01226  0FB8  A5 78                 LDA MEMORY.COPY16.LENGTH$
01227  0FBA  85 77                 STA MEMORY.COPY.LENGTH$
01228  0FBC  20 8A 0F              JSR MEMORY.COPY$
01229  0FBF             
01230  0FBF  60                    RTS
01231  0FC0             
01232  0FC0             MEMORY.SWAP.ADDRESS1$ = $73 ; 2 BYTES
01233  0FC0             MEMORY.SWAP.ADDRESS2$ = $75 ; 2 BYTES
01234  0FC0             MEMORY.SWAP.LENGTH$ = $77 ; 1 BYTE
01235  0FC0             MEMORY.SWAP.TEMP = $79 ; 1 BYTE
01236  0FC0             MEMORY.SWAP$ 
01237  0FC0  A0 00                 LDY #$00
01238  0FC2             @AGAIN
01239  0FC2  C4 77                 CPY MEMORY.SWAP.LENGTH$
01240  0FC4  D0 01                 BNE @CONT
01241  0FC6  60                    RTS
01242  0FC7             @CONT
01243  0FC7  B1 73                 LDA (MEMORY.SWAP.ADDRESS1$),Y
01244  0FC9  85 79                 STA MEMORY.SWAP.TEMP
01245  0FCB  B1 75                 LDA (MEMORY.SWAP.ADDRESS2$),Y
01246  0FCD  91 73                 STA (MEMORY.SWAP.ADDRESS1$),Y
01247  0FCF  A5 79                 LDA MEMORY.SWAP.TEMP
01248  0FD1  91 75                 STA (MEMORY.SWAP.ADDRESS2$),Y
01249  0FD3  C8                    INY
01250  0FD4  4C C2 0F              JMP @AGAIN
01251  0FD7             
01252  0FD7             MEMORY.SWAP16.ADDRESS1$ = $73 ; 2 BYTES
01253  0FD7             MEMORY.SWAP16.ADDRESS2$ = $75 ; 2 BYTES
01254  0FD7             MEMORY.SWAP16.LENGTH$ = $77 ; 2 BYTES
01255  0FD7             MEMORY.SWAP16.TEMP = $79 ; 1 BYTE
01256  0FD7             MEMORY.SWAP16$ 
01257  0FD7             @LOOP
01258  0FD7  A5 78                 LDA MEMORY.SWAP16.LENGTH$+1
01259  0FD9  C9 00                 CMP #$00
01260  0FDB  F0 1E                 BEQ @SWAPLOW
01261  0FDD             
01262  0FDD  A9 FF                 LDA #$FF
01263  0FDF  85 77                 STA MEMORY.SWAP.LENGTH$
01264  0FE1  20 C0 0F              JSR MEMORY.SWAP$
01265  0FE4             
01266  0FE4  A0 FF                 LDY #$FF
01267  0FE6  B1 73                 LDA (MEMORY.SWAP16.ADDRESS1$),Y
01268  0FE8  85 79                 STA MEMORY.SWAP16.TEMP
01269  0FEA  B1 75                 LDA (MEMORY.SWAP16.ADDRESS2$),Y
01270  0FEC  91 73                 STA (MEMORY.SWAP16.ADDRESS1$),Y
01271  0FEE  A5 79                 LDA MEMORY.SWAP16.TEMP
01272  0FF0  91 75                 STA (MEMORY.SWAP16.ADDRESS2$),Y
01273  0FF2             
01274  0FF2  E6 74                 INC MEMORY.SWAP16.ADDRESS1$+1
01275  0FF4  E6 76                 INC MEMORY.SWAP16.ADDRESS2$+1
01276  0FF6  C6 78                 DEC MEMORY.SWAP16.LENGTH$+1
01277  0FF8             
01278  0FF8  4C D7 0F              JMP @LOOP
01279  0FFB             
01280  0FFB             @SWAPLOW
01281  0FFB  A5 77                 LDA MEMORY.SWAP16.LENGTH$
01282  0FFD  85 77                 STA MEMORY.SWAP.LENGTH$
01283  0FFF  20 C0 0F              JSR MEMORY.SWAP$
01284  1002             
01285  1002  60                    RTS
01286  1003             
01287  1003             ;ALIGN $100
01288  1003             
01289  1003             MEMORY.FILL.ADDRESS$ = $73 ; 2 BYTES
01290  1003             MEMORY.FILL.VALUE$ = $75 ; 1 BYTE
01291  1003             MEMORY.FILL.LENGTH$ = $76 ; 1 BYTE
01292  1003             
01293  1003             MEMORY.FILL$ 
01294  1003  A5 76                 LDA MEMORY.FILL.LENGTH$
01295  1005  C9 00                 CMP #$00
01296  1007  F0 0B                 BEQ @END
01297  1009             
01298  1009  A5 75                 LDA MEMORY.FILL.VALUE$
01299  100B  A0 00                 LDY #$00
01300  100D             @LOOP
01301  100D  91 73                 STA (MEMORY.FILL.ADDRESS$),Y
01302  100F  C8                    INY
01303  1010  C4 76                 CPY MEMORY.FILL.LENGTH$
01304  1012  D0 F9                 BNE @LOOP
01305  1014             @END
01306  1014  60                    RTS
01307  1015             
01308  1015             MEMORY.FILL16.ADDRESS$ = $73 ; 2 BYTES
01309  1015             MEMORY.FILL16.VALUE$ = $75 ; 1 BYTE
01310  1015             MEMORY.FILL16.LENGTH$ = $77 ; 2 BYTES
01311  1015             
01312  1015             MEMORY.FILL16$ 
01313  1015             @LOOP
01314  1015  A5 78                 LDA MEMORY.FILL16.LENGTH$+1
01315  1017  C9 00                 CMP #$00
01316  1019  F0 14                 BEQ @FILLLOW
01317  101B             
01318  101B  A9 FF                 LDA #$FF
01319  101D  85 76                 STA MEMORY.FILL.LENGTH$
01320  101F  20 03 10              JSR MEMORY.FILL$
01321  1022             
01322  1022  A0 FF                 LDY #$FF
01323  1024  A5 75                 LDA MEMORY.FILL16.VALUE$
01324  1026  91 73                 STA (MEMORY.FILL16.ADDRESS$),Y
01325  1028             
01326  1028  E6 74                 INC MEMORY.FILL16.ADDRESS$+1
01327  102A  C6 78                 DEC MEMORY.FILL16.LENGTH$+1
01328  102C             
01329  102C  4C 15 10              JMP @LOOP
01330  102F             
01331  102F             @FILLLOW
01332  102F  A5 77                 LDA MEMORY.FILL16.LENGTH$
01333  1031  85 76                 STA MEMORY.FILL.LENGTH$
01334  1033  20 03 10              JSR MEMORY.FILL$
01335  1036             
01336  1036  60                    RTS
01337  1037             
01338  1037             MEMORY.PUSHREGS$ 
01339  1037  85 FC                 STA $FC ; PUT  THE A REGSITER INTO MEMORY SINCE WE NEED IT TO DO WORK IN THIS ROUTINE.
01340  1039             
01341  1039                        ; THE STACK IS POINTING TO THE RETURN ADDRESS.
01342  1039                        ; GET THE RETURN ADDRESS
01343  1039  68                    PLA
01344  103A  85 FD                 STA $FD
01345  103C  E6 FD                 INC $FD
01346  103E  68                    PLA
01347  103F  85 FE                 STA $FE
01348  1041             
01349  1041                        ; PUSH THE A, X, AND Y REGISTERS ONTO THE STACK.
01350  1041  A5 FC                 LDA $FC
01351  1043  48                    PHA
01352  1044  8A                    TXA
01353  1045  48                    PHA
01354  1046  98                    TYA
01355  1047  48                    PHA
01356  1048                        
01357  1048  A5 FC                 LDA $FC ; RESTORE THE A REGISTER.
01358  104A             
01359  104A                        ; IMPLICIT RETURN.
01360  104A  6C FD 00              JMP ($00FD)
01361  104D             
01362  104D             MEMORY.PULLREGS$ 
01363  104D                        ; THE STACK IS POINTING TO THE RETURN ADDRESS.
01364  104D                        ; GET THE RETURN ADDRESS
01365  104D  68                    PLA
01366  104E  85 FD                 STA $FD
01367  1050  E6 FD                 INC $FD
01368  1052  68                    PLA
01369  1053  85 FE                 STA $FE
01370  1055             
01371  1055                        ; PULL THE A, X, AND Y REGISTERS FROM THE STACK.
01372  1055  68                    PLA
01373  1056  A8                    TAY
01374  1057  68                    PLA
01375  1058  AA                    TAX
01376  1059  68                    PLA
01377  105A                        
01378  105A                        ; IMPLICIT RETURN.
01379  105A  6C FD 00              JMP ($00FD)
01380  105D             
01381  105D             ;ALIGN $100
01382  105D             
01383  105D  00 A0      MEMORY.HEAPADRESS WORD $A000
01384  105F  FF BF      MEMORY.HEAPADRESS_LR WORD $BFFF
01385  1061  00 20      MEMORY.TOTAL$ WORD $2000 ; 8,192 BYTES
01386  1063  00 20      MEMORY.FREE$ WORD $2000 ; 8,192 BYTES
01387  1065  00 00      MEMORY.USED$ WORD $0000 ; 0 BYTES
01388  1067  00         MEMORY.HEAPSTARTED BYTE $00
01389  1068             
01390  1068             MEMORY.STARTHEAP$ 
01391  1068             
01392  1068                        ; CHECK TO SEE IF THE HEAP HAS ALREADY BEEN STARTED
01393  1068  AD 67 10              LDA MEMORY.HEAPSTARTED
01394  106B  C9 01                 CMP #$01
01395  106D  D0 01                 BNE @OKTOSTART
01396  106F  60                    RTS
01397  1070             @OKTOSTART 
01398  1070             
01399  1070  A9 01                 LDA #$01
01400  1072  8D 67 10              STA MEMORY.HEAPSTARTED
01401  1075             
01402  1075  20 1B 1F              JSR MEMORY.PUSHZP$
01403  1078             
01404  1078  AD 5D 10              LDA MEMORY.HEAPADRESS
01405  107B  85 73                 STA MEMORY.FILL16.ADDRESS$
01406  107D  AD 5E 10              LDA MEMORY.HEAPADRESS+1
01407  1080  85 74                 STA MEMORY.FILL16.ADDRESS$+1
01408  1082             
01409  1082  AD 61 10              LDA MEMORY.TOTAL$
01410  1085  85 77                 STA MEMORY.FILL16.LENGTH$
01411  1087  AD 62 10              LDA MEMORY.TOTAL$+1
01412  108A  85 78                 STA MEMORY.FILL16.LENGTH$+1
01413  108C             
01414  108C  A9 FF                 LDA #$FF
01415  108E  85 75                 STA MEMORY.FILL16.VALUE$
01416  1090             
01417  1090  20 15 10              JSR MEMORY.FILL16$
01418  1093             
01419  1093  20 31 1F              JSR MEMORY.PULLZP$
01420  1096             
01421  1096  60                    RTS
01422  1097             
01423  1097             MEMORY.ENDHEAP$ 
01424  1097  A9 00                 LDA #$00
01425  1099  8D 67 10              STA MEMORY.HEAPSTARTED
01426  109C  60                    RTS
01427  109D             
01428  109D             ; NEW METHOD: (N + 2 BYTES)
01429  109D             ;       LOOK FOR 2 NULL$ BYTES AND THEN START COUNTING AS LONG AS THERE ISN'T ANY NON-NULL$ BYTES.  RETURN THE ADDRESS AFTER THE SIZE BYTES.
01430  109D             ;       2 BYTES BEFORE THE ALLOCATED BLOCK IS THE SIZE OF THE BLOCK.
01431  109D             ;       DEALLOCTION WILL INSERT NULL$ BYTES FOR THE SIZE OF THE BLOCK INCLUDING THE 2 BYTES BEFORE THE ADDRESS
01432  109D             
01433  109D             ; OLD METHOD: (N + 1 BYTES) [SEE KERNEL.18.ASM]
01434  109D             ;       EACH BLOCK OF ALLOCATED MEMORY MUST END WITH A NULL$ BYTE.
01435  109D             ;       THE SIZE OF THE BLOCK IS DETERMINE HOW MANY BYTES BEFORE IT REACHES THE NEXT NULL$ BYTE.
01436  109D             ;       DEALLOCATION WILL INSERT NULL$ BYTES UNTIL IT ENCOUNTERS THE NEXT NULL$ BYTE.
01437  109D             
01438  109D             MEMORY.ALLOCATE.ADDRESS$ = $7A ; 2 BYTES
01439  109D             MEMORY.ALLOCATE.LENGTH$ = $75 ; 2 BYTES
01440  109D             MEMORY.ALLOCATE.COUNTER = $77 ; 2 BYTES
01441  109D             MEMORY.ALLOCATE.FOUND = $79 ; 1 BYTE
01442  109D             MEMORY.ALLOCATE$ 
01443  109D             
01444  109D  20 68 10              JSR MEMORY.STARTHEAP$ ; SANITY CHECK
01445  10A0             
01446  10A0                        ; CLEAR ADDRESS ($0000 MEANS NOTHING WAS ALLOCATED)
01447  10A0  A9 00                 LDA #$00
01448  10A2  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
01449  10A4  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
01450  10A6             
01451  10A6  20 3E 11              JSR MEMORY.ALLOCATE.INC_LENGTH ; LENGTH = LENGTH + 2
01452  10A9             
01453  10A9  A5 84                 LDA MATH.ADD16.SUM$
01454  10AB  85 75                 STA MEMORY.ALLOCATE.LENGTH$
01455  10AD  A5 85                 LDA MATH.ADD16.SUM$+1
01456  10AF  85 76                 STA MEMORY.ALLOCATE.LENGTH$+1
01457  10B1             
01458  10B1                        ; ENSURE THAT WE ARE NOT ALLOCATING MORE MEMORY THAN WANT IS FREE
01459  10B1  AD 63 10              LDA MEMORY.FREE$
01460  10B4  85 80                 STA MATH.CMP16.NUM1$
01461  10B6  AD 64 10              LDA MEMORY.FREE$+1
01462  10B9  85 81                 STA MATH.CMP16.NUM1$+1
01463  10BB             
01464  10BB  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
01465  10BD  85 82                 STA MATH.CMP16.NUM2$
01466  10BF  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
01467  10C1  85 83                 STA MATH.CMP16.NUM2$+1
01468  10C3                        
01469  10C3  20 E4 28              JSR MATH.CMP16$ ; IF FREE$ < LENGTH$ (CARRY IS CLEARED) THEN EXIT
01470  10C6                        ;BCC @END
01471  10C6  B0 01                 BCS @FIND
01472  10C8  60                    RTS
01473  10C9             
01474  10C9             @FIND
01475  10C9                        ;JSR MEMORY.ALLOCATE.DEC_LENGTH ; LENGTH = LENGTH - 2
01476  10C9             
01477  10C9  20 76 11              JSR MEMORY.ALLOCATE.FIND ; LOCATE MEMORY THAT CAN BE USED.
01478  10CC             
01479  10CC                        ; CONFIRM THAT WE FOUND A SPOT OF MEMORY THAT CAN BE USED.
01480  10CC  A5 79                 LDA MEMORY.ALLOCATE.FOUND
01481  10CE  C9 01                 CMP #$01
01482  10D0  F0 09                 BEQ @INIT_MEM
01483  10D2             
01484  10D2                        ; IF NOTHING WAS FOUND, RESET THE RETURN VALUE AND EXIT.
01485  10D2  A9 00                 LDA #$00
01486  10D4  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
01487  10D6  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
01488  10D8  4C 3D 11              JMP @END
01489  10DB             
01490  10DB             @INIT_MEM
01491  10DB                        ;JSR MEMORY.ALLOCATE.INC_LENGTH ; LENGTH = LENGTH + 2
01492  10DB             
01493  10DB                        ; NEED TO RECALCULATE THE MEMORY FREE/USED.
01494  10DB  AD 65 10              LDA MEMORY.USED$
01495  10DE  85 80                 STA MATH.ADD16.ADDEND1$
01496  10E0  AD 66 10              LDA MEMORY.USED$+1
01497  10E3  85 81                 STA MATH.ADD16.ADDEND1$+1
01498  10E5             
01499  10E5  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
01500  10E7  85 82                 STA MATH.ADD16.ADDEND2$
01501  10E9  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
01502  10EB  85 83                 STA MATH.ADD16.ADDEND2$+1
01503  10ED             
01504  10ED  20 00 28              JSR MATH.ADD16$ ; MEMORY.USED$ = MEMORY.USED$ + LENGTH
01505  10F0             
01506  10F0  A5 84                 LDA MATH.ADD16.SUM$
01507  10F2  8D 65 10              STA MEMORY.USED$
01508  10F5  A5 85                 LDA MATH.ADD16.SUM$+1
01509  10F7  8D 66 10              STA MEMORY.USED$+1
01510  10FA             
01511  10FA  20 CC 12              JSR MEMORY.CALCULATE_FREE ; MEMORY.FREE$ = MEMORY.TOTAL$ - MEMORY.USED$
01512  10FD             
01513  10FD                        ; STORE THE LENGTH OF THE BLOCK AT ADDRESS - 2
01514  10FD  A0 00                 LDY #$00
01515  10FF  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
01516  1101  91 7A                 STA (MEMORY.ALLOCATE.ADDRESS$),Y
01517  1103  C8                    INY
01518  1104  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
01519  1106  91 7A                 STA (MEMORY.ALLOCATE.ADDRESS$),Y
01520  1108             
01521  1108                        ; ADD 2 TO THE ADDRESS VALUE.
01522  1108  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
01523  110A  85 80                 STA MATH.ADD16.ADDEND1$
01524  110C  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01525  110E  85 81                 STA MATH.ADD16.ADDEND1$+1
01526  1110                        
01527  1110  A9 02                 LDA #$02
01528  1112  85 82                 STA MATH.ADD16.ADDEND2$
01529  1114  A9 00                 LDA #$00
01530  1116  85 83                 STA MATH.ADD16.ADDEND2$+1
01531  1118                        
01532  1118  20 00 28              JSR MATH.ADD16$ ; ADDRESS = ADDRESS + 2
01533  111B             
01534  111B  A5 84                 LDA MATH.ADD16.SUM$
01535  111D  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
01536  111F  A5 85                 LDA MATH.ADD16.SUM$+1
01537  1121  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
01538  1123             
01539  1123  20 5A 11              JSR MEMORY.ALLOCATE.DEC_LENGTH ; LENGTH = LENGTH - 2
01540  1126             
01541  1126                        ; INITAILIZE THE MEMORY WITH NON-NULL$ CHARACTERS.
01542  1126  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
01543  1128  85 73                 STA MEMORY.FILL16.ADDRESS$
01544  112A  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01545  112C  85 74                 STA MEMORY.FILL16.ADDRESS$+1
01546  112E             
01547  112E  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
01548  1130  85 77                 STA MEMORY.FILL16.LENGTH$
01549  1132  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
01550  1134  85 78                 STA MEMORY.FILL16.LENGTH$+1
01551  1136             
01552  1136  A9 00                 LDA #$00
01553  1138  85 75                 STA MEMORY.FILL.VALUE$
01554  113A  20 15 10              JSR MEMORY.FILL16$
01555  113D             
01556  113D             @END
01557  113D             
01558  113D  60                    RTS
01559  113E             
01560  113E             MEMORY.ALLOCATE.INC_LENGTH 
01561  113E                        ; ADD 2 TO THE LENGTH OF THE MEMORY
01562  113E  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
01563  1140  85 80                 STA MATH.ADD16.ADDEND1$
01564  1142  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
01565  1144  85 81                 STA MATH.ADD16.ADDEND1$+1
01566  1146             
01567  1146  A9 02                 LDA #$02
01568  1148  85 82                 STA MATH.ADD16.ADDEND2$
01569  114A  A9 00                 LDA #$00
01570  114C  85 83                 STA MATH.ADD16.ADDEND2$+1
01571  114E             
01572  114E  20 00 28              JSR MATH.ADD16$ ; LENGTH = LENGTH + 2
01573  1151             
01574  1151  A5 84                 LDA MATH.ADD16.SUM$
01575  1153  85 75                 STA MEMORY.ALLOCATE.LENGTH$
01576  1155  A5 85                 LDA MATH.ADD16.SUM$+1
01577  1157  85 76                 STA MEMORY.ALLOCATE.LENGTH$+1
01578  1159             
01579  1159  60                    RTS
01580  115A             
01581  115A             MEMORY.ALLOCATE.DEC_LENGTH 
01582  115A                        ; SUBTRACT 2 TO THE LENGTH OF THE MEMORY
01583  115A  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
01584  115C  85 80                 STA MATH.SUBTRACT16.MENUEND$
01585  115E  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
01586  1160  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
01587  1162             
01588  1162  A9 02                 LDA #$02
01589  1164  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
01590  1166  A9 00                 LDA #$00
01591  1168  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
01592  116A             
01593  116A  20 96 28              JSR MATH.SUBTRACT16$ ; LENGTH = LENGTH - 2
01594  116D             
01595  116D  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
01596  116F  85 75                 STA MEMORY.ALLOCATE.LENGTH$
01597  1171  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
01598  1173  85 76                 STA MEMORY.ALLOCATE.LENGTH$+1
01599  1175             
01600  1175  60                    RTS
01601  1176             
01602  1176             
01603  1176             ;ALIGN $100
01604  1176             
01605  1176             MEMORY.ALLOCATE.FIND 
01606  1176                        ; DEFAULT TO THE START OF THE HEAP
01607  1176  AD 5D 10              LDA MEMORY.HEAPADRESS
01608  1179  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
01609  117B  AD 5E 10              LDA MEMORY.HEAPADRESS+1
01610  117E  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
01611  1180             
01612  1180                        ; LOCATE THE FIRST SPOT THAT CONTAINS NULL$
01613  1180  A0 00                 LDY #$00
01614  1182  A2 00                 LDX #$00
01615  1184  86 77                 STX MEMORY.ALLOCATE.COUNTER
01616  1186  86 78                 STX MEMORY.ALLOCATE.COUNTER+1
01617  1188             @LOOP
01618  1188  B1 7A                 LDA (MEMORY.ALLOCATE.ADDRESS$),Y
01619  118A             @CHECK_MEM 
01620  118A  C9 FF                 CMP #$FF
01621  118C                        ;BEQ @INC_COUNTER
01622  118C  D0 03                 BNE @RESET_COUNTER
01623  118E  4C 00 12              JMP @INC_COUNTER
01624  1191             
01625  1191             @RESET_COUNTER 
01626  1191                        ; GET THE SIZE OF THE MEMORY BLOCK
01627  1191  A0 00                 LDY #$00
01628  1193  B1 7A                 LDA (MEMORY.ALLOCATE.ADDRESS$),Y
01629  1195  85 7C                 STA MEMORY.SIZEOF.LENGTH$
01630  1197  C8                    INY
01631  1198  B1 7A                 LDA (MEMORY.ALLOCATE.ADDRESS$),Y
01632  119A  85 7D                 STA MEMORY.SIZEOF.LENGTH$+1
01633  119C             
01634  119C                        ; INC THE ADDRESS BY THE SIZE OF THE MEMORY BLOCK
01635  119C  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
01636  119E  85 80                 STA MATH.ADD16.ADDEND1$
01637  11A0  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01638  11A2  85 81                 STA MATH.ADD16.ADDEND1$+1
01639  11A4             
01640  11A4  A5 7C                 LDA MEMORY.SIZEOF.LENGTH$
01641  11A6  85 82                 STA MATH.ADD16.ADDEND2$
01642  11A8  A5 7D                 LDA MEMORY.SIZEOF.LENGTH$+1
01643  11AA  85 83                 STA MATH.ADD16.ADDEND2$+1
01644  11AC             
01645  11AC  20 00 28              JSR MATH.ADD16$ ; ADDRESS = ADDRESS + LENGTH
01646  11AF             
01647  11AF  A5 84                 LDA MATH.ADD16.SUM$
01648  11B1  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
01649  11B3  A5 85                 LDA MATH.ADD16.SUM$+1
01650  11B5  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
01651  11B7             
01652  11B7  A0 00                 LDY #$00
01653  11B9  A2 00                 LDX #$00
01654  11BB  86 77                 STX MEMORY.ALLOCATE.COUNTER
01655  11BD  86 78                 STX MEMORY.ALLOCATE.COUNTER+1
01656  11BF             
01657  11BF  4C C5 11              JMP @CHECK_SIZE
01658  11C2             
01659  11C2             @NEXT_MEM
01660  11C2                        ; INCREASE THE MEMORY ADDRESS
01661  11C2  20 44 12              JSR MEMORY.ALLOCATE.INC_ADDRESS
01662  11C5             
01663  11C5             @CHECK_SIZE 
01664  11C5                        ; IF THE ADDRESS IS GREATER THAN THE LAST HEAP ADDRESS THEN EXIT
01665  11C5  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
01666  11C7  85 80                 STA MATH.CMP16.NUM1$
01667  11C9  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01668  11CB  85 81                 STA MATH.CMP16.NUM1$+1
01669  11CD             
01670  11CD  AD 5F 10              LDA MEMORY.HEAPADRESS_LR
01671  11D0  85 82                 STA MATH.CMP16.NUM2$
01672  11D2  AD 60 10              LDA MEMORY.HEAPADRESS_LR+1
01673  11D5  85 83                 STA MATH.CMP16.NUM2$+1
01674  11D7             
01675  11D7  20 E4 28              JSR MATH.CMP16$ ; IF THE ADDRESS$ >= HEAPADRESS_LR THEN EXIT
01676  11DA                        ;BCS @END
01677  11DA             
01678  11DA  90 03                 BCC @OK
01679  11DC  4C 43 12              JMP @END
01680  11DF             @OK
01681  11DF             
01682  11DF  A0 00                 LDY #$00
01683  11E1  4C 88 11              JMP @LOOP
01684  11E4             
01685  11E4             ALIGN      $100
01686  1200             
01687  1200             @INC_COUNTER 
01688  1200  E8                    INX
01689  1201  86 77                 STX MEMORY.ALLOCATE.COUNTER
01690  1203  E0 00                 CPX #$00
01691  1205  D0 02                 BNE @CHECK_COUNTER
01692  1207  E6 78                 INC MEMORY.ALLOCATE.COUNTER+1
01693  1209             @CHECK_COUNTER 
01694  1209             
01695  1209                        ; IF THE COUNTER IS EQUAL TO THE LENGTH THEN EXIT
01696  1209  A5 77                 LDA MEMORY.ALLOCATE.COUNTER
01697  120B  85 80                 STA MATH.CMP16.NUM1$
01698  120D  A5 78                 LDA MEMORY.ALLOCATE.COUNTER+1
01699  120F  85 81                 STA MATH.CMP16.NUM1$+1
01700  1211             
01701  1211  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
01702  1213  85 82                 STA MATH.CMP16.NUM2$
01703  1215  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
01704  1217  85 83                 STA MATH.CMP16.NUM2$+1
01705  1219             
01706  1219  20 E4 28              JSR MATH.CMP16$ ; IF COUNTER = LENGTH THEN EXIT
01707  121C             
01708  121C             ;ALIGN $100
01709  121C             
01710  121C                        ;BEQ @FOUND
01711  121C  B0 03                 BCS @FOUND
01712  121E             
01713  121E  4C C2 11              JMP @NEXT_MEM
01714  1221             
01715  1221             @FOUND
01716  1221  20 44 12              JSR MEMORY.ALLOCATE.INC_ADDRESS
01717  1224             
01718  1224                        ; DECREASE BY THE LENGTH TO GET THE STARTING LOCATION
01719  1224  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
01720  1226  85 80                 STA MATH.SUBTRACT16.MENUEND$
01721  1228  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01722  122A  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
01723  122C             
01724  122C  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
01725  122E  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
01726  1230  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
01727  1232  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
01728  1234             
01729  1234  20 96 28              JSR MATH.SUBTRACT16$ ; ADDRESS = ADDRESS - LENGTH
01730  1237             
01731  1237  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
01732  1239  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
01733  123B  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
01734  123D  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
01735  123F             
01736  123F  A9 01                 LDA #$01
01737  1241  85 79                 STA MEMORY.ALLOCATE.FOUND
01738  1243             
01739  1243             @END
01740  1243  60                    RTS
01741  1244             
01742  1244             MEMORY.ALLOCATE.INC_ADDRESS 
01743  1244             
01744  1244  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
01745  1246  85 80                 STA MATH.ADD16.ADDEND1$
01746  1248  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01747  124A  85 81                 STA MATH.ADD16.ADDEND1$+1
01748  124C             
01749  124C  A9 01                 LDA #$01
01750  124E  85 82                 STA MATH.ADD16.ADDEND2$
01751  1250  A9 00                 LDA #$00
01752  1252  85 83                 STA MATH.ADD16.ADDEND2$+1
01753  1254                        
01754  1254  20 00 28              JSR MATH.ADD16$ ; ADDRESS = ADDRESS + 1
01755  1257             
01756  1257  A5 84                 LDA MATH.ADD16.SUM$
01757  1259  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
01758  125B  A5 85                 LDA MATH.ADD16.SUM$+1
01759  125D  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
01760  125F             
01761  125F  60                    RTS
01762  1260             
01763  1260             MEMORY.SIZEOF.ADDRESS$ = $7A ; 2 BYTES
01764  1260             MEMORY.SIZEOF.LENGTH$ = $7C ; 2 BYTES
01765  1260             MEMORY.SIZEOF$ 
01766  1260                        ; THE SIZE OF THE BLOCK OF MEMORY IS STORE IN THE PREVIOUS 2 BYTES.
01767  1260             
01768  1260                        ; SUBTRACT THE 2 BYTES AT THE BEGINNING OF THE ADDRESS.
01769  1260                        
01770  1260  A5 7A                 LDA MEMORY.SIZEOF.ADDRESS$
01771  1262  85 80                 STA MATH.SUBTRACT16.MENUEND$
01772  1264  A5 7B                 LDA MEMORY.SIZEOF.ADDRESS$+1
01773  1266  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
01774  1268             
01775  1268  A9 02                 LDA #$02
01776  126A  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
01777  126C  A9 00                 LDA #$00
01778  126E  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
01779  1270             
01780  1270  20 96 28              JSR MATH.SUBTRACT16$ ; ADDRESS = ADDRESS - 2
01781  1273             
01782  1273  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
01783  1275  85 7A                 STA MEMORY.SIZEOF.ADDRESS$
01784  1277  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
01785  1279  85 7B                 STA MEMORY.SIZEOF.ADDRESS$+1
01786  127B             
01787  127B                        ; GET THE VALUE STORED AT ADDRESS - 2 AND PUT INTO LENGTH
01788  127B  A0 00                 LDY #$00
01789  127D  B1 7A                 LDA (MEMORY.SIZEOF.ADDRESS$),Y
01790  127F  85 7C                 STA MEMORY.SIZEOF.LENGTH$
01791  1281  C8                    INY
01792  1282  B1 7A                 LDA (MEMORY.SIZEOF.ADDRESS$),Y
01793  1284  85 7D                 STA MEMORY.SIZEOF.LENGTH$+1
01794  1286             
01795  1286  60                    RTS
01796  1287             
01797  1287             MEMORY.DEALLOCATE.ADDRESS$ = $7A ; 2 BYTES
01798  1287             MEMORY.DEALLOCATE$ 
01799  1287                        ; FREE UP THE MEMORY.
01800  1287             
01801  1287                        ; GET THE SIZE OF THE MEMORY BLOCK.
01802  1287  A5 7A                 LDA MEMORY.DEALLOCATE.ADDRESS$
01803  1289  85 7A                 STA MEMORY.SIZEOF.ADDRESS$
01804  128B  A5 7B                 LDA MEMORY.DEALLOCATE.ADDRESS$+1
01805  128D  85 7B                 STA MEMORY.SIZEOF.ADDRESS$+1
01806  128F             
01807  128F  20 60 12              JSR MEMORY.SIZEOF$ ; LENGTH = SIZEOF(ADDRESS)
01808  1292             
01809  1292                        ; DECREASE MEMORY.USED$
01810  1292  AD 65 10              LDA MEMORY.USED$
01811  1295  85 80                 STA MATH.SUBTRACT16.MENUEND$
01812  1297  AD 66 10              LDA MEMORY.USED$+1
01813  129A  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
01814  129C             
01815  129C  A5 7C                 LDA MEMORY.SIZEOF.LENGTH$
01816  129E  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
01817  12A0  A5 7D                 LDA MEMORY.SIZEOF.LENGTH$+1
01818  12A2  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
01819  12A4             
01820  12A4  20 96 28              JSR MATH.SUBTRACT16$ ; MEMORY.USED$ = MEMORY.USED$ - LENGTH
01821  12A7             
01822  12A7  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
01823  12A9  8D 65 10              STA MEMORY.USED$
01824  12AC  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
01825  12AE  8D 66 10              STA MEMORY.USED$+1
01826  12B1             
01827  12B1  20 CC 12              JSR MEMORY.CALCULATE_FREE ; MEMORY.FREE$ = MEMORY.TOTAL$ - MEMORY.USED$
01828  12B4             
01829  12B4                        ; SET THE MEMORY FOR RE-USE
01830  12B4  A5 7A                 LDA MEMORY.DEALLOCATE.ADDRESS$
01831  12B6  85 73                 STA MEMORY.FILL16.ADDRESS$
01832  12B8  A5 7B                 LDA MEMORY.DEALLOCATE.ADDRESS$+1
01833  12BA  85 74                 STA MEMORY.FILL16.ADDRESS$+1
01834  12BC             
01835  12BC  A5 7C                 LDA MEMORY.SIZEOF.LENGTH$
01836  12BE  85 77                 STA MEMORY.FILL16.LENGTH$
01837  12C0  A5 7D                 LDA MEMORY.SIZEOF.LENGTH$+1
01838  12C2  85 78                 STA MEMORY.FILL16.LENGTH$+1
01839  12C4             
01840  12C4  A9 FF                 LDA #$FF
01841  12C6  85 75                 STA MEMORY.FILL16.VALUE$
01842  12C8             
01843  12C8  20 15 10              JSR MEMORY.FILL16$
01844  12CB             
01845  12CB  60                    RTS
01846  12CC             
01847  12CC             MEMORY.CALCULATE_FREE 
01848  12CC  AD 61 10              LDA MEMORY.TOTAL$
01849  12CF  85 80                 STA MATH.SUBTRACT16.MENUEND$
01850  12D1  AD 62 10              LDA MEMORY.TOTAL$+1
01851  12D4  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
01852  12D6             
01853  12D6  AD 65 10              LDA MEMORY.USED$
01854  12D9  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
01855  12DB  AD 66 10              LDA MEMORY.USED$+1
01856  12DE  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
01857  12E0             
01858  12E0  20 96 28              JSR MATH.SUBTRACT16$ ; MEMORY.FREE$ = MEMORY.TOTAL$ - MEMORY.USED$
01859  12E3             
01860  12E3  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
01861  12E5  8D 63 10              STA MEMORY.FREE$
01862  12E8  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
01863  12EA  8D 64 10              STA MEMORY.FREE$+1
01864  12ED             
01865  12ED  60                    RTS
01866  12EE             
01867  12EE             ;ALIGN $100
01868  12EE             ;MEMORY.HEAPMANADR = *
01869  12EE             ;INCASM "BUFFER1024.ASM"
01870  12EE             
01871  12EE             ;;ALIGN $100
01872  12EE             
01873  12EE             
01874  12EE             
01875  12EE             
01876  12EE             
01877  12EE             ;ALIGN $100
01878  12EE             
01879  12EE             CONSOLE.CHARMAPADDRESS = $2000
01880  12EE             CONSOLE.MEMORYADDRESS = $0400 ; FIRST POSITION
01881  12EE             CONSOLE.MEMORYADDRESS_LR = $07C0 ; LAST ROW
01882  12EE  00 04      CONSOLE.CURRENTADDRESS WORD CONSOLE.MEMORYADDRESS
01883  12F0  00         CONSOLE.CURRENTCOLUMN BYTE $00 ; 40 COLUMNS
01884  12F1  00         CONSOLE.CURRENTROW BYTE $00 ; 25 ROWS
01885  12F2             CONSOLE.COLORADDRESS = $D800
01886  12F2             CONSOLE.COLORADDRESS_LR = $DBC0 ; LAST ROW
01887  12F2  00 D8      CONSOLE.CURRENTCOLORADDR WORD CONSOLE.COLORADDRESS
01888  12F4  01         CONSOLE.CHARACTERCOLOR BYTE COLOR.WHITE$
01889  12F5  00         CONSOLE.CHARACTERSINVERTED BYTE $00
01890  12F6             
01891  12F6             CONSOLE.START 
01892  12F6                        
01893  12F6  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
01894  12F8  8D EE 12              STA CONSOLE.CURRENTADDRESS
01895  12FB  A9 01                 LDA #<CONSOLE.MEMORYADDRESS+1
01896  12FD  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
01897  1300             
01898  1300  A9 00                 LDA #<CONSOLE.COLORADDRESS
01899  1302  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
01900  1305  A9 01                 LDA #<CONSOLE.COLORADDRESS+1
01901  1307  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
01902  130A             
01903  130A  A9 00                 LDA #$00
01904  130C  8D F0 12              STA CONSOLE.CURRENTCOLUMN
01905  130F  8D F1 12              STA CONSOLE.CURRENTROW
01906  1312             
01907  1312  20 76 13              JSR CONSOLE.CLEAR$
01908  1315             
01909  1315  A9 00                 LDA #COLOR.BLACK$
01910  1317  85 73                 STA CONSOLE.SETBACKGROUNDCOLOR.COLOR$
01911  1319  20 97 16              JSR CONSOLE.SETBACKGROUNDCOLOR$
01912  131C             
01913  131C  A9 00                 LDA #COLOR.BLACK$
01914  131E  85 73                 STA CONSOLE.SETBORDERCOLOR.COLOR$
01915  1320  20 9D 16              JSR CONSOLE.SETBORDERCOLOR$
01916  1323             
01917  1323                        ;LDA #COLOR.WHITE$
01918  1323                        ;STA CONSOLE.SETFOREGROUNDCOLOR.COLOR$
01919  1323                        ;JSR CONSOLE.SETFOREGROUNDCOLOR$
01920  1323                        ;;STA $0286
01921  1323             
01922  1323  A9 00                 LDA #0
01923  1325  85 73                 STA CONSOLE.SETCHARACTERINVERTED.VALUE$
01924  1327  20 BD 16              JSR CONSOLE.SETCHARACTERINVERTED$
01925  132A             
01926  132A             ;        ; COPY THE FONT TO $<CONSOLE.CHARMAPADDRESS
01927  132A             ;        LDA #<FONTADDRESS
01928  132A             ;        STA MEMORY.COPY16.SOURCE$
01929  132A             ;        LDA #>FONTADDRESS
01930  132A             ;        STA MEMORY.COPY16.SOURCE$+1
01931  132A             ;        LDA #<CONSOLE.CHARMAPADDRESS
01932  132A             ;        STA MEMORY.COPY16.DESTINATION$
01933  132A             ;        LDA #>CONSOLE.CHARMAPADDRESS
01934  132A             ;        STA MEMORY.COPY16.DESTINATION$+1
01935  132A             ;        LDA #$00
01936  132A             ;        STA MEMORY.COPY16.LENGTH$
01937  132A             ;        LDA #$08
01938  132A             ;        STA MEMORY.COPY16.LENGTH$+1
01939  132A             ;        JSR MEMORY.COPY16$
01940  132A             
01941  132A                        ; SET TO CUSTOM CHARACTER SET
01942  132A                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:VICII_MEMORY_ORGANIZING
01943  132A                        ;$D018 = %XXXX010X -> CHARMEM IS AT $1000
01944  132A                        ; DEFAULT VALUE = %00010101
01945  132A  AD 18 D0              LDA $D018
01946  132D  29 F1                 AND #%11110001
01947  132F                        ;ORA #%00000000 ; $0000
01948  132F                        ;ORA #%00000010 ; $0800
01949  132F                        ;ORA #%00000100 ; $1000
01950  132F                        ;ORA #%00000110 ; $1800
01951  132F  09 08                 ORA #%00001000 ; $2000
01952  1331                        ;ORA #%00001010 ; $2800
01953  1331                        ;ORA #%00001100 ; $3000
01954  1331                        ;ORA #%00001110 ; $3800
01955  1331  8D 18 D0              STA $D018
01956  1334             
01957  1334  60                    RTS
01958  1335             
01959  1335             CONSOLE.END 
01960  1335             
01961  1335                        ; COPY THE FONT TO $<CONSOLE.CHARMAPADDRESS
01962  1335  A9 00                 LDA #<CONSOLE.CHARMAPADDRESS
01963  1337  85 73                 STA MEMORY.COPY16.SOURCE$
01964  1339  A9 20                 LDA #>CONSOLE.CHARMAPADDRESS
01965  133B  85 74                 STA MEMORY.COPY16.SOURCE$+1
01966  133D  A9 00                 LDA #$00
01967  133F  85 75                 STA MEMORY.COPY16.DESTINATION$
01968  1341  A9 20                 LDA #$20
01969  1343  85 76                 STA MEMORY.COPY16.DESTINATION$+1
01970  1345  A9 00                 LDA #$00
01971  1347  85 78                 STA MEMORY.COPY16.LENGTH$
01972  1349  A9 08                 LDA #$08
01973  134B  85 79                 STA MEMORY.COPY16.LENGTH$+1
01974  134D  20 9C 0F              JSR MEMORY.COPY16$
01975  1350             
01976  1350                        ; COPY THE SCREEN CHARACTERS
01977  1350  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
01978  1352  85 73                 STA MEMORY.COPY16.SOURCE$
01979  1354  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
01980  1356  85 74                 STA MEMORY.COPY16.SOURCE$+1
01981  1358  A9 00                 LDA #$00
01982  135A  85 75                 STA MEMORY.COPY16.DESTINATION$
01983  135C  A9 04                 LDA #$04
01984  135E  85 76                 STA MEMORY.COPY16.DESTINATION$+1
01985  1360  A9 C0                 LDA #$C0
01986  1362  85 78                 STA MEMORY.COPY16.LENGTH$
01987  1364  A9 03                 LDA #$03
01988  1366  85 79                 STA MEMORY.COPY16.LENGTH$+1
01989  1368  20 9C 0F              JSR MEMORY.COPY16$
01990  136B             
01991  136B                        ; SET TO CUSTOM CHARACTER SET
01992  136B                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:VICII_MEMORY_ORGANIZING
01993  136B                        ;$D018 = %XXXX010X -> CHARMEM IS AT $1000
01994  136B                        ; DEFAULT VALUE = %00010101
01995  136B  AD 18 D0              LDA $D018
01996  136E  29 F1                 AND #%11110001
01997  1370                        ;ORA #%00000000 ; $0000
01998  1370                        ;ORA #%00000010 ; $0800
01999  1370                        ;ORA #%00000100 ; $1000
02000  1370                        ;ORA #%00000110 ; $1800
02001  1370  09 08                 ORA #%00001000 ; $2000
02002  1372                        ;ORA #%00001010 ; $2800
02003  1372                        ;ORA #%00001100 ; $3000
02004  1372                        ;ORA #%00001110 ; $3800
02005  1372  8D 18 D0              STA $D018
02006  1375             
02007  1375                        ;JSR CONSOLE.CLEAR$
02008  1375             
02009  1375  60                    RTS
02010  1376             
02011  1376             ;ALIGN $100
02012  1376             
02013  1376             CONSOLE.CLEAR$ 
02014  1376  A2 00                 LDX #$00
02015  1378  A9 20                 LDA #$20
02016  137A             @LOOP
02017  137A  9D 00 04              STA CONSOLE.MEMORYADDRESS,X
02018  137D  9D 00 05              STA CONSOLE.MEMORYADDRESS+$100,X
02019  1380  9D 00 06              STA CONSOLE.MEMORYADDRESS+$200,X
02020  1383  9D 00 07              STA CONSOLE.MEMORYADDRESS+$300,X
02021  1386  CA                    DEX
02022  1387  D0 F1                 BNE @LOOP
02023  1389             
02024  1389  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
02025  138B  8D EE 12              STA CONSOLE.CURRENTADDRESS
02026  138E  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
02027  1390  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
02028  1393             
02029  1393  A9 00                 LDA #<CONSOLE.COLORADDRESS
02030  1395  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
02031  1398  A9 D8                 LDA #>CONSOLE.COLORADDRESS
02032  139A  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
02033  139D             
02034  139D  A9 00                 LDA #$00
02035  139F  8D F1 12              STA CONSOLE.CURRENTROW
02036  13A2  8D F0 12              STA CONSOLE.CURRENTCOLUMN
02037  13A5             
02038  13A5  60                    RTS
02039  13A6             
02040  13A6             CONSOLE.GETROW.ROW$ = $73 ; 1 BYTE
02041  13A6             CONSOLE.GETROW$ 
02042  13A6  AD F1 12              LDA CONSOLE.CURRENTROW
02043  13A9  85 73                 STA CONSOLE.GETROW.ROW$
02044  13AB  60                    RTS
02045  13AC             
02046  13AC             CONSOLE.SETROW.ROW$ = $73 ; 1 BYTE
02047  13AC             CONSOLE.SETROW$ 
02048  13AC  A5 73                 LDA CONSOLE.SETROW.ROW$
02049  13AE  8D F1 12              STA CONSOLE.CURRENTROW
02050  13B1  20 C4 13              JSR CONSOLE.CALC_CURRENTADDRESS
02051  13B4  60                    RTS
02052  13B5             
02053  13B5             CONSOLE.GETCOLUMN.COLUMN$ = $73 ; 1 BYTE
02054  13B5             CONSOLE.GETCOLUMN$ 
02055  13B5  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
02056  13B8  85 73                 STA CONSOLE.GETCOLUMN.COLUMN$
02057  13BA  60                    RTS
02058  13BB             
02059  13BB             CONSOLE.SETCOLUMN.COLUMN$ = $73 ; 1 BYTE
02060  13BB             CONSOLE.SETCOLUMN$ 
02061  13BB  A5 73                 LDA CONSOLE.SETCOLUMN.COLUMN$
02062  13BD  8D F0 12              STA CONSOLE.CURRENTCOLUMN
02063  13C0  20 C4 13              JSR CONSOLE.CALC_CURRENTADDRESS
02064  13C3  60                    RTS
02065  13C4             
02066  13C4             CONSOLE.CALC_CURRENTADDRESS.SUM = $74 ; 2 BYTES
02067  13C4             CONSOLE.CALC_CURRENTADDRESS 
02068  13C4                        ; CACULATE CONSOLE.CURRENTADDRESS BY THE UPDATED ROW AND COLUMN VALUES.
02069  13C4             
02070  13C4                        ; CONSOLE.CURRENTADDRESS = CONSOLE.MEMORYADDRESS + ((COLUMN) + (ROW * 40))
02071  13C4                        ; CONSOLE.CURRENTCOLORADDR = CONSOLE.COLORADDRESS + ((COLUMN) + (ROW * 40))
02072  13C4             
02073  13C4  AD F1 12              LDA CONSOLE.CURRENTROW
02074  13C7  85 80                 STA MATH.MULTIPLY16.FACTOR1$
02075  13C9  A9 28                 LDA #40
02076  13CB  85 82                 STA MATH.MULTIPLY16.FACTOR2$
02077  13CD  A9 00                 LDA #$00
02078  13CF  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
02079  13D1  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
02080  13D3  20 67 29              JSR MATH.MULTIPLY16$ ; PRODUCT = CURRENTROW * 40
02081  13D6                        
02082  13D6  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
02083  13D8  85 80                 STA MATH.ADD16.ADDEND1$
02084  13DA  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
02085  13DC  85 81                 STA MATH.ADD16.ADDEND1$+1
02086  13DE  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
02087  13E1  85 82                 STA MATH.ADD16.ADDEND2$
02088  13E3  A9 00                 LDA #$00
02089  13E5  85 83                 STA MATH.ADD16.ADDEND2$+1
02090  13E7  20 00 28              JSR MATH.ADD16$ ; SUM = COLUMN + PRODUCT
02091  13EA  A5 84                 LDA MATH.ADD16.SUM$
02092  13EC  85 74                 STA CONSOLE.CALC_CURRENTADDRESS.SUM
02093  13EE  A5 85                 LDA MATH.ADD16.SUM$+1
02094  13F0  85 75                 STA CONSOLE.CALC_CURRENTADDRESS.SUM+1
02095  13F2                        
02096  13F2  A5 74                 LDA CONSOLE.CALC_CURRENTADDRESS.SUM
02097  13F4  85 80                 STA MATH.ADD16.ADDEND1$
02098  13F6  A5 75                 LDA CONSOLE.CALC_CURRENTADDRESS.SUM+1
02099  13F8  85 81                 STA MATH.ADD16.ADDEND1$+1
02100  13FA  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
02101  13FC  85 82                 STA MATH.ADD16.ADDEND2$
02102  13FE  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
02103  1400  85 83                 STA MATH.ADD16.ADDEND2$+1
02104  1402  20 00 28              JSR MATH.ADD16$ ; CURRENTADDRESS = MEMORYADDRESS + SUM
02105  1405  A5 84                 LDA MATH.ADD16.SUM$
02106  1407  8D EE 12              STA CONSOLE.CURRENTADDRESS
02107  140A  A5 85                 LDA MATH.ADD16.SUM$+1
02108  140C  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
02109  140F             
02110  140F                        ; CONSOLE.CURRENTCOLORADDR = CONSOLE.COLORADDRESS + SUM
02111  140F  A5 74                 LDA CONSOLE.CALC_CURRENTADDRESS.SUM
02112  1411  85 80                 STA MATH.ADD16.ADDEND1$
02113  1413  A5 75                 LDA CONSOLE.CALC_CURRENTADDRESS.SUM+1
02114  1415  85 81                 STA MATH.ADD16.ADDEND1$+1
02115  1417  A9 00                 LDA #<CONSOLE.COLORADDRESS
02116  1419  85 82                 STA MATH.ADD16.ADDEND2$
02117  141B  A9 D8                 LDA #>CONSOLE.COLORADDRESS
02118  141D  85 83                 STA MATH.ADD16.ADDEND2$+1
02119  141F  20 00 28              JSR MATH.ADD16$ ; CURRENTADDRESS = MEMORYADDRESS + SUM
02120  1422  A5 84                 LDA MATH.ADD16.SUM$
02121  1424  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
02122  1427  A5 85                 LDA MATH.ADD16.SUM$+1
02123  1429  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
02124  142C             
02125  142C  60                    RTS
02126  142D             
02127  142D             ;CONSOLE.SCROLLUP$
02128  142D             ;        ; COPY THE CHARACTERS FROM THE 2ND ROW AND OVERRIDE THE FIRST ROW.
02129  142D             ;        ; CLEAR OUT THE TEXT ON THE LAST ROW.
02130  142D             
02131  142D             ;        ;LDX #$28
02132  142D             ;        LDY #$00
02133  142D             ;@LOOP
02134  142D             ;        LDA $0428,Y
02135  142D             ;        STA $0400,Y
02136  142D             ;        LDA $0518,Y
02137  142D             ;        STA $04F0,Y
02138  142D             ;        INY
02139  142D             ;        ;CPY #215 ;(255-40)
02140  142D             ;        ;CPY #$FF
02141  142D             ;        CPY #240
02142  142D             ;        BNE @LOOP
02143  142D             
02144  142D             ;;        LDA $0500,X
02145  142D             ;;        STA $0500,Y
02146  142D             ;;        LDA $0600,X
02147  142D             ;;        STA $0600,Y
02148  142D             ;;        LDA $0700,X
02149  142D             ;;        STA $0700,Y
02150  142D             
02151  142D             ;        RTS
02152  142D             
02153  142D             ;ALIGN $100
02154  142D             
02155  142D             CONSOLE.SCROLLUP$ 
02156  142D                        ; COPY THE CHARACTERS FROM THE 2ND ROW AND OVERRIDE THE FIRST ROW.
02157  142D                        ; CLEAR OUT THE TEXT ON THE LAST ROW.
02158  142D             
02159  142D             ;        LDA #$00
02160  142D             ;        STA $FB
02161  142D             ;        LDA #$04
02162  142D             ;        STA $FC
02163  142D             ;        LDA #$28
02164  142D             ;        STA $FD
02165  142D             ;        LDA #$04
02166  142D             ;        STA $FE
02167  142D  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
02168  142F  85 FB                 STA $FB
02169  1431  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
02170  1433  85 FC                 STA $FC
02171  1435  A9 28                 LDA #<CONSOLE.MEMORYADDRESS+$28
02172  1437  85 FD                 STA $FD
02173  1439  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
02174  143B  85 FE                 STA $FE
02175  143D  20 63 14              JSR CONSOLE.SCROLLUPCHRS
02176  1440             
02177  1440                        ; NEED TO "SCROLL" UP THE CHARACTER COLORS AS WELL
02178  1440  A9 00                 LDA #<CONSOLE.COLORADDRESS
02179  1442  85 FB                 STA $FB
02180  1444  A9 D8                 LDA #>CONSOLE.COLORADDRESS
02181  1446  85 FC                 STA $FC
02182  1448  A9 28                 LDA #<CONSOLE.COLORADDRESS+$28
02183  144A  85 FD                 STA $FD
02184  144C  A9 D8                 LDA #>CONSOLE.COLORADDRESS
02185  144E  85 FE                 STA $FE
02186  1450  20 63 14              JSR CONSOLE.SCROLLUPCHRS
02187  1453             
02188  1453                        ; CLEAR THE LAST LINE
02189  1453  A9 20                 LDA #$20
02190  1455  A0 00                 LDY #$00
02191  1457             @LOOP_LR
02192  1457  99 C0 07              STA CONSOLE.MEMORYADDRESS_LR,Y
02193  145A  C8                    INY
02194  145B  C0 28                 CPY #$28
02195  145D  D0 F8                 BNE @LOOP_LR
02196  145F             
02197  145F  20 AC 30              JSR GRAPHICS.SCROLLUP
02198  1462             
02199  1462  60                    RTS
02200  1463             
02201  1463             CONSOLE.SCROLLUPCHRS 
02202  1463  A2 00                 LDX #$00
02203  1465             @LOOP1     ; DO PROCESS 4 TIMES (6*4 = 24)
02204  1465  A0 00                 LDY #$00
02205  1467             @LOOP2     ; MOVE UP 6 LINES
02206  1467  B1 FD                 LDA ($FD),Y
02207  1469  91 FB                 STA ($FB),Y
02208  146B  C8                    INY
02209  146C  C0 F0                 CPY #240 ; (40*6)
02210  146E  D0 F7                 BNE @LOOP2
02211  1470             
02212  1470  E8                    INX
02213  1471  E0 04                 CPX #4
02214  1473  F0 39                 BEQ @CLEAR_LR
02215  1475             
02216  1475                        ; NEED TO INCREASE THE VALUE OF THE ADDRESS THAT $FB AND $FD ARE POINTING TO.
02217  1475  A5 FB                 LDA $FB
02218  1477  85 80                 STA MATH.ADD16.ADDEND1$
02219  1479  A5 FC                 LDA $FC
02220  147B  85 81                 STA MATH.ADD16.ADDEND1$+1
02221  147D             
02222  147D  A9 F0                 LDA #240
02223  147F  85 82                 STA MATH.ADD16.ADDEND2$
02224  1481  A9 00                 LDA #0
02225  1483  85 83                 STA MATH.ADD16.ADDEND2$+1
02226  1485             
02227  1485  20 00 28              JSR MATH.ADD16$ ; ($FB+$FC) = ($FB+$FC) + $28
02228  1488             
02229  1488  A5 84                 LDA MATH.ADD16.SUM$
02230  148A  85 FB                 STA $FB
02231  148C  A5 85                 LDA MATH.ADD16.SUM$+1
02232  148E  85 FC                 STA $FC
02233  1490             
02234  1490  A5 FD                 LDA $FD
02235  1492  85 80                 STA MATH.ADD16.ADDEND1$
02236  1494  A5 FE                 LDA $FE
02237  1496  85 81                 STA MATH.ADD16.ADDEND1$+1
02238  1498             
02239  1498  A9 F0                 LDA #240
02240  149A  85 82                 STA MATH.ADD16.ADDEND2$
02241  149C  A9 00                 LDA #0
02242  149E  85 83                 STA MATH.ADD16.ADDEND2$+1
02243  14A0             
02244  14A0  20 00 28              JSR MATH.ADD16$ ; ($FD+$FE) = ($FD+$FE) + $28
02245  14A3             
02246  14A3  A5 84                 LDA MATH.ADD16.SUM$
02247  14A5  85 FD                 STA $FD
02248  14A7  A5 85                 LDA MATH.ADD16.SUM$+1
02249  14A9  85 FE                 STA $FE
02250  14AB             
02251  14AB  4C 65 14              JMP @LOOP1
02252  14AE             
02253  14AE             @CLEAR_LR
02254  14AE             ;        LDA #$20
02255  14AE             ;        LDY #$00
02256  14AE             ;@LOOP_LR
02257  14AE             ;        STA CONSOLE.MEMORYADDRESS_LR,Y
02258  14AE             ;        INY
02259  14AE             ;        CPY #$28
02260  14AE             ;        BNE @LOOP_LR
02261  14AE             
02262  14AE  60                    RTS
02263  14AF             
02264  14AF             
02265  14AF             CONSOLE.WRITELN$ 
02266  14AF  A9 FE                 LDA #CONSOLE.NEWLINE$
02267  14B1  85 02                 STA CONSOLE.WRITECHR.CHAR$
02268  14B3  20 19 15              JSR CONSOLE.WRITECHR$
02269  14B6  60                    RTS
02270  14B7             
02271  14B7             CONSOLE.WRITESTR.STRADDRESS$ = $E0 ; 2 BYTES
02272  14B7             
02273  14B7             CONSOLE.WRITESTR$ 
02274  14B7                        ; PRINT EACH CHARACTER TO THE SCREEN
02275  14B7  A0 00                 LDY #$00
02276  14B9             @LOOP
02277  14B9  B1 E0                 LDA (CONSOLE.WRITESTR.STRADDRESS$),Y
02278  14BB                        ;CMP #$00
02279  14BB  C9 FF                 CMP #CONSOLE.NULL$
02280  14BD  F0 0F                 BEQ @END
02281  14BF  85 02                 STA CONSOLE.WRITECHR.CHAR$
02282  14C1  20 19 15              JSR CONSOLE.WRITECHR$
02283  14C4  C8                    INY
02284  14C5  C0 00                 CPY #$00
02285  14C7  D0 F0                 BNE @LOOP
02286  14C9  E6 E1                 INC CONSOLE.WRITESTR.STRADDRESS$+1
02287  14CB  4C B9 14              JMP @LOOP
02288  14CE             @END
02289  14CE  60                    RTS
02290  14CF             
02291  14CF             ;ALIGN $100
02292  14CF             
02293  14CF             CONSOLE.WRITEINT8.INTEGER$ = $E0 ; 1 BYTE
02294  14CF             CONSOLE.WRITEINT8$ 
02295  14CF  20 00 1C              JSR CONVERT.HEX2DEC8
02296  14D2  A2 02                 LDX #2 ; MAX. LENGTH - 1
02297  14D4  4C 00 15              JMP CONSOLE.WRITEINT
02298  14D7             
02299  14D7             CONSOLE.WRITEINT16.INTEGER$ = $E0 ; 2 BYTES
02300  14D7             CONSOLE.WRITEINT16$ 
02301  14D7  20 1F 1C              JSR CONVERT.HEX2DEC16
02302  14DA  A2 04                 LDX #4 ; MAX. LENGTH - 1
02303  14DC  4C 00 15              JMP CONSOLE.WRITEINT
02304  14DF             
02305  14DF             CONSOLE.WRITEINT32.INTEGER$ = $E0 ; 4 BYTES
02306  14DF             CONSOLE.WRITEINT32$ 
02307  14DF  20 40 1C              JSR CONVERT.HEX2DEC32
02308  14E2  A2 09                 LDX #9 ; MAX. LENGTH - 1
02309  14E4  4C 00 15              JMP CONSOLE.WRITEINT
02310  14E7             
02311  14E7             ALIGN      $100
02312  1500             
02313  1500             CONSOLE.WRITEINT 
02314  1500             @L1        
02315  1500  B5 E4                 LDA CONVERT.HEX2DEC.RESULT,X
02316  1502  D0 03                 BNE @L2
02317  1504  CA                    DEX             ; SKIP LEADING ZEROS
02318  1505  D0 F9                 BNE @L1
02319  1507             
02320  1507             @L2
02321  1507  A0 00                 LDY #$00
02322  1509             @LOOP
02323  1509  B5 E4                 LDA CONVERT.HEX2DEC.RESULT,X
02324  150B  09 30                 ORA #$30  ;(CONVERT TO ASCII)
02325  150D                        ;STA CONSOLE.MEMORYADDRESS,Y
02326  150D  85 02                 STA CONSOLE.WRITECHR.CHAR$
02327  150F  20 19 15              JSR CONSOLE.WRITECHR$
02328  1512  C8                    INY
02329  1513  CA                    DEX
02330  1514  10 F3                 BPL @LOOP
02331  1516  60                    RTS
02332  1517             
02333  1517             ;ALIGN $100
02334  1517             
02335  1517             CONSOLE.NEWLINE$ = $FE
02336  1517             CONSOLE.NULL$ = $FF
02337  1517             CONSOLE.BACKSPACE$ = $FD
02338  1517             CONSOLE.QUOTE$ = $27
02339  1517             
02340  1517             CONSOLE.WRITECHR.CHAR$ = $02 ; 1 BYTE
02341  1517             CONSOLE.WRITECHR.ADDRESS = $FB ; 2 BYTES
02342  1517  00 00      CONSOLE.WRITECHR.OFFSET WORD $0000
02343  1519             CONSOLE.WRITECHR$ 
02344  1519                        ; PRINTS AN INDIVIDUAL CHARACTER TO THE SCREEN.
02345  1519                        ; THE CHARACTER TO PRINT IS STORED IN A.
02346  1519             
02347  1519                        ;STA CONSOLE.WRITECHR.CHAR$
02348  1519             
02349  1519             ;        PHA ; SAVE A ONTO STACK.
02350  1519             ;        TXA
02351  1519             ;        PHA ; SAVE X ONTO STACK.
02352  1519             ;        TYA
02353  1519             ;        PHA ; SAVE Y ONTO STACK.
02354  1519  20 37 10              JSR MEMORY.PUSHREGS$
02355  151C             
02356  151C                        ; SET THE COLOR OF THIS CHARACTER.
02357  151C  A0 00                 LDY #$00
02358  151E  AD F2 12              LDA CONSOLE.CURRENTCOLORADDR
02359  1521  85 FB                 STA CONSOLE.WRITECHR.ADDRESS
02360  1523  AD F3 12              LDA CONSOLE.CURRENTCOLORADDR+1
02361  1526  85 FC                 STA CONSOLE.WRITECHR.ADDRESS+1
02362  1528             
02363  1528  AD F4 12              LDA CONSOLE.CHARACTERCOLOR
02364  152B  91 FB                 STA (CONSOLE.WRITECHR.ADDRESS),Y
02365  152D             
02366  152D                        ; WRITE THE CHARACTER TO THE SCREEN MEMORY.
02367  152D  A0 00                 LDY #$00
02368  152F  AD EE 12              LDA CONSOLE.CURRENTADDRESS
02369  1532  85 FB                 STA CONSOLE.WRITECHR.ADDRESS
02370  1534  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
02371  1537  85 FC                 STA CONSOLE.WRITECHR.ADDRESS+1
02372  1539             
02373  1539                        ; IF {RETURN} DETECTED THEN WE NEED TO START AT THE BEGINNING OF THE NEXT ROW.
02374  1539  A5 02                 LDA CONSOLE.WRITECHR.CHAR$
02375  153B  C9 FE                 CMP #CONSOLE.NEWLINE$
02376  153D  F0 1C                 BEQ @DO_NEWLINE
02377  153F             
02378  153F                        ; IF {DELETE} DETECTED THEN WE NEED TO PERFORM A BACKSPACE OPERATION.
02379  153F  A5 02                 LDA CONSOLE.WRITECHR.CHAR$
02380  1541  C9 FD                 CMP #CONSOLE.BACKSPACE$
02381  1543  F0 36                 BEQ @DO_BACKSPACE
02382  1545             
02383  1545                        ; INVERT THE CHARACTER AS NEEDED.
02384  1545  18                    CLC
02385  1546  6D F5 12              ADC CONSOLE.CHARACTERSINVERTED
02386  1549             
02387  1549             ;        LDA GRAPHICS.ISACTIVE$
02388  1549             ;        CMP #$01
02389  1549             ;        BEQ @DRAWCHR
02390  1549             ;        STA (CONSOLE.WRITECHR.ADDRESS),Y
02391  1549             ;        JMP @SKIPDRAWCHR
02392  1549             ;@DRAWCHR
02393  1549             ;        JSR GRAPHICS.DRAWCHR
02394  1549             ;@SKIPDRAWCHR
02395  1549  91 FB                 STA (CONSOLE.WRITECHR.ADDRESS),Y
02396  154B  20 CA 2F              JSR GRAPHICS.DRAWCHR
02397  154E             
02398  154E                        ;LDY #$01
02399  154E  A9 01                 LDA #$01
02400  1550  8D 17 15              STA CONSOLE.WRITECHR.OFFSET
02401  1553  A9 00                 LDA #$00
02402  1555  8D 18 15              STA CONSOLE.WRITECHR.OFFSET+1
02403  1558             
02404  1558  4C A5 15              JMP CONSOLE.INC_MEMADDRESS
02405  155B             
02406  155B             ;@INC_MEMADDRESS
02407  155B             ;        ; UPDATE CONSOLE.CURRENTADDRESS
02408  155B             ;        LDA CONSOLE.WRITECHR.ADDRESS
02409  155B             ;        STA MATH.ADD16.ADDEND1$
02410  155B             ;        LDA CONSOLE.WRITECHR.ADDRESS+1
02411  155B             ;        STA MATH.ADD16.ADDEND1$+1
02412  155B             
02413  155B             ;        ;LDA #$01
02414  155B             ;        ;TYA
02415  155B             ;        LDA CONSOLE.WRITECHR.OFFSET
02416  155B             ;        STA MATH.ADD16.ADDEND2$
02417  155B             ;        LDA CONSOLE.WRITECHR.OFFSET+1
02418  155B             ;        STA MATH.ADD16.ADDEND2$+1
02419  155B             
02420  155B             ;        JSR MATH.ADD16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS + 1
02421  155B             ;
02422  155B             ;        LDA MATH.ADD16.SUM$
02423  155B             ;        STA CONSOLE.CURRENTADDRESS
02424  155B             ;        LDA MATH.ADD16.SUM$+1
02425  155B             ;        STA CONSOLE.CURRENTADDRESS+1
02426  155B             ;
02427  155B             ;        ; UPDATE CONSOLE.CURRENTCOLORADDR
02428  155B             ;        LDA CONSOLE.CURRENTCOLORADDR
02429  155B             ;        STA MATH.ADD16.ADDEND1$
02430  155B             ;        LDA CONSOLE.CURRENTCOLORADDR+1
02431  155B             ;        STA MATH.ADD16.ADDEND1$+1
02432  155B             
02433  155B             ;        LDA CONSOLE.WRITECHR.OFFSET
02434  155B             ;        STA MATH.ADD16.ADDEND2$
02435  155B             ;        LDA CONSOLE.WRITECHR.OFFSET+1
02436  155B             ;        STA MATH.ADD16.ADDEND2$+1
02437  155B             
02438  155B             ;        JSR MATH.ADD16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS + 1
02439  155B             ;
02440  155B             ;        LDA MATH.ADD16.SUM$
02441  155B             ;        STA CONSOLE.CURRENTCOLORADDR
02442  155B             ;        LDA MATH.ADD16.SUM$+1
02443  155B             ;        STA CONSOLE.CURRENTCOLORADDR+1
02444  155B             ;
02445  155B             ;        ; INCREASE THE CURRENT COLUMN NUMBER
02446  155B             ;        LDA CONSOLE.CURRENTCOLUMN
02447  155B             ;        CMP #39
02448  155B             ;        BNE @INC_CURRENTCOLUMN
02449  155B             
02450  155B             ;@RESET_LR
02451  155B             ;        ; RESET THE CURRENT COLUMN
02452  155B             ;        LDA #$FF
02453  155B             ;        STA CONSOLE.CURRENTCOLUMN
02454  155B             
02455  155B             ;        ; INCREASE THE CURRENT ROW NUMBER
02456  155B             ;        LDA CONSOLE.CURRENTROW
02457  155B             ;        CMP #24
02458  155B             ;        BNE @INC_CURRENTROW
02459  155B             ;
02460  155B             ;        ; SCROLL ALL TEXT UP ONE ROW
02461  155B             ;        LDA #23
02462  155B             ;        STA CONSOLE.CURRENTROW
02463  155B             
02464  155B             ;        ; NEED TO SCROLL THE CHARCTERS UP ONE ROW.
02465  155B             ;        JSR CONSOLE.SCROLLUP$
02466  155B             
02467  155B             ;        ; UPDATE THE ADDRESS
02468  155B             ;        LDA #<CONSOLE.MEMORYADDRESS_LR
02469  155B             ;        STA CONSOLE.CURRENTADDRESS
02470  155B             ;        LDA #>CONSOLE.MEMORYADDRESS_LR
02471  155B             ;        STA CONSOLE.CURRENTADDRESS+1
02472  155B             
02473  155B             ;@INC_CURRENTROW
02474  155B             ;        INC CONSOLE.CURRENTROW
02475  155B             
02476  155B             ;@INC_CURRENTCOLUMN
02477  155B             ;        INC CONSOLE.CURRENTCOLUMN
02478  155B             
02479  155B             ;        JMP @END
02480  155B             
02481  155B             @DO_NEWLINE 
02482  155B                        ; WE NEED TO INCREASE THE CURRENT ADDRESS BY THE DIFFERENCE OF THE NUMBER OF COLUMNS REMAINING
02483  155B             
02484  155B  AD F1 12              LDA CONSOLE.CURRENTROW
02485  155E  C9 18                 CMP #24
02486  1560  F0 16                 BEQ @RESET_LR
02487  1562                        ;BEQ CONSOLE.INC_MEMADDRESS.RESET_LR
02488  1562             
02489  1562  A9 28                 LDA #40
02490  1564  38                    SEC
02491  1565  ED F0 12              SBC CONSOLE.CURRENTCOLUMN
02492  1568                        ;TAY ; STORE THE NUMBER OF COLUMNS WE NEED TO ADD TO GET THE NEXT ROW
02493  1568  8D 17 15              STA CONSOLE.WRITECHR.OFFSET
02494  156B  A9 00                 LDA #0
02495  156D  8D 18 15              STA CONSOLE.WRITECHR.OFFSET+1
02496  1570             
02497  1570                        ; RESET CONSOLE.CURRENTCOLUMN
02498  1570  A9 27                 LDA #39
02499  1572  8D F0 12              STA CONSOLE.CURRENTCOLUMN
02500  1575             
02501  1575  4C A5 15              JMP CONSOLE.INC_MEMADDRESS
02502  1578             
02503  1578             @RESET_LR
02504  1578  4C F1 15              JMP CONSOLE.INC_MEMADDRESS.RESET_LR
02505  157B             
02506  157B             @DO_BACKSPACE 
02507  157B                        ; WE NEED TO DECREASE THE CURRENT ADDRESS BY 1 AND CLEAR THE CURRENT TEXT.
02508  157B                        ; IF WE ARE AT THE STARTING MEMORY ADDRESS THEN CANNOT GO BACK ANY FUTHER.
02509  157B             
02510  157B  A9 01                 LDA #$01
02511  157D  8D 17 15              STA CONSOLE.WRITECHR.OFFSET
02512  1580  A9 00                 LDA #$00
02513  1582  8D 18 15              STA CONSOLE.WRITECHR.OFFSET+1
02514  1585                        
02515  1585                        ; DO NOT MOVE BACKWARDS OF THE LOCATION IS AT THE BEGINNING OF THE CARET STARTING ADDRESS.
02516  1585  AD EE 12              LDA CONSOLE.CURRENTADDRESS
02517  1588  85 80                 STA MATH.CMP16.NUM1$
02518  158A  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
02519  158D  85 81                 STA MATH.CMP16.NUM1$+1
02520  158F             
02521  158F  AD 73 18              LDA CONSOLE.CARETSTARTADDRESS
02522  1592  85 82                 STA MATH.CMP16.NUM2$
02523  1594  AD 74 18              LDA CONSOLE.CARETSTARTADDRESS+1
02524  1597  85 83                 STA MATH.CMP16.NUM2$+1
02525  1599             
02526  1599  20 E4 28              JSR MATH.CMP16$ ; IF CONSOLE.CURRENTADDRESS = CONSOLE.CARETSTARTADDRESS THEN EXIT
02527  159C  F0 03                 BEQ @END
02528  159E             
02529  159E             ;        LDA CONSOLE.CURRENTROW
02530  159E             ;        CMP #0
02531  159E             ;        BNE @DEC_MEMADDRESS
02532  159E             
02533  159E             ;        LDA CONSOLE.CURRENTCOLUMN
02534  159E             ;        CMP #0
02535  159E             ;        BNE @DEC_MEMADDRESS
02536  159E             
02537  159E             ;        JMP @END
02538  159E             
02539  159E             ;@DEC_MEMADDRESS
02540  159E  4C 26 16              JMP CONSOLE.DEC_MEMADDRESS
02541  15A1             
02542  15A1             @END
02543  15A1             ;        PLA ; SAVE Y ONTO STACK.
02544  15A1             ;        TAY
02545  15A1             ;        PLA ; SAVE X ONTO STACK.
02546  15A1             ;        TAX
02547  15A1             ;        PLA ; SAVE A ONTO STACK.
02548  15A1  20 4D 10              JSR MEMORY.PULLREGS$
02549  15A4             
02550  15A4  60                    RTS
02551  15A5             
02552  15A5             CONSOLE.INC_MEMADDRESS 
02553  15A5             
02554  15A5                        ; UPDATE CONSOLE.CURRENTADDRESS
02555  15A5  AD EE 12              LDA CONSOLE.CURRENTADDRESS
02556  15A8  85 80                 STA MATH.ADD16.ADDEND1$
02557  15AA  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
02558  15AD  85 81                 STA MATH.ADD16.ADDEND1$+1
02559  15AF             
02560  15AF                        ;LDA #$01
02561  15AF                        ;TYA
02562  15AF  AD 17 15              LDA CONSOLE.WRITECHR.OFFSET
02563  15B2  85 82                 STA MATH.ADD16.ADDEND2$
02564  15B4  AD 18 15              LDA CONSOLE.WRITECHR.OFFSET+1
02565  15B7  85 83                 STA MATH.ADD16.ADDEND2$+1
02566  15B9             
02567  15B9  20 00 28              JSR MATH.ADD16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS + 1
02568  15BC                        
02569  15BC  A5 84                 LDA MATH.ADD16.SUM$
02570  15BE  8D EE 12              STA CONSOLE.CURRENTADDRESS
02571  15C1  A5 85                 LDA MATH.ADD16.SUM$+1
02572  15C3  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
02573  15C6                        
02574  15C6                        ; UPDATE CONSOLE.CURRENTCOLORADDR
02575  15C6  AD F2 12              LDA CONSOLE.CURRENTCOLORADDR
02576  15C9  85 80                 STA MATH.ADD16.ADDEND1$
02577  15CB  AD F3 12              LDA CONSOLE.CURRENTCOLORADDR+1
02578  15CE  85 81                 STA MATH.ADD16.ADDEND1$+1
02579  15D0             
02580  15D0  AD 17 15              LDA CONSOLE.WRITECHR.OFFSET
02581  15D3  85 82                 STA MATH.ADD16.ADDEND2$
02582  15D5  AD 18 15              LDA CONSOLE.WRITECHR.OFFSET+1
02583  15D8  85 83                 STA MATH.ADD16.ADDEND2$+1
02584  15DA             
02585  15DA  20 00 28              JSR MATH.ADD16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS + 1
02586  15DD                        
02587  15DD  A5 84                 LDA MATH.ADD16.SUM$
02588  15DF  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
02589  15E2  A5 85                 LDA MATH.ADD16.SUM$+1
02590  15E4  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
02591  15E7                        
02592  15E7                        ; INCREASE THE CURRENT COLUMN NUMBER
02593  15E7  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
02594  15EA  C9 27                 CMP #39
02595  15EC                        ;BNE CONSOLE.INC_MEMADDRESS.INC_CURRENTCOLUMN
02596  15EC  F0 03                 BEQ CONSOLE.INC_MEMADDRESS.RESET_LR
02597  15EE  4C 1F 16              JMP CONSOLE.INC_MEMADDRESS.INC_CURRENTCOLUMN
02598  15F1                        
02599  15F1             
02600  15F1             ;@RESET_LR
02601  15F1             CONSOLE.INC_MEMADDRESS.RESET_LR 
02602  15F1                        ; RESET THE CURRENT COLUMN
02603  15F1  A9 FF                 LDA #$FF
02604  15F3  8D F0 12              STA CONSOLE.CURRENTCOLUMN
02605  15F6             
02606  15F6                        ; INCREASE THE CURRENT ROW NUMBER
02607  15F6  AD F1 12              LDA CONSOLE.CURRENTROW
02608  15F9  C9 18                 CMP #24
02609  15FB                        ;BNE CONSOLE.INC_MEMADDRESS.INC_CURRENTROW
02610  15FB  F0 03                 BEQ CONSOLE.INC_MEMADDRESS.INC_CURRENTROW_SKIP
02611  15FD  4C 1C 16              JMP CONSOLE.INC_MEMADDRESS.INC_CURRENTROW
02612  1600             CONSOLE.INC_MEMADDRESS.INC_CURRENTROW_SKIP 
02613  1600                        
02614  1600                        ; SCROLL ALL TEXT UP ONE ROW
02615  1600  A9 17                 LDA #23
02616  1602  8D F1 12              STA CONSOLE.CURRENTROW
02617  1605             
02618  1605                        ; NEED TO SCROLL THE CHARCTERS UP ONE ROW.
02619  1605  20 2D 14              JSR CONSOLE.SCROLLUP$
02620  1608             
02621  1608                        ; UPDATE THE ADDRESS
02622  1608  A9 C0                 LDA #<CONSOLE.MEMORYADDRESS_LR
02623  160A  8D EE 12              STA CONSOLE.CURRENTADDRESS
02624  160D  A9 07                 LDA #>CONSOLE.MEMORYADDRESS_LR
02625  160F  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
02626  1612             
02627  1612                        ; UPDATE THE ADDRESS
02628  1612  A9 C0                 LDA #<CONSOLE.COLORADDRESS_LR
02629  1614  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
02630  1617  A9 DB                 LDA #>CONSOLE.COLORADDRESS_LR
02631  1619  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
02632  161C             
02633  161C             CONSOLE.INC_MEMADDRESS.INC_CURRENTROW 
02634  161C  EE F1 12              INC CONSOLE.CURRENTROW
02635  161F             
02636  161F             CONSOLE.INC_MEMADDRESS.INC_CURRENTCOLUMN 
02637  161F  EE F0 12              INC CONSOLE.CURRENTCOLUMN
02638  1622             
02639  1622                        ;JMP CONSOLE.INC_MEMADDRESS.END
02640  1622             
02641  1622             CONSOLE.INC_MEMADDRESS.END 
02642  1622  20 4D 10              JSR MEMORY.PULLREGS$
02643  1625  60                    RTS
02644  1626             
02645  1626             ;ALIGN $100
02646  1626             
02647  1626             CONSOLE.DEC_MEMADDRESS 
02648  1626             
02649  1626                        ; UPDATE CONSOLE.CURRENTADDRESS
02650  1626  AD EE 12              LDA CONSOLE.CURRENTADDRESS
02651  1629  85 80                 STA MATH.SUBTRACT16.MENUEND$
02652  162B  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
02653  162E  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
02654  1630             
02655  1630  AD 17 15              LDA CONSOLE.WRITECHR.OFFSET
02656  1633  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
02657  1635  AD 18 15              LDA CONSOLE.WRITECHR.OFFSET+1
02658  1638  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
02659  163A             
02660  163A  20 96 28              JSR MATH.SUBTRACT16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS - 1
02661  163D                        
02662  163D  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
02663  163F  8D EE 12              STA CONSOLE.CURRENTADDRESS
02664  1642  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
02665  1644  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
02666  1647                        
02667  1647                        ; UPDATE CONSOLE.CURRENTCOLORADDR
02668  1647  AD F2 12              LDA CONSOLE.CURRENTCOLORADDR
02669  164A  85 80                 STA MATH.SUBTRACT16.MENUEND$
02670  164C  AD F3 12              LDA CONSOLE.CURRENTCOLORADDR+1
02671  164F  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
02672  1651             
02673  1651  AD 17 15              LDA CONSOLE.WRITECHR.OFFSET
02674  1654  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
02675  1656  AD 18 15              LDA CONSOLE.WRITECHR.OFFSET+1
02676  1659  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
02677  165B             
02678  165B  20 96 28              JSR MATH.SUBTRACT16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS - 1
02679  165E                        
02680  165E  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
02681  1660  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
02682  1663  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
02683  1665  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
02684  1668                        
02685  1668                        ; DECREASE THE CURRENT COLUMN NUMBER
02686  1668  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
02687  166B  C9 00                 CMP #0
02688  166D  D0 21                 BNE CONSOLE.DEC_MEMADDRESS.DEC_CURRENTCOLUMN
02689  166F             
02690  166F             CONSOLE.DEC_MEMADDRESS.RESET_LR 
02691  166F                        ; RESET THE CURRENT COLUMN
02692  166F                        ;LDA #$39
02693  166F  A9 28                 LDA #$28
02694  1671  8D F0 12              STA CONSOLE.CURRENTCOLUMN
02695  1674             
02696  1674                        ; DESCREASE THE CURRENT ROW NUMBER
02697  1674  AD F1 12              LDA CONSOLE.CURRENTROW
02698  1677  C9 00                 CMP #0
02699  1679  D0 12                 BNE CONSOLE.DEC_MEMADDRESS.DEC_CURRENTROW
02700  167B             
02701  167B  A9 00                 LDA #0
02702  167D  8D F0 12              STA CONSOLE.CURRENTCOLUMN
02703  1680             
02704  1680                        ; UPDATE THE ADDRESS
02705  1680  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
02706  1682  8D EE 12              STA CONSOLE.CURRENTADDRESS
02707  1685  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
02708  1687  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
02709  168A                        
02710  168A  4C 93 16              JMP CONSOLE.DEC_MEMADDRESS.END
02711  168D             
02712  168D             CONSOLE.DEC_MEMADDRESS.DEC_CURRENTROW 
02713  168D  CE F1 12              DEC CONSOLE.CURRENTROW
02714  1690             
02715  1690             CONSOLE.DEC_MEMADDRESS.DEC_CURRENTCOLUMN 
02716  1690  CE F0 12              DEC CONSOLE.CURRENTCOLUMN
02717  1693             
02718  1693             CONSOLE.DEC_MEMADDRESS.END 
02719  1693             
02720  1693  20 4D 10              JSR MEMORY.PULLREGS$
02721  1696  60                    RTS
02722  1697             
02723  1697             ;ALIGN $100
02724  1697             
02725  1697             CONSOLE.SETBACKGROUNDCOLOR.COLOR$ = $73 ; 1 BYTE
02726  1697             CONSOLE.SETBACKGROUNDCOLOR$ 
02727  1697  A5 73                 LDA CONSOLE.SETBACKGROUNDCOLOR.COLOR$
02728  1699  8D 21 D0              STA $D021
02729  169C  60                    RTS
02730  169D             
02731  169D             CONSOLE.SETBORDERCOLOR.COLOR$ = $73 ; 1 BYTE
02732  169D             CONSOLE.SETBORDERCOLOR$ 
02733  169D  A5 73                 LDA CONSOLE.SETBORDERCOLOR.COLOR$
02734  169F  8D 20 D0              STA $D020
02735  16A2  60                    RTS
02736  16A3             
02737  16A3             CONSOLE.SETFOREGROUNDCOLOR.COLOR$ = $73 ; 1 BYTE
02738  16A3             CONSOLE.SETFOREGROUNDCOLOR$ 
02739  16A3  A5 73                 LDA CONSOLE.SETFOREGROUNDCOLOR.COLOR$
02740  16A5  A2 00                 LDX #$00
02741  16A7             @LOOP
02742  16A7  9D 00 D8              STA CONSOLE.COLORADDRESS,X
02743  16AA  9D 00 D9              STA CONSOLE.COLORADDRESS+$100,X
02744  16AD  9D 00 DA              STA CONSOLE.COLORADDRESS+$200,X
02745  16B0  9D 00 DB              STA CONSOLE.COLORADDRESS+$300,X
02746  16B3  CA                    DEX
02747  16B4  D0 F1                 BNE @LOOP
02748  16B6  60                    RTS
02749  16B7             
02750  16B7             ;CONSOLE.SETCHRFORECOLOR.COLOR$ = $73 ; 1 BYTES
02751  16B7             ;CONSOLE.SETCHRFORECOLOR$
02752  16B7             ;        ; GET THE COLOR AT THE CONSOLE'S CURRENT MEMORY ADDRESS.
02753  16B7             ;        ; AND THE FORECOLOR WITH ZEROS.
02754  16B7             ;        ; OR THE FORECOLOR WITH THE NEW COLOR.
02755  16B7             ;        ; PUT THE NEW COLOR AT THE CONSOLE'S CURRENT MEMORY ADDRESS.
02756  16B7             
02757  16B7             ;        LDA CONSOLE.COLORADDRESS
02758  16B7             ;        AND #%11110000 ; CLEAR THE LOW BITS
02759  16B7             ;        ORA CONSOLE.SETCHRFORECOLOR.COLOR$ ; SET THE LOW BITS
02760  16B7             ;        STA CONSOLE.COLORADDRESS
02761  16B7             
02762  16B7             ;        RTS
02763  16B7             
02764  16B7             ; THIS IS NOT POSSIBLE USING THE VIC CHIP!
02765  16B7             ;CONSOLE.SETCHRBACKCOLOR.COLOR$ = $73 ; 1 BYTES
02766  16B7             ;CONSOLE.SETCHRBACKCOLOR$
02767  16B7             ;        ; NEED TO SHIFT THE BACKCOLOR TO THE LEFT 4 BITS.
02768  16B7             ;        ; GET THE COLOR AT THE CONSOLE'S CURRENT MEMORY ADDRESS.
02769  16B7             ;        ; AND THE BACKCOLOR WITH ZEROS.
02770  16B7             ;        ; OR THE BACKCOLOR WITH THE NEW COLOR.
02771  16B7             ;        ; PUT THE NEW COLOR AT THE CONSOLE'S CURRENT MEMORY ADDRESS.
02772  16B7             
02773  16B7             ;        ; SHIFT THE BITS TO THE LEFT 4 TIMES (LO->HI)
02774  16B7             ;        ASL CONSOLE.SETCHRBACKCOLOR.COLOR$
02775  16B7             ;        ASL CONSOLE.SETCHRBACKCOLOR.COLOR$
02776  16B7             ;        ASL CONSOLE.SETCHRBACKCOLOR.COLOR$
02777  16B7             ;        ASL CONSOLE.SETCHRBACKCOLOR.COLOR$
02778  16B7             
02779  16B7             ;        LDA CONSOLE.COLORADDRESS
02780  16B7             ;        AND #%00001111 ; CLEAR THE HIGH BITS
02781  16B7             ;        ORA CONSOLE.SETCHRBACKCOLOR.COLOR$ ; SET THE HIGH BITS
02782  16B7             ;        STA CONSOLE.COLORADDRESS
02783  16B7             
02784  16B7             ;        RTS
02785  16B7             
02786  16B7             CONSOLE.SETCHARACTERCOLOR.COLOR$ = $73 ; 1 BYTE
02787  16B7             CONSOLE.SETCHARACTERCOLOR$ 
02788  16B7  A5 73                 LDA CONSOLE.SETCHARACTERCOLOR.COLOR$
02789  16B9  8D F4 12              STA CONSOLE.CHARACTERCOLOR
02790  16BC  60                    RTS
02791  16BD             
02792  16BD             CONSOLE.SETCHARACTERINVERTED.VALUE$ = $73 ; 1 BYTE
02793  16BD             CONSOLE.SETCHARACTERINVERTED$ 
02794  16BD  A5 73                 LDA CONSOLE.SETCHARACTERINVERTED.VALUE$
02795  16BF  C9 01                 CMP #1
02796  16C1  F0 05                 BEQ @SET
02797  16C3             @UNSET
02798  16C3  A9 00                 LDA #$00
02799  16C5  4C CA 16              JMP @END
02800  16C8             @SET
02801  16C8  A9 80                 LDA #$80
02802  16CA             @END
02803  16CA  8D F5 12              STA CONSOLE.CHARACTERSINVERTED
02804  16CD  60                    RTS
02805  16CE             
02806  16CE             
02807  16CE             CONSOLE.READCHR.CARET ; SEPARATE ROUTINE BECAUSE BRANCHES WEREN'T WORKING
02808  16CE                        ; GET THE CURRENT TICKS
02809  16CE  20 D5 1D              JSR TIME.GETTICKS$
02810  16D1             
02811  16D1  A5 73                 LDA TIME.GETTICKS.RESULT$
02812  16D3  85 80                 STA MATH.CMP32.NUM1$
02813  16D5  A5 74                 LDA TIME.GETTICKS.RESULT$+1
02814  16D7  85 81                 STA MATH.CMP32.NUM1$+1
02815  16D9  A5 75                 LDA TIME.GETTICKS.RESULT$+2
02816  16DB  85 82                 STA MATH.CMP32.NUM1$+2
02817  16DD  A5 76                 LDA TIME.GETTICKS.RESULT$+3
02818  16DF  85 83                 STA MATH.CMP32.NUM1$+3
02819  16E1             
02820  16E1  A5 D4                 LDA CONSOLE.READCHR.MILLISECONDS
02821  16E3  85 84                 STA MATH.CMP32.NUM2$
02822  16E5  A5 D5                 LDA CONSOLE.READCHR.MILLISECONDS+1
02823  16E7  85 85                 STA MATH.CMP32.NUM2$+1
02824  16E9  A5 D6                 LDA CONSOLE.READCHR.MILLISECONDS+2
02825  16EB  85 86                 STA MATH.CMP32.NUM2$+2
02826  16ED  A5 D7                 LDA CONSOLE.READCHR.MILLISECONDS+3
02827  16EF  85 87                 STA MATH.CMP32.NUM2$+3
02828  16F1             
02829  16F1  20 00 29              JSR MATH.CMP32$ ; IF TICKS > (MILLISECONDS + TICKS) THEN CARRY FLAG SHOULD BE SET.
02830  16F4             
02831  16F4                        ;BCC @READKEY ; GOTO @READKEY IF TICKS < (MILLISECONDS + TICKS).
02832  16F4  B0 03                 BCS @READKEY_SKIP ; GOTO @READKEY IF TICKS < (MILLISECONDS + TICKS).
02833  16F6  4C 51 17              JMP @READKEY
02834  16F9             @READKEY_SKIP 
02835  16F9             
02836  16F9                        ; GET THE CURRENT TIME AND STORE
02837  16F9  20 D5 1D              JSR TIME.GETTICKS$
02838  16FC             
02839  16FC                        ; 500 = $01F4
02840  16FC                        ; 400 = $0190
02841  16FC  A9 90                 LDA #$90
02842  16FE  85 80                 STA MATH.ADD32.ADDEND1$
02843  1700  A9 01                 LDA #$01
02844  1702  85 81                 STA MATH.ADD32.ADDEND1$+1
02845  1704  A9 00                 LDA #$00
02846  1706  85 82                 STA MATH.ADD32.ADDEND1$+2
02847  1708  A9 00                 LDA #$00
02848  170A  85 83                 STA MATH.ADD32.ADDEND1$+3
02849  170C             
02850  170C  A5 73                 LDA TIME.GETTICKS.RESULT$
02851  170E  85 84                 STA MATH.ADD32.ADDEND2$
02852  1710  A5 74                 LDA TIME.GETTICKS.RESULT$+1
02853  1712  85 85                 STA MATH.ADD32.ADDEND2$+1
02854  1714  A5 75                 LDA TIME.GETTICKS.RESULT$+2
02855  1716  85 86                 STA MATH.ADD32.ADDEND2$+2
02856  1718  A5 76                 LDA TIME.GETTICKS.RESULT$+3
02857  171A  85 87                 STA MATH.ADD32.ADDEND2$+3
02858  171C             
02859  171C  20 22 28              JSR MATH.ADD32$
02860  171F                        
02861  171F                        ; STORE THE SUM
02862  171F  A5 88                 LDA MATH.ADD32.SUM$
02863  1721  85 D4                 STA CONSOLE.READCHR.MILLISECONDS
02864  1723  A5 89                 LDA MATH.ADD32.SUM$+1
02865  1725  85 D5                 STA CONSOLE.READCHR.MILLISECONDS+1
02866  1727  A5 8A                 LDA MATH.ADD32.SUM$+2
02867  1729  85 D6                 STA CONSOLE.READCHR.MILLISECONDS+2
02868  172B  A5 8B                 LDA MATH.ADD32.SUM$+3
02869  172D  85 D7                 STA CONSOLE.READCHR.MILLISECONDS+3
02870  172F             
02871  172F             ;        ; DELAY ADDED TO SLOW DOWN THE QUICK BACKSPACE CHARACTERS.
02872  172F             ;        ; 100 = $64
02873  172F             ;        ; 50 = $32
02874  172F             ;        LDA #$64
02875  172F             ;        STA TIME.WAIT.MILLISECONDS$
02876  172F             ;        LDA #$00
02877  172F             ;        STA TIME.WAIT.MILLISECONDS$+1
02878  172F             ;        LDA #$00
02879  172F             ;        STA TIME.WAIT.MILLISECONDS$+2
02880  172F             ;        LDA #$00
02881  172F             ;        STA TIME.WAIT.MILLISECONDS$+3
02882  172F             ;        JSR TIME.WAIT$
02883  172F             
02884  172F                        ; TOGGLE THE CARET
02885  172F  A0 00                 LDY #$00
02886  1731  A5 D8                 LDA CONSOLE.READCHR.TOGGLECARET
02887  1733  C9 01                 CMP #$01
02888  1735  F0 0F                 BEQ @CLEARCARRET
02889  1737             @SHOWCARRET 
02890  1737                        ; RENDER THE CARET AT THE CURRENT MEMORY LOCATION
02891  1737  AD 72 18              LDA CONSOLE.CARETCHAR$
02892  173A  91 D9                 STA (CONSOLE.READCHR.CARETADDRESS),Y
02893  173C  20 CA 2F              JSR GRAPHICS.DRAWCHR
02894  173F  A9 01                 LDA #$01
02895  1741  85 D8                 STA CONSOLE.READCHR.TOGGLECARET
02896  1743  4C 51 17              JMP @READKEY
02897  1746             @CLEARCARRET 
02898  1746                        ; RENDER THE CARET AT THE CURRENT MEMORY LOCATION
02899  1746  A9 20                 LDA #$20
02900  1748  91 D9                 STA (CONSOLE.READCHR.CARETADDRESS),Y
02901  174A  20 CA 2F              JSR GRAPHICS.DRAWCHR
02902  174D  A9 00                 LDA #$00
02903  174F  85 D8                 STA CONSOLE.READCHR.TOGGLECARET
02904  1751             
02905  1751             @READKEY
02906  1751  60                    RTS
02907  1752             
02908  1752  31 32 33   CONSOLE.READINT.ALLOWEDCHRS TEXT '1234567890', CONSOLE.BACKSPACE$, CONSOLE.NULL$
02909  175E             
02910  175E             CONSOLE.READINT8.INTEGER$ = $7A ; 1 BYTE
02911  175E             CONSOLE.READINT8$ 
02912  175E                        ; READ CHARACTERS FROM THE CONSOLE.
02913  175E  A9 03                 LDA #$03
02914  1760  85 EA                 STA CONSOLE.READGEN.MAXLEN
02915  1762             
02916  1762  A9 52                 LDA #<CONSOLE.READINT.ALLOWEDCHRS
02917  1764  85 EB                 STA CONSOLE.READGEN.ALLOWEDCHRS
02918  1766  A9 17                 LDA #>CONSOLE.READINT.ALLOWEDCHRS
02919  1768  85 EC                 STA CONSOLE.READGEN.ALLOWEDCHRS+1
02920  176A             
02921  176A  20 69 19              JSR CONSOLE.READGEN
02922  176D             
02923  176D                        ; CONVERT THE DECIMAL CHARACTERS TO HEXIDECIMAL.
02924  176D  20 BC 17              JSR CONSOLE.READINT.COPYMEM
02925  1770             
02926  1770  20 65 1C              JSR CONVERT.DEC2HEX8
02927  1773             
02928  1773  A5 E0                 LDA CONVERT.DEC2HEX8.RESULT
02929  1775  85 7A                 STA CONSOLE.READINT8.INTEGER$
02930  1777  60                    RTS
02931  1778             
02932  1778             CONSOLE.READINT16.INTEGER$ = $7A ; 2 BYTES
02933  1778             CONSOLE.READINT16$ 
02934  1778                        ; READ CHARACTERS FROM THE CONSOLE.
02935  1778  A9 05                 LDA #$05
02936  177A  85 EA                 STA CONSOLE.READGEN.MAXLEN
02937  177C             
02938  177C  A9 52                 LDA #<CONSOLE.READINT.ALLOWEDCHRS
02939  177E  85 EB                 STA CONSOLE.READGEN.ALLOWEDCHRS
02940  1780  A9 17                 LDA #>CONSOLE.READINT.ALLOWEDCHRS
02941  1782  85 EC                 STA CONSOLE.READGEN.ALLOWEDCHRS+1
02942  1784             
02943  1784  20 69 19              JSR CONSOLE.READGEN
02944  1787             
02945  1787                        ; CONVERT THE DECIMAL CHARACTERS TO HEXIDECIMAL.
02946  1787  20 BC 17              JSR CONSOLE.READINT.COPYMEM
02947  178A             
02948  178A  20 B9 1C              JSR CONVERT.DEC2HEX16
02949  178D             
02950  178D  A5 E0                 LDA CONVERT.DEC2HEX16.RESULT
02951  178F  85 7A                 STA CONSOLE.READINT16.INTEGER$
02952  1791  A5 E1                 LDA CONVERT.DEC2HEX16.RESULT+1
02953  1793  85 7B                 STA CONSOLE.READINT16.INTEGER$+1
02954  1795             
02955  1795  60                    RTS
02956  1796             
02957  1796             CONSOLE.READINT32.INTEGER$ = $7A ; 4 BYTES
02958  1796             CONSOLE.READINT32$ 
02959  1796                        ; READ CHARACTERS FROM THE CONSOLE.
02960  1796  A9 0A                 LDA #$0A ; 10
02961  1798  85 EA                 STA CONSOLE.READGEN.MAXLEN
02962  179A             
02963  179A  A9 52                 LDA #<CONSOLE.READINT.ALLOWEDCHRS
02964  179C  85 EB                 STA CONSOLE.READGEN.ALLOWEDCHRS
02965  179E  A9 17                 LDA #>CONSOLE.READINT.ALLOWEDCHRS
02966  17A0  85 EC                 STA CONSOLE.READGEN.ALLOWEDCHRS+1
02967  17A2             
02968  17A2  20 69 19              JSR CONSOLE.READGEN
02969  17A5             
02970  17A5                        ; CONVERT THE DECIMAL CHARACTERS TO HEXIDECIMAL.
02971  17A5  20 BC 17              JSR CONSOLE.READINT.COPYMEM
02972  17A8             
02973  17A8  20 2D 1D              JSR CONVERT.DEC2HEX32
02974  17AB             
02975  17AB  A5 E0                 LDA CONVERT.DEC2HEX32.RESULT
02976  17AD  85 7A                 STA CONSOLE.READINT32.INTEGER$
02977  17AF  A5 E1                 LDA CONVERT.DEC2HEX32.RESULT+1
02978  17B1  85 7B                 STA CONSOLE.READINT32.INTEGER$+1
02979  17B3  A5 E2                 LDA CONVERT.DEC2HEX32.RESULT+2
02980  17B5  85 7C                 STA CONSOLE.READINT32.INTEGER$+2
02981  17B7  A5 E3                 LDA CONVERT.DEC2HEX32.RESULT+3
02982  17B9  85 7D                 STA CONSOLE.READINT32.INTEGER$+3
02983  17BB             
02984  17BB  60                    RTS
02985  17BC             
02986  17BC             CONSOLE.READINT.COPYMEM 
02987  17BC                        ; GET THE LENGTH OF THE STRING
02988  17BC  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
02989  17BE  85 7A                 STA STRING.GETLENGTH.ADDRESS$
02990  17C0  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
02991  17C2  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
02992  17C4             
02993  17C4  20 72 2B              JSR STRING.GETLENGTH$
02994  17C7             
02995  17C7  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
02996  17C9  C9 00                 CMP #$00
02997  17CB  F0 0E                 BEQ @END
02998  17CD  85 2A                 STA CONVERT.DEC2HEX.LEN
02999  17CF             
03000  17CF  A2 00                 LDX #$00
03001  17D1             @LOOP
03002  17D1  BD 00 09              LDA CONSOLE.READSTR.BUFADDRESS,X
03003  17D4  95 E4                 STA CONVERT.DEC2HEX.VALUE,X
03004  17D6  E8                    INX
03005  17D7  E4 2A                 CPX CONVERT.DEC2HEX.LEN
03006  17D9  D0 F6                 BNE @LOOP
03007  17DB             
03008  17DB             @END
03009  17DB  60                    RTS
03010  17DC             
03011  17DC             MATH.SUBTRACT24.MENUEND$ = $80 ; 3 BYTES
03012  17DC             MATH.SUBTRACT24.SUBTRAHEND$ = $83 ; 3 BYTES
03013  17DC             MATH.SUBTRACT24.DIFFERENCE$ = $86 ; 4 BYTES
03014  17DC             
03015  17DC             MATH.SUBTRACT24$ 
03016  17DC  38                    SEC                             ; SET CARRY FOR BORROW PURPOSE
03017  17DD  A5 80                 LDA MATH.SUBTRACT24.MENUEND$
03018  17DF  E5 83                 SBC MATH.SUBTRACT24.SUBTRAHEND$                      ; PERFORM SUBTRACTION ON THE LSBS
03019  17E1  85 86                 STA MATH.SUBTRACT24.DIFFERENCE$
03020  17E3  A5 81                 LDA MATH.SUBTRACT24.MENUEND$+1                      ; DO THE SAME FOR THE MSBS, WITH CARRY
03021  17E5  E5 84                 SBC MATH.SUBTRACT24.SUBTRAHEND$+1                      ; SET ACCORDING TO THE PREVIOUS RESULT
03022  17E7  85 87                 STA MATH.SUBTRACT24.DIFFERENCE$+1
03023  17E9  A5 82                 LDA MATH.SUBTRACT24.MENUEND$+2
03024  17EB  E5 85                 SBC MATH.SUBTRACT24.SUBTRAHEND$+2                      ; PERFORM SUBTRACTION ON THE LSBS
03025  17ED  85 88                 STA MATH.SUBTRACT24.DIFFERENCE$+2
03026  17EF  60                    RTS
03027  17F0             
03028  17F0             ALIGN      $100
03029  1800             
03030  1800  FF FF FF   CONSOLE.GETKEY.BUFFEROLD BYTE $FF, $FF, $FF
03031  1803             
03032  1803  FF FF FF   CONSOLE.GETKEY.BUFFER BYTE $FF, $FF, $FF, $FF
03033  1807             
03034  1807  FF         CONSOLE.GETKEY.BUFFERQUANTITY BYTE $FF
03035  1808             
03036  1808  00         CONSOLE.GETKEY.SIMULTANEOUSALPHANUMERICKEYSFLAG BYTE $00
03037  1809             
03038  1809             CONSOLE.GETKEY.KEYTABLESHIFT$ 
03039  1809  FF 41 42              BYTE $FF, $41, $42, $43, $44, $45, $46, $47  ; "@", "A", "B", "C", "D", "E", "F", "G"
03040  1811  48 49 4A              BYTE $48, $49, $4A, $4B, $4C, $4D, $4E, $4F  ; "H", "I", "J", "K", "L", "M", "N", "O"
03041  1819  50 51 52              BYTE $50, $51, $52, $53, $54, $55, $56, $57  ; "P", "Q", "R", "S", "T", "U", "V", "W"
03042  1821  58 59 5A              BYTE $58, $59, $5A, $FF, $FF, $FF, $FF, $FF  ; "X", "Y", "Z", "[", (POUND), "]", UP-ARROW, "<-"
03043  1829  20 FF FF              BYTE $20, $FF, $FF, $FF, $FF, $FF, $FF, $FF  ; " " (SPC), "!", (DBL QTE), "#", "$", "%", "&", "`"
03044  1831  FF FF FF              BYTE $FF, $FF, $FF, $FF, $3C, $FF, $3E, $3F  ; "(", ")", "*", "+", ",", "-", ".", "/"
03045  1839  FF 21 22              BYTE $FF, $21, $22, $23, $24, $25, $26, $27  ; "0", "1", "2", "3", "4", "5", "6", "7"
03046  1841  28 29 1B              BYTE $28, $29, $1B, $1D, $FF, $FF, $FF, $FF  ; "8", "9", ":", ";", "<", "=", ">", "?"
03047  1849             
03048  1849             CONSOLE.READKEY.CHAR.INVALID$ = $FF
03049  1849             CONSOLE.READKEY.CHAR$ = $D0 ; 1 BYTE
03050  1849             
03051  1849             CONSOLE.READKEY.SHIFT1.UP_DOWN$ = %10000000
03052  1849             CONSOLE.READKEY.SHIFT1.F5$ = %01000000
03053  1849             CONSOLE.READKEY.SHIFT1.F3$ = %00100000
03054  1849             CONSOLE.READKEY.SHIFT1.F1$ = %00010000
03055  1849             CONSOLE.READKEY.SHIFT1.F7$ = %00001000
03056  1849             CONSOLE.READKEY.SHIFT1.LEFT_RIGHT$ = %00000100
03057  1849             CONSOLE.READKEY.SHIFT1.RETURN$ = %00000010
03058  1849             CONSOLE.READKEY.SHIFT1.INSERT_DELETE$ = %00000001
03059  1849             CONSOLE.READKEY.SHIFT1$ = $D1 ; 1 BYTE
03060  1849             
03061  1849             CONSOLE.READKEY.SHIFT2.RUN_STOP$ = %10000000
03062  1849             CONSOLE.READKEY.SHIFT2.LEFT_SHIFT$ = %01000000
03063  1849             CONSOLE.READKEY.SHIFT2.COMMODORE$ = %00100000
03064  1849             CONSOLE.READKEY.SHIFT2.RIGHT_SHIFT$ = %00010000
03065  1849             CONSOLE.READKEY.SHIFT2.CLEAR_HOME$ = %00001000
03066  1849             CONSOLE.READKEY.SHIFT2.CONTROL$ = %00000100
03067  1849             CONSOLE.READKEY.SHIFT2$ = $D2 ; 1 BYTE
03068  1849             
03069  1849             CONSOLE.READKEY.STATE.OK$ = $00
03070  1849             CONSOLE.READKEY.STATE.NO_ACTIVITY$ = $01
03071  1849             CONSOLE.READKEY.STATE.CONTROL_PORT_1$ = $02
03072  1849             CONSOLE.READKEY.STATE.SHADOWING$ = $03
03073  1849             CONSOLE.READKEY.STATE.MULTIPLEKEYS$ = $04
03074  1849             CONSOLE.READKEY.STATE.AWAITING_NO_ACTIVITY$ = $05
03075  1849             CONSOLE.READKEY.STATE$ = $D3 ; 1 BYTE
03076  1849             CONSOLE.READKEY.PROCESSORSTATE = $DB ; 1 BYTE
03077  1849             CONSOLE.READKEY$ 
03078  1849                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:SCANNING_THE_KEYBOARD_THE_CORRECT_AND_NON_KERNAL_WAY
03079  1849             
03080  1849                        ;THE ROUTINE USES "2 KEY ROLLOWER" OR UP TO 3 IF THE KEY-COMBINATION DOESEN'T INDUCE SHADOWING.
03081  1849                        ;IF 2 OR 3 KEYS ARE PRESSED SIMULTANEOUSLY (WITHIN 1 SCAN) A "NO ACTIVITY" STATE HAS TO OCCUR BEFORE NEW VALID KEYS ARE RETURNED.
03082  1849                        ;RESTORE IS NOT DETECTABLE AND MUST BE HANDLED BY NMI IRQ.
03083  1849                        ;SHIFT LOCK IS NOT DETECTED DUE TO UNRELIABILITY.
03084  1849                        
03085  1849  A9 00                 LDA #$00
03086  184B  85 D0                 STA CONSOLE.READKEY.CHAR$
03087  184D  85 D1                 STA CONSOLE.READKEY.SHIFT1$
03088  184F  85 D2                 STA CONSOLE.READKEY.SHIFT2$
03089  1851  85 D3                 STA CONSOLE.READKEY.STATE$
03090  1853             
03091  1853  08                    PHP ; PUSH THE PROCESSOR STATE ONTO THE STACK
03092  1854  68                    PLA ; PULL THE PROCESSOR STATE INTO A
03093  1855  85 DB                 STA CONSOLE.READKEY.PROCESSORSTATE ; SAVE IN VARIABLE
03094  1857             
03095  1857  78                    SEI ; NEED TO DISABLE INTERRUPTS OTHERWISE PRESSING RUN-STOP (TAB) CAUSES
03096  1858                        ; RANDOM ALPHA-NUMERIC KEY STROKE TO BE RETURNED WHEN NON IS PRESSED
03097  1858  20 6A 1A              JSR CONSOLE.GETKEY
03098  185B  B0 09                 BCS @NOVALIDINPUT ; IF CARRY IS SET, NO VALID CHARACTER PRESSED
03099  185D             
03100  185D  85 D0                 STA CONSOLE.READCHR.CHAR$
03101  185F  86 D1                 STX CONSOLE.READKEY.SHIFT1$
03102  1861  84 D2                 STY CONSOLE.READKEY.SHIFT2$
03103  1863             
03104  1863  4C 68 18              JMP @END
03105  1866             
03106  1866             @NOVALIDINPUT ; THIS MAY BE SUBSTITUTED FOR AN ERRORHANDLER IF NEEDED.
03107  1866  85 D3                 STA CONSOLE.READKEY.STATE$
03108  1868             
03109  1868             @END
03110  1868             
03111  1868                        ; CHECK TO SEE IF INTERRUPTS WERE PREVIOUSLY DISABLED
03112  1868                        ; IF SO, DO NOT RE-ENABLE THEM
03113  1868  A5 DB                 LDA CONSOLE.READKEY.PROCESSORSTATE
03114  186A  29 04                 AND #%00000100
03115  186C  C9 04                 CMP #%00000100
03116  186E  F0 01                 BEQ @SKIPCLI
03117  1870  58                    CLI ; RE-ENABLE INTERRUPTS
03118  1871             @SKIPCLI
03119  1871             
03120  1871  60                    RTS
03121  1872             
03122  1872             
03123  1872             ;CONSOLE.READCHR.CHAR$ = $83
03124  1872             ;CONSOLE.READCHR.YREG = $FB
03125  1872             
03126  1872             ;CONSOLE.READCHR$
03127  1872             ;        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:SCANNING_THE_KEYBOARD_THE_CORRECT_AND_NON_KERNAL_WAY
03128  1872             
03129  1872             ;;        JSR CONSOLE.GETKEY
03130  1872             ;
03131  1872             ;        SEI ; NEED TO DISABLE INTERUPTS OTHERWISE PRESSING RUN-STOP (TAB) CAUSES
03132  1872             ;            ; RANDOM ALPHA-NUMERIC KEY STROKE TO BE RETURNED WHEN NON IS PRESSED
03133  1872             ;@LOOP
03134  1872             ;        JSR CONSOLE.GETKEY
03135  1872             ;        BCS @NOVALIDINPUT ; IF CARRY IS SET, NO VALID CHARACTER PRESSED
03136  1872             
03137  1872             ;        ;STX TEMPX
03138  1872             ;        ;STY TEMPY
03139  1872             ;        CMP #$FF
03140  1872             ;        BEQ @NONEWAPHANUMERICKEY
03141  1872             ;            ;; CHECK A FOR ALPHANUMERIC KEYS
03142  1872             ;            ;STA $0400
03143  1872             
03144  1872             ;        STA CONSOLE.READCHR.CHAR$
03145  1872             
03146  1872             ;        TYA
03147  1872             ;        AND #%01000000 ; LEFT SHIFT
03148  1872             ;        CMP #%01000000
03149  1872             ;        BEQ @SHIFTPRESSED
03150  1872             ;        TYA
03151  1872             ;        AND #%00010000 ; RIGHT SHIFT
03152  1872             ;        CMP #%00010000
03153  1872             ;        BEQ @SHIFTPRESSED
03154  1872             
03155  1872             ;        JMP @END
03156  1872             
03157  1872             ;@SHIFTPRESSED
03158  1872             ;        ;LDA CONSOLE.READCHR.CHAR$
03159  1872             ;        ;ADC #63
03160  1872             ;        ;STA CONSOLE.READCHR.CHAR$
03161  1872             
03162  1872             ;        LDX CONSOLE.READCHR.CHAR$
03163  1872             ;        LDA CONSOLE.GETKEY.KEYTABLESHIFT,X
03164  1872             ;        CMP #$FF
03165  1872             ;        BEQ @LOOP
03166  1872             ;        STA CONSOLE.READCHR.CHAR$
03167  1872             
03168  1872             ;        JMP @END
03169  1872             
03170  1872             ;@NONEWAPHANUMERICKEY
03171  1872             ;            ;; CHECK X & Y FOR NON-ALPHANUMERIC KEYS
03172  1872             ;            ;LDX TEMPX
03173  1872             ;            ;LDY TEMPY
03174  1872             ;            ;STX $0401
03175  1872             ;            ;STY $0402
03176  1872             ;        JMP @LOOP
03177  1872             
03178  1872             ;@NOVALIDINPUT  ; THIS MAY BE SUBSTITUTED FOR AN ERRORHANDLER IF NEEDED.
03179  1872             ;        JMP @LOOP
03180  1872             
03181  1872             ;@END
03182  1872             ;        RTS
03183  1872             
03184  1872             ;ALIGN $100
03185  1872             
03186  1872  64         CONSOLE.CARETCHAR$ BYTE $64 ; MADE PUBLIC SO IT CAN BE OVERRIDDEN
03187  1873  00 00      CONSOLE.CARETSTARTADDRESS WORD $0000
03188  1875  00         CONSOLE.READCHR.PREV_CHR BYTE $00
03189  1876             
03190  1876             CONSOLE.READCHR.CHAR$ = $D0 ; 1 BYTE
03191  1876             CONSOLE.READCHR.MILLISECONDS = $D4 ; 4 BYTES
03192  1876             CONSOLE.READCHR.TOGGLECARET = $D8 ; 1 BYTE
03193  1876             CONSOLE.READCHR.CARETADDRESS = $D9 ; 2 BYTES
03194  1876             
03195  1876             CONSOLE.READCHR$ 
03196  1876  AD EE 12              LDA CONSOLE.CURRENTADDRESS
03197  1879  8D 73 18              STA CONSOLE.CARETSTARTADDRESS
03198  187C  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
03199  187F  8D 74 18              STA CONSOLE.CARETSTARTADDRESS+1
03200  1882             
03201  1882             CONSOLE.READCHR 
03202  1882             
03203  1882                        ;; CHECK FOR DEBUGMODE
03204  1882                        ;LDA KERNEL.DEBUGMODE$
03205  1882                        ;CMP #$00
03206  1882                        ;BEQ @NOT_DEBUGMODE$
03207  1882                        ;RTS
03208  1882             ;@NOT_DEBUGMODE$
03209  1882             
03210  1882                        ; PREVENT QUICK RETURNS FROM BEING PRESSED
03211  1882                        ;JSR TIME.HALT$
03212  1882                        ;JSR TIME.HALT$
03213  1882             
03214  1882                        ; SET THE COLOR OF THE CARET
03215  1882  A0 00                 LDY #$00
03216  1884  AD F2 12              LDA CONSOLE.CURRENTCOLORADDR
03217  1887  85 D9                 STA CONSOLE.READCHR.CARETADDRESS
03218  1889  AD F3 12              LDA CONSOLE.CURRENTCOLORADDR+1
03219  188C  85 DA                 STA CONSOLE.READCHR.CARETADDRESS+1
03220  188E  AD F4 12              LDA CONSOLE.CHARACTERCOLOR
03221  1891  91 D9                 STA (CONSOLE.READCHR.CARETADDRESS),Y
03222  1893             
03223  1893                        ; GET THE LOCATION OF THE CARET
03224  1893  AD EE 12              LDA CONSOLE.CURRENTADDRESS
03225  1896  85 D9                 STA CONSOLE.READCHR.CARETADDRESS
03226  1898  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
03227  189B  85 DA                 STA CONSOLE.READCHR.CARETADDRESS+1
03228  189D             
03229  189D                        ; SHOW THE CARET
03230  189D  A9 00                 LDA #$00
03231  189F  85 D8                 STA CONSOLE.READCHR.TOGGLECARET
03232  18A1             
03233  18A1                        ; RESET THE MILLISECONDS
03234  18A1  A9 00                 LDA #$00
03235  18A3  85 D4                 STA CONSOLE.READCHR.MILLISECONDS
03236  18A5  85 D5                 STA CONSOLE.READCHR.MILLISECONDS+1
03237  18A7  85 D6                 STA CONSOLE.READCHR.MILLISECONDS+2
03238  18A9  85 D7                 STA CONSOLE.READCHR.MILLISECONDS+3
03239  18AB             
03240  18AB             @LOOP
03241  18AB  20 CE 16              JSR CONSOLE.READCHR.CARET ; SEPARATE ROUTINE BECAUSE BRANCHES WEREN'T WORKING
03242  18AE             
03243  18AE             @READKEY
03244  18AE                        ; READ THE KEY FROM THE KEYBOARD
03245  18AE  20 49 18              JSR CONSOLE.READKEY$
03246  18B1             
03247  18B1                        ; DETERMINE IF ANYTHING WAS PRESSED
03248  18B1  A5 D3                 LDA CONSOLE.READKEY.STATE$
03249  18B3  C9 00                 CMP #CONSOLE.READKEY.STATE.OK$
03250  18B5                        ;BNE @LOOP
03251  18B5  F0 08                 BEQ @READKEYOK
03252  18B7  A9 00                 LDA #$00
03253  18B9  8D 75 18              STA CONSOLE.READCHR.PREV_CHR
03254  18BC  4C AB 18              JMP @LOOP
03255  18BF             @READKEYOK 
03256  18BF             
03257  18BF                        ; CONFIRM THAT WE HAVE A VALID CHARACTER
03258  18BF  A5 D0                 LDA CONSOLE.READKEY.CHAR$
03259  18C1  C9 FF                 CMP #CONSOLE.READKEY.CHAR.INVALID$
03260  18C3  F0 21                 BEQ @CHECKSPECIAL
03261  18C5             
03262  18C5                        ; CHECK IF THE SHIFT KEY WAS PRESSED
03263  18C5  A5 D2                 LDA CONSOLE.READKEY.SHIFT2$
03264  18C7  29 40                 AND #CONSOLE.READKEY.SHIFT2.LEFT_SHIFT$
03265  18C9  C9 40                 CMP #CONSOLE.READKEY.SHIFT2.LEFT_SHIFT$
03266  18CB  F0 0B                 BEQ @SHIFTPRESSED
03267  18CD             
03268  18CD  A5 D2                 LDA CONSOLE.READKEY.SHIFT2$
03269  18CF  29 10                 AND #CONSOLE.READKEY.SHIFT2.RIGHT_SHIFT$
03270  18D1  C9 10                 CMP #CONSOLE.READKEY.SHIFT2.RIGHT_SHIFT$
03271  18D3  F0 03                 BEQ @SHIFTPRESSED
03272  18D5                        
03273  18D5  4C 13 19              JMP @END
03274  18D8             
03275  18D8             @SHIFTPRESSED 
03276  18D8                        ; IF A VALID CHARACTER WAS PRESSED WHILE THE SHIFT KEY WAS PRESSED,
03277  18D8                        ; RETURN THE UPPER-CASED VERSION OF THE CHARACTER
03278  18D8  A6 D0                 LDX CONSOLE.READKEY.CHAR$
03279  18DA  BD 09 18              LDA CONSOLE.GETKEY.KEYTABLESHIFT$,X
03280  18DD  C9 FF                 CMP #CONSOLE.READKEY.CHAR.INVALID$
03281  18DF  F0 CA                 BEQ @LOOP
03282  18E1  85 D0                 STA CONSOLE.READCHR.CHAR$
03283  18E3             
03284  18E3  4C 13 19              JMP @END2
03285  18E6             
03286  18E6             ;@CHECKRETURN
03287  18E6             ;        ; IF THE RETURN KEY IS PRESSED, RETURN NULL
03288  18E6             ;        LDA CONSOLE.READKEY.SHIFT1$
03289  18E6             ;        CMP #CONSOLE.READKEY.SHIFT1.RETURN$
03290  18E6             ;        BNE @LOOP
03291  18E6             ;        LDA #CONSOLE.NULL$
03292  18E6             ;        ;LDA #CONSOLE.NEWLINE$
03293  18E6             ;        STA CONSOLE.READKEY.CHAR$
03294  18E6             
03295  18E6             @CHECKSPECIAL 
03296  18E6                        ; IF THE RETURN KEY IS PRESSED, RETURN NULL
03297  18E6  A5 D1                 LDA CONSOLE.READKEY.SHIFT1$
03298  18E8  C9 02                 CMP #CONSOLE.READKEY.SHIFT1.RETURN$
03299  18EA  F0 07                 BEQ @RETURNNULL
03300  18EC  C9 01                 CMP #CONSOLE.READKEY.SHIFT1.INSERT_DELETE$
03301  18EE  F0 0A                 BEQ @RETURNBACKSPACE
03302  18F0                        
03303  18F0  4C AB 18              JMP @LOOP
03304  18F3             
03305  18F3             @RETURNNULL 
03306  18F3  A9 FF                 LDA #CONSOLE.NULL$
03307  18F5  85 D0                 STA CONSOLE.READKEY.CHAR$
03308  18F7  4C 01 19              JMP @HIDECARET
03309  18FA             
03310  18FA             @RETURNBACKSPACE 
03311  18FA  A9 FD                 LDA #CONSOLE.BACKSPACE$
03312  18FC  85 D0                 STA CONSOLE.READKEY.CHAR$
03313  18FE  4C 01 19              JMP @HIDECARET
03314  1901             
03315  1901             @HIDECARET 
03316  1901             
03317  1901                        ; COMPARE LAST CHARACTER
03318  1901                        ;LDA CONSOLE.READCHR.CHAR$
03319  1901  CD 75 18              CMP CONSOLE.READCHR.PREV_CHR
03320  1904  D0 03                 BNE @CHAROK
03321  1906  4C AB 18              JMP @LOOP
03322  1909             @CHAROK
03323  1909  8D 75 18              STA CONSOLE.READCHR.PREV_CHR
03324  190C             
03325  190C                        ; HIDE THE CARET
03326  190C  A9 20                 LDA #$20
03327  190E  91 D9                 STA (CONSOLE.READCHR.CARETADDRESS),Y
03328  1910  20 CA 2F              JSR GRAPHICS.DRAWCHR
03329  1913                        ;JMP @SKIPWRITECHR
03330  1913             
03331  1913                        ;LDA CONSOLE.READCHR.CHAR$
03332  1913                        ;PHA
03333  1913                        ;JMP @T1
03334  1913             
03335  1913             ;        ; DELAY ADDED TO SLOW DOWN THE QUICK BACKSPACE CHARACTERS.
03336  1913             ;        ; 100 = $64
03337  1913             ;        ; 50 = $32
03338  1913             ;        LDA #$64
03339  1913             ;        STA TIME.WAIT.MILLISECONDS$
03340  1913             ;        LDA #$00
03341  1913             ;        STA TIME.WAIT.MILLISECONDS$+1
03342  1913             ;        LDA #$00
03343  1913             ;        STA TIME.WAIT.MILLISECONDS$+2
03344  1913             ;        LDA #$00
03345  1913             ;        STA TIME.WAIT.MILLISECONDS$+3
03346  1913             ;        JSR TIME.WAIT$
03347  1913             
03348  1913                        ;JSR TIME.HALT2
03349  1913                        ;JSR TIME.HALT2
03350  1913             
03351  1913             ;@T1
03352  1913                        ;PLA
03353  1913                        ;STA CONSOLE.READCHR.CHAR$
03354  1913             
03355  1913             @END
03356  1913             
03357  1913             @END2
03358  1913             
03359  1913                        ; WRITE THE CHARACTER TO THE SCREEN
03360  1913  A5 D0                 LDA CONSOLE.READCHR.CHAR$
03361  1915  C9 FF                 CMP #CONSOLE.NULL$
03362  1917  F0 09                 BEQ @SKIPWRITECHR
03363  1919  48                    PHA
03364  191A  85 02                 STA CONSOLE.WRITECHR.CHAR$
03365  191C  20 19 15              JSR CONSOLE.WRITECHR$
03366  191F  68                    PLA
03367  1920  85 D0                 STA CONSOLE.READCHR.CHAR$
03368  1922             @SKIPWRITECHR 
03369  1922             
03370  1922  60                    RTS
03371  1923             
03372  1923             ;ALIGN $100
03373  1923             
03374  1923             
03375  1923             ; STRINGS WILL HAVE A MAX LENGTH OF 255 CHARACTERS.
03376  1923             CONSOLE.READSTR.STRADDRESS$ = $7A ; 2 BYTES
03377  1923             CONSOLE.READSTR.LENGTH = $FB ; 2 BYTES
03378  1923             CONSOLE.READSTR$ 
03379  1923             
03380  1923  A9 FF                 LDA #$FF
03381  1925  85 EA                 STA CONSOLE.READGEN.MAXLEN
03382  1927  A9 00                 LDA #$00
03383  1929  85 EB                 STA CONSOLE.READGEN.ALLOWEDCHRS
03384  192B  85 EC                 STA CONSOLE.READGEN.ALLOWEDCHRS+1
03385  192D  20 69 19              JSR CONSOLE.READGEN
03386  1930             
03387  1930                        ; STORE THE LENGTH
03388  1930  86 FB                 STX CONSOLE.READSTR.LENGTH
03389  1932  A2 00                 LDX #$00
03390  1934  86 FC                 STX CONSOLE.READSTR.LENGTH+1
03391  1936             
03392  1936                        ; NEED TO COPY THE CONTENTS OF THE BUFFER TO AN INSTANCE OF A NEW STRING.
03393  1936  A5 FB                 LDA CONSOLE.READSTR.LENGTH
03394  1938  85 FB                 STA STRING.CREATE.LENGTH$
03395  193A  A5 FC                 LDA CONSOLE.READSTR.LENGTH+1
03396  193C  85 FC                 STA STRING.CREATE.LENGTH$+1
03397  193E             
03398  193E  A9 00                 LDA #$00 ; OPTIMIZATION - DEFAULT TO CHARACTER $00
03399  1940  85 02                 STA STRING.CREATE.CHARACTER$
03400  1942             
03401  1942  20 AD 2A              JSR STRING.CREATE$ ; STRADDRESS = STRING.CREATE$(LENGTH)
03402  1945             
03403  1945  A5 7A                 LDA STRING.CREATE.ADDRESS$
03404  1947  85 7A                 STA CONSOLE.READSTR.STRADDRESS$
03405  1949  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
03406  194B  85 7B                 STA CONSOLE.READSTR.STRADDRESS$+1
03407  194D             
03408  194D  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
03409  194F  85 73                 STA MEMORY.COPY16.SOURCE$
03410  1951  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
03411  1953  85 74                 STA MEMORY.COPY16.SOURCE$+1
03412  1955             
03413  1955  A5 7A                 LDA CONSOLE.READSTR.STRADDRESS$
03414  1957  85 75                 STA MEMORY.COPY16.DESTINATION$
03415  1959  A5 7B                 LDA CONSOLE.READSTR.STRADDRESS$+1
03416  195B  85 76                 STA MEMORY.COPY16.DESTINATION$+1
03417  195D             
03418  195D  A5 FB                 LDA CONSOLE.READSTR.LENGTH
03419  195F  85 78                 STA MEMORY.COPY16.LENGTH$
03420  1961  A9 00                 LDA #$00
03421  1963  85 79                 STA MEMORY.COPY16.LENGTH$+1
03422  1965             
03423  1965  20 9C 0F              JSR MEMORY.COPY16$ ; MEMORY.COPY16(BUFADDRESS, STRADDRESS)
03424  1968             
03425  1968  60                    RTS
03426  1969             
03427  1969             ;ALIGN $100
03428  1969             
03429  1969             CONSOLE.READGEN.MAXLEN = $EA ; 1 BYTE
03430  1969             CONSOLE.READGEN.ALLOWEDCHRS = $EB ; 2 BYTES
03431  1969             CONSOLE.READGEN.SKIPCHR = $ED ; 1 BYTE
03432  1969             CONSOLE.READGEN.CHAR = $EE ; 1 BYTE
03433  1969             CONSOLE.READGEN 
03434  1969                        ; WHEN THE ABILITY TO ALLOCATE STRING EXISTS,
03435  1969                        ; THE NEW STRING NEEDS TO BE THE EXACT SIZE OF
03436  1969                        ; THE CHARACTERS ENTERED + 1 (NULL$).
03437  1969             
03438  1969             ;        ; FILL THE STRADDRESS WITH NULLS
03439  1969             ;        LDA #<CONSOLE.READSTR.BUFADDRESS
03440  1969             ;        STA MEMORY.FILL.ADDRESS$
03441  1969             ;        LDA #>CONSOLE.READSTR.BUFADDRESS
03442  1969             ;        STA MEMORY.FILL.ADDRESS$+1
03443  1969             ;        LDA #CONSOLE.NULL$
03444  1969             ;        STA MEMORY.FILL.VALUE$
03445  1969             ;        LDX CONSOLE.READGEN.MAXLEN
03446  1969             ;        INX ; LENGTH = MAXLEN+1
03447  1969             ;        STX MEMORY.FILL.LENGTH$
03448  1969             ;        JSR MEMORY.FILL$
03449  1969  20 EF 19              JSR CONSOLE.RESETBUFADDRESS
03450  196C             
03451  196C                        ; SET THE CURRENT ADDRESS AS THE STARTING CARET'S LOCATION.
03452  196C  AD EE 12              LDA CONSOLE.CURRENTADDRESS
03453  196F  8D 73 18              STA CONSOLE.CARETSTARTADDRESS
03454  1972  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
03455  1975  8D 74 18              STA CONSOLE.CARETSTARTADDRESS+1
03456  1978             
03457  1978  A2 00                 LDX #0
03458  197A             @LOOP
03459  197A                        ; STORE THE STRING OFFSET IN THE STACK.
03460  197A  8A                    TXA
03461  197B  48                    PHA
03462  197C             
03463  197C                        ; READ A CHARACTER FROM THE CONSOLE.
03464  197C  20 82 18              JSR CONSOLE.READCHR
03465  197F  A5 D0                 LDA CONSOLE.READCHR.CHAR$
03466  1981  85 EE                 STA CONSOLE.READGEN.CHAR
03467  1983             
03468  1983                        ; GET THE CURRENT STRING OFFSET.
03469  1983  68                    PLA
03470  1984  AA                    TAX
03471  1985             
03472  1985                        ; EXIT IF RETURN WAS PRESSED.
03473  1985  A5 EE                 LDA CONSOLE.READGEN.CHAR
03474  1987  C9 FF                 CMP #CONSOLE.NULL$
03475  1989  F0 33                 BEQ @END
03476  198B             
03477  198B                        ; CHECK WHETHER OR NOT THE CHARACTER IS ALLOWED.
03478  198B  20 BF 19              JSR CONSOLE.READGEN.SKIPALLOWCHR
03479  198E  A5 ED                 LDA CONSOLE.READGEN.SKIPCHR
03480  1990  C9 01                 CMP #$01
03481  1992  F0 20                 BEQ @ATMAX
03482  1994             
03483  1994                        ; IF DELETE WAS PRESSED, INSERT A NULL CHARACTER AT THE CURRENT OFFSET
03484  1994                        ; AND DECREASE THE OFSSET
03485  1994  A5 EE                 LDA CONSOLE.READGEN.CHAR
03486  1996  C9 FD                 CMP #CONSOLE.BACKSPACE$
03487  1998  F0 0D                 BEQ @BACKSPACED
03488  199A             
03489  199A  E4 EA                 CPX CONSOLE.READGEN.MAXLEN ; SANITY CHECK
03490  199C  F0 16                 BEQ @ATMAX
03491  199E             
03492  199E                        ; STORE THE CHARACTER IN MEMORY.
03493  199E  A5 EE                 LDA CONSOLE.READGEN.CHAR
03494  19A0  9D 00 09              STA CONSOLE.READSTR.BUFADDRESS,X
03495  19A3  E8                    INX ; INCREASE THE OFFSET
03496  19A4             
03497  19A4  4C 7A 19              JMP @LOOP
03498  19A7             
03499  19A7             @BACKSPACED 
03500  19A7  E0 00                 CPX #0 ; SANITY CHECK
03501  19A9  F0 CF                 BEQ @LOOP
03502  19AB             
03503  19AB  CA                    DEX ; INCREASE THE OFFSET
03504  19AC  A9 FF                 LDA #CONSOLE.NULL$
03505  19AE  9D 00 09              STA CONSOLE.READSTR.BUFADDRESS,X
03506  19B1             
03507  19B1  4C 7A 19              JMP @LOOP
03508  19B4                        
03509  19B4             @ATMAX
03510  19B4  A9 FD                 LDA #CONSOLE.BACKSPACE$
03511  19B6  85 02                 STA CONSOLE.WRITECHR.CHAR$
03512  19B8  20 19 15              JSR CONSOLE.WRITECHR$
03513  19BB             
03514  19BB  4C 7A 19              JMP @LOOP
03515  19BE             
03516  19BE             @END
03517  19BE  60                    RTS
03518  19BF             
03519  19BF             CONSOLE.READGEN.SKIPALLOWCHR 
03520  19BF                        ;JMP @CHAROK
03521  19BF             
03522  19BF                        ; IF ALLOWEDCHRS IS ZERO THEN SKIP CHECK
03523  19BF  A5 EB                 LDA CONSOLE.READGEN.ALLOWEDCHRS
03524  19C1  85 80                 STA MATH.CMP16.NUM1$
03525  19C3  A5 EC                 LDA CONSOLE.READGEN.ALLOWEDCHRS+1
03526  19C5  85 81                 STA MATH.CMP16.NUM1$+1
03527  19C7             
03528  19C7  A9 00                 LDA #$00
03529  19C9  A5 82                 LDA MATH.CMP16.NUM2$
03530  19CB  A5 83                 LDA MATH.CMP16.NUM2$+1
03531  19CD             
03532  19CD  20 E4 28              JSR MATH.CMP16$ ; IF ALLOWCHRS = 0 THEN RETURN
03533  19D0                        ;BEQ @CHAROK
03534  19D0  D0 03                 BNE @DOCHECK
03535  19D2  4C E5 19              JMP @CHAROK
03536  19D5                        ;;JMP @CHAROK
03537  19D5             
03538  19D5             @DOCHECK
03539  19D5                        ; CONFIRM THAT THE CHARACTER TYPED IS ONE OF THE CHARACTERS ALLOWED
03540  19D5  A0 00                 LDY #$00
03541  19D7             @LOOP
03542  19D7  B1 EB                 LDA (CONSOLE.READGEN.ALLOWEDCHRS),Y
03543  19D9  C5 EE                 CMP CONSOLE.READGEN.CHAR
03544  19DB  F0 08                 BEQ @CHAROK
03545  19DD  C9 FF                 CMP #$FF
03546  19DF  F0 09                 BEQ @SKIPCHAR
03547  19E1  C8                    INY
03548  19E2  4C D7 19              JMP @LOOP
03549  19E5             @CHAROK
03550  19E5  A9 00                 LDA #$00
03551  19E7  4C EC 19              JMP @DONE
03552  19EA             @SKIPCHAR
03553  19EA  A9 01                 LDA #$01
03554  19EC             @DONE
03555  19EC  85 ED                 STA CONSOLE.READGEN.SKIPCHR
03556  19EE  60                    RTS
03557  19EF             
03558  19EF             CONSOLE.RESETBUFADDRESS 
03559  19EF             
03560  19EF                        ; FILL THE STRADDRESS WITH NULLS
03561  19EF  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
03562  19F1  85 73                 STA MEMORY.FILL.ADDRESS$
03563  19F3  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
03564  19F5  85 74                 STA MEMORY.FILL.ADDRESS$+1
03565  19F7  A9 FF                 LDA #CONSOLE.NULL$
03566  19F9  85 75                 STA MEMORY.FILL.VALUE$
03567  19FB  A6 EA                 LDX CONSOLE.READGEN.MAXLEN
03568  19FD  E8                    INX ; LENGTH = MAXLEN+1
03569  19FE  86 76                 STX MEMORY.FILL.LENGTH$
03570  1A00  20 03 10              JSR MEMORY.FILL$
03571  1A03             
03572  1A03  60                    RTS
03573  1A04             
03574  1A04             
03575  1A04             ;ALIGN $100
03576  1A04             ;ALIGN $100
03577  1A04             
03578  1A04             ; ZERO PAGE VARIBLES
03579  1A04             CONSOLE.GETKEY.SCANRESULT = $73  ; 8 BYTES
03580  1A04             CONSOLE.GETKEY.BUFFERNEW = $7B  ; 3 BYTES
03581  1A04             CONSOLE.GETKEY.KEYQUANTITY = $7E  ; 1 BYTE
03582  1A04             CONSOLE.GETKEY.NONALPHAFLAGX = $7F  ; 1 BYTE
03583  1A04             CONSOLE.GETKEY.NONALPHAFLAGY = $80  ; 1 BYTE
03584  1A04             CONSOLE.GETKEY.TEMPZP = $81  ; 1 BYTE
03585  1A04             CONSOLE.GETKEY.SIMULTANEOUSKEYS = $82  ; 1 BYTE
03586  1A04             
03587  1A04             ; OPERATIONAL VARIABLES
03588  1A04             CONSOLE.GETKEY.MAXKEYROLLOVER = 3
03589  1A04             
03590  1A04             ;CONSOLE.GETKEY.KEYBOARD
03591  1A04             ;    JMP CONSOLE.GETKEY.MAIN
03592  1A04             
03593  1A04             
03594  1A04                        ; ROUTINE FOR SCANNING A MATRIX ROW
03595  1A04             
03596  1A04             CONSOLE.GETKEY.KEYINROW 
03597  1A04  0A                    ASL
03598  1A05  B0 03                 BCS *+5
03599  1A07  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
03600  1A0A             ;REPEAT 1, 7
03601  1A0A             ;        INX
03602  1A0A             ;        ASL
03603  1A0A             ;        BCS *+5
03604  1A0A             ;            JSR CONSOLE.GETKEY.KEYFOUND
03605  1A0A             ;ENDREPEAT
03606  1A0A  E8                    INX
03607  1A0B  0A                    ASL
03608  1A0C  B0 03                 BCS *+5
03609  1A0E  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
03610  1A11  E8                    INX
03611  1A12  0A                    ASL
03612  1A13  B0 03                 BCS *+5
03613  1A15  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
03614  1A18  E8                    INX
03615  1A19  0A                    ASL
03616  1A1A  B0 03                 BCS *+5
03617  1A1C  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
03618  1A1F  E8                    INX
03619  1A20  0A                    ASL
03620  1A21  B0 03                 BCS *+5
03621  1A23  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
03622  1A26  E8                    INX
03623  1A27  0A                    ASL
03624  1A28  B0 03                 BCS *+5
03625  1A2A  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
03626  1A2D  E8                    INX
03627  1A2E  0A                    ASL
03628  1A2F  B0 03                 BCS *+5
03629  1A31  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
03630  1A34  E8                    INX
03631  1A35  0A                    ASL
03632  1A36  B0 03                 BCS *+5
03633  1A38  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
03634  1A3B  60                    RTS
03635  1A3C             
03636  1A3C             
03637  1A3C                        ; ROUTINE FOR HANDLING: KEY FOUND
03638  1A3C             
03639  1A3C             CONSOLE.GETKEY.KEYFOUND 
03640  1A3C  86 81                 STX CONSOLE.GETKEY.TEMPZP
03641  1A3E  C6 7E                 DEC CONSOLE.GETKEY.KEYQUANTITY
03642  1A40  30 0A                 BMI CONSOLE.GETKEY.OVERFLOW
03643  1A42  BC C0 1B              LDY CONSOLE.GETKEY.KEYTABLE,X
03644  1A45  A6 7E                 LDX CONSOLE.GETKEY.KEYQUANTITY
03645  1A47  94 7B                 STY CONSOLE.GETKEY.BUFFERNEW,X
03646  1A49  A6 81                 LDX CONSOLE.GETKEY.TEMPZP
03647  1A4B  60                    RTS
03648  1A4C             
03649  1A4C                        ; ROUTINE FOR HANDLING: OVERFLOW
03650  1A4C             
03651  1A4C             CONSOLE.GETKEY.OVERFLOW 
03652  1A4C  68                    PLA  ; DIRTY HACK TO HANDLE 2 LAYERS OF JSR
03653  1A4D  68                    PLA
03654  1A4E  68                    PLA
03655  1A4F  68                    PLA
03656  1A50                        ; DON'T MANIPULATE LAST LEGAL BUFFER AS THE ROUTINE WILL FIX ITSELF ONCE IT GETS VALID INPUT AGAIN.
03657  1A50  A9 03                 LDA #$03
03658  1A52  38                    SEC
03659  1A53  60                    RTS
03660  1A54             
03661  1A54             
03662  1A54                        ; EXIT ROUTINE FOR: NO ACTIVITY
03663  1A54             
03664  1A54             CONSOLE.GETKEY.NOACTIVITYDETECTED 
03665  1A54                        ; EXIT WITH A = #$01, CARRY SET & RESET BUFFEROLD.
03666  1A54  A9 00                 LDA #$00
03667  1A56  8D 08 18              STA CONSOLE.GETKEY.SIMULTANEOUSALPHANUMERICKEYSFLAG  ; CLEAR THE TOO MANY KEYS FLAG ONCE A "NO ACTIVITY" STATE IS DETECTED.
03668  1A59  8E 00 18              STX CONSOLE.GETKEY.BUFFEROLD
03669  1A5C  8E 01 18              STX CONSOLE.GETKEY.BUFFEROLD+1
03670  1A5F  8E 02 18              STX CONSOLE.GETKEY.BUFFEROLD+2
03671  1A62  38                    SEC
03672  1A63  A9 01                 LDA #$01
03673  1A65  60                    RTS
03674  1A66             
03675  1A66             
03676  1A66                        ; EXIT ROUTINE FOR CONTROL PORT ACTIVITY
03677  1A66             
03678  1A66             CONSOLE.GETKEY.CONTROLPORT 
03679  1A66                        ; EXIT WITH A = #$02, CARRY SET. KEEP BUFFEROLD TO VERIFY INPUT AFTER CONTROL PORT ACTIVITY CEASES
03680  1A66  38                    SEC
03681  1A67  A9 02                 LDA #$02
03682  1A69  60                    RTS
03683  1A6A             
03684  1A6A             
03685  1A6A                        ; CONFIGURE DATA DIRECTION REGISTERS
03686  1A6A             ;CONSOLE.GETKEY.MAIN
03687  1A6A             CONSOLE.GETKEY 
03688  1A6A  A2 FF                 LDX #$FF
03689  1A6C  8E 02 DC              STX $DC02       ; PORT A - OUTPUT
03690  1A6F  A0 00                 LDY #$00
03691  1A71  8C 03 DC              STY $DC03       ; PORT B - INPUT
03692  1A74  18                    CLC
03693  1A75             
03694  1A75                        ; CHECK FOR PORT ACTIVITY
03695  1A75             
03696  1A75  8C 00 DC              STY $DC00       ; CONNECT ALL KEYBOARD ROWS
03697  1A78  EC 01 DC              CPX $DC01
03698  1A7B  F0 D7                 BEQ CONSOLE.GETKEY.NOACTIVITYDETECTED
03699  1A7D             
03700  1A7D  AD 08 18              LDA CONSOLE.GETKEY.SIMULTANEOUSALPHANUMERICKEYSFLAG
03701  1A80                        ;BEQ !+
03702  1A80  F0 04                 BEQ CONSOLE.GETKEY.LOOP1
03703  1A82                        ; WAITING FOR ALL KEYS TO BE RELEASED BEFORE ACCEPTING NEW INPUT.
03704  1A82  A9 05                 LDA #$05
03705  1A84  38                    SEC
03706  1A85  60                    RTS
03707  1A86             ;!:
03708  1A86             CONSOLE.GETKEY.LOOP1 
03709  1A86             
03710  1A86                        ; CHECK FOR CONTROL PORT #1 ACTIVITY
03711  1A86             
03712  1A86  8E 00 DC              STX $DC00       ; DISCONNECT ALL KEYBOARD ROWS
03713  1A89  EC 01 DC              CPX $DC01       ; ONLY CONTROL PORT ACTIVITY WILL BE DETECTED
03714  1A8C  D0 D8                 BNE CONSOLE.GETKEY.CONTROLPORT
03715  1A8E             
03716  1A8E             
03717  1A8E                        ; SCAN KEYBOARD MATRIX
03718  1A8E             
03719  1A8E  A9 FE                 LDA #%11111110
03720  1A90  8D 00 DC              STA $DC00
03721  1A93  AC 01 DC              LDY $DC01
03722  1A96  84 7A                 STY CONSOLE.GETKEY.SCANRESULT+7
03723  1A98  38                    SEC
03724  1A99             ;REPEAT 1, 7, I
03725  1A99             ;RI = 7 - I
03726  1A99             ;        ROL
03727  1A99             ;        STA $DC00
03728  1A99             ;        LDY $DC01
03729  1A99             ;        STY CONSOLE.GETKEY.SCANRESULT+RI
03730  1A99             ;ENDREPEAT
03731  1A99  2A                    ROL
03732  1A9A  8D 00 DC              STA $DC00
03733  1A9D  AC 01 DC              LDY $DC01
03734  1AA0  84 79                 STY CONSOLE.GETKEY.SCANRESULT+6
03735  1AA2  2A                    ROL
03736  1AA3  8D 00 DC              STA $DC00
03737  1AA6  AC 01 DC              LDY $DC01
03738  1AA9  84 78                 STY CONSOLE.GETKEY.SCANRESULT+5
03739  1AAB  2A                    ROL
03740  1AAC  8D 00 DC              STA $DC00
03741  1AAF  AC 01 DC              LDY $DC01
03742  1AB2  84 77                 STY CONSOLE.GETKEY.SCANRESULT+4
03743  1AB4  2A                    ROL
03744  1AB5  8D 00 DC              STA $DC00
03745  1AB8  AC 01 DC              LDY $DC01
03746  1ABB  84 76                 STY CONSOLE.GETKEY.SCANRESULT+3
03747  1ABD  2A                    ROL
03748  1ABE  8D 00 DC              STA $DC00
03749  1AC1  AC 01 DC              LDY $DC01
03750  1AC4  84 75                 STY CONSOLE.GETKEY.SCANRESULT+2
03751  1AC6  2A                    ROL
03752  1AC7  8D 00 DC              STA $DC00
03753  1ACA  AC 01 DC              LDY $DC01
03754  1ACD  84 74                 STY CONSOLE.GETKEY.SCANRESULT+1
03755  1ACF  2A                    ROL
03756  1AD0  8D 00 DC              STA $DC00
03757  1AD3  AC 01 DC              LDY $DC01
03758  1AD6  84 73                 STY CONSOLE.GETKEY.SCANRESULT+0
03759  1AD8             
03760  1AD8                        ; CHECK FOR CONTROL PORT #1 ACTIVITY (AGAIN)
03761  1AD8             
03762  1AD8  8E 00 DC              STX $DC00       ; DISCONNECT ALL KEYBOARD ROWS
03763  1ADB  EC 01 DC              CPX $DC01       ; ONLY CONTROL PORT ACTIVITY WILL BE DETECTED
03764  1ADE  D0 86                 BNE CONSOLE.GETKEY.CONTROLPORT
03765  1AE0             
03766  1AE0             
03767  1AE0                        ; INITIALIZE BUFFER, FLAGS AND MAX KEYS
03768  1AE0             
03769  1AE0                        ; RESET CURRENT READ BUFFER
03770  1AE0  86 7B                 STX CONSOLE.GETKEY.BUFFERNEW
03771  1AE2  86 7C                 STX CONSOLE.GETKEY.BUFFERNEW+1
03772  1AE4  86 7D                 STX CONSOLE.GETKEY.BUFFERNEW+2
03773  1AE6             
03774  1AE6                        ; RESET NON-ALPHANUMERIC FLAG
03775  1AE6  E8                    INX
03776  1AE7  86 80                 STX CONSOLE.GETKEY.NONALPHAFLAGY
03777  1AE9             
03778  1AE9                        ; SET MAX KEYS ALLOWED BEFORE IGNORING RESULT
03779  1AE9  A9 03                 LDA #CONSOLE.GETKEY.MAXKEYROLLOVER
03780  1AEB  85 7E                 STA CONSOLE.GETKEY.KEYQUANTITY
03781  1AED             
03782  1AED                        ; COUNTER TO CHECK FOR SIMULTANEOUS ALPHANUMERIC KEY-PRESSES
03783  1AED  A9 FE                 LDA #$FE
03784  1AEF  85 82                 STA CONSOLE.GETKEY.SIMULTANEOUSKEYS
03785  1AF1             
03786  1AF1             
03787  1AF1                        ; CHECK AND FLAG NON ALPHANUMERIC KEYS
03788  1AF1             
03789  1AF1  A5 79                 LDA CONSOLE.GETKEY.SCANRESULT+6
03790  1AF3  49 FF                 EOR #$FF
03791  1AF5  29 80                 AND #%10000000     ; LEFT SHIFT
03792  1AF7  4A                    LSR
03793  1AF8  85 80                 STA CONSOLE.GETKEY.NONALPHAFLAGY
03794  1AFA  A5 73                 LDA CONSOLE.GETKEY.SCANRESULT+0
03795  1AFC  49 FF                 EOR #$FF
03796  1AFE  29 A4                 AND #%10100100     ; RUN STOP - C= - CTRL
03797  1B00  05 80                 ORA CONSOLE.GETKEY.NONALPHAFLAGY
03798  1B02  85 80                 STA CONSOLE.GETKEY.NONALPHAFLAGY
03799  1B04  A5 74                 LDA CONSOLE.GETKEY.SCANRESULT+1
03800  1B06  49 FF                 EOR #$FF
03801  1B08  29 18                 AND #%00011000     ; RIGHT SHIFT - CLR HOME
03802  1B0A  05 80                 ORA CONSOLE.GETKEY.NONALPHAFLAGY
03803  1B0C  85 80                 STA CONSOLE.GETKEY.NONALPHAFLAGY
03804  1B0E             
03805  1B0E  A5 7A                 LDA CONSOLE.GETKEY.SCANRESULT+7  ; THE REST
03806  1B10  49 FF                 EOR #$FF
03807  1B12  85 7F                 STA CONSOLE.GETKEY.NONALPHAFLAGX
03808  1B14             
03809  1B14             
03810  1B14                        ; CHECK FOR PRESSED KEY(S)
03811  1B14             
03812  1B14  A5 7A                 LDA CONSOLE.GETKEY.SCANRESULT+7
03813  1B16  C9 FF                 CMP #$FF
03814  1B18  F0 03                 BEQ *+5
03815  1B1A  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03816  1B1D             ;REPEAT 1,7,I
03817  1B1D             ;RI = 7 - I
03818  1B1D             ;        LDX #I*8
03819  1B1D             ;        LDA CONSOLE.GETKEY.SCANRESULT+RI
03820  1B1D             ;        BEQ *+5
03821  1B1D             ;            JSR CONSOLE.GETKEY.KEYINROW
03822  1B1D             ;ENDREPEAT
03823  1B1D  A2 08                 LDX #8
03824  1B1F  A5 79                 LDA CONSOLE.GETKEY.SCANRESULT+6
03825  1B21  F0 03                 BEQ *+5
03826  1B23  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03827  1B26  A2 10                 LDX #16
03828  1B28  A5 78                 LDA CONSOLE.GETKEY.SCANRESULT+5
03829  1B2A  F0 03                 BEQ *+5
03830  1B2C  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03831  1B2F  A2 18                 LDX #24
03832  1B31  A5 77                 LDA CONSOLE.GETKEY.SCANRESULT+4
03833  1B33  F0 03                 BEQ *+5
03834  1B35  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03835  1B38  A2 20                 LDX #32
03836  1B3A  A5 76                 LDA CONSOLE.GETKEY.SCANRESULT+3
03837  1B3C  F0 03                 BEQ *+5
03838  1B3E  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03839  1B41  A2 28                 LDX #40
03840  1B43  A5 75                 LDA CONSOLE.GETKEY.SCANRESULT+2
03841  1B45  F0 03                 BEQ *+5
03842  1B47  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03843  1B4A  A2 30                 LDX #48
03844  1B4C  A5 74                 LDA CONSOLE.GETKEY.SCANRESULT+1
03845  1B4E  F0 03                 BEQ *+5
03846  1B50  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03847  1B53  A2 38                 LDX #56
03848  1B55  A5 73                 LDA CONSOLE.GETKEY.SCANRESULT+0
03849  1B57  F0 03                 BEQ *+5
03850  1B59  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03851  1B5C             
03852  1B5C                        ; KEY SCAN COMPLETED
03853  1B5C             
03854  1B5C                        ; PUT ANY NEW KEY (NOT IN OLD SCAN) INTO BUFFER
03855  1B5C  A2 02                 LDX #CONSOLE.GETKEY.MAXKEYROLLOVER-1
03856  1B5E                        ;!:
03857  1B5E             CONSOLE.GETKEY.LOOP2 
03858  1B5E  B5 7B                 LDA CONSOLE.GETKEY.BUFFERNEW,X
03859  1B60  C9 FF                 CMP #$FF
03860  1B62  F0 1C                 BEQ CONSOLE.GETKEY.EXIST        ; HANDLE 'NULL' VALUES
03861  1B64  CD 00 18              CMP CONSOLE.GETKEY.BUFFEROLD
03862  1B67  F0 17                 BEQ CONSOLE.GETKEY.EXIST
03863  1B69  CD 01 18              CMP CONSOLE.GETKEY.BUFFEROLD+1
03864  1B6C  F0 12                 BEQ CONSOLE.GETKEY.EXIST
03865  1B6E  CD 02 18              CMP CONSOLE.GETKEY.BUFFEROLD+2
03866  1B71  F0 0D                 BEQ CONSOLE.GETKEY.EXIST
03867  1B73                        ; NEW KEY DETECTED
03868  1B73  EE 07 18              INC CONSOLE.GETKEY.BUFFERQUANTITY
03869  1B76  AC 07 18              LDY CONSOLE.GETKEY.BUFFERQUANTITY
03870  1B79  99 03 18              STA CONSOLE.GETKEY.BUFFER,Y
03871  1B7C                        ; KEEP TRACK OF HOW MANY NEW ALPHANUMERIC KEYS ARE DETECTED
03872  1B7C  E6 82                 INC CONSOLE.GETKEY.SIMULTANEOUSKEYS
03873  1B7E  F0 34                 BEQ CONSOLE.GETKEY.TOOMANYNEWKEYS
03874  1B80             CONSOLE.GETKEY.EXIST 
03875  1B80  CA                    DEX
03876  1B81                        ;BPL !-
03877  1B81  10 DB                 BPL CONSOLE.GETKEY.LOOP2
03878  1B83             
03879  1B83                        ; ANYTHING IN BUFFER?
03880  1B83  AC 07 18              LDY CONSOLE.GETKEY.BUFFERQUANTITY
03881  1B86  30 15                 BMI CONSOLE.GETKEY.BUFFEREMPTY
03882  1B88                        ; YES: THEN RETURN IT AND TIDY UP THE BUFFER
03883  1B88  CE 07 18              DEC CONSOLE.GETKEY.BUFFERQUANTITY
03884  1B8B  AD 03 18              LDA CONSOLE.GETKEY.BUFFER
03885  1B8E  AE 04 18              LDX CONSOLE.GETKEY.BUFFER+1
03886  1B91  8E 03 18              STX CONSOLE.GETKEY.BUFFER
03887  1B94  AE 05 18              LDX CONSOLE.GETKEY.BUFFER+2
03888  1B97  8E 04 18              STX CONSOLE.GETKEY.BUFFER+1
03889  1B9A  4C 9F 1B              JMP CONSOLE.GETKEY.RETURN
03890  1B9D             
03891  1B9D             CONSOLE.GETKEY.BUFFEREMPTY ; NO NEW ALPHANUMERIC KEYS TO HANDLE.
03892  1B9D  A9 FF                 LDA #$FF
03893  1B9F             
03894  1B9F             CONSOLE.GETKEY.RETURN ; A IS PRESET
03895  1B9F  18                    CLC
03896  1BA0                        ; COPY BUFFERNEW TO BUFFEROLD
03897  1BA0  A6 7B                 LDX CONSOLE.GETKEY.BUFFERNEW
03898  1BA2  8E 00 18              STX CONSOLE.GETKEY.BUFFEROLD
03899  1BA5  A6 7C                 LDX CONSOLE.GETKEY.BUFFERNEW+1
03900  1BA7  8E 01 18              STX CONSOLE.GETKEY.BUFFEROLD+1
03901  1BAA  A6 7D                 LDX CONSOLE.GETKEY.BUFFERNEW+2
03902  1BAC  8E 02 18              STX CONSOLE.GETKEY.BUFFEROLD+2
03903  1BAF                        ; HANDLE NON ALPHANUMERIC KEYS
03904  1BAF  A6 7F                 LDX CONSOLE.GETKEY.NONALPHAFLAGX
03905  1BB1  A4 80                 LDY CONSOLE.GETKEY.NONALPHAFLAGY
03906  1BB3  60                    RTS
03907  1BB4             
03908  1BB4             CONSOLE.GETKEY.TOOMANYNEWKEYS 
03909  1BB4  38                    SEC
03910  1BB5  A9 FF                 LDA #$FF
03911  1BB7  8D 07 18              STA CONSOLE.GETKEY.BUFFERQUANTITY
03912  1BBA  8D 08 18              STA CONSOLE.GETKEY.SIMULTANEOUSALPHANUMERICKEYSFLAG
03913  1BBD  A9 04                 LDA #$04
03914  1BBF  60                    RTS
03915  1BC0             
03916  1BC0             CONSOLE.GETKEY.KEYTABLE 
03917  1BC0  FF FF FF              BYTE $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF  ; CRSR DOWN, F5, F3, F1, F7, CRSR RIGHT, RETURN, INST DEL
03918  1BC8  FF 05 13              BYTE $FF, $05, $13, $1A, $34, $01, $17, $33  ; LEFT SHIFT, "E", "S", "Z", "4", "A", "W", "3"
03919  1BD0  18 14 06              BYTE $18, $14, $06, $03, $36, $04, $12, $35  ; "X", "T", "F", "C", "6", "D", "R", "5"
03920  1BD8  16 15 08              BYTE $16, $15, $08, $02, $38, $07, $19, $37  ; "V", "U", "H", "B", "8", "G", "Y", "7"
03921  1BE0  0E 0F 0B              BYTE $0E, $0F, $0B, $0D, $30, $0A, $09, $39  ; "N", "O" (OSCAR), "K", "M", "0" (ZERO), "J", "I", "9"
03922  1BE8  2C 00 3A              BYTE $2C, $00, $3A, $2E, $2D, $0C, $10, $2B  ; ",", "@", ":", ".", "-", "L", "P", "+"
03923  1BF0  2F 1E 3D              BYTE $2F, $1E, $3D, $FF, $FF, $3B, $2A, $1C  ; "/", "^", "=", RIGHT SHIFT, HOME, ";", "*", "£"
03924  1BF8  FF 11 FF              BYTE $FF, $11, $FF, $20, $32, $FF, $1F, $31  ; RUN STOP, "Q", "C=" (CMD), " " (SPC), "2", "CTRL", "<-", "1"
03925  1C00             
03926  1C00             
03927  1C00             
03928  1C00             
03929  1C00             
03930  1C00             
03931  1C00             ALIGN      $100
03932  1C00             
03933  1C00             CONVERT.HEX2DEC.RESULT = $E4
03934  1C00             
03935  1C00             CONVERT.HEX2DEC8.VALUE = $E0 ; 1 BYTE
03936  1C00             CONVERT.HEX2DEC8.RESULT = $E4 ; 3 BYTES
03937  1C00             
03938  1C00             CONVERT.HEX2DEC8 
03939  1C00                        ; CONVERTS 3 DIGITS (8 BIT VALUES HAVE MAX. 3 DECIMAL DIGITS)
03940  1C00  A2 00                 LDX #0
03941  1C02             @L3
03942  1C02  20 0D 1C              JSR @DIV10_8
03943  1C05  95 E4                 STA CONVERT.HEX2DEC8.RESULT,X
03944  1C07  E8                    INX
03945  1C08  E0 0A                 CPX #10
03946  1C0A  D0 F6                 BNE @L3
03947  1C0C  60                    RTS
03948  1C0D             
03949  1C0D                        ; DIVIDES A 8 BIT VALUE BY 10
03950  1C0D                        ; REMAINDER IS RETURNED IN AKKU
03951  1C0D             @DIV10_8
03952  1C0D  A0 08                 LDY #8         ; 8 BITS
03953  1C0F  A9 00                 LDA #0
03954  1C11  18                    CLC
03955  1C12             @L4        
03956  1C12  2A                    ROL
03957  1C13  C9 0A                 CMP #10
03958  1C15  90 02                 BCC @SKIP
03959  1C17  E9 0A                 SBC #10
03960  1C19             @SKIP      
03961  1C19  26 E0                 ROL CONVERT.HEX2DEC8.VALUE
03962  1C1B  88                    DEY
03963  1C1C  10 F4                 BPL @L4
03964  1C1E  60                    RTS
03965  1C1F             
03966  1C1F             CONVERT.HEX2DEC16.VALUE = $E0 ; 2 BYTES
03967  1C1F             CONVERT.HEX2DEC16.RESULT = $E4 ; 5 BYTES
03968  1C1F             
03969  1C1F             CONVERT.HEX2DEC16 
03970  1C1F                        ; CONVERTS 5 DIGITS (16 BIT VALUES HAVE MAX. 5 DECIMAL DIGITS)
03971  1C1F  A2 00                 LDX #0
03972  1C21             @L3
03973  1C21  20 2C 1C              JSR @DIV10_16
03974  1C24  95 E4                 STA CONVERT.HEX2DEC16.RESULT,X
03975  1C26  E8                    INX
03976  1C27  E0 0A                 CPX #10
03977  1C29  D0 F6                 BNE @L3
03978  1C2B  60                    RTS
03979  1C2C             
03980  1C2C                        ; DIVIDES A 16 BIT VALUE BY 10
03981  1C2C                        ; REMAINDER IS RETURNED IN AKKU
03982  1C2C             @DIV10_16
03983  1C2C  A0 10                 LDY #16         ; 16 BITS
03984  1C2E  A9 00                 LDA #0
03985  1C30  18                    CLC
03986  1C31             @L4        
03987  1C31  2A                    ROL
03988  1C32  C9 0A                 CMP #10
03989  1C34  90 02                 BCC @SKIP
03990  1C36  E9 0A                 SBC #10
03991  1C38             @SKIP      
03992  1C38  26 E0                 ROL CONVERT.HEX2DEC16.VALUE
03993  1C3A  26 E1                 ROL CONVERT.HEX2DEC16.VALUE+1
03994  1C3C  88                    DEY
03995  1C3D  10 F2                 BPL @L4
03996  1C3F  60                    RTS
03997  1C40             
03998  1C40             CONVERT.HEX2DEC32.VALUE = $E0 ; 4 BYTES
03999  1C40             CONVERT.HEX2DEC32.RESULT = $E4 ; 10 BYTES
04000  1C40             
04001  1C40             CONVERT.HEX2DEC32 
04002  1C40                        ; CONVERTS 10 DIGITS (32 BIT VALUES HAVE MAX. 10 DECIMAL DIGITS)
04003  1C40  A2 00                 LDX #0
04004  1C42             @L3
04005  1C42  20 4D 1C              JSR @DIV10_32
04006  1C45  95 E4                 STA CONVERT.HEX2DEC32.RESULT,X
04007  1C47  E8                    INX
04008  1C48  E0 0A                 CPX #10
04009  1C4A  D0 F6                 BNE @L3
04010  1C4C  60                    RTS
04011  1C4D             
04012  1C4D                        ; DIVIDES A 32 BIT VALUE BY 10
04013  1C4D                        ; REMAINDER IS RETURNED IN AKKU
04014  1C4D             @DIV10_32
04015  1C4D  A0 20                 LDY #32         ; 32 BITS
04016  1C4F  A9 00                 LDA #0
04017  1C51  18                    CLC
04018  1C52             @L4        
04019  1C52  2A                    ROL
04020  1C53  C9 0A                 CMP #10
04021  1C55  90 02                 BCC @SKIP
04022  1C57  E9 0A                 SBC #10
04023  1C59             @SKIP      
04024  1C59  26 E0                 ROL CONVERT.HEX2DEC32.VALUE
04025  1C5B  26 E1                 ROL CONVERT.HEX2DEC32.VALUE+1
04026  1C5D  26 E2                 ROL CONVERT.HEX2DEC32.VALUE+2
04027  1C5F  26 E3                 ROL CONVERT.HEX2DEC32.VALUE+3
04028  1C61  88                    DEY
04029  1C62  10 EE                 BPL @L4
04030  1C64  60                    RTS
04031  1C65             
04032  1C65             ;CONVERT.DEC2HEX8
04033  1C65             ;  LDA A
04034  1C65             ;  JSR MULT10
04035  1C65             ;  JSR MULT10   ;X100
04036  1C65             ;  STA TMP0
04037  1C65             ;  LDA B
04038  1C65             ;  JSR MULT10   ;X10
04039  1C65             ;  STA TMP1
04040  1C65             ;  LDA C
04041  1C65             ;  STA TMP2     ;X1
04042  1C65             ;
04043  1C65             ;  CLC
04044  1C65             ;  LDA #$00
04045  1C65             ;  ADC TMP0
04046  1C65             ;  ADC TMP1
04047  1C65             ;  ADC TMP2
04048  1C65             ;  RTS     ;CARRY WILL BE SET IF RESULT WAS > 255
04049  1C65             
04050  1C65             
04051  1C65             ;MULT10  ASL         ;MULTIPLY BY 2
04052  1C65             ;        STA TEMP10  ;TEMP STORE IN TEMP
04053  1C65             ;        ASL         ;AGAIN MULTIPLY BY 2 (*4)
04054  1C65             ;        ASL         ;AGAIN MULTIPLY BY 2 (*8)
04055  1C65             ;        CLC
04056  1C65             ;        ADC TEMP10  ;AS RESULT, A = X*8 + X*2
04057  1C65             ;        RTS
04058  1C65             
04059  1C65             
04060  1C65             CONVERT.DEC2HEX.VALUE = $E4
04061  1C65             CONVERT.DEC2HEX.LEN = $2A
04062  1C65             
04063  1C65             CONVERT.DEC2HEX8.VALUE = $E4 ; 3 BYTES
04064  1C65             CONVERT.DEC2HEX8.RESULT = $E0 ; 1 BYTE
04065  1C65             CONVERT.DEC2HEX8.INT = $FB ; 1 BYTE
04066  1C65             CONVERT.DEC2HEX8.LEN = $2A ; 1 BYTE
04067  1C65             CONVERT.DEC2HEX8.OFFSET = $52 ; 1 BYTE
04068  1C65             CONVERT.DEC2HEX8 
04069  1C65                        ; NEED TO SET CONVERT.DEC2HEX8.VALUE AND CONVERT.DEC2HEX8.LEN
04070  1C65                        
04071  1C65                        ; SET THE DEFAULT VALUE
04072  1C65  A9 00                 LDA #$00
04073  1C67  85 E0                 STA CONVERT.DEC2HEX8.RESULT
04074  1C69  85 E1                 STA CONVERT.DEC2HEX8.RESULT+1
04075  1C6B             
04076  1C6B                        ; CHECK THE LENGTH
04077  1C6B  A5 2A                 LDA CONVERT.DEC2HEX8.LEN
04078  1C6D  C9 00                 CMP #$00
04079  1C6F  D0 01                 BNE @LENOK
04080  1C71  60                    RTS
04081  1C72             @LENOK
04082  1C72                        ; MULTIPLY EACH CHARACTER BY 10^(DIGIT-1) AND ADD TO THE RESULT
04083  1C72             
04084  1C72  A2 00                 LDX #$00
04085  1C74             @LOOP
04086  1C74  B5 E4                 LDA CONVERT.DEC2HEX8.VALUE,X
04087  1C76  C9 30                 CMP #$30 ; SKIP IF THE CHARACTER = '0'
04088  1C78  D0 03                 BNE @DIGITOK
04089  1C7A  4C B0 1C              JMP @NEXTDIGIT
04090  1C7D             @DIGITOK
04091  1C7D  38                    SEC ; DO NOT SUBTRACT ANY ADDITIONAL 1S
04092  1C7E  E9 30                 SBC #$30 ; GET THE NUMBER VALUE OF THE CHARACTER (CHAR - #30)
04093  1C80             
04094  1C80  85 FB                 STA CONVERT.DEC2HEX8.INT
04095  1C82             
04096  1C82                        ; Y = LEN - OFFSET - 1
04097  1C82  86 52                 STX CONVERT.DEC2HEX8.OFFSET
04098  1C84  A5 2A                 LDA CONVERT.DEC2HEX8.LEN
04099  1C86  18                    CLC ; SUBTRACT AN ADDITIONAL 1
04100  1C87  E5 52                 SBC CONVERT.DEC2HEX8.OFFSET
04101  1C89  A8                    TAY
04102  1C8A             
04103  1C8A                        ; MULTIPLY AFFECTS X AND Y
04104  1C8A  8A                    TXA
04105  1C8B  48                    PHA
04106  1C8C             
04107  1C8C             @FACTOR
04108  1C8C  C0 00                 CPY #$00
04109  1C8E  F0 17                 BEQ @SKIPFACTOR
04110  1C90             
04111  1C90  A5 FB                 LDA CONVERT.DEC2HEX8.INT
04112  1C92  85 80                 STA MATH.MULTIPLY8.FACTOR1$
04113  1C94             
04114  1C94  A9 0A                 LDA #$0A
04115  1C96  85 82                 STA MATH.MULTIPLY8.FACTOR2$
04116  1C98             
04117  1C98  98                    TYA
04118  1C99  48                    PHA
04119  1C9A  20 48 29              JSR MATH.MULTIPLY8$
04120  1C9D  68                    PLA
04121  1C9E  A8                    TAY
04122  1C9F             
04123  1C9F  A5 83                 LDA MATH.MULTIPLY8.PRODUCT$
04124  1CA1  85 FB                 STA CONVERT.DEC2HEX8.INT
04125  1CA3             
04126  1CA3  88                    DEY ; Y = Y - 1
04127  1CA4  4C 8C 1C              JMP @FACTOR
04128  1CA7             
04129  1CA7             @SKIPFACTOR 
04130  1CA7             
04131  1CA7                        ; RESTORE X AND Y
04132  1CA7  68                    PLA
04133  1CA8  AA                    TAX
04134  1CA9             
04135  1CA9  A5 E0                 LDA CONVERT.DEC2HEX8.RESULT
04136  1CAB  18                    CLC
04137  1CAC  65 FB                 ADC CONVERT.DEC2HEX8.INT
04138  1CAE  85 E0                 STA CONVERT.DEC2HEX8.RESULT
04139  1CB0             
04140  1CB0             @NEXTDIGIT 
04141  1CB0  E8                    INX ; X = X + 1
04142  1CB1  E4 2A                 CPX CONVERT.DEC2HEX8.LEN
04143  1CB3  F0 03                 BEQ @END
04144  1CB5  4C 74 1C              JMP @LOOP
04145  1CB8             
04146  1CB8             @END
04147  1CB8             
04148  1CB8  60                    RTS
04149  1CB9             
04150  1CB9             ;ALIGN $100
04151  1CB9             
04152  1CB9             CONVERT.DEC2HEX16.VALUE = $E4 ; 5 BYTES
04153  1CB9             CONVERT.DEC2HEX16.RESULT = $E0 ; 2 BYTES
04154  1CB9             CONVERT.DEC2HEX16.INT = $FB ; 2 BYTES
04155  1CB9             CONVERT.DEC2HEX16.LEN = $2A ; 1 BYTE
04156  1CB9             CONVERT.DEC2HEX16.OFFSET = $52 ; 1 BYTE
04157  1CB9             CONVERT.DEC2HEX16 
04158  1CB9                        ; NEED TO SET CONVERT.DEC2HEX16.VALUE AND CONVERT.DEC2HEX16.LEN
04159  1CB9                        
04160  1CB9                        ; SET THE DEFAULT VALUE
04161  1CB9  A9 00                 LDA #$00
04162  1CBB  85 E0                 STA CONVERT.DEC2HEX16.RESULT
04163  1CBD  85 E1                 STA CONVERT.DEC2HEX16.RESULT+1
04164  1CBF             
04165  1CBF                        ; CHECK THE LENGTH
04166  1CBF  A5 2A                 LDA CONVERT.DEC2HEX16.LEN
04167  1CC1  C9 00                 CMP #$00
04168  1CC3  D0 01                 BNE @LENOK
04169  1CC5  60                    RTS
04170  1CC6             @LENOK
04171  1CC6             
04172  1CC6                        ;LDA #$05
04173  1CC6                        ;STA CONVERT.DEC2HEX16.LEN
04174  1CC6             
04175  1CC6                        ; MULTIPLY EACH CHARACTER BY 10^(DIGIT-1) AND ADD TO THE RESULT
04176  1CC6             
04177  1CC6  A2 00                 LDX #$00
04178  1CC8             @LOOP
04179  1CC8  B5 E4                 LDA CONVERT.DEC2HEX16.VALUE,X
04180  1CCA  C9 30                 CMP #$30 ; SKIP IF THE CHARACTER = '0'
04181  1CCC  D0 03                 BNE @DIGITOK
04182  1CCE  4C 24 1D              JMP @NEXTDIGIT
04183  1CD1             @DIGITOK
04184  1CD1  38                    SEC ; DO NOT SUBTRACT ANY ADDITIONAL 1S
04185  1CD2  E9 30                 SBC #$30 ; GET THE NUMBER VALUE OF THE CHARACTER (CHAR - #30)
04186  1CD4             
04187  1CD4  85 FB                 STA CONVERT.DEC2HEX16.INT
04188  1CD6  A9 00                 LDA #$00
04189  1CD8  85 FC                 STA CONVERT.DEC2HEX16.INT+1
04190  1CDA             
04191  1CDA                        ; Y = LEN - OFFSET - 1
04192  1CDA  86 52                 STX CONVERT.DEC2HEX16.OFFSET
04193  1CDC  A5 2A                 LDA CONVERT.DEC2HEX16.LEN
04194  1CDE  18                    CLC ; SUBTRACT AN ADDITIONAL 1
04195  1CDF  E5 52                 SBC CONVERT.DEC2HEX16.OFFSET
04196  1CE1  A8                    TAY
04197  1CE2             
04198  1CE2                        ; MULTIPLY AFFECTS X
04199  1CE2  8A                    TXA
04200  1CE3  48                    PHA
04201  1CE4             
04202  1CE4             @FACTOR
04203  1CE4  C0 00                 CPY #$00
04204  1CE6  F0 1F                 BEQ @SKIPFACTOR
04205  1CE8             
04206  1CE8  A5 FB                 LDA CONVERT.DEC2HEX16.INT
04207  1CEA  85 80                 STA MATH.MULTIPLY16.FACTOR1$
04208  1CEC  A5 FC                 LDA CONVERT.DEC2HEX16.INT+1
04209  1CEE  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
04210  1CF0             
04211  1CF0  A9 0A                 LDA #$0A
04212  1CF2  85 82                 STA MATH.MULTIPLY16.FACTOR2$
04213  1CF4  A9 00                 LDA #$00
04214  1CF6  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
04215  1CF8             
04216  1CF8  20 67 29              JSR MATH.MULTIPLY16$
04217  1CFB             
04218  1CFB  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
04219  1CFD  85 FB                 STA CONVERT.DEC2HEX16.INT
04220  1CFF  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
04221  1D01  85 FC                 STA CONVERT.DEC2HEX16.INT+1
04222  1D03             
04223  1D03  88                    DEY ; Y = Y - 1
04224  1D04  4C E4 1C              JMP @FACTOR
04225  1D07             
04226  1D07             @SKIPFACTOR 
04227  1D07             
04228  1D07                        ; RESTORE X
04229  1D07  68                    PLA
04230  1D08  AA                    TAX
04231  1D09             
04232  1D09  A5 E0                 LDA CONVERT.DEC2HEX16.RESULT
04233  1D0B  85 80                 STA MATH.ADD16.ADDEND1$
04234  1D0D  A5 E1                 LDA CONVERT.DEC2HEX16.RESULT+1
04235  1D0F  85 81                 STA MATH.ADD16.ADDEND1$+1
04236  1D11             
04237  1D11  A5 FB                 LDA CONVERT.DEC2HEX16.INT
04238  1D13  85 82                 STA MATH.ADD16.ADDEND2$
04239  1D15  A5 FC                 LDA CONVERT.DEC2HEX16.INT+1
04240  1D17  85 83                 STA MATH.ADD16.ADDEND2$+1
04241  1D19             
04242  1D19  20 00 28              JSR MATH.ADD16$ ; RESULT = RESULT + INT
04243  1D1C             
04244  1D1C  A5 84                 LDA MATH.ADD16.SUM$
04245  1D1E  85 E0                 STA CONVERT.DEC2HEX16.RESULT
04246  1D20  A5 85                 LDA MATH.ADD16.SUM$+1
04247  1D22  85 E1                 STA CONVERT.DEC2HEX16.RESULT+1
04248  1D24             
04249  1D24             @NEXTDIGIT 
04250  1D24  E8                    INX ; X = X + 1
04251  1D25  E4 2A                 CPX CONVERT.DEC2HEX16.LEN
04252  1D27  F0 03                 BEQ @END
04253  1D29  4C C8 1C              JMP @LOOP
04254  1D2C             
04255  1D2C             @END
04256  1D2C             
04257  1D2C  60                    RTS
04258  1D2D             
04259  1D2D             CONVERT.DEC2HEX32.VALUE = $E4 ; 10 BYTES
04260  1D2D             CONVERT.DEC2HEX32.RESULT = $E0 ; 4 BYTES
04261  1D2D             CONVERT.DEC2HEX32.INT = $FB ; 4 BYTES
04262  1D2D             CONVERT.DEC2HEX32.LEN = $2A ; 1 BYTE
04263  1D2D             CONVERT.DEC2HEX32.OFFSET = $52 ; 1 BYTE
04264  1D2D             CONVERT.DEC2HEX32 
04265  1D2D                        ; NEED TO SET CONVERT.DEC2HEX32.VALUE AND CONVERT.DEC2HEX32.LEN
04266  1D2D                        
04267  1D2D                        ; SET THE DEFAULT VALUE
04268  1D2D  A9 00                 LDA #$00
04269  1D2F  85 E0                 STA CONVERT.DEC2HEX32.RESULT
04270  1D31  85 E1                 STA CONVERT.DEC2HEX32.RESULT+1
04271  1D33  85 E2                 STA CONVERT.DEC2HEX32.RESULT+2
04272  1D35  85 E3                 STA CONVERT.DEC2HEX32.RESULT+3
04273  1D37             
04274  1D37                        ; CHECK THE LENGTH
04275  1D37  A5 2A                 LDA CONVERT.DEC2HEX32.LEN
04276  1D39  C9 00                 CMP #$00
04277  1D3B  D0 01                 BNE @LENOK
04278  1D3D  60                    RTS
04279  1D3E             @LENOK
04280  1D3E             
04281  1D3E                        ; MULTIPLY EACH CHARACTER BY 10^(DIGIT-1) AND ADD TO THE RESULT
04282  1D3E             
04283  1D3E  A2 00                 LDX #$00
04284  1D40             @LOOP
04285  1D40  B5 E4                 LDA CONVERT.DEC2HEX32.VALUE,X ; GET THE CURRENT CHARACTER
04286  1D42  C9 30                 CMP #$30 ; SKIP IF THE CHARACTER = '0'
04287  1D44  D0 03                 BNE @DIGITOK
04288  1D46  4C CC 1D              JMP @NEXTDIGIT
04289  1D49             @DIGITOK
04290  1D49  38                    SEC ; DO NOT SUBTRACT ANY ADDITIONAL 1S
04291  1D4A  E9 30                 SBC #$30 ; GET THE NUMBER VALUE OF THE CHARACTER (CHAR - #30)
04292  1D4C             
04293  1D4C  85 FB                 STA CONVERT.DEC2HEX32.INT
04294  1D4E  A9 00                 LDA #$00
04295  1D50  85 FC                 STA CONVERT.DEC2HEX32.INT+1
04296  1D52  85 FD                 STA CONVERT.DEC2HEX32.INT+2
04297  1D54  85 FE                 STA CONVERT.DEC2HEX32.INT+3
04298  1D56             
04299  1D56                        ; Y = LEN - OFFSET - 1
04300  1D56  86 52                 STX CONVERT.DEC2HEX32.OFFSET
04301  1D58  A5 2A                 LDA CONVERT.DEC2HEX32.LEN
04302  1D5A  18                    CLC ; SUBTRACT AN ADDITIONAL 1
04303  1D5B  E5 52                 SBC CONVERT.DEC2HEX32.OFFSET
04304  1D5D  A8                    TAY
04305  1D5E             
04306  1D5E                        ; MULTIPLY AFFECTS X
04307  1D5E  8A                    TXA
04308  1D5F  48                    PHA
04309  1D60             
04310  1D60             @FACTOR
04311  1D60  C0 00                 CPY #$00
04312  1D62  F0 33                 BEQ @SKIPFACTOR
04313  1D64             
04314  1D64  A5 FB                 LDA CONVERT.DEC2HEX32.INT
04315  1D66  85 80                 STA MATH.MULTIPLY32.FACTOR1$
04316  1D68  A5 FC                 LDA CONVERT.DEC2HEX32.INT+1
04317  1D6A  85 81                 STA MATH.MULTIPLY32.FACTOR1$+1
04318  1D6C  A5 FD                 LDA CONVERT.DEC2HEX32.INT+2
04319  1D6E  85 82                 STA MATH.MULTIPLY32.FACTOR1$+2
04320  1D70  A5 FE                 LDA CONVERT.DEC2HEX32.INT+3
04321  1D72  85 83                 STA MATH.MULTIPLY32.FACTOR1$+3
04322  1D74             
04323  1D74  A9 0A                 LDA #$0A
04324  1D76  85 84                 STA MATH.MULTIPLY32.FACTOR2$
04325  1D78  A9 00                 LDA #$00
04326  1D7A  85 85                 STA MATH.MULTIPLY32.FACTOR2$+1
04327  1D7C  85 86                 STA MATH.MULTIPLY32.FACTOR2$+2
04328  1D7E  85 87                 STA MATH.MULTIPLY32.FACTOR2$+3
04329  1D80             
04330  1D80  20 8D 29              JSR MATH.MULTIPLY32$
04331  1D83             
04332  1D83  A5 88                 LDA MATH.MULTIPLY32.PRODUCT$
04333  1D85  85 FB                 STA CONVERT.DEC2HEX32.INT
04334  1D87  A5 89                 LDA MATH.MULTIPLY32.PRODUCT$+1
04335  1D89  85 FC                 STA CONVERT.DEC2HEX32.INT+1
04336  1D8B  A5 8A                 LDA MATH.MULTIPLY32.PRODUCT$+2
04337  1D8D  85 FD                 STA CONVERT.DEC2HEX32.INT+2
04338  1D8F  A5 8B                 LDA MATH.MULTIPLY32.PRODUCT$+3
04339  1D91  85 FE                 STA CONVERT.DEC2HEX32.INT+3
04340  1D93             
04341  1D93  88                    DEY ; Y = Y - 1
04342  1D94  4C 60 1D              JMP @FACTOR
04343  1D97             
04344  1D97             @SKIPFACTOR 
04345  1D97             
04346  1D97                        ; RESTORE X
04347  1D97  68                    PLA
04348  1D98  AA                    TAX
04349  1D99             
04350  1D99  A5 E0                 LDA CONVERT.DEC2HEX32.RESULT
04351  1D9B  85 80                 STA MATH.ADD32.ADDEND1$
04352  1D9D  A5 E1                 LDA CONVERT.DEC2HEX32.RESULT+1
04353  1D9F  85 81                 STA MATH.ADD32.ADDEND1$+1
04354  1DA1  A5 E2                 LDA CONVERT.DEC2HEX32.RESULT+2
04355  1DA3  85 82                 STA MATH.ADD32.ADDEND1$+2
04356  1DA5  A5 E3                 LDA CONVERT.DEC2HEX32.RESULT+3
04357  1DA7  85 83                 STA MATH.ADD32.ADDEND1$+3
04358  1DA9             
04359  1DA9  A5 FB                 LDA CONVERT.DEC2HEX32.INT
04360  1DAB  85 84                 STA MATH.ADD32.ADDEND2$
04361  1DAD  A5 FC                 LDA CONVERT.DEC2HEX32.INT+1
04362  1DAF  85 85                 STA MATH.ADD32.ADDEND2$+1
04363  1DB1  A5 FD                 LDA CONVERT.DEC2HEX32.INT+2
04364  1DB3  85 86                 STA MATH.ADD32.ADDEND2$+2
04365  1DB5  A5 FE                 LDA CONVERT.DEC2HEX32.INT+3
04366  1DB7  85 87                 STA MATH.ADD32.ADDEND2$+3
04367  1DB9             
04368  1DB9  20 22 28              JSR MATH.ADD32$ ; RESULT = RESULT + INT
04369  1DBC             
04370  1DBC  A5 88                 LDA MATH.ADD32.SUM$
04371  1DBE  85 E0                 STA CONVERT.DEC2HEX32.RESULT
04372  1DC0  A5 89                 LDA MATH.ADD32.SUM$+1
04373  1DC2  85 E1                 STA CONVERT.DEC2HEX32.RESULT+1
04374  1DC4  A5 8A                 LDA MATH.ADD32.SUM$+2
04375  1DC6  85 E2                 STA CONVERT.DEC2HEX32.RESULT+2
04376  1DC8  A5 8B                 LDA MATH.ADD32.SUM$+3
04377  1DCA  85 E3                 STA CONVERT.DEC2HEX32.RESULT+3
04378  1DCC             
04379  1DCC             @NEXTDIGIT 
04380  1DCC  E8                    INX ; X = X + 1
04381  1DCD  E4 2A                 CPX CONVERT.DEC2HEX32.LEN
04382  1DCF  F0 03                 BEQ @END
04383  1DD1  4C 40 1D              JMP @LOOP
04384  1DD4             
04385  1DD4             @END
04386  1DD4             
04387  1DD4  60                    RTS
04388  1DD5             
04389  1DD5             
04390  1DD5             
04391  1DD5             
04392  1DD5             
04393  1DD5             ;ALIGN $100
04394  1DD5             
04395  1DD5             TIME.GETTICKS.RESULT$ = $73 ; 4 BYTES
04396  1DD5             
04397  1DD5             TIME.GETTICKS$ 
04398  1DD5                        ;CLI ; RE-ENABLE INTERRUPTS
04399  1DD5             
04400  1DD5                        ;JSR $FFEA ; CALL UDTIM
04401  1DD5             
04402  1DD5  A5 A2                 LDA $A2
04403  1DD7  85 84                 STA MATH.DIVIDE32.DIVIDEND$
04404  1DD9  A5 A1                 LDA $A1
04405  1DDB  85 85                 STA MATH.DIVIDE32.DIVIDEND$+1
04406  1DDD  A5 A0                 LDA $A0
04407  1DDF  85 86                 STA MATH.DIVIDE32.DIVIDEND$+2
04408  1DE1  A9 00                 LDA #$00
04409  1DE3  85 87                 STA MATH.DIVIDE32.DIVIDEND$+3
04410  1DE5             
04411  1DE5  A9 3C                 LDA #$3C
04412  1DE7  85 80                 STA MATH.DIVIDE32.DIVISOR$
04413  1DE9  A9 00                 LDA #$00
04414  1DEB  85 81                 STA MATH.DIVIDE32.DIVISOR$+1
04415  1DED  A9 00                 LDA #$00
04416  1DEF  85 82                 STA MATH.DIVIDE32.DIVISOR$+2
04417  1DF1  A9 00                 LDA #$00
04418  1DF3  85 83                 STA MATH.DIVIDE32.DIVISOR$+3
04419  1DF5             
04420  1DF5  20 26 2A              JSR MATH.DIVIDE32$ ; QUOTIENT = (TIME / 60)
04421  1DF8             
04422  1DF8  A5 84                 LDA MATH.DIVIDE32.QUOTIENT$
04423  1DFA  85 80                 STA MATH.MULTIPLY32.FACTOR1$
04424  1DFC  A5 85                 LDA MATH.DIVIDE32.QUOTIENT$+1
04425  1DFE  85 81                 STA MATH.MULTIPLY32.FACTOR1$+1
04426  1E00  A5 86                 LDA MATH.DIVIDE32.QUOTIENT$+2
04427  1E02  85 82                 STA MATH.MULTIPLY32.FACTOR1$+2
04428  1E04  A5 87                 LDA MATH.DIVIDE32.QUOTIENT$+3
04429  1E06  85 83                 STA MATH.MULTIPLY32.FACTOR1$+3
04430  1E08             
04431  1E08  A9 E8                 LDA #$E8
04432  1E0A  85 84                 STA MATH.MULTIPLY32.FACTOR2$
04433  1E0C  A9 03                 LDA #$03
04434  1E0E  85 85                 STA MATH.MULTIPLY32.FACTOR2$+1
04435  1E10  A9 00                 LDA #$00
04436  1E12  85 86                 STA MATH.MULTIPLY32.FACTOR2$+2
04437  1E14  A9 00                 LDA #$00
04438  1E16  85 87                 STA MATH.MULTIPLY32.FACTOR2$+3
04439  1E18             
04440  1E18  20 8D 29              JSR MATH.MULTIPLY32$ ; TICKS = QUOTIENT * 1000
04441  1E1B             
04442  1E1B  A5 88                 LDA MATH.MULTIPLY32.PRODUCT$
04443  1E1D  85 73                 STA TIME.GETTICKS.RESULT$
04444  1E1F  A5 89                 LDA MATH.MULTIPLY32.PRODUCT$+1
04445  1E21  85 74                 STA TIME.GETTICKS.RESULT$+1
04446  1E23  A5 8A                 LDA MATH.MULTIPLY32.PRODUCT$+2
04447  1E25  85 75                 STA TIME.GETTICKS.RESULT$+2
04448  1E27  A5 8B                 LDA MATH.MULTIPLY32.PRODUCT$+3
04449  1E29  85 76                 STA TIME.GETTICKS.RESULT$+3
04450  1E2B             
04451  1E2B                        ; AT THIS POINT WE HAVE THE TICKS TO THE SECOND (ROUNDED DOWN).
04452  1E2B                        ; WE NEED TO ADD THE DECIMAL (REMAINDER) TO GET THE MILLISECONDS.
04453  1E2B             
04454  1E2B  A5 8C                 LDA MATH.DIVIDE32.REMAINDER$
04455  1E2D  85 80                 STA MATH.MULTIPLY32.FACTOR1$
04456  1E2F  A5 8D                 LDA MATH.DIVIDE32.REMAINDER$+1
04457  1E31  85 81                 STA MATH.MULTIPLY32.FACTOR1$+1
04458  1E33  A5 8E                 LDA MATH.DIVIDE32.REMAINDER$+2
04459  1E35  85 82                 STA MATH.MULTIPLY32.FACTOR1$+2
04460  1E37  A5 8F                 LDA MATH.DIVIDE32.REMAINDER$+3
04461  1E39  85 83                 STA MATH.MULTIPLY32.FACTOR1$+3
04462  1E3B             
04463  1E3B  A9 E8                 LDA #$E8
04464  1E3D  85 84                 STA MATH.MULTIPLY32.FACTOR2$
04465  1E3F  A9 03                 LDA #$03
04466  1E41  85 85                 STA MATH.MULTIPLY32.FACTOR2$+1
04467  1E43  A9 00                 LDA #$00
04468  1E45  85 86                 STA MATH.MULTIPLY32.FACTOR2$+2
04469  1E47  A9 00                 LDA #$00
04470  1E49  85 87                 STA MATH.MULTIPLY32.FACTOR2$+3
04471  1E4B             
04472  1E4B  20 8D 29              JSR MATH.MULTIPLY32$ ; Y = REMAINDER * 1000
04473  1E4E             
04474  1E4E  A5 88                 LDA MATH.MULTIPLY32.PRODUCT$
04475  1E50  85 84                 STA MATH.DIVIDE32.DIVIDEND$
04476  1E52  A5 89                 LDA MATH.MULTIPLY32.PRODUCT$+1
04477  1E54  85 85                 STA MATH.DIVIDE32.DIVIDEND$+1
04478  1E56  A5 8A                 LDA MATH.MULTIPLY32.PRODUCT$+2
04479  1E58  85 86                 STA MATH.DIVIDE32.DIVIDEND$+2
04480  1E5A  A5 8B                 LDA MATH.MULTIPLY32.PRODUCT$+3
04481  1E5C  85 87                 STA MATH.DIVIDE32.DIVIDEND$+3
04482  1E5E             
04483  1E5E  A9 3C                 LDA #$3C
04484  1E60  85 80                 STA MATH.DIVIDE32.DIVISOR$
04485  1E62  A9 00                 LDA #$00
04486  1E64  85 81                 STA MATH.DIVIDE32.DIVISOR$+1
04487  1E66  A9 00                 LDA #$00
04488  1E68  85 82                 STA MATH.DIVIDE32.DIVISOR$+2
04489  1E6A  A9 00                 LDA #$00
04490  1E6C  85 83                 STA MATH.DIVIDE32.DIVISOR$+3
04491  1E6E             
04492  1E6E  20 26 2A              JSR MATH.DIVIDE32$ ; X = (Y / 60)
04493  1E71             
04494  1E71                        ; ADD TO TICKS
04495  1E71  A5 84                 LDA MATH.DIVIDE32.QUOTIENT$
04496  1E73  85 80                 STA MATH.ADD32.ADDEND1$
04497  1E75  A5 85                 LDA MATH.DIVIDE32.QUOTIENT$+1
04498  1E77  85 81                 STA MATH.ADD32.ADDEND1$+1
04499  1E79  A5 86                 LDA MATH.DIVIDE32.QUOTIENT$+2
04500  1E7B  85 82                 STA MATH.ADD32.ADDEND1$+2
04501  1E7D  A5 87                 LDA MATH.DIVIDE32.QUOTIENT$+3
04502  1E7F  85 83                 STA MATH.ADD32.ADDEND1$+3
04503  1E81             
04504  1E81  A5 73                 LDA TIME.GETTICKS.RESULT$
04505  1E83  85 84                 STA MATH.ADD32.ADDEND2$
04506  1E85  A5 74                 LDA TIME.GETTICKS.RESULT$+1
04507  1E87  85 85                 STA MATH.ADD32.ADDEND2$+1
04508  1E89  A5 75                 LDA TIME.GETTICKS.RESULT$+2
04509  1E8B  85 86                 STA MATH.ADD32.ADDEND2$+2
04510  1E8D  A5 76                 LDA TIME.GETTICKS.RESULT$+3
04511  1E8F  85 87                 STA MATH.ADD32.ADDEND2$+3
04512  1E91             
04513  1E91  20 22 28              JSR MATH.ADD32$ ; TICKS = TICKS + X
04514  1E94             
04515  1E94  A5 88                 LDA MATH.ADD32.SUM$
04516  1E96  85 73                 STA TIME.GETTICKS.RESULT$
04517  1E98  A5 89                 LDA MATH.ADD32.SUM$+1
04518  1E9A  85 74                 STA TIME.GETTICKS.RESULT$+1
04519  1E9C  A5 8A                 LDA MATH.ADD32.SUM$+2
04520  1E9E  85 75                 STA TIME.GETTICKS.RESULT$+2
04521  1EA0  A5 8B                 LDA MATH.ADD32.SUM$+3
04522  1EA2  85 76                 STA TIME.GETTICKS.RESULT$+3
04523  1EA4             
04524  1EA4  60                    RTS
04525  1EA5             
04526  1EA5             
04527  1EA5             TIME.HALT$ 
04528  1EA5                        ; DELAY ADDED TO SLOW DOWN THE QUICK BACKSPACE CHARACTERS.
04529  1EA5                        ; 100 = $64
04530  1EA5                        ; 50 = $32
04531  1EA5  A9 32                 LDA #$32
04532  1EA7  85 77                 STA TIME.WAIT.MILLISECONDS$
04533  1EA9  A9 00                 LDA #$00
04534  1EAB  85 78                 STA TIME.WAIT.MILLISECONDS$+1
04535  1EAD  A9 00                 LDA #$00
04536  1EAF  85 79                 STA TIME.WAIT.MILLISECONDS$+2
04537  1EB1  A9 00                 LDA #$00
04538  1EB3  85 7A                 STA TIME.WAIT.MILLISECONDS$+3
04539  1EB5  20 B9 1E              JSR TIME.WAIT$
04540  1EB8             
04541  1EB8  60                    RTS
04542  1EB9             
04543  1EB9             
04544  1EB9             TIME.WAIT.MILLISECONDS$ = $77 ; 4 BYTES
04545  1EB9             
04546  1EB9             TIME.WAIT$ 
04547  1EB9  20 D5 1D              JSR TIME.GETTICKS$
04548  1EBC             
04549  1EBC  A5 77                 LDA TIME.WAIT.MILLISECONDS$
04550  1EBE  85 80                 STA MATH.ADD32.ADDEND1$
04551  1EC0  A5 78                 LDA TIME.WAIT.MILLISECONDS$+1
04552  1EC2  85 81                 STA MATH.ADD32.ADDEND1$+1
04553  1EC4  A5 79                 LDA TIME.WAIT.MILLISECONDS$+2
04554  1EC6  85 82                 STA MATH.ADD32.ADDEND1$+2
04555  1EC8  A5 7A                 LDA TIME.WAIT.MILLISECONDS$+3
04556  1ECA  85 83                 STA MATH.ADD32.ADDEND1$+3
04557  1ECC             
04558  1ECC  A5 73                 LDA TIME.GETTICKS.RESULT$
04559  1ECE  85 84                 STA MATH.ADD32.ADDEND2$
04560  1ED0  A5 74                 LDA TIME.GETTICKS.RESULT$+1
04561  1ED2  85 85                 STA MATH.ADD32.ADDEND2$+1
04562  1ED4  A5 75                 LDA TIME.GETTICKS.RESULT$+2
04563  1ED6  85 86                 STA MATH.ADD32.ADDEND2$+2
04564  1ED8  A5 76                 LDA TIME.GETTICKS.RESULT$+3
04565  1EDA  85 87                 STA MATH.ADD32.ADDEND2$+3
04566  1EDC             
04567  1EDC  20 22 28              JSR MATH.ADD32$
04568  1EDF                        
04569  1EDF                        ; STORE THE FIND
04570  1EDF  A5 88                 LDA MATH.ADD32.SUM$
04571  1EE1  85 77                 STA TIME.WAIT.MILLISECONDS$
04572  1EE3  A5 89                 LDA MATH.ADD32.SUM$+1
04573  1EE5  85 78                 STA TIME.WAIT.MILLISECONDS$+1
04574  1EE7  A5 8A                 LDA MATH.ADD32.SUM$+2
04575  1EE9  85 79                 STA TIME.WAIT.MILLISECONDS$+2
04576  1EEB  A5 8B                 LDA MATH.ADD32.SUM$+3
04577  1EED  85 7A                 STA TIME.WAIT.MILLISECONDS$+3
04578  1EEF                        
04579  1EEF             @LOOP
04580  1EEF  20 D5 1D              JSR TIME.GETTICKS$
04581  1EF2             
04582  1EF2  A5 73                 LDA TIME.GETTICKS.RESULT$
04583  1EF4  85 80                 STA MATH.CMP32.NUM1$
04584  1EF6  A5 74                 LDA TIME.GETTICKS.RESULT$+1
04585  1EF8  85 81                 STA MATH.CMP32.NUM1$+1
04586  1EFA  A5 75                 LDA TIME.GETTICKS.RESULT$+2
04587  1EFC  85 82                 STA MATH.CMP32.NUM1$+2
04588  1EFE  A5 76                 LDA TIME.GETTICKS.RESULT$+3
04589  1F00  85 83                 STA MATH.CMP32.NUM1$+3
04590  1F02             
04591  1F02  A5 77                 LDA TIME.WAIT.MILLISECONDS$
04592  1F04  85 84                 STA MATH.CMP32.NUM2$
04593  1F06  A5 78                 LDA TIME.WAIT.MILLISECONDS$+1
04594  1F08  85 85                 STA MATH.CMP32.NUM2$+1
04595  1F0A  A5 79                 LDA TIME.WAIT.MILLISECONDS$+2
04596  1F0C  85 86                 STA MATH.CMP32.NUM2$+2
04597  1F0E  A5 7A                 LDA TIME.WAIT.MILLISECONDS$+3
04598  1F10  85 87                 STA MATH.CMP32.NUM2$+3
04599  1F12             
04600  1F12  20 00 29              JSR MATH.CMP32$ ; IF TICKS > (MILLISECONDS + TICKS) THEN CARRY FLAG SHOULD BE SET.
04601  1F15             
04602  1F15             ;        LDA TIME.GETTICKS.RESULT$
04603  1F15             ;        STA CONSOLE.WRITEINT32.INTEGER$
04604  1F15             ;        LDA TIME.GETTICKS.RESULT$+1
04605  1F15             ;        STA CONSOLE.WRITEINT32.INTEGER$+1
04606  1F15             ;        LDA TIME.GETTICKS.RESULT$+2
04607  1F15             ;        STA CONSOLE.WRITEINT32.INTEGER$+2
04608  1F15             ;        LDA TIME.GETTICKS.RESULT$+3
04609  1F15             ;        STA CONSOLE.WRITEINT32.INTEGER$+3
04610  1F15             ;        JSR CONSOLE.WRITEINT32$
04611  1F15             
04612  1F15                        ;BCC @LOOP ; GOTO @LOOP IF TICKS < (MILLISECONDS + TICKS).
04613  1F15  B0 03                 BCS @END
04614  1F17  4C EF 1E              JMP @LOOP
04615  1F1A             @END
04616  1F1A  60                    RTS
04617  1F1B             
04618  1F1B             
04619  1F1B             
04620  1F1B             
04621  1F1B             MEMORY.PUSHZP$ 
04622  1F1B             
04623  1F1B                        ; THE STACK IS POINTING TO THE RETURN ADDRESS.
04624  1F1B                        ; GET THE RETURN ADDRESS
04625  1F1B  68                    PLA
04626  1F1C  85 20                 STA $20
04627  1F1E  E6 20                 INC $20
04628  1F20  68                    PLA
04629  1F21  85 21                 STA $21
04630  1F23             
04631  1F23                        ; BACK UP VALUES $73-$8F
04632  1F23  A2 00                 LDX #0
04633  1F25             @BACKUP
04634  1F25  B5 73                 LDA $73,X
04635  1F27  48                    PHA
04636  1F28  E8                    INX
04637  1F29  E0 1D                 CPX #29
04638  1F2B  D0 F8                 BNE @BACKUP
04639  1F2D             
04640  1F2D                        ; IMPLICIT RETURN.
04641  1F2D  6C 20 00              JMP ($0020)
04642  1F30             
04643  1F30  60                    RTS
04644  1F31             
04645  1F31             MEMORY.PULLZP$ 
04646  1F31             
04647  1F31                        ; THE STACK IS POINTING TO THE RETURN ADDRESS.
04648  1F31                        ; GET THE RETURN ADDRESS
04649  1F31  68                    PLA
04650  1F32  85 20                 STA $20
04651  1F34  E6 20                 INC $20
04652  1F36  68                    PLA
04653  1F37  85 21                 STA $21
04654  1F39             
04655  1F39                        ; RESTORE VALUES $73-$79
04656  1F39  A2 1D                 LDX #29
04657  1F3B             @RESTORE
04658  1F3B  CA                    DEX
04659  1F3C  68                    PLA
04660  1F3D  95 73                 STA $73,X
04661  1F3F  E0 00                 CPX #0
04662  1F41  D0 F8                 BNE @RESTORE
04663  1F43             
04664  1F43                        ; IMPLICIT RETURN.
04665  1F43  6C 20 00              JMP ($0020)
04666  1F46             
04667  1F46             STRING.ISEQUAL.ADDRESS1$ = $7A ; 2 BYTES
04668  1F46             STRING.ISEQUAL.ADDRESS2$ = $7C ; 2 BYTES
04669  1F46             STRING.ISEQUAL.CHAR = $7D ; 1 BYTES
04670  1F46             STRING.ISEQUAL.VALUE$ = $7E ; 1 BYTE
04671  1F46             STRING.ISEQUAL$ 
04672  1F46                        ; COMPARES THE VALUES OF ADDRESS1 AND ADDRESS2 AND DETERMINES IF THEY ARE EQUAL
04673  1F46             
04674  1F46  A9 00                 LDA #$00
04675  1F48  85 7E                 STA STRING.ISEQUAL.VALUE$
04676  1F4A                        
04677  1F4A  A5 7A                 LDA STRING.ISEQUAL.ADDRESS1$
04678  1F4C  85 FB                 STA $FB
04679  1F4E  A5 7B                 LDA STRING.ISEQUAL.ADDRESS1$+1
04680  1F50  85 FC                 STA $FC
04681  1F52             
04682  1F52  A5 7C                 LDA STRING.ISEQUAL.ADDRESS2$
04683  1F54  85 FD                 STA $FD
04684  1F56  A5 7D                 LDA STRING.ISEQUAL.ADDRESS2$+1
04685  1F58  85 FE                 STA $FE
04686  1F5A             
04687  1F5A  A0 00                 LDY #$00
04688  1F5C             @LOOP
04689  1F5C  B1 FB                 LDA ($FB),Y
04690  1F5E  85 7D                 STA STRING.ISEQUAL.CHAR
04691  1F60  B1 FD                 LDA ($FD),Y
04692  1F62  C5 7D                 CMP STRING.ISEQUAL.CHAR
04693  1F64  F0 03                 BEQ @CONT
04694  1F66  4C 83 1F              JMP @DONE
04695  1F69             @CONT
04696  1F69             
04697  1F69  C9 FF                 CMP #CONSOLE.NULL$
04698  1F6B  D0 03                 BNE @SKIP0
04699  1F6D  4C 7F 1F              JMP @ISEQUAL
04700  1F70             @SKIP0
04701  1F70             
04702  1F70  E6 FB                 INC $FB
04703  1F72  D0 02                 BNE @SKIP1
04704  1F74  E6 FC                 INC $FC
04705  1F76             @SKIP1
04706  1F76             
04707  1F76  E6 FD                 INC $FD
04708  1F78  D0 02                 BNE @SKIP2
04709  1F7A  E6 FE                 INC $FE
04710  1F7C             @SKIP2
04711  1F7C  4C 5C 1F              JMP @LOOP
04712  1F7F             
04713  1F7F             @ISEQUAL
04714  1F7F  A9 01                 LDA #$01
04715  1F81  85 7E                 STA STRING.ISEQUAL.VALUE$
04716  1F83                        
04717  1F83             @DONE
04718  1F83  60                    RTS
04719  1F84             
04720  1F84             ;TIME.HALT2
04721  1F84             ;        JSR TIME.HALT$
04722  1F84             ;        JSR TIME.HALT$
04723  1F84             ;        RTS
04724  1F84             
04725  1F84             KERNEL.RESET$ 
04726  1F84  20 A9 1F              JSR DISK.RESET$
04727  1F87  6C FC FF              JMP ($FFFC)
04728  1F8A             
04729  1F8A             
04730  1F8A             DISK.CHECKERROR 
04731  1F8A             
04732  1F8A  AD 41 3B              LDA DISK.ERROR$
04733  1F8D  C9 01                 CMP #DISKERROR.FILE_SCRATCHED$
04734  1F8F  F0 03                 BEQ @FILESCRATCHED
04735  1F91  4C 96 1F              JMP @DONE
04736  1F94             @FILESCRATCHED 
04737  1F94                        ;LDA #DISKERROR.FILE_NOT_FOUND$
04738  1F94  A9 00                 LDA #DISKERROR.OK$
04739  1F96             
04740  1F96             @DONE
04741  1F96  8D 41 3B              STA DISK.ERROR$
04742  1F99  60                    RTS
04743  1F9A             
04744  1F9A             DISK.VALIDATE$ 
04745  1F9A                        ; SET THE PREFIX COMMAND "V"
04746  1F9A  A9 56                 LDA #"V"
04747  1F9C  8D 1E 3F              STA DISK.EXECMD.FILENAME
04748  1F9F             
04749  1F9F  A9 02                 LDA #02
04750  1FA1  8D 49 3F              STA DISK.EXECMD.LEN
04751  1FA4             
04752  1FA4  4C 4A 3F              JMP DISK.EXECMD
04753  1FA7             
04754  1FA7             ;DISK.RESET.STRING TEXT "U:"
04755  1FA7             ;;DISK.RESET.LEN BYTE #02
04756  1FA7             ;DISK.RESET$
04757  1FA7             ;        ; THERE IS NO FILE NAME
04758  1FA7             ;        LDA #$00
04759  1FA7             ;        LDX #$00
04760  1FA7             ;        LDY #$00
04761  1FA7             ;        JSR $FFBD     ; CALL SETNAM
04762  1FA7             
04763  1FA7             ;        LDA #$0F      ; FILE NUMBER 15
04764  1FA7             ;        LDX $BA       ; LAST USED DEVICE NUMBER
04765  1FA7             ;        BNE @SKIP
04766  1FA7             ;        LDX #$08      ; DEFAULT TO DEVICE 8
04767  1FA7             ;@SKIP   LDY #$0F      ; SECONDARY ADDRESS 15
04768  1FA7             ;        JSR $FFBA     ; CALL SETLFS
04769  1FA7             
04770  1FA7             ;        JSR $FFC0     ; CALL OPEN
04771  1FA7             ;        BCS @ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
04772  1FA7             
04773  1FA7             ;        ; CHECK DRIVE ERROR CHANNEL HERE TO TEST FOR
04774  1FA7             ;        ; FILE EXISTS ERROR ETC.
04775  1FA7             
04776  1FA7             ;        LDX #$0F      ; FILENUMBER 15
04777  1FA7             ;        JSR $FFC9     ; CALL CHKOUT (FILE 15 NOW USED AS OUTPUT)
04778  1FA7             
04779  1FA7             ;        ; SET THE MEMORY ADDRESS
04780  1FA7             ;        LDA #<DISK.RESET.STRING
04781  1FA7             ;        STA $AE
04782  1FA7             ;        LDA #>DISK.RESET.STRING
04783  1FA7             ;        STA $AF
04784  1FA7             
04785  1FA7             ;        LDY #$00
04786  1FA7             ;@LOOP
04787  1FA7             ;        ;LDX #$08
04788  1FA7             ;        JSR $FFB7     ; CALL READST (READ STATUS BYTE)
04789  1FA7             ;        ;BNE @WERROR   ; WRITE ERROR
04790  1FA7             ;        BNE @ERROR   ; WRITE ERROR
04791  1FA7             ;        LDA ($AE),Y   ; GET BYTE FROM MEMORY
04792  1FA7             ;        JSR $FFD2     ; CALL CHROUT (WRITE BYTE TO FILE)
04793  1FA7             ;        INY
04794  1FA7             ;        CPY #02
04795  1FA7             ;        BNE @LOOP
04796  1FA7             
04797  1FA7             ;        ;; WAIT TWO SECONDS
04798  1FA7             ;;        ; 2000 = $07D0
04799  1FA7             ;;        LDA #$D0
04800  1FA7             ;;        STA TIME.WAIT.MILLISECONDS$
04801  1FA7             ;;        LDA #$07
04802  1FA7             ;;        STA TIME.WAIT.MILLISECONDS$+1
04803  1FA7             ;;        LDA #$00
04804  1FA7             ;;        STA TIME.WAIT.MILLISECONDS$+2
04805  1FA7             ;;        STA TIME.WAIT.MILLISECONDS$+3
04806  1FA7             ;;        JSR TIME.WAIT$
04807  1FA7             
04808  1FA7             ;@CLOSE
04809  1FA7             ;        ;LDA #$0F      ; FILENUMBER 15
04810  1FA7             ;        ;JSR $FFC3     ; CALL CLOSE
04811  1FA7             
04812  1FA7             ;        JSR $FFCC     ; CALL CLRCHN
04813  1FA7             ;        RTS
04814  1FA7             ;@ERROR
04815  1FA7             ;        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
04816  1FA7             
04817  1FA7             ;        ; MOST LIKELY ERRORS:
04818  1FA7             ;        ; A = $05 (DEVICE NOT PRESENT)
04819  1FA7             
04820  1FA7             ;        ;... ERROR HANDLING FOR OPEN ERRORS ...
04821  1FA7             ;        JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
04822  1FA7             ;;@WERROR
04823  1FA7             ;;        ; FOR FURTHER INFORMATION, THE DRIVE ERROR CHANNEL HAS TO BE READ
04824  1FA7             
04825  1FA7             ;;        ;... ERROR HANDLING FOR WRITE ERRORS ...
04826  1FA7             ;;        JMP @CLOSE
04827  1FA7             
04828  1FA7  55 3A      DISK.RESET.STRING TEXT "U:"
04829  1FA9             DISK.RESET$ 
04830  1FA9                        ; THERE IS NO FILE NAME
04831  1FA9  A9 02                 LDA #$02
04832  1FAB  A2 A7                 LDX #<DISK.RESET.STRING
04833  1FAD  A0 1F                 LDY #>DISK.RESET.STRING
04834  1FAF  20 BD FF              JSR $FFBD     ; CALL SETNAM
04835  1FB2             
04836  1FB2  A9 0F                 LDA #$0F      ; FILE NUMBER 15
04837  1FB4  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
04838  1FB6  D0 02                 BNE @SKIP
04839  1FB8  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
04840  1FBA  A0 0F      @SKIP      LDY #$0F      ; SECONDARY ADDRESS 15
04841  1FBC  20 BA FF              JSR $FFBA     ; CALL SETLFS
04842  1FBF             
04843  1FBF  20 C0 FF              JSR $FFC0     ; CALL OPEN
04844  1FC2  B0 00                 BCS @ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
04845  1FC4             @ERROR
04846  1FC4             @CLOSE
04847  1FC4                        ;LDA #$0F      ; FILENUMBER 15
04848  1FC4                        ;JSR $FFC3     ; CALL CLOSE
04849  1FC4             
04850  1FC4  20 CC FF              JSR $FFCC     ; CALL CLRCHN
04851  1FC7  60                    RTS
04852  1FC8             
04853  1FC8             SERIAL.OPEN$ 
04854  1FC8             
04855  1FC8  20 47 41              JSR SERIAL.SET_BAUD
04856  1FCB             
04857  1FCB  A5 BA                 LDA $BA
04858  1FCD  8D 34 41              STA SERIAL.PREV_DEVICE
04859  1FD0             
04860  1FD0                        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
04861  1FD0  A9 05                 LDA #$05      ; FILENUMBER 5
04862  1FD2                        ;NOP
04863  1FD2                        ;NOP
04864  1FD2  20 C3 FF              JSR $FFC3     ; CALL CLOSE
04865  1FD5                        ;NOP
04866  1FD5                        ;NOP
04867  1FD5                        ;NOP
04868  1FD5             
04869  1FD5                        ;LDA #2
04870  1FD5  A9 01                 LDA #1
04871  1FD7  A2 38                 LDX #<SERIAL.BAUD$
04872  1FD9  A0 41                 LDY #>SERIAL.BAUD$
04873  1FDB  20 BD FF              JSR $FFBD     ; CALL SETNAM
04874  1FDE             
04875  1FDE  A9 05                 LDA #$05      ; FILE NUMBER 5
04876  1FE0  A2 02                 LDX #$02      ; DEFAULT TO DEVICE 2
04877  1FE2  A0 00                 LDY #$00      ; SECONDARY ADDRESS 0
04878  1FE4  20 BA FF              JSR $FFBA     ; CALL SETLFS
04879  1FE7             
04880  1FE7  20 C0 FF              JSR $FFC0     ; CALL OPEN
04881  1FEA             
04882  1FEA                        ; SET THE RS232 INPUT TIMER
04883  1FEA                        ;POKE665,73-(PEEK(678)*30)
04884  1FEA  AD A6 02              LDA 678 ; 0=NTSC, 1=PAL
04885  1FED  F0 05                 BEQ @POKE_665_73
04886  1FEF  A9 2B                 LDA #43
04887  1FF1  4C F6 1F              JMP @STA_665
04888  1FF4             @POKE_665_73 
04889  1FF4  A9 49                 LDA #73
04890  1FF6             @STA_665
04891  1FF6  8D 99 02              STA 665
04892  1FF9             
04893  1FF9  60                    RTS
04894  1FFA             
04895  1FFA             
04896  1FFA             
04897  1FFA             ; SKIP $2000-$2800 FOR CUSTOM CHARACTER SET
04898  1FFA             
04899  1FFA             *=$2800
04900  2800             
04901  2800             
04902  2800             
04903  2800             ALIGN      $100
04904  2800             
04905  2800             MATH.ADD16.ADDEND1$ = $80 ; 2 BYTES
04906  2800             MATH.ADD16.ADDEND2$ = $82 ; 2 BYTES
04907  2800             MATH.ADD16.SUM$ = $84 ; 2 BYTES
04908  2800             
04909  2800             MATH.ADD16$ 
04910  2800                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:16BIT_ADDITION_AND_SUBTRACTION
04911  2800  18                    CLC                             ; CLEAR CARRY
04912  2801  A5 80                 LDA MATH.ADD16.ADDEND1$
04913  2803  65 82                 ADC MATH.ADD16.ADDEND2$
04914  2805  85 84                 STA MATH.ADD16.SUM$                       ; STORE SUM OF LSBS
04915  2807  A5 81                 LDA MATH.ADD16.ADDEND1$+1
04916  2809  65 83                 ADC MATH.ADD16.ADDEND2$+1                      ; ADD THE MSBS USING CARRY FROM
04917  280B  85 85                 STA MATH.ADD16.SUM$+1                       ; THE PREVIOUS CALCULATION
04918  280D  60                    RTS
04919  280E             
04920  280E             MATH.ADD24.ADDEND1$ = $80 ; 3 BYTES
04921  280E             MATH.ADD24.ADDEND2$ = $83 ; 3 BYTES
04922  280E             MATH.ADD24.SUM$ = $86 ; 3 BYTES
04923  280E             
04924  280E             MATH.ADD24$ 
04925  280E  18                    CLC                             ; CLEAR CARRY
04926  280F  A5 80                 LDA MATH.ADD24.ADDEND1$
04927  2811  65 83                 ADC MATH.ADD24.ADDEND2$
04928  2813  85 86                 STA MATH.ADD24.SUM$
04929  2815  A5 81                 LDA MATH.ADD24.ADDEND1$+1
04930  2817  65 84                 ADC MATH.ADD24.ADDEND2$+1
04931  2819  85 87                 STA MATH.ADD24.SUM$+1
04932  281B  A5 82                 LDA MATH.ADD24.ADDEND1$+2
04933  281D  65 85                 ADC MATH.ADD24.ADDEND2$+2
04934  281F  85 88                 STA MATH.ADD24.SUM$+2
04935  2821  60                    RTS
04936  2822             
04937  2822             MATH.ADD32.ADDEND1$ = $80 ; 4 BYTES
04938  2822             MATH.ADD32.ADDEND2$ = $84 ; 4 BYTES
04939  2822             MATH.ADD32.SUM$ = $88 ; 4 BYTES
04940  2822             
04941  2822             MATH.ADD32$ 
04942  2822  18                    CLC                             ; CLEAR CARRY
04943  2823  A5 80                 LDA MATH.ADD32.ADDEND1$
04944  2825  65 84                 ADC MATH.ADD32.ADDEND2$
04945  2827  85 88                 STA MATH.ADD32.SUM$
04946  2829  A5 81                 LDA MATH.ADD32.ADDEND1$+1
04947  282B  65 85                 ADC MATH.ADD32.ADDEND2$+1
04948  282D  85 89                 STA MATH.ADD32.SUM$+1
04949  282F  A5 82                 LDA MATH.ADD32.ADDEND1$+2
04950  2831  65 86                 ADC MATH.ADD32.ADDEND2$+2
04951  2833  85 8A                 STA MATH.ADD32.SUM$+2
04952  2835  A5 83                 LDA MATH.ADD32.ADDEND1$+3
04953  2837  65 87                 ADC MATH.ADD32.ADDEND2$+3
04954  2839  85 8B                 STA MATH.ADD32.SUM$+3
04955  283B  60                    RTS
04956  283C             
04957  283C             MATH.INC16.ADDRESS$ = $86 ; 2 BYTES
04958  283C             
04959  283C             MATH.INC16$ 
04960  283C             
04961  283C                        ; STORE Y
04962  283C  98                    TYA
04963  283D  48                    PHA
04964  283E             
04965  283E  A0 00                 LDY #$00
04966  2840  B1 86                 LDA (MATH.INC16.ADDRESS$),Y
04967  2842  85 80                 STA MATH.ADD16.ADDEND1$
04968  2844  C8                    INY
04969  2845  B1 86                 LDA (MATH.INC16.ADDRESS$),Y
04970  2847  85 81                 STA MATH.ADD16.ADDEND1$+1
04971  2849             
04972  2849  A9 01                 LDA #$01
04973  284B  85 82                 STA MATH.ADD16.ADDEND2$
04974  284D  A9 00                 LDA #$00
04975  284F  85 83                 STA MATH.ADD16.ADDEND2$+1
04976  2851                        
04977  2851  20 00 28              JSR MATH.ADD16$ ; (*ADDRESS) = (*ADDRESS) + 1
04978  2854             
04979  2854  A5 84                 LDA MATH.ADD16.SUM$
04980  2856  A0 00                 LDY #$00
04981  2858  91 86                 STA (MATH.INC16.ADDRESS$),Y
04982  285A  A5 85                 LDA MATH.ADD16.SUM$+1
04983  285C  C8                    INY
04984  285D  91 86                 STA (MATH.INC16.ADDRESS$),Y
04985  285F             
04986  285F                        ; RESTORE Y
04987  285F  68                    PLA
04988  2860  A8                    TAY
04989  2861             
04990  2861  60                    RTS
04991  2862             
04992  2862             MATH.INC24.ADDRESS$ = $86 ; 2 BYTES
04993  2862             MATH.INC24$ 
04994  2862             
04995  2862                        ; STORE Y
04996  2862  98                    TYA
04997  2863  48                    PHA
04998  2864             
04999  2864  A0 00                 LDY #$00
05000  2866  B1 86                 LDA (MATH.INC24.ADDRESS$),Y
05001  2868  85 80                 STA MATH.ADD24.ADDEND1$
05002  286A  C8                    INY
05003  286B  B1 86                 LDA (MATH.INC24.ADDRESS$),Y
05004  286D  85 81                 STA MATH.ADD24.ADDEND1$+1
05005  286F  C8                    INY
05006  2870  B1 86                 LDA (MATH.INC24.ADDRESS$),Y
05007  2872  85 82                 STA MATH.ADD24.ADDEND1$+2
05008  2874             
05009  2874  A9 01                 LDA #$01
05010  2876  85 83                 STA MATH.ADD24.ADDEND2$
05011  2878  A9 00                 LDA #$00
05012  287A  85 84                 STA MATH.ADD24.ADDEND2$+1
05013  287C  A9 00                 LDA #$00
05014  287E  85 85                 STA MATH.ADD24.ADDEND2$+2
05015  2880                        
05016  2880  20 0E 28              JSR MATH.ADD24$ ; (*ADDRESS) = (*ADDRESS) + 1
05017  2883             
05018  2883  A5 86                 LDA MATH.ADD24.SUM$
05019  2885  A0 00                 LDY #$00
05020  2887  91 86                 STA (MATH.INC24.ADDRESS$),Y
05021  2889  A5 87                 LDA MATH.ADD24.SUM$+1
05022  288B  C8                    INY
05023  288C  91 86                 STA (MATH.INC24.ADDRESS$),Y
05024  288E  A5 88                 LDA MATH.ADD24.SUM$+2
05025  2890  C8                    INY
05026  2891  91 86                 STA (MATH.INC24.ADDRESS$),Y
05027  2893             
05028  2893                        ; RESTORE Y
05029  2893  68                    PLA
05030  2894  A8                    TAY
05031  2895             
05032  2895  60                    RTS
05033  2896             
05034  2896             MATH.SUBTRACT16.MENUEND$ = $80 ; 2 BYTES
05035  2896             MATH.SUBTRACT16.SUBTRAHEND$ = $82 ; 2 BYTES
05036  2896             MATH.SUBTRACT16.DIFFERENCE$ = $84 ; 2 BYTES
05037  2896             
05038  2896             MATH.SUBTRACT16$ 
05039  2896                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:16BIT_ADDITION_AND_SUBTRACTION
05040  2896  38                    SEC                             ; SET CARRY FOR BORROW PURPOSE
05041  2897  A5 80                 LDA MATH.SUBTRACT16.MENUEND$
05042  2899  E5 82                 SBC MATH.SUBTRACT16.SUBTRAHEND$                      ; PERFORM SUBTRACTION ON THE LSBS
05043  289B  85 84                 STA MATH.SUBTRACT16.DIFFERENCE$
05044  289D  A5 81                 LDA MATH.SUBTRACT16.MENUEND$+1                     ; DO THE SAME FOR THE MSBS, WITH CARRY
05045  289F  E5 83                 SBC MATH.SUBTRACT16.SUBTRAHEND$+1                      ; SET ACCORDING TO THE PREVIOUS RESULT
05046  28A1  85 85                 STA MATH.SUBTRACT16.DIFFERENCE$+1
05047  28A3  60                    RTS
05048  28A4             
05049  28A4             MATH.SUBTRACT32.MENUEND$ = $80 ; 4 BYTES
05050  28A4             MATH.SUBTRACT32.SUBTRAHEND$ = $84 ; 4 BYTES
05051  28A4             MATH.SUBTRACT32.DIFFERENCE$ = $88 ; 4 BYTES
05052  28A4             
05053  28A4             MATH.SUBTRACT32$ 
05054  28A4  38                    SEC                             ; SET CARRY FOR BORROW PURPOSE
05055  28A5  A5 80                 LDA MATH.SUBTRACT32.MENUEND$
05056  28A7  E5 84                 SBC MATH.SUBTRACT32.SUBTRAHEND$                      ; PERFORM SUBTRACTION ON THE LSBS
05057  28A9  85 88                 STA MATH.SUBTRACT32.DIFFERENCE$
05058  28AB  A5 81                 LDA MATH.SUBTRACT32.MENUEND$+1                      ; DO THE SAME FOR THE MSBS, WITH CARRY
05059  28AD  E5 85                 SBC MATH.SUBTRACT32.SUBTRAHEND$+1                      ; SET ACCORDING TO THE PREVIOUS RESULT
05060  28AF  85 89                 STA MATH.SUBTRACT32.DIFFERENCE$+1
05061  28B1  A5 82                 LDA MATH.SUBTRACT32.MENUEND$+2
05062  28B3  E5 86                 SBC MATH.SUBTRACT32.SUBTRAHEND$+2                      ; PERFORM SUBTRACTION ON THE LSBS
05063  28B5  85 8A                 STA MATH.SUBTRACT32.DIFFERENCE$+2
05064  28B7  A5 83                 LDA MATH.SUBTRACT32.MENUEND$+3                      ; DO THE SAME FOR THE MSBS, WITH CARRY
05065  28B9  E5 87                 SBC MATH.SUBTRACT32.SUBTRAHEND$+3                      ; SET ACCORDING TO THE PREVIOUS RESULT
05066  28BB  85 8B                 STA MATH.SUBTRACT32.DIFFERENCE$+3
05067  28BD  60                    RTS
05068  28BE             
05069  28BE             
05070  28BE             MATH.DEC16.ADDRESS$ = $86 ; 2 BYTES
05071  28BE             
05072  28BE             MATH.DEC16$ 
05073  28BE             
05074  28BE                        ; STORE Y
05075  28BE  98                    TYA
05076  28BF  48                    PHA
05077  28C0             
05078  28C0  A0 00                 LDY #$00
05079  28C2  B1 86                 LDA (MATH.DEC16.ADDRESS$),Y
05080  28C4  85 80                 STA MATH.SUBTRACT16.MENUEND$
05081  28C6  C8                    INY
05082  28C7  B1 86                 LDA (MATH.DEC16.ADDRESS$),Y
05083  28C9  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
05084  28CB             
05085  28CB  A9 01                 LDA #$01
05086  28CD  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
05087  28CF  A9 00                 LDA #$00
05088  28D1  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
05089  28D3                        
05090  28D3  20 96 28              JSR MATH.SUBTRACT16$ ; (*ADDRESS) = (*ADDRESS) - 1
05091  28D6             
05092  28D6  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
05093  28D8  A0 00                 LDY #$00
05094  28DA  91 86                 STA (MATH.DEC16.ADDRESS$),Y
05095  28DC  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
05096  28DE  C8                    INY
05097  28DF  91 86                 STA (MATH.DEC16.ADDRESS$),Y
05098  28E1             
05099  28E1                        ; RESTORE Y
05100  28E1  68                    PLA
05101  28E2  A8                    TAY
05102  28E3             
05103  28E3  60                    RTS
05104  28E4             
05105  28E4             
05106  28E4             MATH.CMP16.NUM1$ = $80 ; 2 BYTES
05107  28E4             MATH.CMP16.NUM2$ = $82 ; 2 BYTES
05108  28E4             
05109  28E4             MATH.CMP16$ 
05110  28E4  A5 81                 LDA MATH.CMP16.NUM1$+1
05111  28E6  C5 83                 CMP MATH.CMP16.NUM2$+1
05112  28E8  D0 04                 BNE @DONE
05113  28EA  A5 80                 LDA MATH.CMP16.NUM1$
05114  28EC  C5 82                 CMP MATH.CMP16.NUM2$
05115  28EE             @DONE
05116  28EE  60                    RTS
05117  28EF             
05118  28EF             ALIGN      $100
05119  2900             
05120  2900             MATH.CMP32.NUM1$ = $80 ; 4 BYTES
05121  2900             MATH.CMP32.NUM2$ = $84 ; 4 BYTES
05122  2900             
05123  2900             MATH.CMP32$ 
05124  2900  A5 83                 LDA MATH.CMP32.NUM1$+3
05125  2902  C5 87                 CMP MATH.CMP32.NUM2$+3
05126  2904  D0 10                 BNE @DONE
05127  2906  A5 82                 LDA MATH.CMP32.NUM1$+2
05128  2908  C5 86                 CMP MATH.CMP32.NUM2$+2
05129  290A  D0 0A                 BNE @DONE
05130  290C  A5 81                 LDA MATH.CMP32.NUM1$+1
05131  290E  C5 85                 CMP MATH.CMP32.NUM2$+1
05132  2910  D0 04                 BNE @DONE
05133  2912  A5 80                 LDA MATH.CMP32.NUM1$
05134  2914  C5 84                 CMP MATH.CMP32.NUM2$
05135  2916             @DONE
05136  2916  60                    RTS
05137  2917             
05138  2917             MATH.RANDOM8.SEED$ = $80 ; 1 BYTE
05139  2917             MATH.RANDOM8.RESULT$ = $80 ; 1 BYTE
05140  2917             
05141  2917             MATH.RANDOM8$ 
05142  2917                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:SMALL_FAST_8-BIT_PRNG
05143  2917  A5 80                 LDA MATH.RANDOM8.SEED$
05144  2919  F0 06                 BEQ @DOEOR
05145  291B  18                    CLC
05146  291C  0A                    ASL
05147  291D  F0 04                 BEQ @NOEOR ;IF THE INPUT WAS $80, SKIP THE EOR
05148  291F  90 02                 BCC @NOEOR
05149  2921             @DOEOR
05150  2921  49 12                 EOR #$12 ; MAGIC NUMBER
05151  2923             @NOEOR
05152  2923  85 80                 STA MATH.RANDOM8.RESULT$
05153  2925  60                    RTS
05154  2926             
05155  2926             MATH.RANDOM16.SEED$ = $80 ; 2 BYTES
05156  2926             MATH.RANDOM16.RESULT$ = $80 ; 2 BYTES
05157  2926             
05158  2926             MATH.RANDOM16$ 
05159  2926  A5 80                 LDA MATH.RANDOM16.SEED$
05160  2928  F0 12                 BEQ @LOWZERO ; $0000 AND $8000 ARE SPECIAL VALUES TO TEST FOR
05161  292A             
05162  292A                        ; DO A NORMAL SHIFT
05163  292A  06 80                 ASL MATH.RANDOM16.SEED$
05164  292C  A5 81                 LDA MATH.RANDOM16.SEED$+1
05165  292E  2A                    ROL
05166  292F  90 14                 BCC @NOEOR
05167  2931             
05168  2931             @DOEOR
05169  2931                        ; HIGH BYTE IS IN .A
05170  2931  49 22                 EOR #34 ; MAGIC NUMBER (HI)
05171  2933  85 81                 STA MATH.RANDOM16.SEED$+1
05172  2935  A5 80                 LDA MATH.RANDOM16.SEED$
05173  2937  49 0C                 EOR #12 ; MAGIC NUMBER (LO)
05174  2939  85 80                 STA MATH.RANDOM16.SEED$
05175  293B  60                    RTS
05176  293C             
05177  293C             @LOWZERO
05178  293C  A5 81                 LDA MATH.RANDOM16.SEED$+1
05179  293E  F0 F1                 BEQ @DOEOR ; HIGH BYTE IS ALSO ZERO, SO APPLY THE EOR
05180  2940                        ; FOR SPEED, YOU COULD STORE 'MAGIC' INTO 'SEED' DIRECTLY
05181  2940                        ; INSTEAD OF RUNNING THE EORS
05182  2940             
05183  2940                        ; WASN'T ZERO, CHECK FOR $8000
05184  2940  0A                    ASL
05185  2941  F0 02                 BEQ @NOEOR ; IF $00 IS LEFT AFTER THE SHIFT, THEN IT WAS $80
05186  2943  B0 EC                 BCS @DOEOR ; ELSE, DO THE EOR BASED ON THE CARRY BIT AS USUAL
05187  2945             
05188  2945             @NOEOR
05189  2945  85 81                 STA MATH.RANDOM16.SEED$+1
05190  2947  60                    RTS
05191  2948             
05192  2948             
05193  2948             ;ALIGN $100
05194  2948             
05195  2948             MATH.MULTIPLY8.FACTOR1$ = $80 ; 1 BYTE
05196  2948             MATH.MULTIPLY8.FACTOR2$ = $82 ; 1 BYTE
05197  2948             MATH.MULTIPLY8.PRODUCT$ = $83 ; 1 BYTE
05198  2948             
05199  2948             MATH.MULTIPLY8$ 
05200  2948                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:8BIT_MULTIPLICATION_16BIT_PRODUCT
05201  2948  A9 00                 LDA #$00
05202  294A  A8                    TAY
05203  294B  84 81                 STY MATH.MULTIPLY8.FACTOR1$+1  ; REMOVE THIS LINE FOR 16*8=16BIT MULTIPLY
05204  294D  F0 0D                 BEQ @ENTERLOOP
05205  294F             
05206  294F             @DOADD
05207  294F  18                    CLC
05208  2950  65 80                 ADC MATH.MULTIPLY8.FACTOR1$
05209  2952  AA                    TAX
05210  2953             
05211  2953  98                    TYA
05212  2954  65 81                 ADC MATH.MULTIPLY8.FACTOR1$+1
05213  2956  A8                    TAY
05214  2957  8A                    TXA
05215  2958             
05216  2958             @LOOP
05217  2958  06 80                 ASL MATH.MULTIPLY8.FACTOR1$
05218  295A  26 81                 ROL MATH.MULTIPLY8.FACTOR1$+1
05219  295C             @ENTERLOOP ; ACCUMULATING MULTIPLY ENTRY POINT (ENTER WITH .A=LO, .Y=HI)
05220  295C  46 82                 LSR MATH.MULTIPLY8.FACTOR2$
05221  295E  B0 EF                 BCS @DOADD
05222  2960  D0 F6                 BNE @LOOP
05223  2962             
05224  2962  85 83                 STA MATH.MULTIPLY8.PRODUCT$
05225  2964  84 84                 STY MATH.MULTIPLY8.PRODUCT$+1
05226  2966  60                    RTS
05227  2967             
05228  2967             MATH.MULTIPLY16.FACTOR1$ = $80 ; 2 BYTES
05229  2967             MATH.MULTIPLY16.FACTOR2$ = $82 ; 2 BYTES
05230  2967             MATH.MULTIPLY16.PRODUCT$ = $84 ; 2 BYTES
05231  2967             
05232  2967             MATH.MULTIPLY16$ 
05233  2967                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:16BIT_MULTIPLICATION_32-BIT_PRODUCT
05234  2967  A9 00                 LDA #$00
05235  2969  85 86                 STA MATH.MULTIPLY16.PRODUCT$+2       ; CLEAR UPPER BITS OF PRODUCT
05236  296B  85 87                 STA MATH.MULTIPLY16.PRODUCT$+3
05237  296D  A2 10                 LDX #$10            ; SET BINARY COUNT TO 16
05238  296F             @SHIFT_R
05239  296F  46 81                 LSR MATH.MULTIPLY16.FACTOR1$+1    ; DIVIDE MULTIPLIER BY 2
05240  2971  66 80                 ROR MATH.MULTIPLY16.FACTOR1$
05241  2973  90 0B                 BCC @ROTATE_R
05242  2975  A5 86                 LDA MATH.MULTIPLY16.PRODUCT$+2       ; GET UPPER HALF OF PRODUCT AND ADD MULTIPLICAND
05243  2977  18                    CLC
05244  2978  65 82                 ADC MATH.MULTIPLY16.FACTOR2$
05245  297A  85 86                 STA MATH.MULTIPLY16.PRODUCT$+2
05246  297C  A5 87                 LDA MATH.MULTIPLY16.PRODUCT$+3
05247  297E  65 83                 ADC MATH.MULTIPLY16.FACTOR2$+1
05248  2980             @ROTATE_R  
05249  2980  6A                    ROR                     ; ROTATE PARTIAL PRODUCT
05250  2981  85 87                 STA MATH.MULTIPLY16.PRODUCT$+3
05251  2983  66 86                 ROR MATH.MULTIPLY16.PRODUCT$+2
05252  2985  66 85                 ROR MATH.MULTIPLY16.PRODUCT$+1
05253  2987  66 84                 ROR MATH.MULTIPLY16.PRODUCT$
05254  2989  CA                    DEX
05255  298A  D0 E3                 BNE @SHIFT_R
05256  298C  60                    RTS
05257  298D             
05258  298D             MATH.MULTIPLY32.FACTOR1$ = $80 ; 4 BYTES
05259  298D             MATH.MULTIPLY32.FACTOR2$ = $84 ; 4 BYTES
05260  298D             MATH.MULTIPLY32.PRODUCT$ = $88 ; 4 BYTES
05261  298D             
05262  298D             MATH.MULTIPLY32$ 
05263  298D  A9 00                 LDA #$00                        ; SET PRODUCT TO ZERO
05264  298F  85 88                 STA MATH.MULTIPLY32.PRODUCT$
05265  2991  85 89                 STA MATH.MULTIPLY32.PRODUCT$+1
05266  2993  85 8A                 STA MATH.MULTIPLY32.PRODUCT$+2
05267  2995  85 8B                 STA MATH.MULTIPLY32.PRODUCT$+3
05268  2997             
05269  2997             @LOOP
05270  2997  A5 84                 LDA MATH.MULTIPLY32.FACTOR2$                     ; WHILE FACTOR2 != 0
05271  2999  D0 0D                 BNE @NZ
05272  299B  A5 85                 LDA MATH.MULTIPLY32.FACTOR2$+1
05273  299D  D0 09                 BNE @NZ
05274  299F  A5 86                 LDA MATH.MULTIPLY32.FACTOR2$+2
05275  29A1  D0 05                 BNE @NZ
05276  29A3  A5 87                 LDA MATH.MULTIPLY32.FACTOR2$+3
05277  29A5  D0 01                 BNE @NZ
05278  29A7  60                    RTS
05279  29A8             @NZ
05280  29A8  A5 84                 LDA MATH.MULTIPLY32.FACTOR2$                     ; IF FACTOR2 IS ODD
05281  29AA  29 01                 AND #$01
05282  29AC  F0 19                 BEQ @SKIP
05283  29AE                        
05284  29AE  A5 80                 LDA MATH.MULTIPLY32.FACTOR1$                     ; PRODUCT += FACTOR1
05285  29B0  18                    CLC
05286  29B1  65 88                 ADC MATH.MULTIPLY32.PRODUCT$
05287  29B3  85 88                 STA MATH.MULTIPLY32.PRODUCT$
05288  29B5                        
05289  29B5  A5 81                 LDA MATH.MULTIPLY32.FACTOR1$+1
05290  29B7  65 89                 ADC MATH.MULTIPLY32.PRODUCT$+1
05291  29B9  85 89                 STA MATH.MULTIPLY32.PRODUCT$+1
05292  29BB                        
05293  29BB  A5 82                 LDA MATH.MULTIPLY32.FACTOR1$+2
05294  29BD  65 8A                 ADC MATH.MULTIPLY32.PRODUCT$+2
05295  29BF  85 8A                 STA MATH.MULTIPLY32.PRODUCT$+2
05296  29C1             
05297  29C1  A5 83                 LDA MATH.MULTIPLY32.FACTOR1$+3
05298  29C3  65 8B                 ADC MATH.MULTIPLY32.PRODUCT$+3
05299  29C5  85 8B                 STA MATH.MULTIPLY32.PRODUCT$+3
05300  29C7             
05301  29C7             @SKIP
05302  29C7  06 80                 ASL MATH.MULTIPLY32.FACTOR1$
05303  29C9  26 81                 ROL MATH.MULTIPLY32.FACTOR1$+1
05304  29CB  26 82                 ROL MATH.MULTIPLY32.FACTOR1$+2
05305  29CD  26 83                 ROL MATH.MULTIPLY32.FACTOR1$+3
05306  29CF  46 87                 LSR MATH.MULTIPLY32.FACTOR2$+3
05307  29D1  66 86                 ROR MATH.MULTIPLY32.FACTOR2$+2
05308  29D3  66 85                 ROR MATH.MULTIPLY32.FACTOR2$+1
05309  29D5  66 84                 ROR MATH.MULTIPLY32.FACTOR2$
05310  29D7             
05311  29D7  4C 97 29              JMP @LOOP                       ; END WHILE
05312  29DA             
05313  29DA             
05314  29DA             ;ALIGN $100
05315  29DA             
05316  29DA             MATH.DIVIDE8.DIVISOR$ = $80 ; 1 BYTE
05317  29DA             MATH.DIVIDE8.DIVIDEND$ = $81 ; 1 BYTE
05318  29DA             MATH.DIVIDE8.QUOTIENT$ = MATH.DIVIDE8.DIVIDEND$ ; 1 BYTE
05319  29DA             MATH.DIVIDE8.REMAINDER$ = $82 ; 1 BYTE
05320  29DA             
05321  29DA             MATH.DIVIDE8$ 
05322  29DA                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:8BIT_DIVIDE_8BIT_PRODUCT
05323  29DA  A9 00                 LDA #$00
05324  29DC  A2 07                 LDX #$07
05325  29DE  18                    CLC
05326  29DF             @LOOP1
05327  29DF  26 81                 ROL MATH.DIVIDE8.DIVIDEND$
05328  29E1  2A                    ROL
05329  29E2  C5 80                 CMP MATH.DIVIDE8.DIVISOR$
05330  29E4  90 02                 BCC @LOOP2
05331  29E6  E5 80                 SBC MATH.DIVIDE8.DIVISOR$
05332  29E8             @LOOP2
05333  29E8  CA                    DEX
05334  29E9  10 F4                 BPL @LOOP1
05335  29EB  26 81                 ROL MATH.DIVIDE8.DIVIDEND$
05336  29ED  85 82                 STA MATH.DIVIDE8.REMAINDER$
05337  29EF  60                    RTS
05338  29F0             
05339  29F0             ALIGN      $100
05340  2A00             
05341  2A00             MATH.DIVIDE16.DIVISOR$ = $80 ; 2 BYTES
05342  2A00             MATH.DIVIDE16.DIVIDEND$ = $82 ; 2 BYTES
05343  2A00             MATH.DIVIDE16.QUOTIENT$ = MATH.DIVIDE16.DIVIDEND$ ; 2 BYTES
05344  2A00             MATH.DIVIDE16.REMAINDER$ = $84 ; 2 BYTES
05345  2A00             
05346  2A00             MATH.DIVIDE16$ 
05347  2A00                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:16BIT_DIVISION_16-BIT_RESULT
05348  2A00  A9 00                 LDA #0          ;PRESET REMAINDER TO 0
05349  2A02  85 84                 STA MATH.DIVIDE16.REMAINDER$
05350  2A04  85 85                 STA MATH.DIVIDE16.REMAINDER$+1
05351  2A06  A2 10                 LDX #16         ;REPEAT FOR EACH BIT: ...
05352  2A08             
05353  2A08             @LOOP
05354  2A08  06 82                 ASL MATH.DIVIDE16.DIVIDEND$    ;DIVIDEND LB & HB*2, MSB -> CARRY
05355  2A0A  26 83                 ROL MATH.DIVIDE16.DIVIDEND$+1
05356  2A0C  26 84                 ROL MATH.DIVIDE16.REMAINDER$   ;REMAINDER LB & HB * 2 + MSB FROM CARRY
05357  2A0E  26 85                 ROL MATH.DIVIDE16.REMAINDER$+1
05358  2A10  A5 84                 LDA MATH.DIVIDE16.REMAINDER$
05359  2A12  38                    SEC
05360  2A13  E5 80                 SBC MATH.DIVIDE16.DIVISOR$     ;SUBSTRACT DIVISOR TO SEE IF IT FITS IN
05361  2A15  A8                    TAY             ;LB RESULT -> Y, FOR WE MAY NEED IT LATER
05362  2A16  A5 85                 LDA MATH.DIVIDE16.REMAINDER$+1
05363  2A18  E5 81                 SBC MATH.DIVIDE16.DIVISOR$+1
05364  2A1A  90 06                 BCC @SKIP        ;IF CARRY=0 THEN DIVISOR DIDN'T FIT IN YET
05365  2A1C             
05366  2A1C  85 85                 STA MATH.DIVIDE16.REMAINDER$+1 ;ELSE SAVE SUBSTRACTION RESULT AS NEW REMAINDER,
05367  2A1E  84 84                 STY MATH.DIVIDE16.REMAINDER$
05368  2A20  E6 82                 INC MATH.DIVIDE16.QUOTIENT$      ;AND INCREMENT RESULT CAUSE DIVISOR FIT IN 1 TIMES
05369  2A22             
05370  2A22             @SKIP      
05371  2A22  CA                    DEX
05372  2A23  D0 E3                 BNE @LOOP
05373  2A25  60                    RTS
05374  2A26             
05375  2A26             MATH.DIVIDE32.DIVISOR$ = $80 ; 4 BYTES
05376  2A26             MATH.DIVIDE32.DIVIDEND$ = $84 ; 4 BYTES
05377  2A26             MATH.DIVIDE32.QUOTIENT$ = MATH.DIVIDE32.DIVIDEND$ ; 4 BYTES
05378  2A26             MATH.DIVIDE32.REMAINDER$ = $8C ; 4 BYTES (DON'T USE $88-$8B AS THIS WILL MESS UP TIME.GETTICKS)
05379  2A26             MATH.DIVIDE32.TEMP1 = $FB ; 1 BYTE
05380  2A26             MATH.DIVIDE32.TEMP2 = $FE ; 1 BYTE
05381  2A26             
05382  2A26             MATH.DIVIDE32$ 
05383  2A26                        ; HTTP://WWW.CODEBASE64.ORG/DOKU.PHP?ID=BASE:24BIT_DIVISION_24-BIT_RESULT
05384  2A26  A9 00                 LDA #0          ;PRESET REMAINDER TO 0
05385  2A28  85 8C                 STA MATH.DIVIDE32.REMAINDER$
05386  2A2A  85 8D                 STA MATH.DIVIDE32.REMAINDER$+1
05387  2A2C  85 8E                 STA MATH.DIVIDE32.REMAINDER$+2
05388  2A2E  85 8F                 STA MATH.DIVIDE32.REMAINDER$+3
05389  2A30  85 FB                 STA MATH.DIVIDE32.TEMP1
05390  2A32  85 FE                 STA MATH.DIVIDE32.TEMP2
05391  2A34  A2 20                 LDX #32         ;REPEAT FOR EACH BIT: ...
05392  2A36             
05393  2A36             @DIVLOOP   
05394  2A36  06 84                 ASL MATH.DIVIDE32.DIVIDEND$    ;DIVIDEND LB & HB*2, MSB -> CARRY
05395  2A38  26 85                 ROL MATH.DIVIDE32.DIVIDEND$+1
05396  2A3A  26 86                 ROL MATH.DIVIDE32.DIVIDEND$+2
05397  2A3C  26 87                 ROL MATH.DIVIDE32.DIVIDEND$+3
05398  2A3E  26 8C                 ROL MATH.DIVIDE32.REMAINDER$   ;REMAINDER LB & HB * 2 + MSB FROM CARRY
05399  2A40  26 8D                 ROL MATH.DIVIDE32.REMAINDER$+1
05400  2A42  26 8E                 ROL MATH.DIVIDE32.REMAINDER$+2
05401  2A44  26 8F                 ROL MATH.DIVIDE32.REMAINDER$+3
05402  2A46  A5 8C                 LDA MATH.DIVIDE32.REMAINDER$
05403  2A48  38                    SEC
05404  2A49  E5 80                 SBC MATH.DIVIDE32.DIVISOR$     ;SUBSTRACT DIVISOR TO SEE IF IT FITS IN
05405  2A4B  A8                    TAY             ;LB RESULT -> Y, FOR WE MAY NEED IT LATER
05406  2A4C  A5 8D                 LDA MATH.DIVIDE32.REMAINDER$+1
05407  2A4E  E5 81                 SBC MATH.DIVIDE32.DIVISOR$+1
05408  2A50  85 FB                 STA MATH.DIVIDE32.TEMP1
05409  2A52  A5 8E                 LDA MATH.DIVIDE32.REMAINDER$+2
05410  2A54  E5 82                 SBC MATH.DIVIDE32.DIVISOR$+2
05411  2A56  85 FE                 STA MATH.DIVIDE32.TEMP2
05412  2A58  A5 8F                 LDA MATH.DIVIDE32.REMAINDER$+3
05413  2A5A  E5 83                 SBC MATH.DIVIDE32.DIVISOR$+3
05414  2A5C  90 0E                 BCC @SKIP        ;IF CARRY=0 THEN DIVISOR DIDN'T FIT IN YET
05415  2A5E             
05416  2A5E  85 8F                 STA MATH.DIVIDE32.REMAINDER$+3 ;ELSE SAVE SUBSTRACTION RESULT AS NEW REMAINDER,
05417  2A60  A5 FE                 LDA MATH.DIVIDE32.TEMP2
05418  2A62  85 8E                 STA MATH.DIVIDE32.REMAINDER$+2 ;ELSE SAVE SUBSTRACTION RESULT AS NEW REMAINDER,
05419  2A64  A5 FB                 LDA MATH.DIVIDE32.TEMP1
05420  2A66  85 8D                 STA MATH.DIVIDE32.REMAINDER$+1
05421  2A68  84 8C                 STY MATH.DIVIDE32.REMAINDER$
05422  2A6A  E6 84                 INC MATH.DIVIDE32.DIVIDEND$    ;AND INCREMENT RESULT CAUSE DIVISOR FIT IN 1 TIMES
05423  2A6C             
05424  2A6C             @SKIP      
05425  2A6C  CA                    DEX
05426  2A6D                        ;BNE @DIVLOOP
05427  2A6D  F0 03                 BEQ @DONE
05428  2A6F  4C 36 2A              JMP @DIVLOOP
05429  2A72             
05430  2A72             @DONE
05431  2A72  60                    RTS
05432  2A73             
05433  2A73             MATH.ABS16.INTEGER$ = $80 ; 2 BYTES
05434  2A73             MATH.ABS16.VALUE$ = $84 ; 2 BYTES
05435  2A73             MATH.ABS16$ 
05436  2A73  A5 80                 LDA MATH.ABS16.INTEGER$
05437  2A75  A4 81                 LDY MATH.ABS16.INTEGER$+1
05438  2A77  A6 81                 LDX MATH.ABS16.INTEGER$+1
05439  2A79  10 10                 BPL @END     ;IF THE NUMBER IS POSITIVE, EXIT
05440  2A7B  38                    SEC           ;ELSE TAKE THE 2'S COMPLEMENT OF THE NEGATIVE
05441  2A7C  85 81                 STA MATH.ABS16.INTEGER$+1       ;  VALUE TO GET THE POSITIVE VALUE
05442  2A7E  A9 00                 LDA #$00
05443  2A80  E5 81                 SBC MATH.ABS16.INTEGER$+1
05444  2A82  48                    PHA
05445  2A83  84 81                 STY MATH.ABS16.INTEGER$+1
05446  2A85  A9 00                 LDA #$00
05447  2A87  E5 81                 SBC MATH.ABS16.INTEGER$+1
05448  2A89  A8                    TAY
05449  2A8A  68                    PLA
05450  2A8B             @END
05451  2A8B  85 84                 STA MATH.ABS16.VALUE$
05452  2A8D  84 85                 STY MATH.ABS16.VALUE$+1
05453  2A8F  60                    RTS
05454  2A90             
05455  2A90             ; SEE MEMORY.SWAP$
05456  2A90             ;MATH.SWAP16.INTADDRESS1$ = $80 ; 2 BYTES
05457  2A90             ;MATH.SWAP16.INTADDRESS2$ = $84 ; 2 BYTES
05458  2A90             ;MATH.SWAP16.TEMP = $88 ; 2 BYTES
05459  2A90             ;MATH.SWAP16$
05460  2A90             ;        ; TEMP = INTEGER1
05461  2A90             ;        LDY #$00
05462  2A90             ;        LDA (MATH.SWAP16.INTADDRESS1$),Y
05463  2A90             ;        STA MATH.SWAP16.TEMP
05464  2A90             ;        INY
05465  2A90             ;        LDA (MATH.SWAP16.INTADDRESS1$),Y
05466  2A90             ;        STA MATH.SWAP16.TEMP+1
05467  2A90             
05468  2A90             ;        ; INTEGER1 = INTEGER2
05469  2A90             ;        LDY #$00
05470  2A90             ;        LDA (MATH.SWAP16.INTADDRESS2$),Y
05471  2A90             ;        STA (MATH.SWAP16.INTADDRESS1$),Y
05472  2A90             ;        INY
05473  2A90             ;        LDA (MATH.SWAP16.INTADDRESS2$),Y
05474  2A90             ;        STA (MATH.SWAP16.INTADDRESS1$),Y
05475  2A90             
05476  2A90             ;        ; INTEGER2 = TEMP
05477  2A90             ;        LDY #$00
05478  2A90             ;        LDA MATH.SWAP16.TEMP
05479  2A90             ;        STA (MATH.SWAP16.INTADDRESS2$),Y
05480  2A90             ;        INY
05481  2A90             ;        LDA MATH.SWAP16.TEMP+1
05482  2A90             ;        STA (MATH.SWAP16.INTADDRESS2$),Y
05483  2A90             
05484  2A90             ;        RTS
05485  2A90             
05486  2A90             MATH.EXPONENT8.BASE$ = $8A
05487  2A90             MATH.EXPONENT8.POWER$ = $8B
05488  2A90             MATH.EXPONENT8.VALUE$ = $8C
05489  2A90             MATH.EXPONENT8$ 
05490  2A90             
05491  2A90  A9 01                 LDA #$01
05492  2A92  85 8C                 STA MATH.EXPONENT8.VALUE$
05493  2A94             
05494  2A94             @LOOP
05495  2A94  A5 8B                 LDA MATH.EXPONENT8.POWER$
05496  2A96  D0 01                 BNE @CONTINUE
05497  2A98  60                    RTS
05498  2A99             @CONTINUE
05499  2A99  A5 8A                 LDA MATH.EXPONENT8.BASE$
05500  2A9B  85 80                 STA MATH.MULTIPLY8.FACTOR1$
05501  2A9D  A5 8C                 LDA MATH.EXPONENT8.VALUE$
05502  2A9F  85 82                 STA MATH.MULTIPLY8.FACTOR2$
05503  2AA1  20 48 29              JSR MATH.MULTIPLY8$
05504  2AA4  A5 83                 LDA MATH.MULTIPLY8.PRODUCT$
05505  2AA6  85 8C                 STA MATH.EXPONENT8.VALUE$
05506  2AA8  C6 8B                 DEC MATH.EXPONENT8.POWER$
05507  2AAA  4C 94 2A              JMP @LOOP
05508  2AAD             
05509  2AAD             
05510  2AAD             
05511  2AAD             
05512  2AAD             
05513  2AAD             
05514  2AAD             ;ALIGN $100
05515  2AAD             
05516  2AAD             STRING.CREATE.CHARACTER$ = $02 ; 1 BYTE
05517  2AAD             STRING.CREATE.LENGTH$ = $FB ; 2 BYTES
05518  2AAD             STRING.CREATE.ADDRESS$ = $7A ; 2 BYTES
05519  2AAD             STRING.CREATE.ADDRESS_LR = $FD ; 2 BYTES
05520  2AAD             STRING.CREATE$ 
05521  2AAD             
05522  2AAD                        ; INCREASE THE LENGTH BY ONE.
05523  2AAD  20 03 2B              JSR STRING.CREATE.INC_LENGTH ; LENGTH = LENGTH + 1
05524  2AB0             
05525  2AB0                        ; ALLOCATE THE MEMORY BLOCK.
05526  2AB0  A5 FB                 LDA STRING.CREATE.LENGTH$
05527  2AB2  85 75                 STA MEMORY.ALLOCATE.LENGTH$
05528  2AB4  A5 FC                 LDA STRING.CREATE.LENGTH$+1
05529  2AB6  85 76                 STA MEMORY.ALLOCATE.LENGTH$+1
05530  2AB8             
05531  2AB8  20 9D 10              JSR MEMORY.ALLOCATE$ ; ADDRESS$ = MEMORY.ALLOCATE$(LENGTH)
05532  2ABB             
05533  2ABB  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
05534  2ABD  85 7A                 STA STRING.CREATE.ADDRESS$
05535  2ABF  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
05536  2AC1  85 7B                 STA STRING.CREATE.ADDRESS$+1
05537  2AC3             
05538  2AC3  20 1F 2B              JSR STRING.CREATE.DEC_LENGTH ; LENGTH = LENGTH - 1
05539  2AC6             
05540  2AC6                        ; FILL THE MEMORY WITH THE DEFAULT CHARACTER.
05541  2AC6  A5 02                 LDA STRING.CREATE.CHARACTER$
05542  2AC8  C9 00                 CMP #$00
05543  2ACA  F0 15                 BEQ @SKIPFILLSTR ; SKIP THE FILL IF THE DEFAULT CHARACTER IS $00
05544  2ACC  85 75                 STA MEMORY.FILL16.VALUE$
05545  2ACE             
05546  2ACE  A5 7A                 LDA STRING.CREATE.ADDRESS$
05547  2AD0  85 73                 STA MEMORY.FILL16.ADDRESS$
05548  2AD2  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
05549  2AD4  85 74                 STA MEMORY.FILL16.ADDRESS$+1
05550  2AD6             
05551  2AD6  A5 FB                 LDA STRING.CREATE.LENGTH$
05552  2AD8  85 77                 STA MEMORY.FILL16.LENGTH$
05553  2ADA  A5 FC                 LDA STRING.CREATE.LENGTH$+1
05554  2ADC  85 78                 STA MEMORY.FILL16.LENGTH$+1
05555  2ADE             
05556  2ADE  20 15 10              JSR MEMORY.FILL16$
05557  2AE1             @SKIPFILLSTR 
05558  2AE1             
05559  2AE1                        ; CACULATE THE LOCATION OF THE LAST CHARACTER.
05560  2AE1  A5 7A                 LDA STRING.CREATE.ADDRESS$
05561  2AE3  85 80                 STA MATH.ADD16.ADDEND1$
05562  2AE5  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
05563  2AE7  85 81                 STA MATH.ADD16.ADDEND1$+1
05564  2AE9             
05565  2AE9  A5 FB                 LDA STRING.CREATE.LENGTH$
05566  2AEB  85 82                 STA MATH.ADD16.ADDEND2$
05567  2AED  A5 FC                 LDA STRING.CREATE.LENGTH$+1
05568  2AEF  85 83                 STA MATH.ADD16.ADDEND2$+1
05569  2AF1             
05570  2AF1  20 00 28              JSR MATH.ADD16$ ; ADDRESS_LR = ADDRESS + LENGTH
05571  2AF4             
05572  2AF4  A5 84                 LDA MATH.ADD16.SUM$
05573  2AF6  85 FD                 STA STRING.CREATE.ADDRESS_LR
05574  2AF8  A5 85                 LDA MATH.ADD16.SUM$+1
05575  2AFA  85 FE                 STA STRING.CREATE.ADDRESS_LR+1
05576  2AFC             
05577  2AFC                        ; THE LAST ADDRESS NEEDS TO BE THE NULL$ CHARACTER.
05578  2AFC  A0 00                 LDY #$00
05579  2AFE  A9 FF                 LDA #CONSOLE.NULL$
05580  2B00  91 FD                 STA (STRING.CREATE.ADDRESS_LR),Y
05581  2B02             
05582  2B02  60                    RTS
05583  2B03             
05584  2B03             STRING.CREATE.INC_LENGTH 
05585  2B03  A5 FB                 LDA STRING.CREATE.LENGTH$
05586  2B05  85 80                 STA MATH.ADD16.ADDEND1$
05587  2B07  A5 FC                 LDA STRING.CREATE.LENGTH$+1
05588  2B09  85 81                 STA MATH.ADD16.ADDEND1$+1
05589  2B0B             
05590  2B0B  A9 01                 LDA #$01
05591  2B0D  85 82                 STA MATH.ADD16.ADDEND2$
05592  2B0F  A9 00                 LDA #$00
05593  2B11  85 83                 STA MATH.ADD16.ADDEND2$+1
05594  2B13             
05595  2B13  20 00 28              JSR MATH.ADD16$ ; LENGTH = LENGTH + 1
05596  2B16             
05597  2B16  A5 84                 LDA MATH.ADD16.SUM$
05598  2B18  85 FB                 STA STRING.CREATE.LENGTH$
05599  2B1A  A5 85                 LDA MATH.ADD16.SUM$+1
05600  2B1C  85 FC                 STA STRING.CREATE.LENGTH$+1
05601  2B1E             
05602  2B1E  60                    RTS
05603  2B1F             
05604  2B1F             STRING.CREATE.DEC_LENGTH 
05605  2B1F  A5 FB                 LDA STRING.CREATE.LENGTH$
05606  2B21  85 80                 STA MATH.SUBTRACT16.MENUEND$
05607  2B23  A5 FC                 LDA STRING.CREATE.LENGTH$+1
05608  2B25  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
05609  2B27             
05610  2B27  A9 01                 LDA #$01
05611  2B29  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
05612  2B2B  A9 00                 LDA #$00
05613  2B2D  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
05614  2B2F             
05615  2B2F  20 96 28              JSR MATH.SUBTRACT16$ ; LENGTH = LENGTH - 1
05616  2B32             
05617  2B32  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
05618  2B34  85 FB                 STA STRING.CREATE.LENGTH$
05619  2B36  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
05620  2B38  85 FC                 STA STRING.CREATE.LENGTH$+1
05621  2B3A             
05622  2B3A  60                    RTS
05623  2B3B             
05624  2B3B             STRING.ISHEAP.ADDRESS$ = $7A ; 2 BYTES
05625  2B3B             STRING.ISHEAP.HEAP$ = $73 ; 1 BYTE
05626  2B3B             STRING.ISHEAP$ 
05627  2B3B             
05628  2B3B                        ; DEFAULT HEAP$ = 0
05629  2B3B  A9 00                 LDA #$00
05630  2B3D  85 73                 STA STRING.ISHEAP.HEAP$
05631  2B3F             
05632  2B3F                        ; DETERMINE WHETHER OR NOT THE ADDRESS IS IN THE MEMORY HEAP.
05633  2B3F  A5 7A                 LDA STRING.ISHEAP.ADDRESS$
05634  2B41  85 80                 STA MATH.CMP16.NUM1$
05635  2B43  A5 7B                 LDA STRING.ISHEAP.ADDRESS$+1
05636  2B45  85 81                 STA MATH.CMP16.NUM1$+1
05637  2B47             
05638  2B47  AD 5F 10              LDA MEMORY.HEAPADRESS_LR
05639  2B4A  85 82                 STA MATH.CMP16.NUM2$
05640  2B4C  AD 60 10              LDA MEMORY.HEAPADRESS_LR+1
05641  2B4F  85 83                 STA MATH.CMP16.NUM2$+1
05642  2B51             
05643  2B51  20 E4 28              JSR MATH.CMP16$ ; CARRY FLAG IS SET IF ADDRESS$ >= MEMORY.HEAPADDRESS_LR
05644  2B54  B0 1B                 BCS @END
05645  2B56                        
05646  2B56                        ; DETERMINE WHETHER OR NOT THE ADDRESS IS IN THE MEMORY HEAP.
05647  2B56  AD 5D 10              LDA MEMORY.HEAPADRESS
05648  2B59  85 80                 STA MATH.CMP16.NUM1$
05649  2B5B  AD 5E 10              LDA MEMORY.HEAPADRESS+1
05650  2B5E  85 81                 STA MATH.CMP16.NUM1$+1
05651  2B60             
05652  2B60  A5 7A                 LDA STRING.ISHEAP.ADDRESS$
05653  2B62  85 82                 STA MATH.CMP16.NUM2$
05654  2B64  A5 7B                 LDA STRING.ISHEAP.ADDRESS$+1
05655  2B66  85 83                 STA MATH.CMP16.NUM2$+1
05656  2B68             
05657  2B68  20 E4 28              JSR MATH.CMP16$ ; CARRY FLAG IS SET IF MEMORY.HEAPADRESS$ >= ADDRESS$
05658  2B6B  B0 04                 BCS @END
05659  2B6D             
05660  2B6D  A9 01                 LDA #$01
05661  2B6F  85 73                 STA STRING.ISHEAP.HEAP$
05662  2B71             
05663  2B71             @END
05664  2B71  60                    RTS
05665  2B72             
05666  2B72             STRING.GETLENGTH.ADDRESS$ = $7A ; 2 BYTES
05667  2B72             STRING.GETLENGTH.LENGTH$ = $FB ; 2 BYTES
05668  2B72             STRING.GETLENGTH$ 
05669  2B72                        
05670  2B72                        ; CHECK TO SEE IF THE ADDRESS IS FROM THE HEAP
05671  2B72  A5 7A                 LDA STRING.GETLENGTH.ADDRESS$
05672  2B74  85 7A                 STA STRING.ISHEAP.ADDRESS$
05673  2B76  A5 7B                 LDA STRING.GETLENGTH.ADDRESS$+1
05674  2B78  85 7B                 STA STRING.ISHEAP.ADDRESS$+1
05675  2B7A             
05676  2B7A  20 3B 2B              JSR STRING.ISHEAP$ ; STRING.ISHEAP$(ADDRESS$)
05677  2B7D  A5 73                 LDA STRING.ISHEAP.HEAP$
05678  2B7F  C9 01                 CMP #$01
05679  2B81  F0 06                 BEQ @GETSIZEOF
05680  2B83  20 8D 2B              JSR STRING.GETLENGTH_GETNULLCHAR
05681  2B86  4C 8C 2B              JMP @END
05682  2B89             @GETSIZEOF 
05683  2B89  20 A8 2B              JSR STRING.GETLENGTH_GETSIZEOF
05684  2B8C             @END
05685  2B8C  60                    RTS
05686  2B8D             
05687  2B8D             STRING.GETLENGTH_GETNULLCHAR 
05688  2B8D                        ; WE SHOULD ONLY GET HERE IF THE STRING IS A CONSTANT.
05689  2B8D             
05690  2B8D                        ; COUNT UP THE NUMBER OF NON-NULL$ CHARACTERS.
05691  2B8D  A0 00                 LDY #$00
05692  2B8F  84 FB                 STY STRING.GETLENGTH.LENGTH$
05693  2B91  84 FC                 STY STRING.GETLENGTH.LENGTH$+1
05694  2B93             @LOOP
05695  2B93  B1 7A                 LDA (STRING.GETLENGTH.ADDRESS$),Y
05696  2B95  C9 FF                 CMP #CONSOLE.NULL$
05697  2B97  F0 0C                 BEQ @DONE
05698  2B99  C8                    INY
05699  2B9A  C0 00                 CPY #$00 ; IF Y = $00 THEN WE WRAPPED AROUND THE LO-BYTE
05700  2B9C  D0 F5                 BNE @LOOP
05701  2B9E                        ; INCREMENT THE ADDRESS AND LENGTH HI-BYTES
05702  2B9E  E6 7B                 INC STRING.GETLENGTH.ADDRESS$+1
05703  2BA0  E6 FC                 INC STRING.GETLENGTH.LENGTH$+1
05704  2BA2  4C 93 2B              JMP @LOOP
05705  2BA5             @DONE
05706  2BA5  84 FB                 STY STRING.GETLENGTH.LENGTH$
05707  2BA7             
05708  2BA7  60                    RTS
05709  2BA8             
05710  2BA8             STRING.GETLENGTH_GETSIZEOF 
05711  2BA8                        ; WE SHOULD ONLY GET HERE IF THE STRING IS CREATED VIA STRING.CREATE$
05712  2BA8             
05713  2BA8  A5 7A                 LDA STRING.GETLENGTH.ADDRESS$
05714  2BAA  85 7A                 STA MEMORY.SIZEOF.ADDRESS$
05715  2BAC  A5 7B                 LDA STRING.GETLENGTH.ADDRESS$+1
05716  2BAE  85 7B                 STA MEMORY.SIZEOF.ADDRESS$+1
05717  2BB0             
05718  2BB0  20 60 12              JSR MEMORY.SIZEOF$ ; LENGTH$ = MEMORY.SIZEOF$(ADDRESS$)
05719  2BB3             
05720  2BB3                        ; MEMORY.SIZEOF() RETURNS THE LENGTH OF THE MEMORY BLOCK
05721  2BB3                        ; INCLUDING THE 2 BYTES WHICH IS THE LENGTH OF THE BLOCK AND
05722  2BB3                        ; BECAUSE STRING.CREATE$ APPENDS A NULL$ CHARACTER,
05723  2BB3                        ; WE NEED TO SUBTRACT 3 BYTES FROM SIZEOF TO GET THE LENGTH.
05724  2BB3                        
05725  2BB3  A5 7C                 LDA MEMORY.SIZEOF.LENGTH$
05726  2BB5  85 80                 STA MATH.SUBTRACT16.MENUEND$
05727  2BB7  A5 7D                 LDA MEMORY.SIZEOF.LENGTH$+1
05728  2BB9  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
05729  2BBB             
05730  2BBB  A9 03                 LDA #$03
05731  2BBD  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
05732  2BBF  A9 00                 LDA #$00
05733  2BC1  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
05734  2BC3             
05735  2BC3  20 96 28              JSR MATH.SUBTRACT16$ ; LENGTH$ = LENGTH$ - 1
05736  2BC6             
05737  2BC6  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
05738  2BC8  85 FB                 STA STRING.GETLENGTH.LENGTH$
05739  2BCA  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
05740  2BCC  85 FC                 STA STRING.GETLENGTH.LENGTH$+1
05741  2BCE             
05742  2BCE  60                    RTS
05743  2BCF             
05744  2BCF             ;ALIGN $100
05745  2BCF             
05746  2BCF             
05747  2BCF             STRING.COPY.SRCADDRESS$ = $7E ; 2 BYTES
05748  2BCF             STRING.COPY.DSTADDRESS$ = $7A ; 2 BYTES
05749  2BCF             STRING.COPY$ 
05750  2BCF                        ; CREATES A NEW INSTANCE OF A STRING WITH THE SAME CHARACTERS AS THE SOURCE
05751  2BCF             
05752  2BCF                        ; GET THE LENGTH OF THE SOURCE ADDRESS
05753  2BCF  A5 7E                 LDA STRING.COPY.SRCADDRESS$
05754  2BD1  85 7A                 STA STRING.GETLENGTH.ADDRESS$
05755  2BD3  A5 7F                 LDA STRING.COPY.SRCADDRESS$+1
05756  2BD5  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
05757  2BD7  20 72 2B              JSR STRING.GETLENGTH$
05758  2BDA             
05759  2BDA                        ; CREATE THE NEW STRING
05760  2BDA  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05761  2BDC  85 FB                 STA STRING.CREATE.LENGTH$
05762  2BDE  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05763  2BE0  85 FC                 STA STRING.CREATE.LENGTH$+1
05764  2BE2             
05765  2BE2                        ; SETTING #0 WILL TELL THE CREATE ROUTINE TO SKIP THE FILL PART
05766  2BE2  A9 00                 LDA #$00
05767  2BE4  85 02                 STA STRING.CREATE.CHARACTER$
05768  2BE6  20 AD 2A              JSR STRING.CREATE$
05769  2BE9             
05770  2BE9  A5 7A                 LDA STRING.CREATE.ADDRESS$
05771  2BEB  85 7A                 STA STRING.COPY.DSTADDRESS$
05772  2BED  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
05773  2BEF  85 7B                 STA STRING.COPY.DSTADDRESS$+1
05774  2BF1             
05775  2BF1                        ; COPY THE CONTENTS OF SOURCE ADDRESS TO ADDRESS
05776  2BF1  A5 7E                 LDA STRING.COPY.SRCADDRESS$
05777  2BF3  85 73                 STA MEMORY.COPY16.SOURCE$
05778  2BF5  A5 7F                 LDA STRING.COPY.SRCADDRESS$+1
05779  2BF7  85 74                 STA MEMORY.COPY16.SOURCE$+1
05780  2BF9             
05781  2BF9  A5 7A                 LDA STRING.COPY.DSTADDRESS$
05782  2BFB  85 75                 STA MEMORY.COPY16.DESTINATION$
05783  2BFD  A5 7B                 LDA STRING.COPY.DSTADDRESS$+1
05784  2BFF  85 76                 STA MEMORY.COPY16.DESTINATION$+1
05785  2C01             
05786  2C01  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05787  2C03  85 78                 STA MEMORY.COPY16.LENGTH$
05788  2C05  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05789  2C07  85 79                 STA MEMORY.COPY16.LENGTH$+1
05790  2C09             
05791  2C09  20 9C 0F              JSR MEMORY.COPY16$
05792  2C0C             
05793  2C0C  60                    RTS
05794  2C0D             
05795  2C0D             STRING.CONTAINS.ADDRESS1$ = $7A ; 2 BYTES
05796  2C0D             STRING.CONTAINS.ADDRESS2$ = $7C ; 2 BYTES
05797  2C0D             STRING.CONTAINS.VALUE$ = $73 ; 1 BYTE
05798  2C0D             STRING.CONTAINS$ 
05799  2C0D                        ; SETS VALUE$ = 1 IF THE STRING AT ADDRESS1$ CONTAINS ADDRESS2$
05800  2C0D             
05801  2C0D  A5 7A                 LDA STRING.CONTAINS.ADDRESS1$
05802  2C0F  85 7A                 STA STRING.INDEXOF.ADDRESS1$
05803  2C11  A5 7B                 LDA STRING.CONTAINS.ADDRESS1$+1
05804  2C13  85 7B                 STA STRING.INDEXOF.ADDRESS1$+1
05805  2C15             
05806  2C15  A5 7C                 LDA STRING.CONTAINS.ADDRESS2$
05807  2C17  85 7C                 STA STRING.INDEXOF.ADDRESS2$
05808  2C19  A5 7D                 LDA STRING.CONTAINS.ADDRESS2$+1
05809  2C1B  85 7D                 STA STRING.INDEXOF.ADDRESS2$+1
05810  2C1D             
05811  2C1D  A9 00                 LDA #$00
05812  2C1F  85 7E                 STA STRING.INDEXOF.INDEX$
05813  2C21  85 7F                 STA STRING.INDEXOF.INDEX$+1
05814  2C23             
05815  2C23  20 43 2C              JSR STRING.INDEXOF$ ; INDEX$ = STRING.INDEXOF$(ADDRESS1$, ADDRESS2$, 0)
05816  2C26             
05817  2C26  A5 7E                 LDA STRING.INDEXOF.INDEX$
05818  2C28  85 80                 STA MATH.CMP16.NUM1$
05819  2C2A  A5 7F                 LDA STRING.INDEXOF.INDEX$+1
05820  2C2C  85 81                 STA MATH.CMP16.NUM1$+1
05821  2C2E             
05822  2C2E  A9 FF                 LDA #$FF
05823  2C30  85 82                 STA MATH.CMP16.NUM2$
05824  2C32  85 83                 STA MATH.CMP16.NUM2$+1
05825  2C34             
05826  2C34  20 E4 28              JSR MATH.CMP16$ ; IF INDEX$ <> $FFFF THEN VALUE$ = 1
05827  2C37  D0 05                 BNE @SETVALUE
05828  2C39             @CLEARVALUE 
05829  2C39  A9 00                 LDA #$00
05830  2C3B  4C 40 2C              JMP @END
05831  2C3E             
05832  2C3E             @SETVALUE
05833  2C3E  A9 01                 LDA #$01
05834  2C40             @END
05835  2C40  85 73                 STA STRING.CONTAINS.VALUE$
05836  2C42  60                    RTS
05837  2C43             
05838  2C43             ;ALIGN $100
05839  2C43             
05840  2C43             STRING.INDEXOF.ADDRESS1$ = $7A ; 2 BYTES
05841  2C43             STRING.INDEXOF.ADDRESS2$ = $7C ; 2 BYTES
05842  2C43             STRING.INDEXOF.INDEX$ = $7E ; 2 BYTES
05843  2C43             STRING.INDEXOF.CHR1 = $73 ; 1 BYTE
05844  2C43             STRING.INDEXOF.CHR2 = $74 ; 1 BYTE
05845  2C43             STRING.INDEXOF.ADDRESS1_ORG = $FB ; 2 BYTES
05846  2C43             STRING.INDEXOF.ADDRESS2_ORG = $FD ; 2 BYTES
05847  2C43             STRING.INDEXOF$ 
05848  2C43                        ; FIND THE INDEX WHERE THEREE EXISTS AN OCCURANCE OF A STRING WITHIN ANOTHER.
05849  2C43             
05850  2C43  20 1B 1F              JSR MEMORY.PUSHZP$
05851  2C46             
05852  2C46                        ; VERIFY THAT THE LENGTH OF INDEX IS NOT GREATER THAN ADDRESS1$
05853  2C46  A5 7A                 LDA STRING.INDEXOF.ADDRESS1$
05854  2C48  85 7A                 STA STRING.GETLENGTH.ADDRESS$
05855  2C4A  A5 7B                 LDA STRING.INDEXOF.ADDRESS1$+1
05856  2C4C  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
05857  2C4E  20 72 2B              JSR STRING.GETLENGTH$
05858  2C51             
05859  2C51  20 31 1F              JSR MEMORY.PULLZP$
05860  2C54             
05861  2C54  A5 7E                 LDA STRING.INDEXOF.INDEX$
05862  2C56  85 80                 STA MATH.CMP16.NUM1$
05863  2C58  A5 7F                 LDA STRING.INDEXOF.INDEX$+1
05864  2C5A  85 81                 STA MATH.CMP16.NUM1$+1
05865  2C5C             
05866  2C5C  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05867  2C5E  85 82                 STA MATH.CMP16.NUM2$
05868  2C60  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05869  2C62  85 83                 STA MATH.CMP16.NUM2$+1
05870  2C64             
05871  2C64  20 E4 28              JSR MATH.CMP16$
05872  2C67  90 05                 BCC @LENGTHOK ; OK IF INDEX$ < STRING.GETLENGTH$(ADDRESS1$)
05873  2C69  F0 03                 BEQ @LENGTHOK ; OK IF INDEX$ = STRING.GETLENGTH$(ADDRESS1$)
05874  2C6B  4C E1 2C              JMP @NOFOUNDSTR
05875  2C6E             
05876  2C6E             @LENGTHOK
05877  2C6E                        ; STORE THE ORGINAL ADDRESSES
05878  2C6E  A5 7A                 LDA STRING.INDEXOF.ADDRESS1$
05879  2C70  85 FB                 STA STRING.INDEXOF.ADDRESS1_ORG
05880  2C72  A5 7B                 LDA STRING.INDEXOF.ADDRESS1$+1
05881  2C74  85 FC                 STA STRING.INDEXOF.ADDRESS1_ORG+1
05882  2C76                        
05883  2C76  A5 7C                 LDA STRING.INDEXOF.ADDRESS2$
05884  2C78  85 FD                 STA STRING.INDEXOF.ADDRESS2_ORG
05885  2C7A  A5 7D                 LDA STRING.INDEXOF.ADDRESS2$+1
05886  2C7C  85 FE                 STA STRING.INDEXOF.ADDRESS2_ORG+1
05887  2C7E                        
05888  2C7E  4C 8C 2C              JMP @INITADDRESSES
05889  2C81                        
05890  2C81             @NOMATCHCHR 
05891  2C81                        ; INCREMENT INDEX$
05892  2C81  A9 7E                 LDA #<STRING.INDEXOF.INDEX$
05893  2C83  85 86                 STA MATH.INC16.ADDRESS$
05894  2C85  A9 00                 LDA #>STRING.INDEXOF.INDEX$
05895  2C87  85 87                 STA MATH.INC16.ADDRESS$+1
05896  2C89  20 3C 28              JSR MATH.INC16$
05897  2C8C             
05898  2C8C             @INITADDRESSES 
05899  2C8C                        ; UPDATE THE LOCATION OF ADDRESS1$ BY THE VALUE IN INDEX$
05900  2C8C  A5 FB                 LDA STRING.INDEXOF.ADDRESS1_ORG
05901  2C8E  85 80                 STA MATH.ADD16.ADDEND1$
05902  2C90  A5 FC                 LDA STRING.INDEXOF.ADDRESS1_ORG+1
05903  2C92  85 81                 STA MATH.ADD16.ADDEND1$+1
05904  2C94             
05905  2C94  A5 7E                 LDA STRING.INDEXOF.INDEX$
05906  2C96  85 82                 STA MATH.ADD16.ADDEND2$
05907  2C98  A5 7F                 LDA STRING.INDEXOF.INDEX$+1
05908  2C9A  85 83                 STA MATH.ADD16.ADDEND2$+1
05909  2C9C             
05910  2C9C  20 00 28              JSR MATH.ADD16$ ; ADDRESS1$ = ADDRESS1$ + INDEX$
05911  2C9F             
05912  2C9F  A5 84                 LDA MATH.ADD16.SUM$
05913  2CA1  85 7A                 STA STRING.INDEXOF.ADDRESS1$
05914  2CA3  A5 85                 LDA MATH.ADD16.SUM$+1
05915  2CA5  85 7B                 STA STRING.INDEXOF.ADDRESS1$+1
05916  2CA7             
05917  2CA7  A5 FD                 LDA STRING.INDEXOF.ADDRESS2_ORG
05918  2CA9  85 7C                 STA STRING.INDEXOF.ADDRESS2$
05919  2CAB  A5 FE                 LDA STRING.INDEXOF.ADDRESS2_ORG+1
05920  2CAD  85 7D                 STA STRING.INDEXOF.ADDRESS2$+1
05921  2CAF             
05922  2CAF             ;        ; DEFAULT STRING.INDEXOF.INDEX$ TO $FFFF (-1)
05923  2CAF             ;        LDA #$00
05924  2CAF             ;        LDA STRING.INDEXOF.INDEX$
05925  2CAF             ;        LDA STRING.INDEXOF.INDEX$+1
05926  2CAF                        
05927  2CAF                        ; BEGIN MATCHING EACH CHARACTER IN THE ADDRESS2$ WITH ADDRESS1$
05928  2CAF  A0 00                 LDY #$00
05929  2CB1             @LOOP
05930  2CB1  B1 7A                 LDA (STRING.INDEXOF.ADDRESS1$),Y
05931  2CB3  85 73                 STA STRING.INDEXOF.CHR1
05932  2CB5             
05933  2CB5  B1 7C                 LDA (STRING.INDEXOF.ADDRESS2$),Y
05934  2CB7  85 74                 STA STRING.INDEXOF.CHR2
05935  2CB9  C9 FF                 CMP #CONSOLE.NULL$
05936  2CBB  F0 2D                 BEQ @FOUNDSTR
05937  2CBD             
05938  2CBD  A5 73                 LDA STRING.INDEXOF.CHR1
05939  2CBF  C9 FF                 CMP #CONSOLE.NULL$
05940  2CC1  F0 1E                 BEQ @NOFOUNDSTR
05941  2CC3             
05942  2CC3  C5 74                 CMP STRING.INDEXOF.CHR2
05943  2CC5  D0 BA                 BNE @NOMATCHCHR
05944  2CC7                        
05945  2CC7             ;        TAX
05946  2CC7             ;        CMP (STRING.INDEXOF.ADDRESS2$),Y
05947  2CC7             ;        BNE @NOMATCHCHR
05948  2CC7             ;        CPX #CONSOLE.NULL$
05949  2CC7             ;        BEQ @NOFOUNDSTR
05950  2CC7             
05951  2CC7                        ; INCREMENT INDEX$
05952  2CC7  A9 7E                 LDA #<STRING.INDEXOF.INDEX$
05953  2CC9  85 86                 STA MATH.INC16.ADDRESS$
05954  2CCB  A9 00                 LDA #>STRING.INDEXOF.INDEX$
05955  2CCD  85 87                 STA MATH.INC16.ADDRESS$+1
05956  2CCF  20 3C 28              JSR MATH.INC16$
05957  2CD2             
05958  2CD2  C8                    INY
05959  2CD3  C0 00                 CPY #$00
05960  2CD5  F0 03                 BEQ @INCY
05961  2CD7  4C B1 2C              JMP @LOOP
05962  2CDA             
05963  2CDA             @INCY
05964  2CDA  E6 7B                 INC STRING.INDEXOF.ADDRESS1$+1
05965  2CDC  E6 7D                 INC STRING.INDEXOF.ADDRESS2$+1
05966  2CDE  4C B1 2C              JMP @LOOP
05967  2CE1             
05968  2CE1             @NOFOUNDSTR 
05969  2CE1                        ; INDEX$ = $FFFF (NOT FOUND)
05970  2CE1  A9 FF                 LDA #$FF
05971  2CE3  85 7E                 STA STRING.INDEXOF.INDEX$
05972  2CE5  85 7F                 STA STRING.INDEXOF.INDEX$+1
05973  2CE7  4C 10 2D              JMP @END
05974  2CEA             
05975  2CEA             @FOUNDSTR
05976  2CEA                        ; INDEX$ = INDEX$ - STRING.GETLENGTH$(ADDRESS2)
05977  2CEA                        
05978  2CEA  A5 7C                 LDA STRING.INDEXOF.ADDRESS2$
05979  2CEC  85 7A                 STA STRING.GETLENGTH.ADDRESS$
05980  2CEE  A5 7D                 LDA STRING.INDEXOF.ADDRESS2$+1
05981  2CF0  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
05982  2CF2             
05983  2CF2  20 72 2B              JSR STRING.GETLENGTH$
05984  2CF5             
05985  2CF5  A5 7E                 LDA STRING.INDEXOF.INDEX$
05986  2CF7  85 80                 STA MATH.SUBTRACT16.MENUEND$
05987  2CF9  A5 7F                 LDA STRING.INDEXOF.INDEX$+1
05988  2CFB  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
05989  2CFD             
05990  2CFD  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05991  2CFF  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
05992  2D01  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05993  2D03  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
05994  2D05             
05995  2D05  20 96 28              JSR MATH.SUBTRACT16$
05996  2D08             
05997  2D08  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
05998  2D0A  85 7E                 STA STRING.INDEXOF.INDEX$
05999  2D0C  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06000  2D0E  85 7F                 STA STRING.INDEXOF.INDEX$+1
06001  2D10             
06002  2D10             @END
06003  2D10  60                    RTS
06004  2D11             
06005  2D11             STRING.CONCAT.SRCADDRESS1$ = $E0 ; 2 BYTES
06006  2D11             STRING.CONCAT.SRCADDRESS2$ = $E2 ; 2 BYTES
06007  2D11             STRING.CONCAT.DSTADDRESS$ = $7A ; 2 BYTES
06008  2D11             STRING.CONCAT.SRCLENGTH1 = $E4 ; 2 BYTES
06009  2D11             STRING.CONCAT.SRCLENGTH2 = $E6 ; 2 BYTES
06010  2D11             STRING.CONCAT.DSTLENGTH = $E8 ; 2 BYTES
06011  2D11             STRING.CONCAT.ADDRESS = $EA ; 2 BYTES
06012  2D11             STRING.CONCAT$ 
06013  2D11                        ; RETURNS A NEW STRING WHICH CONTAINS THE CONTENTS OF SRCADDRESS1 + SRCADDRESS2
06014  2D11             
06015  2D11                        ; CREATE A NEW STRING WHICH HAS THE LENGTH OF SRCADDRESS1 + SRCADDRESS2
06016  2D11             
06017  2D11                        ; STRING.CONCAT.SRCLENGTH1 = STRING.GETLENGTH$(STRING.CONCAT.SRCADDRESS1$)
06018  2D11  A5 E0                 LDA STRING.CONCAT.SRCADDRESS1$
06019  2D13  85 7A                 STA STRING.GETLENGTH.ADDRESS$
06020  2D15  A5 E1                 LDA STRING.CONCAT.SRCADDRESS1$+1
06021  2D17  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
06022  2D19  20 72 2B              JSR STRING.GETLENGTH$
06023  2D1C  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
06024  2D1E  85 E4                 STA STRING.CONCAT.SRCLENGTH1
06025  2D20  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
06026  2D22  85 E5                 STA STRING.CONCAT.SRCLENGTH1+1
06027  2D24             
06028  2D24                        ; STRING.CONCAT.SRCLENGTH2 = STRING.GETLENGTH$(STRING.CONCAT.SRCADDRESS2$)
06029  2D24  A5 E2                 LDA STRING.CONCAT.SRCADDRESS2$
06030  2D26  85 7A                 STA STRING.GETLENGTH.ADDRESS$
06031  2D28  A5 E3                 LDA STRING.CONCAT.SRCADDRESS2$+1
06032  2D2A  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
06033  2D2C  20 72 2B              JSR STRING.GETLENGTH$
06034  2D2F  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
06035  2D31  85 E6                 STA STRING.CONCAT.SRCLENGTH2
06036  2D33  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
06037  2D35  85 E7                 STA STRING.CONCAT.SRCLENGTH2+1
06038  2D37             
06039  2D37                        ; STRING.CONCAT.DSTLENGTH = STRING.CONCAT.SRCLENGTH1 + STRING.CONCAT.SRCLENGTH2
06040  2D37  A5 E4                 LDA STRING.CONCAT.SRCLENGTH1
06041  2D39  85 80                 STA MATH.ADD16.ADDEND1$
06042  2D3B  A5 E5                 LDA STRING.CONCAT.SRCLENGTH1+1
06043  2D3D  85 81                 STA MATH.ADD16.ADDEND1$+1
06044  2D3F  A5 E6                 LDA STRING.CONCAT.SRCLENGTH2
06045  2D41  85 82                 STA MATH.ADD16.ADDEND2$
06046  2D43  A5 E7                 LDA STRING.CONCAT.SRCLENGTH2+1
06047  2D45  85 83                 STA MATH.ADD16.ADDEND2$+1
06048  2D47  20 00 28              JSR MATH.ADD16$
06049  2D4A  A5 84                 LDA MATH.ADD16.SUM$
06050  2D4C  85 E8                 STA STRING.CONCAT.DSTLENGTH
06051  2D4E  A5 85                 LDA MATH.ADD16.SUM$+1
06052  2D50  85 E9                 STA STRING.CONCAT.DSTLENGTH+1
06053  2D52             
06054  2D52                        ; STRING.CONCAT.DSTADDRESS$ = STRING.CREATE$(STRING.CONCAT.DSTLENGTH, 0)
06055  2D52  A5 E8                 LDA STRING.CONCAT.DSTLENGTH
06056  2D54  85 FB                 STA STRING.CREATE.LENGTH$
06057  2D56  A5 E9                 LDA STRING.CONCAT.DSTLENGTH+1
06058  2D58  85 FC                 STA STRING.CREATE.LENGTH$+1
06059  2D5A  A9 00                 LDA #$00
06060  2D5C  85 02                 STA STRING.CREATE.CHARACTER$
06061  2D5E  20 AD 2A              JSR STRING.CREATE$
06062  2D61  A5 7A                 LDA STRING.CREATE.ADDRESS$
06063  2D63  85 7A                 STA STRING.CONCAT.DSTADDRESS$
06064  2D65  85 EA                 STA STRING.CONCAT.ADDRESS
06065  2D67  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
06066  2D69  85 EB                 STA STRING.CONCAT.ADDRESS+1
06067  2D6B  85 7B                 STA STRING.CONCAT.DSTADDRESS$+1
06068  2D6D             
06069  2D6D                        ; COPY THE CONTENTS FROM SRCADDRESS1 TO DSTADDRESS
06070  2D6D  A5 E0                 LDA STRING.CONCAT.SRCADDRESS1$
06071  2D6F  85 73                 STA MEMORY.COPY16.SOURCE$
06072  2D71  A5 E1                 LDA STRING.CONCAT.SRCADDRESS1$+1
06073  2D73  85 74                 STA MEMORY.COPY16.SOURCE$+1
06074  2D75             
06075  2D75  A5 EA                 LDA STRING.CONCAT.ADDRESS
06076  2D77  85 75                 STA MEMORY.COPY16.DESTINATION$
06077  2D79  A5 EB                 LDA STRING.CONCAT.ADDRESS+1
06078  2D7B  85 76                 STA MEMORY.COPY16.DESTINATION$+1
06079  2D7D             
06080  2D7D  A5 E4                 LDA STRING.CONCAT.SRCLENGTH1
06081  2D7F  85 78                 STA MEMORY.COPY16.LENGTH$
06082  2D81  A5 E5                 LDA STRING.CONCAT.SRCLENGTH1+1
06083  2D83  85 79                 STA MEMORY.COPY16.LENGTH$+1
06084  2D85             
06085  2D85  20 9C 0F              JSR MEMORY.COPY16$
06086  2D88             
06087  2D88                        ; INCREMENT ADDRESS BY SRCLENGTH1
06088  2D88  A5 EA                 LDA STRING.CONCAT.ADDRESS
06089  2D8A  85 80                 STA MATH.ADD16.ADDEND1$
06090  2D8C  85 74                 STA MEMORY.COPY16.SOURCE$+1
06091  2D8E  A5 81                 LDA MATH.ADD16.ADDEND1$+1
06092  2D90                        
06093  2D90  A5 E4                 LDA STRING.CONCAT.SRCLENGTH1
06094  2D92  85 82                 STA MATH.ADD16.ADDEND2$
06095  2D94  A5 E5                 LDA STRING.CONCAT.SRCLENGTH1+1
06096  2D96  85 83                 STA MATH.ADD16.ADDEND2$+1
06097  2D98             
06098  2D98  20 00 28              JSR MATH.ADD16$ ; ADDRESS = ADDRESS + SRCLENGTH1
06099  2D9B             
06100  2D9B  A5 84                 LDA MATH.ADD16.SUM$
06101  2D9D  85 EA                 STA STRING.CONCAT.ADDRESS
06102  2D9F  A5 85                 LDA MATH.ADD16.SUM$+1
06103  2DA1  85 EB                 STA STRING.CONCAT.ADDRESS+1
06104  2DA3             
06105  2DA3                        ; COPY THE CONTENTS FROM SRCADDRESS2 TO DSTADDRESS
06106  2DA3  A5 E2                 LDA STRING.CONCAT.SRCADDRESS2$
06107  2DA5  85 73                 STA MEMORY.COPY16.SOURCE$
06108  2DA7  A5 E3                 LDA STRING.CONCAT.SRCADDRESS2$+1
06109  2DA9  85 74                 STA MEMORY.COPY16.SOURCE$+1
06110  2DAB             
06111  2DAB  A5 EA                 LDA STRING.CONCAT.ADDRESS
06112  2DAD  85 75                 STA MEMORY.COPY16.DESTINATION$
06113  2DAF  85 EB                 STA STRING.CONCAT.ADDRESS+1
06114  2DB1  A5 76                 LDA MEMORY.COPY16.DESTINATION$+1
06115  2DB3             
06116  2DB3  A5 E6                 LDA STRING.CONCAT.SRCLENGTH2
06117  2DB5  85 78                 STA MEMORY.COPY16.LENGTH$
06118  2DB7  A5 E7                 LDA STRING.CONCAT.SRCLENGTH2+1
06119  2DB9  85 79                 STA MEMORY.COPY16.LENGTH$+1
06120  2DBB             
06121  2DBB  20 9C 0F              JSR MEMORY.COPY16$
06122  2DBE             
06123  2DBE  60                    RTS
06124  2DBF             
06125  2DBF             
06126  2DBF             
06127  2DBF             
06128  2DBF             ;ALIGN $100
06129  2DBF             
06130  2DBF             GRAPHICS.MEMORYADDRESS = $6000 ; - $7F3F
06131  2DBF             GRAPHICS.MEMORYADDRESS_2R = $6140
06132  2DBF             GRAPHICS.MEMORYADDRESS_LR = $7E00
06133  2DBF  00 04      GRAPHICS.CURRENTADDRESS WORD CONSOLE.MEMORYADDRESS
06134  2DC1             GRAPHICS.COLORADDRESS = $4400
06135  2DC1  00 44      GRAPHICS.CURRENTCOLORADDR WORD GRAPHICS.COLORADDRESS
06136  2DC3             GRAPHICS.BITMAPCOLORADDRESS = $7F40
06137  2DC3             GRAPHICS.MULTIVIDEOFILE = $7F40
06138  2DC3             GRAPHICS.MULTICOLORFILE = $8328
06139  2DC3             GRAPHICS.MULTIBGCOLORFILE = $8710
06140  2DC3             GRAPHICS.MULTIVIDEOADDRESS = $4400
06141  2DC3             GRAPHICS.MULTICOLORADDRESS = $D800
06142  2DC3             GRAPHICS.MULTIBGCOLORADDRESS = $D021
06143  2DC3             
06144  2DC3             GRAPHICS.IMAGEADDRESS$ = $6000
06145  2DC3             
06146  2DC3             ;TODO CHANGE THE ADDRESSES BELOW ACCORDINGLY:
06147  2DC3             ;GRAPHICS.Y_TABLE_LO              = $C100
06148  2DC3             ;GRAPHICS.Y_TABLE_HI              = $C200
06149  2DC3             ;GRAPHICS.X_TABLE                 = $C300
06150  2DC3             ;GRAPHICS.BITMASK                 = $C400
06151  2DC3             GRAPHICS.Y_TABLE_LO = GRAPHICS.Y_TABLE_LO_ADDRESS
06152  2DC3             GRAPHICS.Y_TABLE_HI = GRAPHICS.Y_TABLE_HI_ADDRESS
06153  2DC3             GRAPHICS.X_TABLE = GRAPHICS.X_TABLE_ADDRESS
06154  2DC3             GRAPHICS.BITMASK = GRAPHICS.BITMASK_ADDRESS
06155  2DC3             
06156  2DC3  00         GRAPHICS.ISACTIVE$ BYTE $00
06157  2DC4             
06158  2DC4             GRAPHICS.ENTER$ 
06159  2DC4  20 96 2E              JSR GRAPHICS.START
06160  2DC7  60                    RTS
06161  2DC8             
06162  2DC8             GRAPHICS.LEAVE$ 
06163  2DC8  20 A6 2E              JSR GRAPHICS.END
06164  2DCB  60                    RTS
06165  2DCC             
06166  2DCC             GRAPHICS.SETBITMAPMODE$ 
06167  2DCC                        ; INDICATE THAT GRAPHICS MODE IS ACTIVE
06168  2DCC  A9 01                 LDA #$01
06169  2DCE  8D C3 2D              STA GRAPHICS.ISACTIVE$
06170  2DD1             
06171  2DD1             ;        LDX #$00
06172  2DD1             ;@LOOP
06173  2DD1             ;        LDA GRAPHICS.BITMAPCOLORADDRESS,X  ; COPY COLOURS TO SCREEN RAM
06174  2DD1             ;        STA GRAPHICS.COLORADDRESS,X
06175  2DD1             ;        LDA GRAPHICS.BITMAPCOLORADDRESS+$100,X
06176  2DD1             ;        STA GRAPHICS.COLORADDRESS+$100,X
06177  2DD1             ;        LDA GRAPHICS.BITMAPCOLORADDRESS+$200,X
06178  2DD1             ;        STA GRAPHICS.COLORADDRESS+$200,X
06179  2DD1             ;        LDA GRAPHICS.BITMAPCOLORADDRESS+$300,X
06180  2DD1             ;        STA GRAPHICS.COLORADDRESS+$300,X
06181  2DD1             ;        DEX
06182  2DD1             ;        BNE @LOOP
06183  2DD1             
06184  2DD1                        ;$DD00 = %XXXXXX11 -> BANK0: $0000-$3FFF
06185  2DD1                        ;$DD00 = %XXXXXX10 -> BANK1: $4000-$7FFF
06186  2DD1                        ;$DD00 = %XXXXXX01 -> BANK2: $8000-$BFFF
06187  2DD1                        ;$DD00 = %XXXXXX00 -> BANK3: $C000-$FFFF
06188  2DD1                        ; DEFAULT: 10010111
06189  2DD1  AD 00 DD              LDA $DD00
06190  2DD4  29 FC                 AND #%11111100
06191  2DD6  09 02                 ORA #%00000010 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
06192  2DD8                        ;ORA #%00000011 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
06193  2DD8  8D 00 DD              STA $DD00
06194  2DDB             
06195  2DDB             ;        ; SET BITMAP MEMORY AT $2000+VIC BANK ADDRESS ($6000)
06196  2DDB             ;        LDA $D018
06197  2DDB             ;        ;ORA #%00001000
06198  2DDB             ;        ORA #%00011000
06199  2DDB             ;        STA $D018
06200  2DDB             
06201  2DDB             ;        ; ENTER STANDARD BITMAP MODE
06202  2DDB             ;        LDA $D011
06203  2DDB             ;        ORA #%00100000
06204  2DDB             ;        STA $D011
06205  2DDB             
06206  2DDB  A9 3B                 LDA #$3B     ; BITMAP MODE
06207  2DDD                        ;LDX #$18     ; MULTI-COLOUR MODE
06208  2DDD  A0 18                 LDY #$18     ; SCREEN AT $0400, BITMAP AT $2000
06209  2DDF  8D 11 D0              STA $D011
06210  2DE2                        ;STX $D016
06211  2DE2  8C 18 D0              STY $D018
06212  2DE5             
06213  2DE5                        ; SET THE SPRITE ADDRESSES BE $4200-$43FF
06214  2DE5  A9 08                 LDA #$08
06215  2DE7  8D F8 47              STA $47F8
06216  2DEA  A9 09                 LDA #$09
06217  2DEC  8D F9 47              STA $47F9
06218  2DEF  A9 0A                 LDA #$0A
06219  2DF1  8D FA 47              STA $47FA
06220  2DF4  A9 0B                 LDA #$0B
06221  2DF6  8D FB 47              STA $47FB
06222  2DF9  A9 0C                 LDA #$0C
06223  2DFB  8D FC 47              STA $47FC
06224  2DFE  A9 0D                 LDA #$0D
06225  2E00  8D FD 47              STA $47FD
06226  2E03  A9 0E                 LDA #$0E
06227  2E05  8D FE 47              STA $47FE
06228  2E08  A9 0F                 LDA #$0F
06229  2E0A  8D FF 47              STA $47FF
06230  2E0D             
06231  2E0D  60                    RTS
06232  2E0E             
06233  2E0E             GRAPHICS.SETHIRESMODE$ 
06234  2E0E  20 CC 2D              JSR GRAPHICS.SETBITMAPMODE$
06235  2E11             
06236  2E11  A2 00                 LDX #$00
06237  2E13             @LOOP
06238  2E13                        ; TRANSFERS VIDEO DATA
06239  2E13  BD 40 7F              LDA GRAPHICS.MULTIVIDEOFILE,X
06240  2E16  9D 00 44              STA GRAPHICS.MULTIVIDEOADDRESS,X
06241  2E19  BD 40 80              LDA GRAPHICS.MULTIVIDEOFILE+$100,X
06242  2E1C  9D 00 45              STA GRAPHICS.MULTIVIDEOADDRESS+$100,X
06243  2E1F  BD 40 81              LDA GRAPHICS.MULTIVIDEOFILE+$200,X
06244  2E22  9D 00 46              STA GRAPHICS.MULTIVIDEOADDRESS+$200,X
06245  2E25  BD 28 82              LDA GRAPHICS.MULTIVIDEOFILE+$2E8,X
06246  2E28  9D E8 46              STA GRAPHICS.MULTIVIDEOADDRESS+$2E8,X
06247  2E2B  E8                    INX
06248  2E2C  D0 E5                 BNE @LOOP
06249  2E2E             
06250  2E2E             GRAPHICS.DISABLEMULTICOLORMODE$ 
06251  2E2E                        ; DISABLE MULTI-COLOR MODE
06252  2E2E  AD 16 D0              LDA $D016
06253  2E31  29 EF                 AND #%11101111 ; BIT #4: 0 = MULTICOLOR MODE OFF.
06254  2E33  8D 16 D0              STA $D016
06255  2E36             
06256  2E36  60                    RTS
06257  2E37             
06258  2E37             GRAPHICS.SETMULTICOLORMODE$ 
06259  2E37  20 CC 2D              JSR GRAPHICS.SETBITMAPMODE$
06260  2E3A             
06261  2E3A  AD 10 87              LDA GRAPHICS.MULTIBGCOLORFILE
06262  2E3D  8D 21 D0              STA GRAPHICS.MULTIBGCOLORADDRESS ; SCREEN COLOR
06263  2E40             
06264  2E40  A2 00                 LDX #$00
06265  2E42             @LOOP
06266  2E42                        ; TRANSFERS VIDEO DATA
06267  2E42  BD 40 7F              LDA GRAPHICS.MULTIVIDEOFILE,X
06268  2E45  9D 00 44              STA GRAPHICS.MULTIVIDEOADDRESS,X
06269  2E48  BD 40 80              LDA GRAPHICS.MULTIVIDEOFILE+$100,X
06270  2E4B  9D 00 45              STA GRAPHICS.MULTIVIDEOADDRESS+$100,X
06271  2E4E  BD 40 81              LDA GRAPHICS.MULTIVIDEOFILE+$200,X
06272  2E51  9D 00 46              STA GRAPHICS.MULTIVIDEOADDRESS+$200,X
06273  2E54  BD 28 82              LDA GRAPHICS.MULTIVIDEOFILE+$2E8,X
06274  2E57  9D E8 46              STA GRAPHICS.MULTIVIDEOADDRESS+$2E8,X
06275  2E5A                        ; TRANSFERS COLOR DATA
06276  2E5A  BD 28 83              LDA GRAPHICS.MULTICOLORFILE,X
06277  2E5D  9D 00 D8              STA GRAPHICS.MULTICOLORADDRESS,X
06278  2E60  BD 28 84              LDA GRAPHICS.MULTICOLORFILE+$100,X
06279  2E63  9D 00 D9              STA GRAPHICS.MULTICOLORADDRESS+$100,X
06280  2E66  BD 28 85              LDA GRAPHICS.MULTICOLORFILE+$200,X
06281  2E69  9D 00 DA              STA GRAPHICS.MULTICOLORADDRESS+$200,X
06282  2E6C  BD 10 86              LDA GRAPHICS.MULTICOLORFILE+$2E8,X
06283  2E6F  9D E8 DA              STA GRAPHICS.MULTICOLORADDRESS+$2E8,X
06284  2E72  E8                    INX
06285  2E73  D0 CD                 BNE @LOOP
06286  2E75             
06287  2E75             GRAPHICS.ENABLEMULTICOLORMODE$ 
06288  2E75                        ; ENABLEMULTI-COLOR MODE
06289  2E75  AD 16 D0              LDA $D016
06290  2E78  09 10                 ORA #%00010000 ; BIT #4: 1 = MULTICOLOR MODE ON.
06291  2E7A  8D 16 D0              STA $D016
06292  2E7D             
06293  2E7D  60                    RTS
06294  2E7E             
06295  2E7E             GRAPHICS.SETTEXTMODE$ 
06296  2E7E                        ; LEAVE STANDARD BITMAP MODE
06297  2E7E  AD 11 D0              LDA $D011
06298  2E81  29 DF                 AND #%11011111
06299  2E83  8D 11 D0              STA $D011
06300  2E86             
06301  2E86                        ;$DD00 = %XXXXXX11 -> BANK0: $0000-$3FFF
06302  2E86                        ;$DD00 = %XXXXXX10 -> BANK1: $4000-$7FFF
06303  2E86                        ;$DD00 = %XXXXXX01 -> BANK2: $8000-$BFFF
06304  2E86                        ;$DD00 = %XXXXXX00 -> BANK3: $C000-$FFFF
06305  2E86                        ; DEFAULT: 10010111
06306  2E86  AD 00 DD              LDA $DD00
06307  2E89  29 FC                 AND #%11111100
06308  2E8B                        ;ORA #%00000010 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
06309  2E8B  09 03                 ORA #%00000011 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
06310  2E8D  8D 00 DD              STA $DD00
06311  2E90             
06312  2E90                        ; INDICATE THAT GRAPHICS MODE IS INACTIVE
06313  2E90  A9 00                 LDA #$00
06314  2E92  8D C3 2D              STA GRAPHICS.ISACTIVE$
06315  2E95                        
06316  2E95  60                    RTS
06317  2E96             
06318  2E96             GRAPHICS.START 
06319  2E96             
06320  2E96  20 76 13              JSR CONSOLE.CLEAR$
06321  2E99  20 C7 2E              JSR GRAPHICS.CLEAR$
06322  2E9C             
06323  2E9C  20 0E 2E              JSR GRAPHICS.SETHIRESMODE$
06324  2E9F             
06325  2E9F  20 B0 2E              JSR GRAPHICS.SETCOLOR$
06326  2EA2  20 83 2F              JSR GRAPHICS.CREATETABLE
06327  2EA5                        
06328  2EA5  60                    RTS
06329  2EA6             
06330  2EA6             GRAPHICS.END 
06331  2EA6                        ;; SET BITMAP MEMORY AT $2000+VIC BANK ADDRESS ($2000)
06332  2EA6             ;        LDA $D018
06333  2EA6             ;        AND #%11110001
06334  2EA6             ;        ORA #%00000010 ; $0800
06335  2EA6             ;        STA $D018
06336  2EA6             
06337  2EA6  20 76 13              JSR CONSOLE.CLEAR$
06338  2EA9  20 C7 2E              JSR GRAPHICS.CLEAR$
06339  2EAC             
06340  2EAC  20 7E 2E              JSR GRAPHICS.SETTEXTMODE$
06341  2EAF             
06342  2EAF  60                    RTS
06343  2EB0             
06344  2EB0             ;ALIGN $100
06345  2EB0             
06346  2EB0             GRAPHICS.SETCOLOR$ 
06347  2EB0  A2 00                 LDX #$00
06348  2EB2  A9 10                 LDA #$10 ; WHITE ON BLACK
06349  2EB4             @LOOP
06350  2EB4  9D 00 44              STA GRAPHICS.COLORADDRESS,X
06351  2EB7  9D 00 45              STA GRAPHICS.COLORADDRESS+$100,X
06352  2EBA  9D 00 46              STA GRAPHICS.COLORADDRESS+$200,X
06353  2EBD  9D 00 47              STA GRAPHICS.COLORADDRESS+$300,X
06354  2EC0  CA                    DEX
06355  2EC1                        ;BNE @LOOP
06356  2EC1  F0 03                 BEQ @DONE
06357  2EC3  4C B4 2E              JMP @LOOP
06358  2EC6             
06359  2EC6             @DONE
06360  2EC6  60                    RTS
06361  2EC7             
06362  2EC7             GRAPHICS.CLEAR$ 
06363  2EC7  A2 00                 LDX #$00
06364  2EC9  A9 00                 LDA #$00
06365  2ECB             @LOOP
06366  2ECB  9D 00 60              STA GRAPHICS.MEMORYADDRESS,X
06367  2ECE  9D 00 61              STA GRAPHICS.MEMORYADDRESS+$100,X
06368  2ED1  9D 00 62              STA GRAPHICS.MEMORYADDRESS+$200,X
06369  2ED4  9D 00 63              STA GRAPHICS.MEMORYADDRESS+$300,X
06370  2ED7  9D 00 64              STA GRAPHICS.MEMORYADDRESS+$400,X
06371  2EDA  9D 00 65              STA GRAPHICS.MEMORYADDRESS+$500,X
06372  2EDD  9D 00 66              STA GRAPHICS.MEMORYADDRESS+$600,X
06373  2EE0  9D 00 67              STA GRAPHICS.MEMORYADDRESS+$700,X
06374  2EE3  9D 00 68              STA GRAPHICS.MEMORYADDRESS+$800,X
06375  2EE6  9D 00 69              STA GRAPHICS.MEMORYADDRESS+$900,X
06376  2EE9  9D 00 6A              STA GRAPHICS.MEMORYADDRESS+$A00,X
06377  2EEC  9D 00 6B              STA GRAPHICS.MEMORYADDRESS+$B00,X
06378  2EEF  9D 00 6C              STA GRAPHICS.MEMORYADDRESS+$C00,X
06379  2EF2  9D 00 6D              STA GRAPHICS.MEMORYADDRESS+$D00,X
06380  2EF5  9D 00 6E              STA GRAPHICS.MEMORYADDRESS+$E00,X
06381  2EF8  9D 00 6F              STA GRAPHICS.MEMORYADDRESS+$F00,X
06382  2EFB  9D 00 70              STA GRAPHICS.MEMORYADDRESS+$1000,X
06383  2EFE  9D 00 71              STA GRAPHICS.MEMORYADDRESS+$1100,X
06384  2F01  9D 00 72              STA GRAPHICS.MEMORYADDRESS+$1200,X
06385  2F04  9D 00 73              STA GRAPHICS.MEMORYADDRESS+$1300,X
06386  2F07  9D 00 74              STA GRAPHICS.MEMORYADDRESS+$1400,X
06387  2F0A  9D 00 75              STA GRAPHICS.MEMORYADDRESS+$1500,X
06388  2F0D  9D 00 76              STA GRAPHICS.MEMORYADDRESS+$1600,X
06389  2F10  9D 00 77              STA GRAPHICS.MEMORYADDRESS+$1700,X
06390  2F13  9D 00 78              STA GRAPHICS.MEMORYADDRESS+$1800,X
06391  2F16  9D 00 79              STA GRAPHICS.MEMORYADDRESS+$1900,X
06392  2F19  9D 00 7A              STA GRAPHICS.MEMORYADDRESS+$1A00,X
06393  2F1C  9D 00 7B              STA GRAPHICS.MEMORYADDRESS+$1B00,X
06394  2F1F  9D 00 7C              STA GRAPHICS.MEMORYADDRESS+$1C00,X
06395  2F22  9D 00 7D              STA GRAPHICS.MEMORYADDRESS+$1D00,X
06396  2F25  9D 00 7E              STA GRAPHICS.MEMORYADDRESS+$1E00,X
06397  2F28  9D 00 7F              STA GRAPHICS.MEMORYADDRESS+$1F00,X
06398  2F2B             
06399  2F2B  9D 00 80              STA GRAPHICS.MEMORYADDRESS+$2000,X
06400  2F2E  9D 00 81              STA GRAPHICS.MEMORYADDRESS+$2100,X
06401  2F31  9D 00 82              STA GRAPHICS.MEMORYADDRESS+$2200,X
06402  2F34  9D 00 83              STA GRAPHICS.MEMORYADDRESS+$2300,X
06403  2F37             
06404  2F37  9D 00 84              STA GRAPHICS.MEMORYADDRESS+$2400,X
06405  2F3A  9D 00 85              STA GRAPHICS.MEMORYADDRESS+$2500,X
06406  2F3D  9D 00 86              STA GRAPHICS.MEMORYADDRESS+$2600,X
06407  2F40  9D 00 87              STA GRAPHICS.MEMORYADDRESS+$2700,X
06408  2F43  CA                    DEX
06409  2F44                        ;BNE @LOOP
06410  2F44  F0 03                 BEQ @DONE
06411  2F46  4C CB 2E              JMP @LOOP
06412  2F49             @DONE
06413  2F49             
06414  2F49  A9 00                 LDA #COLOR.BLACK$
06415  2F4B  8D 21 D0              STA GRAPHICS.MULTIBGCOLORADDRESS
06416  2F4E             
06417  2F4E  A2 00                 LDX #$00
06418  2F50  A9 00                 LDA #COLOR.BLACK$
06419  2F52             @LOOP2
06420  2F52                        ; TRANSFERS VIDEO DATA
06421  2F52  9D 00 44              STA GRAPHICS.MULTIVIDEOADDRESS,X
06422  2F55  9D 00 45              STA GRAPHICS.MULTIVIDEOADDRESS+$100,X
06423  2F58  9D 00 46              STA GRAPHICS.MULTIVIDEOADDRESS+$200,X
06424  2F5B  9D E8 46              STA GRAPHICS.MULTIVIDEOADDRESS+$2E8,X
06425  2F5E                        ; TRANSFERS COLOR DATA
06426  2F5E  9D 00 D8              STA GRAPHICS.MULTICOLORADDRESS,X
06427  2F61  9D 00 D9              STA GRAPHICS.MULTICOLORADDRESS+$100,X
06428  2F64  9D 00 DA              STA GRAPHICS.MULTICOLORADDRESS+$200,X
06429  2F67  9D E8 DA              STA GRAPHICS.MULTICOLORADDRESS+$2E8,X
06430  2F6A  E8                    INX
06431  2F6B  D0 E5                 BNE @LOOP2
06432  2F6D             
06433  2F6D  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS
06434  2F6F  8D BF 2D              STA GRAPHICS.CURRENTADDRESS
06435  2F72  A9 60                 LDA #>GRAPHICS.MEMORYADDRESS
06436  2F74  8D C0 2D              STA GRAPHICS.CURRENTADDRESS+1
06437  2F77             
06438  2F77  A9 00                 LDA #<GRAPHICS.COLORADDRESS
06439  2F79  8D C1 2D              STA GRAPHICS.CURRENTCOLORADDR
06440  2F7C  A9 44                 LDA #>GRAPHICS.COLORADDRESS
06441  2F7E  8D C2 2D              STA GRAPHICS.CURRENTCOLORADDR+1
06442  2F81             
06443  2F81  60                    RTS
06444  2F82             
06445  2F82  00         GRAPHICS.TABLECREATED BYTE $00
06446  2F83             
06447  2F83             ;ALIGN $100
06448  2F83             
06449  2F83             GRAPHICS.CREATETABLE 
06450  2F83  AD 82 2F              LDA GRAPHICS.TABLECREATED
06451  2F86  F0 01                 BEQ @NEEDTOCREATE
06452  2F88  60                    RTS
06453  2F89             @NEEDTOCREATE 
06454  2F89  A9 01                 LDA #$01
06455  2F8B  8D 82 2F              STA GRAPHICS.TABLECREATED
06456  2F8E             
06457  2F8E  18                    CLC ; NEED TO CLEAR THE CARRY FLAG
06458  2F8F  A2 00                 LDX #$00
06459  2F91  A9 80                 LDA #$80
06460  2F93             @LOOP1
06461  2F93  9D 00 0D              STA GRAPHICS.BITMASK,X
06462  2F96  6A                    ROR
06463  2F97  90 01                 BCC @SKIP1
06464  2F99  6A                    ROR
06465  2F9A             @SKIP1
06466  2F9A  A8                    TAY
06467  2F9B  8A                    TXA
06468  2F9C  29 F8                 AND #%11111000
06469  2F9E  9D 00 0C              STA GRAPHICS.X_TABLE,X
06470  2FA1  98                    TYA
06471  2FA2  E8                    INX
06472  2FA3  D0 EE                 BNE @LOOP1
06473  2FA5             
06474  2FA5  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS ; CAN BE REPLACED WITH A TXA IF GFX_MEM IS PAGE ALIGNED
06475  2FA7             @LOOP2
06476  2FA7  A0 07                 LDY #$07
06477  2FA9             @LOOP3
06478  2FA9  9D 00 0A              STA GRAPHICS.Y_TABLE_LO,X
06479  2FAC  48                    PHA
06480  2FAD             @SMC1
06481  2FAD  A9 60                 LDA #>GRAPHICS.MEMORYADDRESS
06482  2FAF  9D 00 0B              STA GRAPHICS.Y_TABLE_HI,X
06483  2FB2  68                    PLA
06484  2FB3  E8                    INX
06485  2FB4  18                    CLC
06486  2FB5  69 01                 ADC #$01
06487  2FB7  88                    DEY
06488  2FB8  10 EF                 BPL @LOOP3
06489  2FBA  EE AE 2F              INC @SMC1+1
06490  2FBD  18                    CLC
06491  2FBE                        ;ADC #$40
06492  2FBE  69 38                 ADC #$38
06493  2FC0  90 03                 BCC @SKIP2
06494  2FC2  EE AE 2F              INC @SMC1+1
06495  2FC5             @SKIP2
06496  2FC5  E0 C8                 CPX #8*25
06497  2FC7  D0 DE                 BNE @LOOP2
06498  2FC9  60                    RTS
06499  2FCA             
06500  2FCA             ;ALIGN $100
06501  2FCA             
06502  2FCA             GRAPHICS.DRAWCHR.CHRADDRESS = $20 ; 2 BYTES
06503  2FCA             GRAPHICS.DRAWCHR.BMPADDRESS = $22 ; 2 BYTES
06504  2FCA             GRAPHICS.DRAWCHR.COL_OFFSET = $24 ; 2 BYTES
06505  2FCA             GRAPHICS.DRAWCHR.ROW_OFFSET = $26 ; 2 BYTES
06506  2FCA             GRAPHICS.DRAWCHR.CHR = $28 ; 1 BYTE
06507  2FCA             GRAPHICS.DRAWCHR 
06508  2FCA             
06509  2FCA  85 28                 STA GRAPHICS.DRAWCHR.CHR
06510  2FCC  AD C3 2D              LDA GRAPHICS.ISACTIVE$
06511  2FCF  C9 01                 CMP #$01
06512  2FD1  F0 01                 BEQ @OKTODRAWCHR
06513  2FD3                        ;LDA GRAPHICS.DRAWCHR.CHR
06514  2FD3  60                    RTS
06515  2FD4             @OKTODRAWCHR 
06516  2FD4             
06517  2FD4                        ; SET THE CHARACTER COLOR
06518  2FD4                        ; ADDRESS = CONSOLE.CURRENTADDRESS + $4000 (2ND BANK)
06519  2FD4  AD EE 12              LDA CONSOLE.CURRENTADDRESS
06520  2FD7  85 80                 STA MATH.ADD16.ADDEND1$
06521  2FD9  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
06522  2FDC  85 81                 STA MATH.ADD16.ADDEND1$+1
06523  2FDE  A9 00                 LDA #$00
06524  2FE0  85 82                 STA MATH.ADD16.ADDEND2$
06525  2FE2  A9 40                 LDA #$40
06526  2FE4  85 83                 STA MATH.ADD16.ADDEND2$+1
06527  2FE6  20 00 28              JSR MATH.ADD16$
06528  2FE9  A5 84                 LDA MATH.ADD16.SUM$
06529  2FEB  85 20                 STA GRAPHICS.DRAWCHR.CHRADDRESS
06530  2FED  A5 85                 LDA MATH.ADD16.SUM$+1
06531  2FEF  85 21                 STA GRAPHICS.DRAWCHR.CHRADDRESS+1
06532  2FF1  A0 00                 LDY #$00
06533  2FF3  AD F4 12              LDA CONSOLE.CHARACTERCOLOR
06534  2FF6  C9 80                 CMP #$80
06535  2FF8  2A                    ROL
06536  2FF9  C9 80                 CMP #$80
06537  2FFB  2A                    ROL
06538  2FFC  C9 80                 CMP #$80
06539  2FFE  2A                    ROL
06540  2FFF  C9 80                 CMP #$80
06541  3001  2A                    ROL
06542  3002  91 20                 STA (GRAPHICS.DRAWCHR.CHRADDRESS),Y
06543  3004             
06544  3004             TODO       CREATE TABLE TO LOOK UP THE CHARACTERMAP ADDRESS BY CONSOLE.WRITECHR.CHAR$
06545  3004                        ; GET THE MEMORY ADDRESS OF THE CHARACTER
06546  3004                        ; ADDRESS = FONT.MEMORYADDRESS + (CHR * 8)
06547  3004  A5 28                 LDA GRAPHICS.DRAWCHR.CHR
06548  3006  85 80                 STA MATH.MULTIPLY16.FACTOR1$
06549  3008  A9 08                 LDA #$08
06550  300A  85 82                 STA MATH.MULTIPLY16.FACTOR2$
06551  300C  A9 00                 LDA #$00
06552  300E  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
06553  3010  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
06554  3012  20 67 29              JSR MATH.MULTIPLY16$
06555  3015             
06556  3015  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06557  3017  85 82                 STA MATH.ADD16.ADDEND2$
06558  3019  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06559  301B  85 83                 STA MATH.ADD16.ADDEND2$+1
06560  301D  A9 00                 LDA #<FONT.MEMORYADDRESS
06561  301F  85 80                 STA MATH.ADD16.ADDEND1$
06562  3021  A9 20                 LDA #>FONT.MEMORYADDRESS
06563  3023  85 81                 STA MATH.ADD16.ADDEND1$+1
06564  3025  20 00 28              JSR MATH.ADD16$
06565  3028             
06566  3028  A5 84                 LDA MATH.ADD16.SUM$
06567  302A  85 20                 STA GRAPHICS.DRAWCHR.CHRADDRESS
06568  302C  A5 85                 LDA MATH.ADD16.SUM$+1
06569  302E  85 21                 STA GRAPHICS.DRAWCHR.CHRADDRESS+1
06570  3030             
06571  3030                        ; GET THE MEMORY ADDRESS OF THE SCREEN
06572  3030                        ; ADDRESS = GRAPHICS.MEMORYADDRESS + (COL * 8) + (ROW * 320)
06573  3030             
06574  3030                        ; COL_OFFSET = CURRENTCOLUMN * 8
06575  3030  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
06576  3033  85 80                 STA MATH.MULTIPLY16.FACTOR1$
06577  3035  A9 08                 LDA #$08
06578  3037  85 82                 STA MATH.MULTIPLY16.FACTOR2$
06579  3039  A9 00                 LDA #$00
06580  303B  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
06581  303D  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
06582  303F  20 67 29              JSR MATH.MULTIPLY16$
06583  3042  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06584  3044  85 24                 STA GRAPHICS.DRAWCHR.COL_OFFSET
06585  3046  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06586  3048  85 25                 STA GRAPHICS.DRAWCHR.COL_OFFSET+1
06587  304A             
06588  304A                        ; ROW_OFFSET = CURRENTROW * 320
06589  304A  AD F1 12              LDA CONSOLE.CURRENTROW
06590  304D  85 80                 STA MATH.MULTIPLY16.FACTOR1$
06591  304F  A9 00                 LDA #$00
06592  3051  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
06593  3053  A9 40                 LDA #$40
06594  3055  85 82                 STA MATH.MULTIPLY16.FACTOR2$
06595  3057  A9 01                 LDA #$01
06596  3059  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
06597  305B  20 67 29              JSR MATH.MULTIPLY16$
06598  305E  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06599  3060  85 26                 STA GRAPHICS.DRAWCHR.ROW_OFFSET
06600  3062  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06601  3064  85 27                 STA GRAPHICS.DRAWCHR.ROW_OFFSET+1
06602  3066                        
06603  3066                        ; SUM = ROW_OFFSET + COL_OFFSET
06604  3066  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06605  3068  85 82                 STA MATH.ADD16.ADDEND2$
06606  306A  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06607  306C  85 83                 STA MATH.ADD16.ADDEND2$+1
06608  306E  A5 24                 LDA GRAPHICS.DRAWCHR.COL_OFFSET
06609  3070  85 80                 STA MATH.ADD16.ADDEND1$
06610  3072  A5 25                 LDA GRAPHICS.DRAWCHR.COL_OFFSET+1
06611  3074  85 81                 STA MATH.ADD16.ADDEND1$+1
06612  3076  20 00 28              JSR MATH.ADD16$
06613  3079             
06614  3079                        ; BMPADDRESS = SUM + GRAPHICS.MEMORYADDRESS
06615  3079  A5 84                 LDA MATH.ADD16.SUM$
06616  307B  85 82                 STA MATH.ADD16.ADDEND2$
06617  307D  A5 85                 LDA MATH.ADD16.SUM$+1
06618  307F  85 83                 STA MATH.ADD16.ADDEND2$+1
06619  3081  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS
06620  3083  85 80                 STA MATH.ADD16.ADDEND1$
06621  3085  A9 60                 LDA #>GRAPHICS.MEMORYADDRESS
06622  3087  85 81                 STA MATH.ADD16.ADDEND1$+1
06623  3089  20 00 28              JSR MATH.ADD16$
06624  308C             
06625  308C  A5 84                 LDA MATH.ADD16.SUM$
06626  308E  85 22                 STA GRAPHICS.DRAWCHR.BMPADDRESS
06627  3090  A5 85                 LDA MATH.ADD16.SUM$+1
06628  3092  85 23                 STA GRAPHICS.DRAWCHR.BMPADDRESS+1
06629  3094             
06630  3094                        ; COPY THE CHARACTER TO THE SCREEN
06631  3094  A5 20                 LDA GRAPHICS.DRAWCHR.CHRADDRESS
06632  3096  85 73                 STA MEMORY.COPY.SOURCE$
06633  3098  A5 21                 LDA GRAPHICS.DRAWCHR.CHRADDRESS+1
06634  309A  85 74                 STA MEMORY.COPY.SOURCE$+1
06635  309C  A5 22                 LDA GRAPHICS.DRAWCHR.BMPADDRESS
06636  309E  85 75                 STA MEMORY.COPY.DESTINATION$
06637  30A0  A5 23                 LDA GRAPHICS.DRAWCHR.BMPADDRESS+1
06638  30A2  85 76                 STA MEMORY.COPY.DESTINATION$+1
06639  30A4  A9 08                 LDA #$08
06640  30A6  85 77                 STA MEMORY.COPY.LENGTH$
06641  30A8  20 8A 0F              JSR MEMORY.COPY$
06642  30AB             
06643  30AB                        ;LDA GRAPHICS.DRAWCHR.CHR
06644  30AB             
06645  30AB  60                    RTS
06646  30AC             
06647  30AC             GRAPHICS.SCROLLUP 
06648  30AC             
06649  30AC  85 28                 STA GRAPHICS.DRAWCHR.CHR
06650  30AE  AD C3 2D              LDA GRAPHICS.ISACTIVE$
06651  30B1  C9 01                 CMP #$01
06652  30B3  F0 01                 BEQ @OKTOSCROLLUP
06653  30B5  60                    RTS
06654  30B6             @OKTOSCROLLUP 
06655  30B6             
06656  30B6                        ; COPY THE CHARACTERS FROM THE 2ND ROW AND OVERRIDE THE FIRST ROW.
06657  30B6                        ; CLEAR OUT THE TEXT ON THE LAST ROW.
06658  30B6  A9 40                 LDA #<GRAPHICS.MEMORYADDRESS_2R
06659  30B8  85 73                 STA MEMORY.COPY16.SOURCE$
06660  30BA  A9 61                 LDA #>GRAPHICS.MEMORYADDRESS_2R
06661  30BC  85 74                 STA MEMORY.COPY16.SOURCE$+1
06662  30BE  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS
06663  30C0  85 75                 STA MEMORY.COPY16.DESTINATION$
06664  30C2  A9 60                 LDA #>GRAPHICS.MEMORYADDRESS
06665  30C4  85 76                 STA MEMORY.COPY16.DESTINATION$+1
06666  30C6  A9 00                 LDA #$00
06667  30C8  85 78                 STA MEMORY.COPY16.LENGTH$
06668  30CA  A9 1E                 LDA #$1E
06669  30CC  85 79                 STA MEMORY.COPY16.LENGTH$+1
06670  30CE  20 9C 0F              JSR MEMORY.COPY16$
06671  30D1             
06672  30D1                        ; NEED TO "SCROLL" UP THE CHARACTER COLORS AS WELL
06673  30D1  A9 28                 LDA #<GRAPHICS.COLORADDRESS+$28
06674  30D3  85 73                 STA MEMORY.COPY16.SOURCE$
06675  30D5  A9 44                 LDA #>GRAPHICS.COLORADDRESS
06676  30D7  85 74                 STA MEMORY.COPY16.SOURCE$+1
06677  30D9  A9 00                 LDA #<GRAPHICS.COLORADDRESS
06678  30DB  85 75                 STA MEMORY.COPY16.DESTINATION$
06679  30DD  A9 44                 LDA #>GRAPHICS.COLORADDRESS
06680  30DF  85 76                 STA MEMORY.COPY16.DESTINATION$+1
06681  30E1  A9 C0                 LDA #$C0
06682  30E3  85 78                 STA MEMORY.COPY16.LENGTH$
06683  30E5  A9 03                 LDA #$03
06684  30E7  85 79                 STA MEMORY.COPY16.LENGTH$+1
06685  30E9  20 9C 0F              JSR MEMORY.COPY16$
06686  30EC             
06687  30EC                        ; CLEAR THE LAST LINE
06688  30EC  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS_LR
06689  30EE  85 73                 STA MEMORY.FILL16.ADDRESS$
06690  30F0  A9 7E                 LDA #>GRAPHICS.MEMORYADDRESS_LR
06691  30F2  85 74                 STA MEMORY.FILL16.ADDRESS$+1
06692  30F4  A9 00                 LDA #$00
06693  30F6  85 75                 STA MEMORY.FILL16.VALUE$
06694  30F8  A9 40                 LDA #$40
06695  30FA  85 77                 STA MEMORY.FILL16.LENGTH$
06696  30FC  A9 01                 LDA #$01
06697  30FE  85 78                 STA MEMORY.FILL16.LENGTH$+1
06698  3100  20 15 10              JSR MEMORY.FILL16$
06699  3103  20 15 10              JSR MEMORY.FILL16$
06700  3106             
06701  3106  60                    RTS
06702  3107             
06703  3107             ;GRAPHICS.SCROLLUPCHRS
06704  3107             ;        LDX #$00
06705  3107             ;@LOOP1 ; DO PROCESS 4 TIMES (6*4 = 24)
06706  3107             ;        LDY #$00
06707  3107             ;@LOOP2 ; MOVE UP 6 LINES
06708  3107             ;        LDA ($FD),Y
06709  3107             ;        STA ($FB),Y
06710  3107             ;        INY
06711  3107             ;        CPY #240 ; (40*6)
06712  3107             ;        BNE @LOOP2
06713  3107             
06714  3107             ;        INX
06715  3107             ;        CPX #4
06716  3107             ;        BNE @INCR
06717  3107             ;        JMP @DONE
06718  3107             
06719  3107             ;@INCR
06720  3107             ;        ; NEED TO INCREASE THE VALUE OF THE ADDRESS THAT $FB AND $FD ARE POINTING TO.
06721  3107             ;        LDA $FB
06722  3107             ;        STA MATH.ADD16.ADDEND1$
06723  3107             ;        LDA $FC
06724  3107             ;        STA MATH.ADD16.ADDEND1$+1
06725  3107             
06726  3107             ;        LDA #240
06727  3107             ;        STA MATH.ADD16.ADDEND2$
06728  3107             ;        LDA #0
06729  3107             ;        STA MATH.ADD16.ADDEND2$+1
06730  3107             
06731  3107             ;        JSR MATH.ADD16$ ; ($FB+$FC) = ($FB+$FC) + $28
06732  3107             
06733  3107             ;        LDA MATH.ADD16.SUM$
06734  3107             ;        STA $FB
06735  3107             ;        LDA MATH.ADD16.SUM$+1
06736  3107             ;        STA $FC
06737  3107             
06738  3107             ;        LDA $FD
06739  3107             ;        STA MATH.ADD16.ADDEND1$
06740  3107             ;        LDA $FE
06741  3107             ;        STA MATH.ADD16.ADDEND1$+1
06742  3107             
06743  3107             ;        LDA #240
06744  3107             ;        STA MATH.ADD16.ADDEND2$
06745  3107             ;        LDA #0
06746  3107             ;        STA MATH.ADD16.ADDEND2$+1
06747  3107             
06748  3107             ;        JSR MATH.ADD16$ ; ($FD+$FE) = ($FD+$FE) + $28
06749  3107             
06750  3107             ;        LDA MATH.ADD16.SUM$
06751  3107             ;        STA $FD
06752  3107             ;        LDA MATH.ADD16.SUM$+1
06753  3107             ;        STA $FE
06754  3107             
06755  3107             ;        JMP @LOOP1
06756  3107             ;@DONE
06757  3107             
06758  3107             ;        RTS
06759  3107             
06760  3107             
06761  3107             ;ALIGN $100
06762  3107             
06763  3107             GRAPHICS.SETPIXEL.X$ = $20 ; 2 BYTES
06764  3107             GRAPHICS.SETPIXEL.Y$ = $22 ; 2 BYTES
06765  3107             GRAPHICS.SETPIXEL.COLOR$ = $24 ; 1 BYTE
06766  3107             GRAPHICS.SETPIXEL$ 
06767  3107  A6 20                 LDX GRAPHICS.SETPIXEL.X$
06768  3109  A4 22                 LDY GRAPHICS.SETPIXEL.Y$
06769  310B  A5 21                 LDA GRAPHICS.SETPIXEL.X$+1
06770  310D             ;        CMP #$01
06771  310D             ;        BNE @PLOT
06772  310D             ;        SEC
06773  310D             
06774  310D             ;@PLOT
06775  310D             ;        LDA GRAPHICS.Y_TABLE_HI,Y
06776  310D             ;        BCC @SKIP
06777  310D             ;        ADC #$00      ; ADDS 1 (256 PIXELS) TO HIBYTE
06778  310D             ;@SKIP
06779  310D             ;        STA $FC
06780  310D  18                    CLC
06781  310E  B9 00 0B              LDA GRAPHICS.Y_TABLE_HI,Y
06782  3111  65 21                 ADC GRAPHICS.SETPIXEL.X$+1
06783  3113  85 FC                 STA $FC
06784  3115             
06785  3115  B9 00 0A              LDA GRAPHICS.Y_TABLE_LO,Y
06786  3118  85 FB                 STA $FB
06787  311A  BC 00 0C              LDY GRAPHICS.X_TABLE,X
06788  311D             
06789  311D  A5 24                 LDA GRAPHICS.SETPIXEL.COLOR$
06790  311F  C9 01                 CMP #$01
06791  3121  F0 0A                 BEQ @SET
06792  3123             
06793  3123                        ;LDA #$FF
06794  3123                        ;SEC
06795  3123                        ;SBC GRAPHICS.BITMASK,X
06796  3123  BD 00 0D              LDA GRAPHICS.BITMASK,X
06797  3126  49 FF                 EOR #$FF
06798  3128  31 FB                 AND ($FB),Y
06799  312A  91 FB                 STA ($FB),Y
06800  312C             
06801  312C  60                    RTS
06802  312D             
06803  312D             @SET
06804  312D  BD 00 0D              LDA GRAPHICS.BITMASK,X
06805  3130  11 FB                 ORA ($FB),Y
06806  3132  91 FB                 STA ($FB),Y
06807  3134             
06808  3134  60                    RTS
06809  3135             
06810  3135             
06811  3135             GRAPHICS.DRAWFILL.COLOR$ = $24 ; 1 BYTE
06812  3135             GRAPHICS.DRAWFILL.X1$ = $25 ; 2 BYTES
06813  3135             GRAPHICS.DRAWFILL.Y1$ = $27 ; 2 BYTES
06814  3135             GRAPHICS.DRAWFILL.X2$ = $29 ; 2 BYTES
06815  3135             GRAPHICS.DRAWFILL.Y2$ = $2B ; 2 BYTES
06816  3135             GRAPHICS.DRAWFILL.Y = $2D ; 2 BYTES
06817  3135             GRAPHICS.DRAWFILL$ 
06818  3135                        ; DRAW LINES WHICH FILLS A BOX
06819  3135             
06820  3135                        ; INITILIZE Y = Y1
06821  3135  A5 27                 LDA GRAPHICS.DRAWFILL.Y1$
06822  3137  85 2D                 STA GRAPHICS.DRAWFILL.Y
06823  3139  A5 28                 LDA GRAPHICS.DRAWFILL.Y1$+1
06824  313B  85 2E                 STA GRAPHICS.DRAWFILL.Y+1
06825  313D             
06826  313D             @DRAWLINE
06827  313D                        ; DRAW LINE
06828  313D  A5 25                 LDA GRAPHICS.DRAWFILL.X1$
06829  313F  85 D0                 STA GRAPHICS.DRAWLINE.X1$
06830  3141  A5 26                 LDA GRAPHICS.DRAWFILL.X1$+1
06831  3143  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
06832  3145  A5 2D                 LDA GRAPHICS.DRAWFILL.Y
06833  3147  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
06834  3149  A5 2E                 LDA GRAPHICS.DRAWFILL.Y+1
06835  314B  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
06836  314D  A5 29                 LDA GRAPHICS.DRAWFILL.X2$
06837  314F  85 D4                 STA GRAPHICS.DRAWLINE.X2$
06838  3151  A5 2A                 LDA GRAPHICS.DRAWFILL.X2$+1
06839  3153  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
06840  3155  A5 2D                 LDA GRAPHICS.DRAWFILL.Y
06841  3157  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
06842  3159  A5 2E                 LDA GRAPHICS.DRAWFILL.Y+1
06843  315B  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
06844  315D  20 84 31              JSR GRAPHICS.DRAWLINE$
06845  3160             
06846  3160  A5 2D                 LDA GRAPHICS.DRAWFILL.Y
06847  3162  85 80                 STA MATH.CMP16.NUM1$
06848  3164  A5 2E                 LDA GRAPHICS.DRAWFILL.Y+1
06849  3166  85 81                 STA MATH.CMP16.NUM1$+1
06850  3168  A5 2B                 LDA GRAPHICS.DRAWFILL.Y2$
06851  316A  85 82                 STA MATH.CMP16.NUM2$
06852  316C  A5 2C                 LDA GRAPHICS.DRAWFILL.Y2$+1
06853  316E  85 83                 STA MATH.CMP16.NUM2$+1
06854  3170  20 E4 28              JSR MATH.CMP16$
06855  3173  D0 01                 BNE @INCY ; IF Y <> Y2 THEN @INCY
06856  3175  60                    RTS
06857  3176             @INCY
06858  3176                        ; INCREMENT Y
06859  3176  A9 2D                 LDA #<GRAPHICS.DRAWFILL.Y
06860  3178  85 86                 STA MATH.INC16.ADDRESS$
06861  317A  A9 00                 LDA #>GRAPHICS.DRAWFILL.Y
06862  317C  85 87                 STA MATH.INC16.ADDRESS$+1
06863  317E  20 3C 28              JSR MATH.INC16$ ; Y = Y + 1
06864  3181                        
06865  3181  4C 3D 31              JMP @DRAWLINE
06866  3184                        ;RTS
06867  3184             
06868  3184             ;ALIGN $100
06869  3184             
06870  3184             GRAPHICS.DRAWLINE.X = $E0 ; 2 BYTES
06871  3184             GRAPHICS.DRAWLINE.Y = $E2 ; 2 BYTES
06872  3184             GRAPHICS.DRAWLINE.COLOR$ = $24 ; 1 BYTE
06873  3184             GRAPHICS.DRAWLINE.X1$ = $D0 ; 2 BYTES
06874  3184             GRAPHICS.DRAWLINE.Y1$ = $D2 ; 2 BYTES
06875  3184             GRAPHICS.DRAWLINE.X2$ = $D4 ; 2 BYTES
06876  3184             GRAPHICS.DRAWLINE.Y2$ = $D6 ; 2 BYTES
06877  3184             GRAPHICS.DRAWLINE.DX = $D8 ; 2 BYTES
06878  3184             GRAPHICS.DRAWLINE.DY = $DA ; 2 BYTES
06879  3184             GRAPHICS.DRAWLINE.STEEP = $DC ; 1 BYTES
06880  3184             GRAPHICS.DRAWLINE.X1_X2 = $E4 ; 2 BYTES
06881  3184             GRAPHICS.DRAWLINE.Y1_Y2 = $E6 ; 2 BYTES
06882  3184             GRAPHICS.DRAWLINE.DERROR2 = $E8 ; 2 BYTES
06883  3184             GRAPHICS.DRAWLINE.ERROR2 = $EA ; 2 BYTES
06884  3184             GRAPHICS.DRAWLINE.Y_OFFSET = $EC ; 2 BYTES
06885  3184             GRAPHICS.DRAWLINE.DX_2 = $EE ; 2 BYTES
06886  3184             GRAPHICS.DRAWLINE$ 
06887  3184             ; D:\TEST\LINE1\LINE1.VBP
06888  3184             
06889  3184             ;    STEEP = FALSE
06890  3184  A9 00                 LDA #$00
06891  3186  85 DC                 STA GRAPHICS.DRAWLINE.STEEP
06892  3188             
06893  3188             ;    IF (ABS(X1 - X2) < ABS(Y1 - Y2)) THEN
06894  3188  A5 D0                 LDA GRAPHICS.DRAWLINE.X1$
06895  318A  85 80                 STA MATH.SUBTRACT16.MENUEND$
06896  318C  A5 D1                 LDA GRAPHICS.DRAWLINE.X1$+1
06897  318E  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06898  3190  A5 D4                 LDA GRAPHICS.DRAWLINE.X2$
06899  3192  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06900  3194  A5 D5                 LDA GRAPHICS.DRAWLINE.X2$+1
06901  3196  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06902  3198  20 96 28              JSR MATH.SUBTRACT16$ ; DIFFERENCE = X1 - X2
06903  319B             
06904  319B  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06905  319D  85 80                 STA MATH.ABS16.INTEGER$
06906  319F  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06907  31A1  85 81                 STA MATH.ABS16.INTEGER$+1
06908  31A3  20 73 2A              JSR MATH.ABS16$ ; X1_X2 = ABS(DIFFERENCE)
06909  31A6                        
06910  31A6  A5 84                 LDA MATH.ABS16.VALUE$
06911  31A8  85 E4                 STA GRAPHICS.DRAWLINE.X1_X2
06912  31AA  A5 85                 LDA MATH.ABS16.VALUE$+1
06913  31AC  85 E5                 STA GRAPHICS.DRAWLINE.X1_X2+1
06914  31AE             
06915  31AE  A5 D2                 LDA GRAPHICS.DRAWLINE.Y1$
06916  31B0  85 80                 STA MATH.SUBTRACT16.MENUEND$
06917  31B2  A5 D3                 LDA GRAPHICS.DRAWLINE.Y1$+1
06918  31B4  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06919  31B6  A5 D6                 LDA GRAPHICS.DRAWLINE.Y2$
06920  31B8  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06921  31BA  A5 D7                 LDA GRAPHICS.DRAWLINE.Y2$+1
06922  31BC  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06923  31BE  20 96 28              JSR MATH.SUBTRACT16$ ; DIFFERENCE = Y1 - Y2
06924  31C1             
06925  31C1  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06926  31C3  85 80                 STA MATH.ABS16.INTEGER$
06927  31C5  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06928  31C7  85 81                 STA MATH.ABS16.INTEGER$+1
06929  31C9  20 73 2A              JSR MATH.ABS16$ ; Y1_Y2 = ABS(DIFFERENCE)
06930  31CC                        
06931  31CC  A5 84                 LDA MATH.ABS16.VALUE$
06932  31CE  85 E6                 STA GRAPHICS.DRAWLINE.Y1_Y2
06933  31D0  A5 85                 LDA MATH.ABS16.VALUE$+1
06934  31D2  85 E7                 STA GRAPHICS.DRAWLINE.Y1_Y2+1
06935  31D4             
06936  31D4  A5 E4                 LDA GRAPHICS.DRAWLINE.X1_X2
06937  31D6  85 80                 STA MATH.CMP16.NUM1$
06938  31D8  A5 E5                 LDA GRAPHICS.DRAWLINE.X1_X2+1
06939  31DA  85 81                 STA MATH.CMP16.NUM1$+1
06940  31DC  A5 E6                 LDA GRAPHICS.DRAWLINE.Y1_Y2
06941  31DE  85 82                 STA MATH.CMP16.NUM2$
06942  31E0  A5 E7                 LDA GRAPHICS.DRAWLINE.Y1_Y2+1
06943  31E2  85 83                 STA MATH.CMP16.NUM2$+1
06944  31E4  20 E4 28              JSR MATH.CMP16$
06945  31E7  90 03                 BCC @SWAPX1Y1_X2Y2 ; IF X1_X2 < Y1_Y2 THEN @SWAPX1Y1_X2Y2
06946  31E9  4C 1E 32              JMP @SKIPSWAPX1Y1_X2Y2
06947  31EC             @SWAPX1Y1_X2Y2 
06948  31EC             
06949  31EC             ;        CALL SWAP(X1, Y1)
06950  31EC  A9 D0                 LDA #<GRAPHICS.DRAWLINE.X1$
06951  31EE  85 73                 STA MEMORY.SWAP.ADDRESS1$
06952  31F0  A9 00                 LDA #>GRAPHICS.DRAWLINE.X1$
06953  31F2  85 74                 STA MEMORY.SWAP.ADDRESS1$+1
06954  31F4  A9 D2                 LDA #<GRAPHICS.DRAWLINE.Y1$
06955  31F6  85 75                 STA MEMORY.SWAP.ADDRESS2$
06956  31F8  A9 00                 LDA #>GRAPHICS.DRAWLINE.Y1$
06957  31FA  85 76                 STA MEMORY.SWAP.ADDRESS2$+1
06958  31FC  A9 02                 LDA #$02
06959  31FE  85 77                 STA MEMORY.SWAP.LENGTH$
06960  3200  20 C0 0F              JSR MEMORY.SWAP$
06961  3203             
06962  3203             ;        CALL SWAP(X2, Y2)
06963  3203  A9 D4                 LDA #<GRAPHICS.DRAWLINE.X2$
06964  3205  85 73                 STA MEMORY.SWAP.ADDRESS1$
06965  3207  A9 00                 LDA #>GRAPHICS.DRAWLINE.X2$
06966  3209  85 74                 STA MEMORY.SWAP.ADDRESS1$+1
06967  320B  A9 D6                 LDA #<GRAPHICS.DRAWLINE.Y2$
06968  320D  85 75                 STA MEMORY.SWAP.ADDRESS2$
06969  320F  A9 00                 LDA #>GRAPHICS.DRAWLINE.Y2$
06970  3211  85 76                 STA MEMORY.SWAP.ADDRESS2$+1
06971  3213  A9 02                 LDA #$02
06972  3215  85 77                 STA MEMORY.SWAP.LENGTH$
06973  3217  20 C0 0F              JSR MEMORY.SWAP$
06974  321A             
06975  321A             ;        STEEP = TRUE
06976  321A  A9 01                 LDA #$01
06977  321C  85 DC                 STA GRAPHICS.DRAWLINE.STEEP
06978  321E             
06979  321E             ;    END IF
06980  321E             @SKIPSWAPX1Y1_X2Y2 
06981  321E             
06982  321E             ;    IF (X1 > X2) THEN
06983  321E  A5 D4                 LDA GRAPHICS.DRAWLINE.X2$
06984  3220  85 80                 STA MATH.CMP16.NUM1$
06985  3222  A5 D5                 LDA GRAPHICS.DRAWLINE.X2$+1
06986  3224  85 81                 STA MATH.CMP16.NUM1$+1
06987  3226  A5 D0                 LDA GRAPHICS.DRAWLINE.X1$
06988  3228  85 82                 STA MATH.CMP16.NUM2$
06989  322A  A5 D1                 LDA GRAPHICS.DRAWLINE.X1$+1
06990  322C  85 83                 STA MATH.CMP16.NUM2$+1
06991  322E  20 E4 28              JSR MATH.CMP16$ ; IF X2 < X1 THEN @SKIPSWAPX1X2_Y1Y2
06992  3231  90 03                 BCC @SWAPX1X2_Y1Y2
06993  3233  4C 64 32              JMP @SKIPSWAPX1X2_Y1Y2
06994  3236             
06995  3236             @SWAPX1X2_Y1Y2 
06996  3236             ;        CALL SWAP(X1, X2)
06997  3236  A9 D0                 LDA #<GRAPHICS.DRAWLINE.X1$
06998  3238  85 73                 STA MEMORY.SWAP.ADDRESS1$
06999  323A  A9 00                 LDA #>GRAPHICS.DRAWLINE.X1$
07000  323C  85 74                 STA MEMORY.SWAP.ADDRESS1$+1
07001  323E  A9 D4                 LDA #<GRAPHICS.DRAWLINE.X2$
07002  3240  85 75                 STA MEMORY.SWAP.ADDRESS2$
07003  3242  A9 00                 LDA #>GRAPHICS.DRAWLINE.X2$
07004  3244  85 76                 STA MEMORY.SWAP.ADDRESS2$+1
07005  3246  A9 02                 LDA #$02
07006  3248  85 77                 STA MEMORY.SWAP.LENGTH$
07007  324A  20 C0 0F              JSR MEMORY.SWAP$
07008  324D             
07009  324D             ;        CALL SWAP(Y1, Y2)
07010  324D  A9 D2                 LDA #<GRAPHICS.DRAWLINE.Y1$
07011  324F  85 73                 STA MEMORY.SWAP.ADDRESS1$
07012  3251  A9 00                 LDA #>GRAPHICS.DRAWLINE.Y1$
07013  3253  85 74                 STA MEMORY.SWAP.ADDRESS1$+1
07014  3255  A9 D6                 LDA #<GRAPHICS.DRAWLINE.Y2$
07015  3257  85 75                 STA MEMORY.SWAP.ADDRESS2$
07016  3259  A9 00                 LDA #>GRAPHICS.DRAWLINE.Y2$
07017  325B  85 76                 STA MEMORY.SWAP.ADDRESS2$+1
07018  325D  A9 02                 LDA #$02
07019  325F  85 77                 STA MEMORY.SWAP.LENGTH$
07020  3261  20 C0 0F              JSR MEMORY.SWAP$
07021  3264             
07022  3264             ;    END IF
07023  3264             @SKIPSWAPX1X2_Y1Y2 
07024  3264             
07025  3264             ;    DX = X2 - X1
07026  3264  A5 D4                 LDA GRAPHICS.DRAWLINE.X2$
07027  3266  85 80                 STA MATH.SUBTRACT16.MENUEND$
07028  3268  A5 D5                 LDA GRAPHICS.DRAWLINE.X2$+1
07029  326A  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07030  326C  A5 D0                 LDA GRAPHICS.DRAWLINE.X1$
07031  326E  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07032  3270  A5 D1                 LDA GRAPHICS.DRAWLINE.X1$+1
07033  3272  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07034  3274  20 96 28              JSR MATH.SUBTRACT16$ ; DX = X2 - X1
07035  3277  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07036  3279  85 D8                 STA GRAPHICS.DRAWLINE.DX
07037  327B  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07038  327D  85 D9                 STA GRAPHICS.DRAWLINE.DX+1
07039  327F             
07040  327F             ;    DY = Y2 - Y1
07041  327F  A5 D6                 LDA GRAPHICS.DRAWLINE.Y2$
07042  3281  85 80                 STA MATH.SUBTRACT16.MENUEND$
07043  3283  A5 D7                 LDA GRAPHICS.DRAWLINE.Y2$+1
07044  3285  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07045  3287  A5 D2                 LDA GRAPHICS.DRAWLINE.Y1$
07046  3289  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07047  328B  A5 D3                 LDA GRAPHICS.DRAWLINE.Y1$+1
07048  328D  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07049  328F  20 96 28              JSR MATH.SUBTRACT16$ ; DY = Y2 - Y1
07050  3292  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07051  3294  85 DA                 STA GRAPHICS.DRAWLINE.DY
07052  3296  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07053  3298  85 DB                 STA GRAPHICS.DRAWLINE.DY+1
07054  329A             
07055  329A             ;    DERROR2 = ABS(DY) * 2
07056  329A  A5 DA                 LDA GRAPHICS.DRAWLINE.DY
07057  329C  85 80                 STA MATH.ABS16.INTEGER$
07058  329E  A5 DB                 LDA GRAPHICS.DRAWLINE.DY+1
07059  32A0  85 81                 STA MATH.ABS16.INTEGER$+1
07060  32A2  20 73 2A              JSR MATH.ABS16$ ; VALUE = ABS(DY)
07061  32A5             
07062  32A5  A5 84                 LDA MATH.ABS16.VALUE$
07063  32A7  85 80                 STA MATH.MULTIPLY16.FACTOR1$
07064  32A9  A5 85                 LDA MATH.ABS16.VALUE$+1
07065  32AB  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
07066  32AD  A9 02                 LDA #$02
07067  32AF  85 82                 STA MATH.MULTIPLY16.FACTOR2$
07068  32B1  A9 00                 LDA #$00
07069  32B3  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
07070  32B5  20 67 29              JSR MATH.MULTIPLY16$ ; DERROR2 = VALUE * 2
07071  32B8                        
07072  32B8  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
07073  32BA  85 E8                 STA GRAPHICS.DRAWLINE.DERROR2
07074  32BC  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
07075  32BE  85 E9                 STA GRAPHICS.DRAWLINE.DERROR2+1
07076  32C0             
07077  32C0             ;    ERROR2 = 0
07078  32C0  A9 00                 LDA #$00
07079  32C2  85 EA                 STA GRAPHICS.DRAWLINE.ERROR2
07080  32C4  85 EB                 STA GRAPHICS.DRAWLINE.ERROR2+1
07081  32C6             
07082  32C6             ;    Y = Y1
07083  32C6  A5 D2                 LDA GRAPHICS.DRAWLINE.Y1$
07084  32C8  85 E2                 STA GRAPHICS.DRAWLINE.Y
07085  32CA  A5 D3                 LDA GRAPHICS.DRAWLINE.Y1$+1
07086  32CC  85 E3                 STA GRAPHICS.DRAWLINE.Y+1
07087  32CE             
07088  32CE                        ; Y_OFFSET = IIF(Y2 > Y1, 1, -1)
07089  32CE  A5 D2                 LDA GRAPHICS.DRAWLINE.Y1$
07090  32D0  85 80                 STA MATH.CMP16.NUM1$
07091  32D2  A5 D3                 LDA GRAPHICS.DRAWLINE.Y1$+1
07092  32D4  85 81                 STA MATH.CMP16.NUM1$+1
07093  32D6  A5 D6                 LDA GRAPHICS.DRAWLINE.Y2$
07094  32D8  85 82                 STA MATH.CMP16.NUM2$
07095  32DA  A5 D7                 LDA GRAPHICS.DRAWLINE.Y2$+1
07096  32DC  85 83                 STA MATH.CMP16.NUM2$+1
07097  32DE  20 E4 28              JSR MATH.CMP16$ ; IF Y1 < Y2 THEN @SETY_OFFSET1
07098  32E1  90 0B                 BCC @SETY_OFFSET1
07099  32E3  A9 FF                 LDA #$FF ; -1
07100  32E5  85 EC                 STA GRAPHICS.DRAWLINE.Y_OFFSET
07101  32E7  A9 FF                 LDA #$FF ; -1
07102  32E9  85 ED                 STA GRAPHICS.DRAWLINE.Y_OFFSET+1
07103  32EB  4C F6 32              JMP @SKIPSETY_OFFSET
07104  32EE             @SETY_OFFSET1 
07105  32EE  A9 01                 LDA #$01
07106  32F0  85 EC                 STA GRAPHICS.DRAWLINE.Y_OFFSET
07107  32F2  A9 00                 LDA #$00
07108  32F4  85 ED                 STA GRAPHICS.DRAWLINE.Y_OFFSET+1
07109  32F6             @SKIPSETY_OFFSET 
07110  32F6                        
07111  32F6                        ; DX_2 = (DX * 2)
07112  32F6  A5 D8                 LDA GRAPHICS.DRAWLINE.DX
07113  32F8  85 80                 STA MATH.MULTIPLY16.FACTOR1$
07114  32FA  A5 D9                 LDA GRAPHICS.DRAWLINE.DX+1
07115  32FC  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
07116  32FE  A9 02                 LDA #$02
07117  3300  85 82                 STA MATH.MULTIPLY16.FACTOR2$
07118  3302  A9 00                 LDA #$00
07119  3304  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
07120  3306  20 67 29              JSR MATH.MULTIPLY16$
07121  3309  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
07122  330B  85 EE                 STA GRAPHICS.DRAWLINE.DX_2
07123  330D  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
07124  330F  85 EF                 STA GRAPHICS.DRAWLINE.DX_2+1
07125  3311             
07126  3311             ;    FOR X = X1 TO X2
07127  3311  A5 D0                 LDA GRAPHICS.DRAWLINE.X1$
07128  3313  85 E0                 STA GRAPHICS.DRAWLINE.X
07129  3315  A5 D1                 LDA GRAPHICS.DRAWLINE.X1$+1
07130  3317  85 E1                 STA GRAPHICS.DRAWLINE.X+1
07131  3319                        
07132  3319             @LOOP
07133  3319  A5 D4                 LDA GRAPHICS.DRAWLINE.X2$
07134  331B  85 80                 STA MATH.CMP16.NUM1$
07135  331D  A5 D5                 LDA GRAPHICS.DRAWLINE.X2$+1
07136  331F  85 81                 STA MATH.CMP16.NUM1$+1
07137  3321  A5 E0                 LDA GRAPHICS.DRAWLINE.X
07138  3323  85 82                 STA MATH.CMP16.NUM2$
07139  3325  A5 E1                 LDA GRAPHICS.DRAWLINE.X+1
07140  3327  85 83                 STA MATH.CMP16.NUM2$+1
07141  3329  20 E4 28              JSR MATH.CMP16$ ; IF X2 >= X THEN @PROCESSLOOP
07142  332C  B0 03                 BCS @PROCESSLOOP
07143  332E  4C F5 33              JMP @SKIPPROCESSLOOP
07144  3331             @PROCESSLOOP 
07145  3331             
07146  3331             ;        IF (STEEP = TRUE) THEN
07147  3331  A5 DC                 LDA GRAPHICS.DRAWLINE.STEEP
07148  3333  C9 01                 CMP #$01
07149  3335  F0 03                 BEQ @DRAWPIXELYX ; IF STEEP = $01 THEN @DRAWPIXELYX
07150  3337  4C 54 33              JMP @DRAWPIXELXY
07151  333A             @DRAWPIXELYX 
07152  333A             ;            PICTUREBOX.PSET (Y, X), COLOR
07153  333A  A5 E2                 LDA GRAPHICS.DRAWLINE.Y
07154  333C  85 20                 STA GRAPHICS.SETPIXEL.X$
07155  333E  A5 E3                 LDA GRAPHICS.DRAWLINE.Y+1
07156  3340  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07157  3342  A5 E0                 LDA GRAPHICS.DRAWLINE.X
07158  3344  85 22                 STA GRAPHICS.SETPIXEL.Y$
07159  3346  A5 E1                 LDA GRAPHICS.DRAWLINE.X+1
07160  3348  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07161  334A  A5 24                 LDA GRAPHICS.DRAWLINE.COLOR$
07162  334C  85 24                 STA GRAPHICS.SETPIXEL.COLOR$
07163  334E  20 07 31              JSR GRAPHICS.SETPIXEL$
07164  3351             
07165  3351  4C 6B 33              JMP @SKIPDRAWPIXEL
07166  3354             ;        ELSE
07167  3354             @DRAWPIXELXY 
07168  3354             ;            PICTUREBOX.PSET (X, Y), COLOR
07169  3354  A5 E0                 LDA GRAPHICS.DRAWLINE.X
07170  3356  85 20                 STA GRAPHICS.SETPIXEL.X$
07171  3358  A5 E1                 LDA GRAPHICS.DRAWLINE.X+1
07172  335A  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07173  335C  A5 E2                 LDA GRAPHICS.DRAWLINE.Y
07174  335E  85 22                 STA GRAPHICS.SETPIXEL.Y$
07175  3360  A5 E3                 LDA GRAPHICS.DRAWLINE.Y+1
07176  3362  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07177  3364  A5 24                 LDA GRAPHICS.DRAWLINE.COLOR$
07178  3366  85 24                 STA GRAPHICS.SETPIXEL.COLOR$
07179  3368  20 07 31              JSR GRAPHICS.SETPIXEL$
07180  336B             
07181  336B             ;        END IF
07182  336B             @SKIPDRAWPIXEL 
07183  336B             
07184  336B             ;        ERROR2 = ERROR2 + DERROR2
07185  336B  A5 EA                 LDA GRAPHICS.DRAWLINE.ERROR2
07186  336D  85 80                 STA MATH.ADD16.ADDEND1$
07187  336F  A5 EB                 LDA GRAPHICS.DRAWLINE.ERROR2+1
07188  3371  85 81                 STA MATH.ADD16.ADDEND1$+1
07189  3373  A5 E8                 LDA GRAPHICS.DRAWLINE.DERROR2
07190  3375  85 82                 STA MATH.ADD16.ADDEND2$
07191  3377  A5 E9                 LDA GRAPHICS.DRAWLINE.DERROR2+1
07192  3379  85 83                 STA MATH.ADD16.ADDEND2$+1
07193  337B  20 00 28              JSR MATH.ADD16$
07194  337E  A5 84                 LDA MATH.ADD16.SUM$
07195  3380  85 EA                 STA GRAPHICS.DRAWLINE.ERROR2
07196  3382  A5 85                 LDA MATH.ADD16.SUM$+1
07197  3384  85 EB                 STA GRAPHICS.DRAWLINE.ERROR2+1
07198  3386                        
07199  3386             ;;        IF (ERROR2 > DX) THEN
07200  3386             ;        LDA GRAPHICS.DRAWLINE.DX
07201  3386             ;        STA MATH.CMP16.NUM1$
07202  3386             ;        LDA GRAPHICS.DRAWLINE.DX+1
07203  3386             ;        STA MATH.CMP16.NUM1$+1
07204  3386             ;        LDA GRAPHICS.DRAWLINE.ERROR2
07205  3386             ;        STA MATH.CMP16.NUM2$
07206  3386             ;        LDA GRAPHICS.DRAWLINE.ERROR2+1
07207  3386             ;        STA MATH.CMP16.NUM2$+1
07208  3386             ;        JSR MATH.CMP16$ ; IF DX < ERROR2 THEN @PROCESSYERROR2
07209  3386             ;        BCC @PROCESSYERROR2
07210  3386             
07211  3386             ;        IF (ERROR2 > DX) THEN [SIGNED INTEGER CHECK!]
07212  3386             
07213  3386  A5 EA                 LDA GRAPHICS.DRAWLINE.ERROR2
07214  3388  85 80                 STA MATH.SUBTRACT16.MENUEND$
07215  338A  A5 EB                 LDA GRAPHICS.DRAWLINE.ERROR2+1
07216  338C  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07217  338E  A5 D8                 LDA GRAPHICS.DRAWLINE.DX
07218  3390  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07219  3392  A5 D9                 LDA GRAPHICS.DRAWLINE.DX+1
07220  3394  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07221  3396  20 96 28              JSR MATH.SUBTRACT16$
07222  3399  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07223  339B  C9 80                 CMP #$80
07224  339D  90 03                 BCC @PROCESSYERROR2_1
07225  339F  4C E7 33              JMP @SKIPPROCESSYERROR2
07226  33A2             @PROCESSYERROR2_1 
07227  33A2  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07228  33A4  C9 00                 CMP #$00
07229  33A6  D0 09                 BNE @PROCESSYERROR2
07230  33A8  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07231  33AA  C9 00                 CMP #$00
07232  33AC  D0 03                 BNE @PROCESSYERROR2
07233  33AE                        ;BEQ @SKIPPROCESSYERROR2_1
07234  33AE                        ;BPL @PROCESSYERROR2
07235  33AE                        ;BMI @PROCESSYERROR2
07236  33AE             ;@SKIPPROCESSYERROR2_1
07237  33AE  4C E7 33              JMP @SKIPPROCESSYERROR2
07238  33B1             @PROCESSYERROR2 
07239  33B1             
07240  33B1             ;        Y = Y + IIF(Y2 > Y1, 1, -1)
07241  33B1  A5 E2                 LDA GRAPHICS.DRAWLINE.Y
07242  33B3  85 80                 STA MATH.ADD16.ADDEND1$
07243  33B5  A5 E3                 LDA GRAPHICS.DRAWLINE.Y+1
07244  33B7  85 81                 STA MATH.ADD16.ADDEND1$+1
07245  33B9  A5 EC                 LDA GRAPHICS.DRAWLINE.Y_OFFSET
07246  33BB  85 82                 STA MATH.ADD16.ADDEND2$
07247  33BD  A5 ED                 LDA GRAPHICS.DRAWLINE.Y_OFFSET+1
07248  33BF  85 83                 STA MATH.ADD16.ADDEND2$+1
07249  33C1  20 00 28              JSR MATH.ADD16$ ; Y = Y + Y_OFFSET
07250  33C4  A5 84                 LDA MATH.ADD16.SUM$
07251  33C6  85 E2                 STA GRAPHICS.DRAWLINE.Y
07252  33C8  A5 85                 LDA MATH.ADD16.SUM$+1
07253  33CA  85 E3                 STA GRAPHICS.DRAWLINE.Y+1
07254  33CC             
07255  33CC             ;        LDA GRAPHICS.DRAWLINE.Y_OFFSET
07256  33CC             ;        CMP #$01
07257  33CC             ;        BEQ @INCY
07258  33CC             ;        JMP @DECY
07259  33CC             ;@INCY
07260  33CC             ;        LDA #<GRAPHICS.DRAWLINE.Y
07261  33CC             ;        STA MATH.INC16.ADDRESS$
07262  33CC             ;        LDA #>GRAPHICS.DRAWLINE.Y
07263  33CC             ;        STA MATH.INC16.ADDRESS$+1
07264  33CC             ;        JSR MATH.INC16$
07265  33CC             ;        JMP @SKPINCDECY
07266  33CC             ;@DECY
07267  33CC             ;        LDA #<GRAPHICS.DRAWLINE.Y
07268  33CC             ;        STA MATH.DEC16.ADDRESS$
07269  33CC             ;        LDA #>GRAPHICS.DRAWLINE.Y
07270  33CC             ;        STA MATH.DEC16.ADDRESS$+1
07271  33CC             ;        JSR MATH.DEC16$
07272  33CC             ;        JMP @SKPINCDECY
07273  33CC             ;@SKPINCDECY
07274  33CC             
07275  33CC             ;            ERROR2 = ERROR2 - (DX * 2)
07276  33CC  A5 EA                 LDA GRAPHICS.DRAWLINE.ERROR2
07277  33CE  85 80                 STA MATH.SUBTRACT16.MENUEND$
07278  33D0  A5 EB                 LDA GRAPHICS.DRAWLINE.ERROR2+1
07279  33D2  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07280  33D4  A5 EE                 LDA GRAPHICS.DRAWLINE.DX_2
07281  33D6  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07282  33D8  A5 EF                 LDA GRAPHICS.DRAWLINE.DX_2+1
07283  33DA  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07284  33DC  20 96 28              JSR MATH.SUBTRACT16$ ; ERROR2 = ERROR2 - DX_2
07285  33DF  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07286  33E1  85 EA                 STA GRAPHICS.DRAWLINE.ERROR2
07287  33E3  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07288  33E5  85 EB                 STA GRAPHICS.DRAWLINE.ERROR2+1
07289  33E7             
07290  33E7             ;        END IF
07291  33E7             @SKIPPROCESSYERROR2 
07292  33E7             
07293  33E7             ;    NEXT X
07294  33E7  A9 E0                 LDA #<GRAPHICS.DRAWLINE.X
07295  33E9  85 86                 STA MATH.INC16.ADDRESS$
07296  33EB  A9 00                 LDA #>GRAPHICS.DRAWLINE.X
07297  33ED  85 87                 STA MATH.INC16.ADDRESS$+1
07298  33EF  20 3C 28              JSR MATH.INC16$ ; X = X + 1
07299  33F2             
07300  33F2  4C 19 33              JMP @LOOP
07301  33F5             
07302  33F5             @SKIPPROCESSLOOP 
07303  33F5             
07304  33F5  60                    RTS
07305  33F6             
07306  33F6             GRAPHICS.DRAWBOX.COLOR$ = $24 ; 1 BYTE
07307  33F6             GRAPHICS.DRAWBOX.X1$ = $25 ; 2 BYTES
07308  33F6             GRAPHICS.DRAWBOX.Y1$ = $27 ; 2 BYTES
07309  33F6             GRAPHICS.DRAWBOX.X2$ = $29 ; 2 BYTES
07310  33F6             GRAPHICS.DRAWBOX.Y2$ = $2B ; 2 BYTES
07311  33F6             GRAPHICS.DRAWBOX$ 
07312  33F6                        ; DRAW 4 LINES
07313  33F6             
07314  33F6                        ; TOP
07315  33F6  A5 25                 LDA GRAPHICS.DRAWBOX.X1$
07316  33F8  85 D0                 STA GRAPHICS.DRAWLINE.X1$
07317  33FA  A5 26                 LDA GRAPHICS.DRAWBOX.X1$+1
07318  33FC  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
07319  33FE  A5 27                 LDA GRAPHICS.DRAWBOX.Y1$
07320  3400  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
07321  3402  A5 28                 LDA GRAPHICS.DRAWBOX.Y1$+1
07322  3404  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
07323  3406  A5 29                 LDA GRAPHICS.DRAWBOX.X2$
07324  3408  85 D4                 STA GRAPHICS.DRAWLINE.X2$
07325  340A  A5 2A                 LDA GRAPHICS.DRAWBOX.X2$+1
07326  340C  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
07327  340E  A5 27                 LDA GRAPHICS.DRAWBOX.Y1$
07328  3410  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
07329  3412  A5 28                 LDA GRAPHICS.DRAWBOX.Y1$+1
07330  3414  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
07331  3416  20 84 31              JSR GRAPHICS.DRAWLINE$
07332  3419             
07333  3419                        ; RIGHT
07334  3419  A5 29                 LDA GRAPHICS.DRAWBOX.X2$
07335  341B  85 D0                 STA GRAPHICS.DRAWLINE.X1$
07336  341D  A5 2A                 LDA GRAPHICS.DRAWBOX.X2$+1
07337  341F  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
07338  3421  A5 27                 LDA GRAPHICS.DRAWBOX.Y1$
07339  3423  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
07340  3425  A5 28                 LDA GRAPHICS.DRAWBOX.Y1$+1
07341  3427  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
07342  3429  A5 29                 LDA GRAPHICS.DRAWBOX.X2$
07343  342B  85 D4                 STA GRAPHICS.DRAWLINE.X2$
07344  342D  A5 2A                 LDA GRAPHICS.DRAWBOX.X2$+1
07345  342F  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
07346  3431  A5 2B                 LDA GRAPHICS.DRAWBOX.Y2$
07347  3433  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
07348  3435  A5 2C                 LDA GRAPHICS.DRAWBOX.Y2$+1
07349  3437  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
07350  3439  20 84 31              JSR GRAPHICS.DRAWLINE$
07351  343C             
07352  343C                        ; BOTTOM
07353  343C  A5 29                 LDA GRAPHICS.DRAWBOX.X2$
07354  343E  85 D0                 STA GRAPHICS.DRAWLINE.X1$
07355  3440  A5 2A                 LDA GRAPHICS.DRAWBOX.X2$+1
07356  3442  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
07357  3444  A5 2B                 LDA GRAPHICS.DRAWBOX.Y2$
07358  3446  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
07359  3448  A5 2C                 LDA GRAPHICS.DRAWBOX.Y2$+1
07360  344A  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
07361  344C  A5 25                 LDA GRAPHICS.DRAWBOX.X1$
07362  344E  85 D4                 STA GRAPHICS.DRAWLINE.X2$
07363  3450  A5 26                 LDA GRAPHICS.DRAWBOX.X1$+1
07364  3452  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
07365  3454  A5 2B                 LDA GRAPHICS.DRAWBOX.Y2$
07366  3456  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
07367  3458  A5 2C                 LDA GRAPHICS.DRAWBOX.Y2$+1
07368  345A  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
07369  345C  20 84 31              JSR GRAPHICS.DRAWLINE$
07370  345F             
07371  345F                        ; LEFT
07372  345F  A5 25                 LDA GRAPHICS.DRAWBOX.X1$
07373  3461  85 D0                 STA GRAPHICS.DRAWLINE.X1$
07374  3463  A5 26                 LDA GRAPHICS.DRAWBOX.X1$+1
07375  3465  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
07376  3467  A5 2B                 LDA GRAPHICS.DRAWBOX.Y2$
07377  3469  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
07378  346B  A5 2C                 LDA GRAPHICS.DRAWBOX.Y2$+1
07379  346D  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
07380  346F  A5 25                 LDA GRAPHICS.DRAWBOX.X1$
07381  3471  85 D4                 STA GRAPHICS.DRAWLINE.X2$
07382  3473  A5 26                 LDA GRAPHICS.DRAWBOX.X1$+1
07383  3475  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
07384  3477  A5 27                 LDA GRAPHICS.DRAWBOX.Y1$
07385  3479  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
07386  347B  A5 28                 LDA GRAPHICS.DRAWBOX.Y1$+1
07387  347D  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
07388  347F  20 84 31              JSR GRAPHICS.DRAWLINE$
07389  3482             
07390  3482  60                    RTS
07391  3483             
07392  3483             GRAPHICS.DRAWCIRCLE.COLOR$ = $24 ; 1 BYTE
07393  3483             GRAPHICS.DRAWCIRCLE.RADIUS$ = $25 ; 1 BYTE
07394  3483             GRAPHICS.DRAWCIRCLE.XCENTER$ = $26 ; 2 BYTES
07395  3483             GRAPHICS.DRAWCIRCLE.YCENTER$ = $28 ; 2 BYTES
07396  3483             GRAPHICS.DRAWCIRCLE.X = $2A ; 2 BYTES
07397  3483             GRAPHICS.DRAWCIRCLE.Y = $2C ; 2 BYTES
07398  3483             GRAPHICS.DRAWCIRCLE.D = $2E ; 2 BYTES
07399  3483             GRAPHICS.DRAWCIRCLE$ 
07400  3483             ; SEE: HTTPS://WWW.GEEKSFORGEEKS.ORG/BRESENHAMS-CIRCLE-DRAWING-ALGORITHM/
07401  3483             
07402  3483                        ; X = 0
07403  3483                        ; Y = R
07404  3483  A9 00                 LDA #$00
07405  3485  85 2A                 STA GRAPHICS.DRAWCIRCLE.X
07406  3487  85 2B                 STA GRAPHICS.DRAWCIRCLE.X+1
07407  3489  85 2D                 STA GRAPHICS.DRAWCIRCLE.Y+1
07408  348B  A5 25                 LDA GRAPHICS.DRAWCIRCLE.RADIUS$
07409  348D  85 2C                 STA GRAPHICS.DRAWCIRCLE.Y
07410  348F             
07411  348F             ;        ; D = 3 - (2 * R)
07412  348F             ;        LDA GRAPHICS.DRAWCIRCLE.RADIUS$
07413  348F             ;        STA MATH.MULTIPLY16.FACTOR1$
07414  348F             ;        LDA #$02
07415  348F             ;        STA MATH.MULTIPLY16.FACTOR2$
07416  348F             ;        LDA #$00
07417  348F             ;        STA MATH.MULTIPLY16.FACTOR1$+1
07418  348F             ;        STA MATH.MULTIPLY16.FACTOR2$+1
07419  348F             ;        JSR MATH.MULTIPLY16$ ; PRODUCT = 2 * RADIUS
07420  348F             ;        LDA MATH.MULTIPLY16.PRODUCT$
07421  348F             ;        STA MATH.SUBTRACT16.SUBTRAHEND$
07422  348F             ;        LDA MATH.MULTIPLY16.PRODUCT$+1
07423  348F             ;        STA MATH.SUBTRACT16.SUBTRAHEND$+1
07424  348F             ;        LDA #$03
07425  348F             ;        STA MATH.SUBTRACT16.MENUEND$
07426  348F             ;        LDA #$00
07427  348F             ;        STA MATH.SUBTRACT16.MENUEND$+1
07428  348F             ;        JSR MATH.SUBTRACT16$ ; D = 3 - PRODUCT
07429  348F             ;        LDA MATH.SUBTRACT16.DIFFERENCE$
07430  348F             ;        STA GRAPHICS.DRAWCIRCLE.D
07431  348F             ;        LDA MATH.SUBTRACT16.DIFFERENCE$+1
07432  348F             ;        STA GRAPHICS.DRAWCIRCLE.D+1
07433  348F             
07434  348F                        ; D = 0 - (2 * R)
07435  348F  A5 25                 LDA GRAPHICS.DRAWCIRCLE.RADIUS$
07436  3491  85 80                 STA MATH.MULTIPLY16.FACTOR1$
07437  3493  A9 02                 LDA #$02
07438  3495  85 82                 STA MATH.MULTIPLY16.FACTOR2$
07439  3497  A9 00                 LDA #$00
07440  3499  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
07441  349B  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
07442  349D  20 67 29              JSR MATH.MULTIPLY16$ ; PRODUCT = 2 * RADIUS
07443  34A0  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
07444  34A2  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07445  34A4  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
07446  34A6  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07447  34A8  A9 00                 LDA #$00
07448  34AA  85 80                 STA MATH.SUBTRACT16.MENUEND$
07449  34AC  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07450  34AE  20 96 28              JSR MATH.SUBTRACT16$ ; D = 0 - PRODUCT
07451  34B1  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07452  34B3  85 2E                 STA GRAPHICS.DRAWCIRCLE.D
07453  34B5  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07454  34B7  85 2F                 STA GRAPHICS.DRAWCIRCLE.D+1
07455  34B9             
07456  34B9                        ; CALL DRAWCIRCLE(XC, YC, X, Y, COLOR)
07457  34B9  20 9C 35              JSR GRAPHICS.PLOTCIRCLE
07458  34BC             
07459  34BC                        ; WHILE (Y >= X)
07460  34BC             @CHECK_Y_X 
07461  34BC  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07462  34BE  85 80                 STA MATH.CMP16.NUM1$
07463  34C0  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07464  34C2  85 81                 STA MATH.CMP16.NUM1$+1
07465  34C4  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07466  34C6  85 82                 STA MATH.CMP16.NUM2$
07467  34C8  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07468  34CA  85 83                 STA MATH.CMP16.NUM2$+1
07469  34CC  20 E4 28              JSR MATH.CMP16$
07470  34CF  B0 01                 BCS @CONTINUE ; IF Y >= X THEN @CONTINUE
07471  34D1  60                    RTS
07472  34D2             @CONTINUE
07473  34D2             
07474  34D2                        ; FOR EACH PIXEL WE WILL DRAW ALL EIGHT PIXELS
07475  34D2                        ; X = X + 1
07476  34D2  A9 2A                 LDA #<GRAPHICS.DRAWCIRCLE.X
07477  34D4  85 86                 STA MATH.INC16.ADDRESS$
07478  34D6  A9 00                 LDA #>GRAPHICS.DRAWCIRCLE.X
07479  34D8  85 87                 STA MATH.INC16.ADDRESS$+1
07480  34DA  20 3C 28              JSR MATH.INC16$
07481  34DD             
07482  34DD                        ; CHECK FOR DECISION PARAMETER AND CORRESPONDINGLY UPDATE D, X, Y
07483  34DD                        ; IF D > 0 THEN
07484  34DD  A5 2F                 LDA GRAPHICS.DRAWCIRCLE.D+1
07485  34DF  C9 80                 CMP #$80
07486  34E1  90 03                 BCC @D_NOT_NEG ; IF D(HI) < $80 THEN @D_NOT_NEG
07487  34E3  4C 55 35              JMP @D_NEG
07488  34E6             @D_NOT_NEG 
07489  34E6  C9 00                 CMP #$00
07490  34E8  D0 09                 BNE @D_POS ; IF D(HI) != $00 THEN @D_POS
07491  34EA  A5 2E                 LDA GRAPHICS.DRAWCIRCLE.D
07492  34EC  C9 00                 CMP #$00
07493  34EE  D0 03                 BNE @D_POS ; IF D(LO) != $00 THEN @D_POS
07494  34F0  4C 55 35              JMP @D_NEG
07495  34F3             @D_POS
07496  34F3             
07497  34F3                        ; Y = Y - 1
07498  34F3  A9 2C                 LDA #<GRAPHICS.DRAWCIRCLE.Y
07499  34F5  85 86                 STA MATH.DEC16.ADDRESS$
07500  34F7  A9 00                 LDA #>GRAPHICS.DRAWCIRCLE.Y
07501  34F9  85 87                 STA MATH.DEC16.ADDRESS$+1
07502  34FB  20 BE 28              JSR MATH.DEC16$
07503  34FE             
07504  34FE                        ; D = D + 10 + (4 * (X - Y))
07505  34FE  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07506  3500  85 80                 STA MATH.SUBTRACT16.MENUEND$
07507  3502  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07508  3504  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07509  3506  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07510  3508  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07511  350A  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07512  350C  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07513  350E  20 96 28              JSR MATH.SUBTRACT16$ ; DIFFERENCE = X - Y
07514  3511                        
07515  3511  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07516  3513  85 80                 STA MATH.MULTIPLY16.FACTOR1$
07517  3515  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07518  3517  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
07519  3519  A9 04                 LDA #$04
07520  351B  85 82                 STA MATH.MULTIPLY16.FACTOR2$
07521  351D  A9 00                 LDA #$00
07522  351F  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
07523  3521  20 67 29              JSR MATH.MULTIPLY16$ ; PRODUCT = 4 * DIFFERENCE
07524  3524             
07525  3524  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
07526  3526  85 80                 STA MATH.ADD16.ADDEND1$
07527  3528  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
07528  352A  85 81                 STA MATH.ADD16.ADDEND1$+1
07529  352C  A9 0A                 LDA #$0A
07530  352E  85 82                 STA MATH.ADD16.ADDEND2$
07531  3530  A9 00                 LDA #$00
07532  3532  85 83                 STA MATH.ADD16.ADDEND2$+1
07533  3534  20 00 28              JSR MATH.ADD16$ ; SUM = 10 + PRODUCT
07534  3537             
07535  3537  A5 84                 LDA MATH.ADD16.SUM$
07536  3539  85 80                 STA MATH.ADD16.ADDEND1$
07537  353B  A5 85                 LDA MATH.ADD16.SUM$+1
07538  353D  85 81                 STA MATH.ADD16.ADDEND1$+1
07539  353F  A5 2E                 LDA GRAPHICS.DRAWCIRCLE.D
07540  3541  85 82                 STA MATH.ADD16.ADDEND2$
07541  3543  A5 2F                 LDA GRAPHICS.DRAWCIRCLE.D+1
07542  3545  85 83                 STA MATH.ADD16.ADDEND2$+1
07543  3547  20 00 28              JSR MATH.ADD16$ ; D = D + SUM
07544  354A             
07545  354A  A5 84                 LDA MATH.ADD16.SUM$
07546  354C  85 2E                 STA GRAPHICS.DRAWCIRCLE.D
07547  354E  A5 85                 LDA MATH.ADD16.SUM$+1
07548  3550  85 2F                 STA GRAPHICS.DRAWCIRCLE.D+1
07549  3552             
07550  3552  4C 96 35              JMP @SKIP_CHECK_D
07551  3555             
07552  3555             @D_NEG
07553  3555                        ; D = D + 6 + (4 * X)
07554  3555  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07555  3557  85 80                 STA MATH.MULTIPLY16.FACTOR1$
07556  3559  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07557  355B  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
07558  355D  A9 04                 LDA #$04
07559  355F  85 82                 STA MATH.MULTIPLY16.FACTOR2$
07560  3561  A9 00                 LDA #$00
07561  3563  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
07562  3565  20 67 29              JSR MATH.MULTIPLY16$ ; PRODUCT = 4 * X
07563  3568             
07564  3568  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
07565  356A  85 80                 STA MATH.ADD16.ADDEND1$
07566  356C  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
07567  356E  85 81                 STA MATH.ADD16.ADDEND1$+1
07568  3570  A9 06                 LDA #$06
07569  3572  85 82                 STA MATH.ADD16.ADDEND2$
07570  3574  A9 00                 LDA #$00
07571  3576  85 83                 STA MATH.ADD16.ADDEND2$+1
07572  3578  20 00 28              JSR MATH.ADD16$ ; SUM = 6 + PRODUCT
07573  357B             
07574  357B  A5 84                 LDA MATH.ADD16.SUM$
07575  357D  85 80                 STA MATH.ADD16.ADDEND1$
07576  357F  A5 85                 LDA MATH.ADD16.SUM$+1
07577  3581  85 81                 STA MATH.ADD16.ADDEND1$+1
07578  3583  A5 2E                 LDA GRAPHICS.DRAWCIRCLE.D
07579  3585  85 82                 STA MATH.ADD16.ADDEND2$
07580  3587  A5 2F                 LDA GRAPHICS.DRAWCIRCLE.D+1
07581  3589  85 83                 STA MATH.ADD16.ADDEND2$+1
07582  358B  20 00 28              JSR MATH.ADD16$ ; D = D + SUM
07583  358E             
07584  358E  A5 84                 LDA MATH.ADD16.SUM$
07585  3590  85 2E                 STA GRAPHICS.DRAWCIRCLE.D
07586  3592  A5 85                 LDA MATH.ADD16.SUM$+1
07587  3594  85 2F                 STA GRAPHICS.DRAWCIRCLE.D+1
07588  3596             @SKIP_CHECK_D 
07589  3596             
07590  3596  20 9C 35              JSR GRAPHICS.PLOTCIRCLE
07591  3599             
07592  3599  4C BC 34              JMP @CHECK_Y_X
07593  359C             
07594  359C             GRAPHICS.PLOTCIRCLE 
07595  359C                        ; FUNCTION TO PUT PIXELS AT SUBSEQUENCE POINTS
07596  359C             
07597  359C                        ; PSET (XC + X, YC + Y), COLOR
07598  359C  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07599  359E  85 80                 STA MATH.ADD16.ADDEND1$
07600  35A0  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07601  35A2  85 81                 STA MATH.ADD16.ADDEND1$+1
07602  35A4  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07603  35A6  85 82                 STA MATH.ADD16.ADDEND2$
07604  35A8  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07605  35AA  85 83                 STA MATH.ADD16.ADDEND2$+1
07606  35AC  20 00 28              JSR MATH.ADD16$ ; (XC + X)
07607  35AF  A5 84                 LDA MATH.ADD16.SUM$
07608  35B1  85 20                 STA GRAPHICS.SETPIXEL.X$
07609  35B3  A5 85                 LDA MATH.ADD16.SUM$+1
07610  35B5  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07611  35B7             
07612  35B7  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07613  35B9  85 80                 STA MATH.ADD16.ADDEND1$
07614  35BB  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07615  35BD  85 81                 STA MATH.ADD16.ADDEND1$+1
07616  35BF  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07617  35C1  85 82                 STA MATH.ADD16.ADDEND2$
07618  35C3  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07619  35C5  85 83                 STA MATH.ADD16.ADDEND2$+1
07620  35C7  20 00 28              JSR MATH.ADD16$ ; (YC + Y)
07621  35CA  A5 84                 LDA MATH.ADD16.SUM$
07622  35CC  85 22                 STA GRAPHICS.SETPIXEL.Y$
07623  35CE  A5 85                 LDA MATH.ADD16.SUM$+1
07624  35D0  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07625  35D2             
07626  35D2  20 07 31              JSR GRAPHICS.SETPIXEL$
07627  35D5             
07628  35D5                        ; PSET (XC - X, YC + Y), COLOR
07629  35D5  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07630  35D7  85 80                 STA MATH.SUBTRACT16.MENUEND$
07631  35D9  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07632  35DB  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07633  35DD  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07634  35DF  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07635  35E1  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07636  35E3  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07637  35E5  20 96 28              JSR MATH.SUBTRACT16$ ; (XC - X)
07638  35E8  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07639  35EA  85 20                 STA GRAPHICS.SETPIXEL.X$
07640  35EC  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07641  35EE  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07642  35F0             
07643  35F0  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07644  35F2  85 80                 STA MATH.ADD16.ADDEND1$
07645  35F4  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07646  35F6  85 81                 STA MATH.ADD16.ADDEND1$+1
07647  35F8  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07648  35FA  85 82                 STA MATH.ADD16.ADDEND2$
07649  35FC  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07650  35FE  85 83                 STA MATH.ADD16.ADDEND2$+1
07651  3600  20 00 28              JSR MATH.ADD16$ ; (YC + Y)
07652  3603  A5 84                 LDA MATH.ADD16.SUM$
07653  3605  85 22                 STA GRAPHICS.SETPIXEL.Y$
07654  3607  A5 85                 LDA MATH.ADD16.SUM$+1
07655  3609  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07656  360B             
07657  360B  20 07 31              JSR GRAPHICS.SETPIXEL$
07658  360E             
07659  360E                        ; PSET (XC + X, YC - Y), COLOR
07660  360E  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07661  3610  85 80                 STA MATH.ADD16.ADDEND1$
07662  3612  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07663  3614  85 81                 STA MATH.ADD16.ADDEND1$+1
07664  3616  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07665  3618  85 82                 STA MATH.ADD16.ADDEND2$
07666  361A  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07667  361C  85 83                 STA MATH.ADD16.ADDEND2$+1
07668  361E  20 00 28              JSR MATH.ADD16$ ; (XC + X)
07669  3621  A5 84                 LDA MATH.ADD16.SUM$
07670  3623  85 20                 STA GRAPHICS.SETPIXEL.X$
07671  3625  A5 85                 LDA MATH.ADD16.SUM$+1
07672  3627  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07673  3629             
07674  3629  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07675  362B  85 80                 STA MATH.SUBTRACT16.MENUEND$
07676  362D  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07677  362F  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07678  3631  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07679  3633  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07680  3635  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07681  3637  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07682  3639  20 96 28              JSR MATH.SUBTRACT16$ ; (YC - Y)
07683  363C  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07684  363E  85 22                 STA GRAPHICS.SETPIXEL.Y$
07685  3640  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07686  3642  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07687  3644             
07688  3644  20 07 31              JSR GRAPHICS.SETPIXEL$
07689  3647             
07690  3647                        ; PSET (XC - X, YC - Y), COLOR
07691  3647  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07692  3649  85 80                 STA MATH.SUBTRACT16.MENUEND$
07693  364B  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07694  364D  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07695  364F  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07696  3651  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07697  3653  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07698  3655  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07699  3657  20 96 28              JSR MATH.SUBTRACT16$ ; (XC - X)
07700  365A  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07701  365C  85 20                 STA GRAPHICS.SETPIXEL.X$
07702  365E  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07703  3660  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07704  3662             
07705  3662  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07706  3664  85 80                 STA MATH.SUBTRACT16.MENUEND$
07707  3666  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07708  3668  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07709  366A  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07710  366C  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07711  366E  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07712  3670  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07713  3672  20 96 28              JSR MATH.SUBTRACT16$ ; (YC - Y)
07714  3675  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07715  3677  85 22                 STA GRAPHICS.SETPIXEL.Y$
07716  3679  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07717  367B  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07718  367D             
07719  367D  20 07 31              JSR GRAPHICS.SETPIXEL$
07720  3680             
07721  3680                        ; PSET (XC + Y, YC + X), COLOR
07722  3680  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07723  3682  85 80                 STA MATH.ADD16.ADDEND1$
07724  3684  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07725  3686  85 81                 STA MATH.ADD16.ADDEND1$+1
07726  3688  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07727  368A  85 82                 STA MATH.ADD16.ADDEND2$
07728  368C  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07729  368E  85 83                 STA MATH.ADD16.ADDEND2$+1
07730  3690  20 00 28              JSR MATH.ADD16$ ; (XC + Y)
07731  3693  A5 84                 LDA MATH.ADD16.SUM$
07732  3695  85 20                 STA GRAPHICS.SETPIXEL.X$
07733  3697  A5 85                 LDA MATH.ADD16.SUM$+1
07734  3699  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07735  369B             
07736  369B  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07737  369D  85 80                 STA MATH.ADD16.ADDEND1$
07738  369F  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07739  36A1  85 81                 STA MATH.ADD16.ADDEND1$+1
07740  36A3  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07741  36A5  85 82                 STA MATH.ADD16.ADDEND2$
07742  36A7  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07743  36A9  85 83                 STA MATH.ADD16.ADDEND2$+1
07744  36AB  20 00 28              JSR MATH.ADD16$ ; (YC + X)
07745  36AE  A5 84                 LDA MATH.ADD16.SUM$
07746  36B0  85 22                 STA GRAPHICS.SETPIXEL.Y$
07747  36B2  A5 85                 LDA MATH.ADD16.SUM$+1
07748  36B4  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07749  36B6             
07750  36B6  20 07 31              JSR GRAPHICS.SETPIXEL$
07751  36B9             
07752  36B9                        ; PSET (XC - Y, YC + X), COLOR
07753  36B9  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07754  36BB  85 80                 STA MATH.SUBTRACT16.MENUEND$
07755  36BD  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07756  36BF  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07757  36C1  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07758  36C3  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07759  36C5  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07760  36C7  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07761  36C9  20 96 28              JSR MATH.SUBTRACT16$ ; (XC - Y)
07762  36CC  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07763  36CE  85 20                 STA GRAPHICS.SETPIXEL.X$
07764  36D0  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07765  36D2  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07766  36D4             
07767  36D4  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07768  36D6  85 80                 STA MATH.ADD16.ADDEND1$
07769  36D8  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07770  36DA  85 81                 STA MATH.ADD16.ADDEND1$+1
07771  36DC  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07772  36DE  85 82                 STA MATH.ADD16.ADDEND2$
07773  36E0  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07774  36E2  85 83                 STA MATH.ADD16.ADDEND2$+1
07775  36E4  20 00 28              JSR MATH.ADD16$ ; (YC + X)
07776  36E7  A5 84                 LDA MATH.ADD16.SUM$
07777  36E9  85 22                 STA GRAPHICS.SETPIXEL.Y$
07778  36EB  A5 85                 LDA MATH.ADD16.SUM$+1
07779  36ED  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07780  36EF             
07781  36EF  20 07 31              JSR GRAPHICS.SETPIXEL$
07782  36F2             
07783  36F2                        ; PSET (XC + Y, YC - X), COLOR
07784  36F2  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07785  36F4  85 80                 STA MATH.ADD16.ADDEND1$
07786  36F6  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07787  36F8  85 81                 STA MATH.ADD16.ADDEND1$+1
07788  36FA  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07789  36FC  85 82                 STA MATH.ADD16.ADDEND2$
07790  36FE  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07791  3700  85 83                 STA MATH.ADD16.ADDEND2$+1
07792  3702  20 00 28              JSR MATH.ADD16$ ; (XC + Y)
07793  3705  A5 84                 LDA MATH.ADD16.SUM$
07794  3707  85 20                 STA GRAPHICS.SETPIXEL.X$
07795  3709  A5 85                 LDA MATH.ADD16.SUM$+1
07796  370B  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07797  370D             
07798  370D  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07799  370F  85 80                 STA MATH.SUBTRACT16.MENUEND$
07800  3711  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07801  3713  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07802  3715  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07803  3717  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07804  3719  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07805  371B  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07806  371D  20 96 28              JSR MATH.SUBTRACT16$ ; (YC - X)
07807  3720  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07808  3722  85 22                 STA GRAPHICS.SETPIXEL.Y$
07809  3724  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07810  3726  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07811  3728             
07812  3728  20 07 31              JSR GRAPHICS.SETPIXEL$
07813  372B             
07814  372B                        ; PSET (XC - Y, YC - X), COLOR
07815  372B  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07816  372D  85 80                 STA MATH.SUBTRACT16.MENUEND$
07817  372F  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07818  3731  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07819  3733  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07820  3735  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07821  3737  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07822  3739  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07823  373B  20 96 28              JSR MATH.SUBTRACT16$ ; (XC - Y)
07824  373E  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07825  3740  85 20                 STA GRAPHICS.SETPIXEL.X$
07826  3742  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07827  3744  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07828  3746             
07829  3746  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07830  3748  85 80                 STA MATH.SUBTRACT16.MENUEND$
07831  374A  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07832  374C  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07833  374E  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07834  3750  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07835  3752  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07836  3754  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07837  3756  20 96 28              JSR MATH.SUBTRACT16$ ; (YC - X)
07838  3759  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07839  375B  85 22                 STA GRAPHICS.SETPIXEL.Y$
07840  375D  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07841  375F  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07842  3761             
07843  3761  20 07 31              JSR GRAPHICS.SETPIXEL$
07844  3764             
07845  3764             
07846  3764  60                    RTS
07847  3765             
07848  3765             ; NOTE: SPRITES TAKE ATMOST 512 BYTES OF MEMORY.
07849  3765             
07850  3765             GRAPHICS.SPRITE1$ = #1
07851  3765             GRAPHICS.SPRITE2$ = #2
07852  3765             GRAPHICS.SPRITE3$ = #3
07853  3765             GRAPHICS.SPRITE4$ = #4
07854  3765             GRAPHICS.SPRITE5$ = #5
07855  3765             GRAPHICS.SPRITE6$ = #6
07856  3765             GRAPHICS.SPRITE7$ = #7
07857  3765             GRAPHICS.SPRITE8$ = #8
07858  3765             
07859  3765             GRAPHICS.SPRITE1ADDRESS$ = $4200
07860  3765             GRAPHICS.SPRITE2ADDRESS$ = $4240
07861  3765             GRAPHICS.SPRITE3ADDRESS$ = $4280
07862  3765             GRAPHICS.SPRITE4ADDRESS$ = $42C0
07863  3765             GRAPHICS.SPRITE5ADDRESS$ = $4300
07864  3765             GRAPHICS.SPRITE6ADDRESS$ = $4340
07865  3765             GRAPHICS.SPRITE7ADDRESS$ = $4380
07866  3765             GRAPHICS.SPRITE8ADDRESS$ = $43C0
07867  3765             
07868  3765             GRAPHICS.SPRITEMULTICOLOR1ADDRESS$ = $D025
07869  3765             GRAPHICS.SPRITEMULTICOLOR2ADDRESS$ = $D026
07870  3765             
07871  3765             GRAPHICS.GETSPRITEORMASK.NUMBER = $73
07872  3765             GRAPHICS.GETSPRITEORMASK 
07873  3765                        ; NUMBER = 2^(NUMBER - 1)
07874  3765  A5 73                 LDA GRAPHICS.GETSPRITEORMASK.NUMBER
07875  3767  38                    SEC
07876  3768  E9 01                 SBC #$01
07877  376A  85 8B                 STA MATH.EXPONENT8.POWER$
07878  376C  A9 02                 LDA #$02
07879  376E  85 8A                 STA MATH.EXPONENT8.BASE$
07880  3770  20 90 2A              JSR MATH.EXPONENT8$
07881  3773  A5 8C                 LDA MATH.EXPONENT8.VALUE$
07882  3775  85 73                 STA GRAPHICS.GETSPRITEORMASK.NUMBER
07883  3777  60                    RTS
07884  3778             
07885  3778             GRAPHICS.GETSPRITEANDMASK.NUMBER = $73
07886  3778             GRAPHICS.GETSPRITEANDMASK 
07887  3778                        ; NUMBER = 255 - NUMBER (2'S COMP.)
07888  3778  38                    SEC
07889  3779                        ;SBC #$FF
07890  3779  A9 FF                 LDA #$FF
07891  377B  E5 73                 SBC GRAPHICS.GETSPRITEANDMASK.NUMBER
07892  377D  85 73                 STA GRAPHICS.GETSPRITEANDMASK.NUMBER
07893  377F  60                    RTS
07894  3780             
07895  3780             GRAPHICS.SHOWSPRITE.NUMBER$ = $73 ; 1 BYTE
07896  3780             GRAPHICS.SHOWSPRITE$ 
07897  3780  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07898  3783             
07899  3783                        ; ENABLE THE SPECIFIC SPRITE
07900  3783  AD 15 D0              LDA $D015
07901  3786  05 73                 ORA GRAPHICS.SHOWSPRITE.NUMBER$
07902  3788  8D 15 D0              STA $D015
07903  378B             
07904  378B  60                    RTS
07905  378C             
07906  378C             GRAPHICS.HIDESPRITE.NUMBER$ = $73 ; 1 BYTE
07907  378C             GRAPHICS.HIDESPRITE$ 
07908  378C  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07909  378F  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07910  3792             
07911  3792                        ; ENABLE THE SPECIFIC SPRITE
07912  3792  AD 15 D0              LDA $D015
07913  3795  25 73                 AND GRAPHICS.HIDESPRITE.NUMBER$
07914  3797  8D 15 D0              STA $D015
07915  379A             
07916  379A  60                    RTS
07917  379B             
07918  379B             GRAPHICS.SETSPRITEMULTICOLOR.NUMBER$ = $73 ; 1 BYTE
07919  379B             GRAPHICS.SETSPRITEMULTICOLOR$ 
07920  379B  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07921  379E             
07922  379E                        ; ENABLE THE SPECIFIC SPRITE
07923  379E  AD 1C D0              LDA $D01C
07924  37A1  05 73                 ORA GRAPHICS.SETSPRITEMULTICOLOR.NUMBER$
07925  37A3  8D 1C D0              STA $D01C
07926  37A6             
07927  37A6  60                    RTS
07928  37A7             
07929  37A7             GRAPHICS.SETSPRITEHIRES.NUMBER$ = $73 ; 1 BYTE
07930  37A7             GRAPHICS.SETSPRITEHIRES$ 
07931  37A7  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07932  37AA  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07933  37AD             
07934  37AD                        ; ENABLE THE SPECIFIC SPRITE
07935  37AD  AD 1C D0              LDA $D01C
07936  37B0  25 73                 AND GRAPHICS.SETSPRITEHIRES.NUMBER$
07937  37B2  8D 1C D0              STA $D01C
07938  37B5             
07939  37B5  60                    RTS
07940  37B6             
07941  37B6             GRAPHICS.STRETCHSPRITEHORIZONTALLY.NUMBER$ = $73 ; 1 BYTE
07942  37B6             GRAPHICS.STRETCHSPRITEHORIZONTALLY$ 
07943  37B6  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07944  37B9             
07945  37B9                        ; ENABLE THE SPECIFIC SPRITE
07946  37B9  AD 1D D0              LDA $D01D
07947  37BC  05 73                 ORA GRAPHICS.STRETCHSPRITEHORIZONTALLY.NUMBER$
07948  37BE  8D 1D D0              STA $D01D
07949  37C1             
07950  37C1  60                    RTS
07951  37C2             
07952  37C2             GRAPHICS.UNSTRETCHSPRITEHORIZONTALLY.NUMBER$ = $73 ; 1 BYTE
07953  37C2             GRAPHICS.UNSTRETCHSPRITEHORIZONTALLY$ 
07954  37C2  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07955  37C5  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07956  37C8             
07957  37C8                        ; ENABLE THE SPECIFIC SPRITE
07958  37C8  AD 1D D0              LDA $D01D
07959  37CB  25 73                 AND GRAPHICS.UNSTRETCHSPRITEHORIZONTALLY.NUMBER$
07960  37CD  8D 1D D0              STA $D01D
07961  37D0             
07962  37D0  60                    RTS
07963  37D1             
07964  37D1             GRAPHICS.STRETCHSPRITEVERTICALLY.NUMBER$ = $73 ; 1 BYTE
07965  37D1             GRAPHICS.STRETCHSPRITEVERTICALLY$ 
07966  37D1  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07967  37D4             
07968  37D4                        ; ENABLE THE SPECIFIC SPRITE
07969  37D4  AD 17 D0              LDA $D017
07970  37D7  05 73                 ORA GRAPHICS.STRETCHSPRITEVERTICALLY.NUMBER$
07971  37D9  8D 17 D0              STA $D017
07972  37DC             
07973  37DC  60                    RTS
07974  37DD             
07975  37DD             GRAPHICS.UNSTRETCHSPRITEVERTICALLY.NUMBER$ = $73 ; 1 BYTE
07976  37DD             GRAPHICS.UNSTRETCHSPRITEVERTICALLY$ 
07977  37DD  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07978  37E0  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07979  37E3             
07980  37E3                        ; ENABLE THE SPECIFIC SPRITE
07981  37E3  AD 17 D0              LDA $D017
07982  37E6  25 73                 AND GRAPHICS.UNSTRETCHSPRITEVERTICALLY.NUMBER$
07983  37E8  8D 17 D0              STA $D017
07984  37EB             
07985  37EB  60                    RTS
07986  37EC             
07987  37EC             GRAPHICS.SETSPRITECOLOR.NUMBER$ = $73 ; 1 BYTE
07988  37EC             GRAPHICS.SETSPRITECOLOR.COLOR$ = $74 ; 1 BYTE
07989  37EC             GRAPHICS.SETSPRITECOLOR.ADDRESS = $75 ; 2 BYTES
07990  37EC             GRAPHICS.SETSPRITECOLOR$ 
07991  37EC             
07992  37EC                        ; THE SPRITE COLORS ARE LOCATED AT $D027-$D02E
07993  37EC  A9 27                 LDA #$27
07994  37EE  85 75                 STA GRAPHICS.SETSPRITECOLOR.ADDRESS
07995  37F0  A9 D0                 LDA #$D0
07996  37F2  85 76                 STA GRAPHICS.SETSPRITECOLOR.ADDRESS+1
07997  37F4             
07998  37F4                        ; SET THE COLOR AT $D027+(NUMBER-1)
07999  37F4  A4 73                 LDY GRAPHICS.SETSPRITECOLOR.NUMBER$
08000  37F6  88                    DEY
08001  37F7  A5 74                 LDA GRAPHICS.SETSPRITECOLOR.COLOR$
08002  37F9  91 75                 STA (GRAPHICS.SETSPRITECOLOR.ADDRESS),Y
08003  37FB             
08004  37FB  60                    RTS
08005  37FC             
08006  37FC             GRAPHICS.GETSPRITECOLOR.NUMBER$ = $73 ; 1 BYTE
08007  37FC             GRAPHICS.GETSPRITECOLOR.COLOR$ = $74 ; 1 BYTE
08008  37FC             GRAPHICS.GETSPRITECOLOR.ADDRESS = $75 ; 2 BYTES
08009  37FC             GRAPHICS.GETSPRITECOLOR$ 
08010  37FC             
08011  37FC                        ; THE SPRITE COLORS ARE LOCATED AT $D027-$D02E
08012  37FC  A9 27                 LDA #$27
08013  37FE  85 75                 STA GRAPHICS.GETSPRITECOLOR.ADDRESS
08014  3800  A9 D0                 LDA #$D0
08015  3802  85 76                 STA GRAPHICS.GETSPRITECOLOR.ADDRESS+1
08016  3804             
08017  3804                        ; GET THE COLOR AT $D027+(NUMBER-1)
08018  3804  A4 73                 LDY GRAPHICS.GETSPRITECOLOR.NUMBER$
08019  3806  88                    DEY
08020  3807  B1 75                 LDA (GRAPHICS.GETSPRITECOLOR.ADDRESS),Y
08021  3809  29 0F                 AND #%00001111
08022  380B  85 74                 STA GRAPHICS.GETSPRITECOLOR.COLOR$
08023  380D             
08024  380D  60                    RTS
08025  380E             
08026  380E             GRAPHICS.SETSPRITELOCATION.NUMBER$ = $73 ; 1 BYTE
08027  380E             GRAPHICS.SETSPRITELOCATION.X$ = $74 ; 2 BYTES
08028  380E             GRAPHICS.SETSPRITELOCATION.Y$ = $76 ; 2 BYTES
08029  380E             GRAPHICS.SETSPRITELOCATION.ADDRESS = $78 ; 2 BYTES
08030  380E             GRAPHICS.SETSPRITELOCATION$ 
08031  380E             
08032  380E                        ; THE SPRITE LOCATIONS ARE LOCATED AT $D000-$D00F
08033  380E  A9 00                 LDA #$00
08034  3810  85 78                 STA GRAPHICS.SETSPRITELOCATION.ADDRESS
08035  3812  A9 D0                 LDA #$D0
08036  3814  85 79                 STA GRAPHICS.SETSPRITELOCATION.ADDRESS+1
08037  3816             
08038  3816                        ; NUMBER = (NUMBER-1)*2
08039  3816  A4 73                 LDY GRAPHICS.SETSPRITELOCATION.NUMBER$
08040  3818  88                    DEY
08041  3819  98                    TYA
08042  381A  0A                    ASL ; A=A*2
08043  381B  A8                    TAY
08044  381C             
08045  381C  A5 74                 LDA GRAPHICS.SETSPRITELOCATION.X$ ; WE ONLY CARE ABOUT THE LO BYTE
08046  381E  91 78                 STA (GRAPHICS.SETSPRITELOCATION.ADDRESS),Y
08047  3820             
08048  3820  C8                    INY
08049  3821  A5 76                 LDA GRAPHICS.SETSPRITELOCATION.Y$ ; WE ONLY CARE ABOUT THE LO BYTE
08050  3823  91 78                 STA (GRAPHICS.SETSPRITELOCATION.ADDRESS),Y
08051  3825             
08052  3825                        ; DETERMINE IF WE NEED TO SET/CLEAR THE 9TH BIT FOR X'S HI BYTE
08053  3825  A5 75                 LDA GRAPHICS.SETSPRITELOCATION.X$+1
08054  3827  F0 0E                 BEQ @CLEARXHI
08055  3829             @SETXHI
08056  3829  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
08057  382C  AD 10 D0              LDA $D010
08058  382F  05 73                 ORA GRAPHICS.SETSPRITELOCATION.NUMBER$
08059  3831  8D 10 D0              STA $D010
08060  3834  4C 45 38              JMP @DONE
08061  3837             @CLEARXHI
08062  3837  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
08063  383A  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
08064  383D  AD 10 D0              LDA $D010
08065  3840  25 73                 AND GRAPHICS.SETSPRITELOCATION.NUMBER$
08066  3842  8D 10 D0              STA $D010
08067  3845             @DONE
08068  3845  60                    RTS
08069  3846             
08070  3846             GRAPHICS.GETSPRITELOCATION.NUMBER$ = $73 ; 1 BYTE
08071  3846             GRAPHICS.GETSPRITELOCATION.X$ = $74 ; 2 BYTES
08072  3846             GRAPHICS.GETSPRITELOCATION.Y$ = $76 ; 2 BYTES
08073  3846             GRAPHICS.GETSPRITELOCATION.ADDRESS = $78 ; 2 BYTES
08074  3846             GRAPHICS.GETSPRITELOCATION$ 
08075  3846             
08076  3846                        ; THE SPRITE LOCATIONS ARE LOCATED AT $D000-$D00F
08077  3846  A9 00                 LDA #$00
08078  3848  85 78                 STA GRAPHICS.GETSPRITELOCATION.ADDRESS
08079  384A  A9 D0                 LDA #$D0
08080  384C  85 79                 STA GRAPHICS.GETSPRITELOCATION.ADDRESS+1
08081  384E             
08082  384E                        ; NUMBER = (NUMBER-1)*2
08083  384E  A4 73                 LDY GRAPHICS.GETSPRITELOCATION.NUMBER$
08084  3850  88                    DEY
08085  3851  98                    TYA
08086  3852  0A                    ASL ; A=A*2
08087  3853  A8                    TAY
08088  3854             
08089  3854  B1 78                 LDA (GRAPHICS.GETSPRITELOCATION.ADDRESS),Y
08090  3856  85 74                 STA GRAPHICS.GETSPRITELOCATION.X$ ; WE ONLY CARE ABOUT THE LO BYTE
08091  3858             
08092  3858  C8                    INY
08093  3859  B1 78                 LDA (GRAPHICS.GETSPRITELOCATION.ADDRESS),Y
08094  385B  85 76                 STA GRAPHICS.GETSPRITELOCATION.Y$ ; WE ONLY CARE ABOUT THE LO BYTE
08095  385D  A9 00                 LDA #$00
08096  385F  85 77                 STA GRAPHICS.GETSPRITELOCATION.Y$+1
08097  3861             
08098  3861                        ; FIND THE 9TH BIT FOR X'S HI BYTE
08099  3861  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
08100  3864  AD 10 D0              LDA $D010
08101  3867  25 73                 AND GRAPHICS.GETSPRITELOCATION.NUMBER$
08102  3869  F0 07                 BEQ @CLEARXHI
08103  386B                        ;JMP @DONE
08104  386B             @SETXHI
08105  386B  A9 01                 LDA #$01
08106  386D  85 75                 STA GRAPHICS.GETSPRITELOCATION.X$+1
08107  386F  4C 76 38              JMP @DONE
08108  3872             @CLEARXHI
08109  3872  A9 00                 LDA #$00
08110  3874  85 75                 STA GRAPHICS.GETSPRITELOCATION.X$+1
08111  3876             @DONE
08112  3876  60                    RTS
08113  3877             
08114  3877             
08115  3877             
08116  3877             
08117  3877             
08118  3877             
08119  3877             AUDIO.VOICE1$ = #01
08120  3877             AUDIO.VOICE2$ = #02
08121  3877             AUDIO.VOICE3$ = #03
08122  3877             
08123  3877             AUDIO.VOLUMEADDRESS = $D418
08124  3877             
08125  3877             AUDIO.TRIANGLEON$ = $11
08126  3877             AUDIO.TRIANGLEOFF$ = $10
08127  3877             AUDIO.SAWTOOTHON$ = $21
08128  3877             AUDIO.SAWTOOTHOFF$ = $20
08129  3877             AUDIO.PULSEON$ = $41
08130  3877             AUDIO.PULSEOFF$ = $40
08131  3877             AUDIO.NOISEON$ = $81
08132  3877             AUDIO.NOISEOFF$ = $80
08133  3877             
08134  3877             AUDIO.ATTACKHIGH$ = $80
08135  3877             AUDIO.ATTACKMEDIUM$ = $40
08136  3877             AUDIO.ATTACKLOW$ = $20
08137  3877             AUDIO.ATTACKLOWEST$ = $10
08138  3877             AUDIO.DECAYHIGH$ = $08
08139  3877             AUDIO.DECAYMEDIUM$ = $04
08140  3877             AUDIO.DECAYLOW$ = $02
08141  3877             AUDIO.DECAYLOWEST$ = $01
08142  3877             
08143  3877             AUDIO.SUSTAINHIGH$ = $80
08144  3877             AUDIO.SUSTAINMEDIUM$ = $40
08145  3877             AUDIO.SUSTAINLOW$ = $20
08146  3877             AUDIO.SUSTAINLOWEST$ = $10
08147  3877             AUDIO.RELEASEHIGH$ = $08
08148  3877             AUDIO.RELEASEMEDIUM$ = $04
08149  3877             AUDIO.RELEASELOW$ = $02
08150  3877             AUDIO.RELEASELOWEST$ = $01
08151  3877             
08152  3877             AUDIO.SETVOLUME.VALUE$ = $73 ; 1 BYTE
08153  3877             AUDIO.SETVOLUME$ 
08154  3877                        ; 0 = OFF, 15 = MAX
08155  3877  A5 73                 LDA AUDIO.SETVOLUME.VALUE$
08156  3879  8D 18 D4              STA AUDIO.VOLUMEADDRESS
08157  387C  60                    RTS
08158  387D             
08159  387D             AUDIO.GETVOICEADDRESS.VOICE = $73 ; 1 BYTE
08160  387D             AUDIO.GETVOICEADDRESS.ADDRESS = $74 ; 1 BYTE
08161  387D             AUDIO.GETVOICEADDRESS 
08162  387D             
08163  387D                        ; PRODUCT = (VOICE-1)*7
08164  387D  A6 73                 LDX AUDIO.GETVOICEADDRESS.VOICE
08165  387F  CA                    DEX
08166  3880  86 80                 STX MATH.MULTIPLY8.FACTOR1$
08167  3882  A9 07                 LDA #$07
08168  3884  85 82                 STA MATH.MULTIPLY8.FACTOR2$
08169  3886  20 48 29              JSR MATH.MULTIPLY8$
08170  3889             
08171  3889                        ; VOICE(LO) = PRODUCT + ADDRESS
08172  3889  A5 83                 LDA MATH.MULTIPLY8.PRODUCT$
08173  388B  18                    CLC
08174  388C  65 74                 ADC AUDIO.GETVOICEADDRESS.ADDRESS
08175  388E  85 73                 STA AUDIO.GETVOICEADDRESS.VOICE
08176  3890             
08177  3890                        ; VOICE(HI) = $D4
08178  3890  A9 D4                 LDA #$D4
08179  3892  85 74                 STA AUDIO.GETVOICEADDRESS.VOICE+1
08180  3894             
08181  3894  60                    RTS
08182  3895             
08183  3895             AUDIO.SETWAVEFORM.VOICE$ = $73 ; 1 BYTE
08184  3895             AUDIO.SETWAVEFORM.VALUE$ = $75 ; 1 BYTE
08185  3895             AUDIO.SETWAVEFORM$ 
08186  3895  A9 04                 LDA #$04
08187  3897  85 74                 STA AUDIO.GETVOICEADDRESS.ADDRESS
08188  3899  20 7D 38              JSR AUDIO.GETVOICEADDRESS
08189  389C             
08190  389C  A0 00                 LDY #$00
08191  389E  A5 75                 LDA AUDIO.SETWAVEFORM.VALUE$
08192  38A0  91 73                 STA (AUDIO.SETWAVEFORM.VOICE$),Y
08193  38A2  60                    RTS
08194  38A3             
08195  38A3             
08196  38A3             AUDIO.SETATTACKDECAY.VOICE$ = $73 ; 1 BYTE
08197  38A3             AUDIO.SETATTACKDECAY.VALUE$ = $75 ; 1 BYTE
08198  38A3             AUDIO.SETATTACKDECAY$ 
08199  38A3  A9 05                 LDA #$05
08200  38A5  85 74                 STA AUDIO.GETVOICEADDRESS.ADDRESS
08201  38A7  20 7D 38              JSR AUDIO.GETVOICEADDRESS
08202  38AA             
08203  38AA  A0 00                 LDY #$00
08204  38AC  A5 75                 LDA AUDIO.SETATTACKDECAY.VALUE$
08205  38AE  91 73                 STA (AUDIO.SETATTACKDECAY.VOICE$),Y
08206  38B0  60                    RTS
08207  38B1             
08208  38B1             AUDIO.SETSUSTAINRELEASE.VOICE$ = $73 ; 2 BYTES
08209  38B1             AUDIO.SETSUSTAINRELEASE.VALUE$ = $75 ; 1 BYTE
08210  38B1             AUDIO.SETSUSTAINRELEASE$ 
08211  38B1  A9 06                 LDA #$06
08212  38B3  85 74                 STA AUDIO.GETVOICEADDRESS.ADDRESS
08213  38B5  20 7D 38              JSR AUDIO.GETVOICEADDRESS
08214  38B8             
08215  38B8  A0 00                 LDY #$00
08216  38BA  A5 75                 LDA AUDIO.SETSUSTAINRELEASE.VALUE$
08217  38BC  91 73                 STA (AUDIO.SETSUSTAINRELEASE.VOICE$),Y
08218  38BE  60                    RTS
08219  38BF             
08220  38BF             AUDIO.SETFREQUENCY.VOICE$ = $73 ; 1 BYTE
08221  38BF             AUDIO.SETFREQUENCY.FREQUENCY$ = $75 ; 2 BYTES
08222  38BF             AUDIO.SETFREQUENCY$ 
08223  38BF  A9 00                 LDA #$00
08224  38C1  85 74                 STA AUDIO.GETVOICEADDRESS.ADDRESS
08225  38C3  20 7D 38              JSR AUDIO.GETVOICEADDRESS
08226  38C6             
08227  38C6  A0 00                 LDY #$00
08228  38C8  A5 75                 LDA AUDIO.SETFREQUENCY.FREQUENCY$
08229  38CA  91 73                 STA (AUDIO.SETFREQUENCY.VOICE$),Y
08230  38CC  C8                    INY
08231  38CD  A5 76                 LDA AUDIO.SETFREQUENCY.FREQUENCY$+1
08232  38CF  91 73                 STA (AUDIO.SETFREQUENCY.VOICE$),Y
08233  38D1             
08234  38D1  60                    RTS
08235  38D2             
08236  38D2             AUDIO.BEEP$ 
08237  38D2             
08238  38D2                        ; SET THE VOLUME
08239  38D2  A9 0F                 LDA #$0F
08240  38D4  8D 18 D4              STA AUDIO.VOLUMEADDRESS
08241  38D7             
08242  38D7                        ; SET ATTACK/DECAY
08243  38D7  A9 00                 LDA #$0
08244  38D9  8D 05 D4              STA $D405
08245  38DC             
08246  38DC                        ; SET SUSTAIN/RELEASE
08247  38DC  A9 F8                 LDA #$F8
08248  38DE  8D 06 D4              STA $D406
08249  38E1             
08250  38E1                        ; SET FREQUENCY
08251  38E1  A9 4A                 LDA #$4A
08252  38E3  8D 00 D4              STA $D400 ; LO
08253  38E6  A9 22                 LDA #$22
08254  38E8  8D 01 D4              STA $D401 ; HI
08255  38EB             
08256  38EB                        ; SET WAVEFORM
08257  38EB  A9 11                 LDA #$11
08258  38ED  8D 04 D4              STA $D404
08259  38F0             
08260  38F0                        ; WAIT
08261  38F0  20 A5 1E              JSR TIME.HALT$
08262  38F3  20 A5 1E              JSR TIME.HALT$
08263  38F6             
08264  38F6                        ; DISABLE WAVEFORM
08265  38F6  A9 10                 LDA #$10
08266  38F8  8D 04 D4              STA $D404
08267  38FB             
08268  38FB  60                    RTS
08269  38FC             
08270  38FC             ; HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:SIMPLE_IRQ_MUSIC_PLAYER
08271  38FC  00 A0      AUDIO.SIDINITADDRESS$ WORD $A000 ;$A048
08272  38FE  06 A0      AUDIO.SIDPLAYADDRESS$ WORD $A006 ;$A021
08273  3900             ;AUDIO.SIDLOADADDRESS$   WORD $A000
08274  3900  00         AUDIO.SIDFINISHED$ BYTE $00
08275  3901  00 50      AUDIO.SIDTIMER$ WORD $5000
08276  3903             
08277  3903             ;;AUDIO.CIA1
08278  3903             ;;INCASM "BUFFER256.ASM"
08279  3903             
08280  3903             ;AUDIO.SIDSTART$
08281  3903             ;        SEI
08282  3903             
08283  3903             ;;;        LDA #$10
08284  3903             ;;;        STA MEMORY.COPY16.SOURCE$
08285  3903             ;;;        LDA #$DC
08286  3903             ;;;        STA MEMORY.COPY16.SOURCE$+1
08287  3903             ;;;        LDA #<AUDIO.CIA1
08288  3903             ;;;        STA MEMORY.COPY16.DESTINATION$
08289  3903             ;;;        LDA #>AUDIO.CIA1
08290  3903             ;;;        STA MEMORY.COPY16.DESTINATION$+1
08291  3903             ;;;        LDA #$F0
08292  3903             ;;;        STA MEMORY.COPY16.LENGTH$
08293  3903             ;;;        LDA #$00
08294  3903             ;;;        STA MEMORY.COPY16.LENGTH$+1
08295  3903             ;;;        JSR MEMORY.COPY16$
08296  3903             ;;        LDA #$00
08297  3903             ;;        STA MEMORY.COPY16.SOURCE$
08298  3903             ;;        LDA #$DC
08299  3903             ;;        STA MEMORY.COPY16.SOURCE$+1
08300  3903             ;;        LDA #<AUDIO.CIA1
08301  3903             ;;        STA MEMORY.COPY16.DESTINATION$
08302  3903             ;;        LDA #>AUDIO.CIA1
08303  3903             ;;        STA MEMORY.COPY16.DESTINATION$+1
08304  3903             ;;        LDA #$00
08305  3903             ;;        STA MEMORY.COPY16.LENGTH$
08306  3903             ;;        LDA #$01
08307  3903             ;;        STA MEMORY.COPY16.LENGTH$+1
08308  3903             ;;        JSR MEMORY.COPY16$
08309  3903             ;;;        LDA #$00
08310  3903             ;;;        STA MEMORY.COPY16.SOURCE$
08311  3903             ;;;        LDA #$DC
08312  3903             ;;;        STA MEMORY.COPY16.SOURCE$+1
08313  3903             ;;;        LDA #<AUDIO.CIA1
08314  3903             ;;;        STA MEMORY.COPY16.DESTINATION$
08315  3903             ;;;        LDA #>AUDIO.CIA1
08316  3903             ;;;        STA MEMORY.COPY16.DESTINATION$+1
08317  3903             ;;;        LDA #$10
08318  3903             ;;;        STA MEMORY.COPY16.LENGTH$
08319  3903             ;;;        LDA #$00
08320  3903             ;;;        STA MEMORY.COPY16.LENGTH$+1
08321  3903             ;;;        JSR MEMORY.COPY16$
08322  3903             
08323  3903             ;        LDA #<AUDIO.SIDIRQ
08324  3903             ;        LDX #>AUDIO.SIDIRQ
08325  3903             ;        STA $0314
08326  3903             ;        STX $0315
08327  3903             ;        LDA #$1B
08328  3903             ;        LDX #$00
08329  3903             ;        LDY #$7F
08330  3903             ;        STA $D011
08331  3903             ;        STX $D012
08332  3903             ;        STY $DC0D; CIA #1
08333  3903             ;        ;STY $DD0D; CIA #2
08334  3903             
08335  3903             ;          ;LDA $DC0D  ;BY READING THIS TWO REGISTERS WE NEGATE ANY PENDING CIA IRQS.
08336  3903             ;          ;LDA $DD0D  ;IF WE DON'T DO THIS, A PENDING CIA IRQ MIGHT OCCUR AFTER WE FINISH SETTING UP OUR IRQ.
08337  3903             ;                       ;WE DON'T WANT THAT TO HAPPEN.
08338  3903             
08339  3903             ;        LDA #$01
08340  3903             ;        STA $D01A
08341  3903             ;        STA $D019 ; ACK ANY RASTER IRQS
08342  3903             ;        LDA #$00
08343  3903             ;
08344  3903             ;        ; CHANGE TOD TO 50 HZ
08345  3903             ;        LDA $DD0E
08346  3903             ;        ORA #%10000000
08347  3903             ;        STA $DD0E
08348  3903             ;        LDA $DC0E
08349  3903             ;        ORA #%10000000
08350  3903             ;        STA $DC0E
08351  3903             
08352  3903             ;        ;JSR $A000
08353  3903             ;        ;;JSR $A048
08354  3903             ;        LDA #>AUDIO.SIDAFTERINIJMP
08355  3903             ;        PHA
08356  3903             ;        LDA #<AUDIO.SIDAFTERINIJMP
08357  3903             ;        PHA
08358  3903             ;        LDA #$00 ; !!!
08359  3903             ;        JMP (AUDIO.SIDINITADDRESS$) ;INITIALIZE RICHARD'S MUSIC
08360  3903             ;AUDIO.SIDAFTERINIJMP=*-1
08361  3903             
08362  3903             ;;        LDA AUDIO.SIDINITADDRESS$
08363  3903             ;;        STA AUDIO.SIDINITJSR+1
08364  3903             ;;        LDA AUDIO.SIDINITADDRESS$+1
08365  3903             ;;        STA AUDIO.SIDINITJSR+2
08366  3903             ;;        LDA #$00
08367  3903             ;;AUDIO.SIDINITJSR
08368  3903             ;;        JSR $1234
08369  3903             
08370  3903             ;        CLI
08371  3903             ;        RTS
08372  3903             
08373  3903             
08374  3903             ;AUDIO.SIDIRQ
08375  3903             
08376  3903             ;           PHA        ;STORE REGISTER A IN STACK
08377  3903             ;           TXA
08378  3903             ;           PHA        ;STORE REGISTER X IN STACK
08379  3903             ;           TYA
08380  3903             ;           PHA        ;STORE REGISTER Y IN STACK
08381  3903             
08382  3903             
08383  3903             ;        LDA AUDIO.SIDFINISHED$
08384  3903             ;        CMP #$01
08385  3903             ;        BNE @CONT
08386  3903             ;        JMP @DONE
08387  3903             ;@CONT
08388  3903             
08389  3903             
08390  3903             ;        LDA #$01
08391  3903             ;        STA $D019 ; ACK ANY RASTER IRQS
08392  3903             
08393  3903             ;        ;JSR $A006
08394  3903             ;        ;JSR $A021 ;PLAY THE MUSIC
08395  3903             ;        LDA #>AUDIO.SIDAFTERPLAYJMP
08396  3903             ;        PHA
08397  3903             ;        LDA #<AUDIO.SIDAFTERPLAYJMP
08398  3903             ;        PHA
08399  3903             ;        JMP (AUDIO.SIDPLAYADDRESS$) ;PLAY THE MUSIC
08400  3903             ;AUDIO.SIDAFTERPLAYJMP=*-1
08401  3903             
08402  3903             ;@DONE
08403  3903             ;           PLA
08404  3903             ;           TAY        ;RESTORE REGISTER Y FROM STACK (REMEMBER STACK IS FIFO: FIRST IN FIRST OUT)
08405  3903             ;           PLA
08406  3903             ;           TAX        ;RESTORE REGISTER X FROM STACK
08407  3903             ;           PLA        ;RESTORE REGISTER A FROM STACK
08408  3903             
08409  3903             ;           ;JMP $EA81
08410  3903             ;           JMP $EA31   ; CALL ROUTINE TO MOVE/FLASH CURSOR, READ KEYBOARD, ETC. (2)
08411  3903             ;           ;RTI         ;(3)
08412  3903             
08413  3903             
08414  3903             ;AUDIO.SIDEND$
08415  3903             
08416  3903             ;        LDA #$01
08417  3903             ;        STA AUDIO.SIDFINISHED$
08418  3903             
08419  3903             ;        SEI
08420  3903             
08421  3903             ;        LDA #$31
08422  3903             ;        ;LDA #$81
08423  3903             ;        LDX #$EA
08424  3903             ;        STA $0314
08425  3903             ;        STX $0315
08426  3903             
08427  3903             ;;;        LDA #$10
08428  3903             ;;;        STA MEMORY.COPY16.DESTINATION$
08429  3903             ;;;        LDA #$DC
08430  3903             ;;;        STA MEMORY.COPY16.DESTINATION$+1
08431  3903             ;;;        LDA #<AUDIO.CIA1
08432  3903             ;;;        STA MEMORY.COPY16.SOURCE$
08433  3903             ;;;        LDA #>AUDIO.CIA1
08434  3903             ;;;        STA MEMORY.COPY16.SOURCE$+1
08435  3903             ;;;        LDA #$F0
08436  3903             ;;;        STA MEMORY.COPY16.LENGTH$
08437  3903             ;;;        LDA #$00
08438  3903             ;;;        STA MEMORY.COPY16.LENGTH$+1
08439  3903             ;;;        JSR MEMORY.COPY16$
08440  3903             ;;        LDA #$00
08441  3903             ;;        STA MEMORY.COPY16.DESTINATION$
08442  3903             ;;        LDA #$DC
08443  3903             ;;        STA MEMORY.COPY16.DESTINATION$+1
08444  3903             ;;        LDA #<AUDIO.CIA1
08445  3903             ;;        STA MEMORY.COPY16.SOURCE$
08446  3903             ;;        LDA #>AUDIO.CIA1
08447  3903             ;;        STA MEMORY.COPY16.SOURCE$+1
08448  3903             ;;        LDA #$00
08449  3903             ;;        STA MEMORY.COPY16.LENGTH$
08450  3903             ;;        LDA #$01
08451  3903             ;;        STA MEMORY.COPY16.LENGTH$+1
08452  3903             ;;        JSR MEMORY.COPY16$
08453  3903             ;;;;        LDA #$00
08454  3903             ;;;;        STA MEMORY.COPY16.DESTINATION$
08455  3903             ;;;;        LDA #$DC
08456  3903             ;;;;        STA MEMORY.COPY16.DESTINATION$+1
08457  3903             ;;;;        LDA #<AUDIO.CIA1
08458  3903             ;;;;        STA MEMORY.COPY16.SOURCE$
08459  3903             ;;;;        LDA #>AUDIO.CIA1
08460  3903             ;;;;        STA MEMORY.COPY16.SOURCE$+1
08461  3903             ;;;;        LDA #$10
08462  3903             ;;;;        STA MEMORY.COPY16.LENGTH$
08463  3903             ;;;;        LDA #$00
08464  3903             ;;;;        STA MEMORY.COPY16.LENGTH$+1
08465  3903             ;;;;        JSR MEMORY.COPY16$
08466  3903             
08467  3903             ;        LDA #$1B
08468  3903             ;        ;LDA #$9B
08469  3903             ;        STA $D011
08470  3903             
08471  3903             ;        LDX #$00
08472  3903             ;        ;LDX #$0C
08473  3903             ;        STX $D012
08474  3903             
08475  3903             
08476  3903             ;         LDA #0
08477  3903             ;   STA $DC0E      ;SET TOD CLOCK FREQUENCY TO 60HZ
08478  3903             ;   STA $DC0F      ;ENABLE SET-TOD-CLOCK
08479  3903             ;   STA $DC0B      ;SET TOD-CLOCK TO 0 (HOURS)
08480  3903             ;   STA $DC0A      ;- (MINUTES)
08481  3903             ;   STA $DC09      ;- (SECONDS)
08482  3903             ;   STA $DC08      ;- (DECISECONDS)
08483  3903             ;        BIT $DC0E
08484  3903             ;        BIT $DC0F
08485  3903             ;        BIT $DC0D
08486  3903             ;                LDA #0
08487  3903             ;                STA $DC0E
08488  3903             
08489  3903             ;        ;LDY #$00
08490  3903             ;        ;LDY #$81 ; CIA #1: HTTP://UNUSEDINO.DE/EC64/TECHNICAL/AAY/C64/CIA113.HTM
08491  3903             ;        LDY #$7F
08492  3903             ;        STY $DC0D
08493  3903             ;        LDY #$81
08494  3903             ;        STY $DC0D
08495  3903             
08496  3903             ;        LDY #$7F ; CIA #2: HTTP://UNUSEDINO.DE/EC64/TECHNICAL/AAY/C64/CIA213.HTM
08497  3903             ;        STY $DD0D
08498  3903             
08499  3903             ;        LDA #$01
08500  3903             ;        STA $DC0E
08501  3903             ;;        LDA #$08
08502  3903             ;;        STA $DC0F
08503  3903             
08504  3903             ;;        ;LDA #$7F
08505  3903             ;;;        STA $D01A ; TURN OFF RASTER INTERRUPTS
08506  3903             ;;;        LDA #$01
08507  3903             ;;;        STA $DC0D ; TURN ON CIA INTERRUPTS
08508  3903             
08509  3903             ;        LDX #$00
08510  3903             ;        ;LDX #$F0
08511  3903             ;        ;LDY #$01
08512  3903             ;        STX $D01A
08513  3903             ;        ;STY $D019 ; ACK ANY RASTER IRQS
08514  3903             
08515  3903             ;        LDA #$FF
08516  3903             ;        ;LDA #$00
08517  3903             ;        STA $D019 ; ACK ANY PENDING INTERRUPT
08518  3903             
08519  3903             ;        CLI
08520  3903             
08521  3903             ;;        JSR $FFEA ; CALL UDTIM
08522  3903             
08523  3903             ;        LDA #AUDIO.VOICE1$
08524  3903             ;        STA AUDIO.SETFREQUENCY.VOICE$
08525  3903             ;        LDA #$00
08526  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$
08527  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$+1
08528  3903             ;        JSR AUDIO.SETFREQUENCY$
08529  3903             
08530  3903             ;        LDA #AUDIO.VOICE2$
08531  3903             ;        STA AUDIO.SETFREQUENCY.VOICE$
08532  3903             ;        LDA #$00
08533  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$
08534  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$+1
08535  3903             ;        JSR AUDIO.SETFREQUENCY$
08536  3903             
08537  3903             ;        LDA #AUDIO.VOICE3$
08538  3903             ;        STA AUDIO.SETFREQUENCY.VOICE$
08539  3903             ;        LDA #$00
08540  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$
08541  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$+1
08542  3903             ;        JSR AUDIO.SETFREQUENCY$
08543  3903             
08544  3903             ;        RTS
08545  3903             
08546  3903             AUDIO.SIDSTART$ 
08547  3903  78                    SEI
08548  3904  A9 35                 LDA #$35; DISABLE KERNAL AND BASIC ROMS
08549  3906  85 01                 STA $01
08550  3908             
08551  3908  20 1D 39              JSR AUDIO.SID_INIT
08552  390B             
08553  390B  20 91 39              JSR AUDIO.SID_PLAY
08554  390E             
08555  390E  60                    RTS
08556  390F             
08557  390F             
08558  390F             AUDIO.SIDEND$ 
08559  390F  A9 01                 LDA #$01
08560  3911  8D 00 39              STA AUDIO.SIDFINISHED$
08561  3914                        
08562  3914  20 4B 39              JSR AUDIO.SID_OFF
08563  3917                        
08564  3917  A9 36                 LDA #$36 ; ENABLE KERNAL BUT KEEP BASIC DISABLED
08565  3919  85 01                 STA $01
08566  391B  58                    CLI
08567  391C             
08568  391C  60                    RTS
08569  391D             
08570  391D             AUDIO.SID_INIT 
08571  391D  20 4B 39              JSR AUDIO.SID_OFF
08572  3920             
08573  3920                        ;LDA #$00
08574  3920                        ;JSR $A000 ;INITIALIZE RICHARD'S MUSIC
08575  3920             
08576  3920  A9 39                 LDA #>AUDIO.SIDAFTERINIJMP
08577  3922  48                    PHA
08578  3923  A9 2A                 LDA #<AUDIO.SIDAFTERINIJMP
08579  3925  48                    PHA
08580  3926  A9 00                 LDA #$00 ; !!!
08581  3928  6C FC 38              JMP (AUDIO.SIDINITADDRESS$) ;INITIALIZE RICHARD'S MUSIC
08582  392B             AUDIO.SIDAFTERINIJMP=*-1 
08583  392B             
08584  392B                        ;CLI
08585  392B             
08586  392B  60                    RTS
08587  392C             
08588  392C             AUDIO.SID_ON 
08589  392C                        ; TURN ON VOLUME
08590  392C  A9 0F                 LDA #$0F
08591  392E  85 73                 STA AUDIO.SETVOLUME.VALUE$
08592  3930  20 77 38              JSR AUDIO.SETVOLUME$
08593  3933             
08594  3933  A9 39                 LDA #>AUDIO.SIDON
08595  3935  8D FB FF              STA $FFFB
08596  3938  A9 A4                 LDA #<AUDIO.SIDON
08597  393A  8D FA FF              STA $FFFA
08598  393D             
08599  393D  A9 81                 LDA #%10000001    ; ENABLE CIA-2 TIMER A NMI
08600  393F  8D 0D DD              STA $DD0D
08601  3942  AD 0D DD              LDA $DD0D
08602  3945  A9 01                 LDA #%00000001    ; TIMER A START
08603  3947  8D 0E DD              STA $DD0E
08604  394A  60                    RTS
08605  394B             
08606  394B             AUDIO.SID_OFF 
08607  394B  A9 00                 LDA #%00000000
08608  394D  8D 0E DD              STA $DD0E         ; TIMER A STOP
08609  3950  A9 4F                 LDA #%01001111    ; DISABLE ALL CIA-2 NMI'S
08610  3952  8D 0D DD              STA $DD0D
08611  3955  AD 0D DD              LDA $DD0D
08612  3958             
08613  3958  A9 39                 LDA #>AUDIO.SIDOFF
08614  395A  8D FB FF              STA $FFFB
08615  395D  A9 D2                 LDA #<AUDIO.SIDOFF
08616  395F  8D FA FF              STA $FFFA
08617  3962             
08618  3962                        ; TURN OFF VOLUME
08619  3962  A9 00                 LDA #$00
08620  3964  85 73                 STA AUDIO.SETVOLUME.VALUE$
08621  3966  20 77 38              JSR AUDIO.SETVOLUME$
08622  3969             
08623  3969  A9 01                 LDA #AUDIO.VOICE1$
08624  396B  85 73                 STA AUDIO.SETFREQUENCY.VOICE$
08625  396D  A9 00                 LDA #$00
08626  396F  85 75                 STA AUDIO.SETFREQUENCY.FREQUENCY$
08627  3971  85 76                 STA AUDIO.SETFREQUENCY.FREQUENCY$+1
08628  3973  20 BF 38              JSR AUDIO.SETFREQUENCY$
08629  3976             
08630  3976  A9 02                 LDA #AUDIO.VOICE2$
08631  3978  85 73                 STA AUDIO.SETFREQUENCY.VOICE$
08632  397A  A9 00                 LDA #$00
08633  397C  85 75                 STA AUDIO.SETFREQUENCY.FREQUENCY$
08634  397E  85 76                 STA AUDIO.SETFREQUENCY.FREQUENCY$+1
08635  3980  20 BF 38              JSR AUDIO.SETFREQUENCY$
08636  3983             
08637  3983  A9 03                 LDA #AUDIO.VOICE3$
08638  3985  85 73                 STA AUDIO.SETFREQUENCY.VOICE$
08639  3987  A9 00                 LDA #$00
08640  3989  85 75                 STA AUDIO.SETFREQUENCY.FREQUENCY$
08641  398B  85 76                 STA AUDIO.SETFREQUENCY.FREQUENCY$+1
08642  398D  20 BF 38              JSR AUDIO.SETFREQUENCY$
08643  3990             
08644  3990  60                    RTS
08645  3991             
08646  3991             AUDIO.SID_PLAY 
08647  3991             
08648  3991  20 4B 39              JSR AUDIO.SID_OFF
08649  3994             
08650  3994             ;        ; TIMER VALUE OF 19656 ($4CC8)
08651  3994             ;        LDA #$00
08652  3994             ;        STA $DD04
08653  3994             ;        LDA #$50
08654  3994             ;        STA $DD05
08655  3994  AD 01 39              LDA AUDIO.SIDTIMER$
08656  3997  8D 04 DD              STA $DD04
08657  399A  AD 02 39              LDA AUDIO.SIDTIMER$+1
08658  399D  8D 05 DD              STA $DD05
08659  39A0             
08660  39A0  20 2C 39              JSR AUDIO.SID_ON
08661  39A3             
08662  39A3  60                    RTS
08663  39A4             
08664  39A4             AUDIO.SIDON 
08665  39A4             
08666  39A4                        ; THIS WILL STORE THE VALUES OF A,X,Y AT THE MEMORY LOCATION WHERE THEY
08667  39A4                        ; ARE LOADED BACK NEAR THE END OF THIS INTERRUPT HANDLER
08668  39A4  8D CD 39              STA AUDIO.SIDABUFF
08669  39A7  8C CF 39              STY AUDIO.SIDYBUFF
08670  39AA  8E D1 39              STX AUDIO.SIDXBUFF
08671  39AD             
08672  39AD                        ;JSR $A006
08673  39AD             
08674  39AD  A9 39                 LDA #>AUDIO.SIDAFTERPLAYJMP
08675  39AF  48                    PHA
08676  39B0  A9 B5                 LDA #<AUDIO.SIDAFTERPLAYJMP
08677  39B2  48                    PHA
08678  39B3  6C FE 38              JMP (AUDIO.SIDPLAYADDRESS$) ;PLAY THE MUSIC
08679  39B6             AUDIO.SIDAFTERPLAYJMP=*-1 
08680  39B6             
08681  39B6                        ; MANUALLY UPDATE THE TOD VARIABLES
08682  39B6  18                    CLC                             ; CLEAR CARRY
08683  39B7  A5 A2                 LDA $A2
08684  39B9  69 01                 ADC #$01
08685  39BB  85 A2                 STA $A2
08686  39BD  A5 A1                 LDA $A1
08687  39BF  69 00                 ADC #$00
08688  39C1  85 A1                 STA $A1
08689  39C3  A5 A0                 LDA $A0
08690  39C5  69 00                 ADC #$00
08691  39C7  85 A0                 STA $A0
08692  39C9             
08693  39C9  AD 0D DD              LDA $DD0D
08694  39CC             
08695  39CC             AUDIO.SIDABUFF=*+1 
08696  39CC  A9 00                 LDA #$00
08697  39CE             AUDIO.SIDYBUFF=*+1 
08698  39CE  A0 00                 LDY #$00
08699  39D0             AUDIO.SIDXBUFF=*+1 
08700  39D0  A2 00                 LDX #$00
08701  39D2             
08702  39D2             AUDIO.SIDOFF 
08703  39D2  40                    RTI
08704  39D3             
08705  39D3             
08706  39D3             ;-------------------------------------------------------------------------
08707  39D3             ;ALIGN $100
08708  39D3             
08709  39D3             ; HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:NMI_SAMPLE_PLAYER
08710  39D3             AUDIO.DIGITABLE=* 
08711  39D3  00 A0      AUDIO.DIGISTARTADDRESS$ WORD $A000 ; DIGI START ADDRESS
08712  39D5  FF BF      AUDIO.DIGIENDADDRESS$ WORD $BFFF ; DIGI ENDI ADDRESS
08713  39D7  00 01      AUDIO.DIGISAMPLERATE$ WORD $0100 ; SAMPLE RATE: 256 FOR 8 BIT MONO 8 KHZ
08714  39D9  00         AUDIO.DIGIFINISHED$ BYTE $00 ; IS SET TO 1 ONCE THE AUDIO HAS FINISHED PLAYING
08715  39DA             
08716  39DA             AUDIO.DIGISOUNDPTR = $30 ; 2 BYTES
08717  39DA             AUDIO.DIGIPOINT = $32 ; 2 BYTES
08718  39DA             AUDIO.SIDADDRESS = $D400
08719  39DA             AUDIO.DIGIDB = 0
08720  39DA             
08721  39DA             WITHSIDPLAYER = 0
08725  39DA             
08726  39DA             ;0: HIGH NIBBLE FIRST 1: LOW NIBBLE FIRST
08727  39DA             ;FIRSTNIBBLE=1
08728  39DA             FIRSTNIBBLE=0 
08729  39DA             ;1: NO NIBBLES
08730  39DA             ;NONIBBLES=1
08731  39DA             NONIBBLES=0 
08732  39DA             
08733  39DA             AUDIO.DIGISTART$ 
08734  39DA             
08735  39DA  78                    SEI
08736  39DB  A9 35                 LDA #$35; DISABLE KERNAL AND BASIC ROMS
08737  39DD  85 01                 STA $01
08738  39DF             
08739  39DF  A9 00                 LDA #$00
08740  39E1  8D D9 39              STA AUDIO.DIGIFINISHED$
08741  39E4             
08742  39E4  20 F8 39              JSR AUDIO.DIGIINIT$
08743  39E7  A0 D3                 LDY #<AUDIO.DIGITABLE
08744  39E9  A2 39                 LDX #>AUDIO.DIGITABLE
08745  39EB  20 84 3A              JSR AUDIO.DIGIPLAY$
08746  39EE             
08747  39EE             ;        LDA #$36 ; ENABLE KERNAL BUT KEEP BASIC DISABLED
08748  39EE             ;        STA $01
08749  39EE             ;        CLI
08750  39EE             
08751  39EE  60                    RTS
08752  39EF             
08753  39EF             AUDIO.DIGIEND$ 
08754  39EF             
08755  39EF  20 5B 3A              JSR AUDIO.DIGIOFF$
08756  39F2             
08757  39F2  A9 36                 LDA #$36 ; ENABLE KERNAL BUT KEEP BASIC DISABLED
08758  39F4  85 01                 STA $01
08759  39F6  58                    CLI
08760  39F7             
08761  39F7  60                    RTS
08762  39F8             
08763  39F8             AUDIO.DIGIINIT$ 
08764  39F8  20 5B 3A              JSR AUDIO.DIGIOFF$
08765  39FB             
08766  39FB  A9 00                 LDA #$00
08767  39FD  A2 00                 LDX #$00
08768  39FF  EA                    NOP
08769  3A00             @L
08770  3A00  9D 00 D4              STA AUDIO.SIDADDRESS,X
08771  3A03  E8                    INX
08772  3A04  D0 FA                 BNE @L
08773  3A06             
08774  3A06  A9 00                 LDA #$00
08775  3A08  8D 05 D4              STA AUDIO.SIDADDRESS+$05   ; VOICE 1 AD
08776  3A0B  A9 F0                 LDA #$F0
08777  3A0D  8D 06 D4              STA AUDIO.SIDADDRESS+$06   ;         SR
08778  3A10  A9 01                 LDA #$01
08779  3A12  8D 04 D4              STA AUDIO.SIDADDRESS+$04   ;         CTRL
08780  3A15  A9 00                 LDA #$00
08781  3A17  8D 0C D4              STA AUDIO.SIDADDRESS+$0C   ; VOICE 2 AD
08782  3A1A  A9 F0                 LDA #$F0
08783  3A1C  8D 0D D4              STA AUDIO.SIDADDRESS+$0D   ;         SR
08784  3A1F  A9 01                 LDA #$01
08785  3A21  8D 0B D4              STA AUDIO.SIDADDRESS+$0B   ;         CTRL
08786  3A24  A9 00                 LDA #$00
08787  3A26  8D 13 D4              STA AUDIO.SIDADDRESS+$13   ; VOICE 3 AD
08788  3A29  A9 F0                 LDA #$F0
08789  3A2B  8D 14 D4              STA AUDIO.SIDADDRESS+$14   ;         SR
08790  3A2E  A9 01                 LDA #$01
08791  3A30  8D 12 D4              STA AUDIO.SIDADDRESS+$12   ;         CTRL
08792  3A33  A9 00                 LDA #$00
08793  3A35  8D 15 D4              STA AUDIO.SIDADDRESS+$15   ; FILTER LO
08794  3A38  A9 10                 LDA #$10
08795  3A3A  8D 16 D4              STA AUDIO.SIDADDRESS+$16   ; FILTER HI
08796  3A3D  A9 F7                 LDA #%11110111
08797  3A3F  8D 17 D4              STA AUDIO.SIDADDRESS+$17   ; FILTER VOICES+RESO
08798  3A42             
08799  3A42  60                    RTS
08800  3A43             
08801  3A43             AUDIO.DIGION$ 
08802  3A43  A9 3A                 LDA #>AUDIO._DIGION
08803  3A45  8D FB FF              STA $FFFB
08804  3A48  A9 B7                 LDA #<AUDIO._DIGION
08805  3A4A  8D FA FF              STA $FFFA
08806  3A4D             
08807  3A4D  A9 81                 LDA #%10000001    ; ENABLE CIA-2 TIMER A NMI
08808  3A4F  8D 0D DD              STA $DD0D
08809  3A52  AD 0D DD              LDA $DD0D
08810  3A55  A9 01                 LDA #%00000001    ; TIMER A START
08811  3A57  8D 0E DD              STA $DD0E
08812  3A5A  60                    RTS
08813  3A5B             AUDIO.DIGIOFF$ 
08814  3A5B  A9 00                 LDA #%00000000
08815  3A5D  8D 0E DD              STA $DD0E         ; TIMER A STOP
08816  3A60  A9 4F                 LDA #%01001111    ; DISABLE ALL CIA-2 NMI'S
08817  3A62  8D 0D DD              STA $DD0D
08818  3A65  AD 0D DD              LDA $DD0D
08819  3A68             
08820  3A68  A9 3B                 LDA #>AUDIO._DIGIOFF
08821  3A6A  8D FB FF              STA $FFFB
08822  3A6D  A9 09                 LDA #<AUDIO._DIGIOFF
08823  3A6F  8D FA FF              STA $FFFA
08824  3A72             
08825  3A72  A9 00                 LDA #$00
08826  3A74  85 32                 STA AUDIO.DIGIPOINT
08827  3A76  85 33                 STA AUDIO.DIGIPOINT+1
08828  3A78  8D CD 3A              STA AUDIO.DIGISTOPLO+1
08829  3A7B  8D C7 3A              STA AUDIO.DIGISTOPHI+1
08830  3A7E             
08831  3A7E  A9 00                 LDA #%00000000
08832  3A80  8D 17 D4              STA AUDIO.SIDADDRESS+$17   ; FILTER VOICES+RESO
08833  3A83             
08834  3A83  60                    RTS
08835  3A84             
08836  3A84             
08837  3A84             AUDIO.DIGIPLAY$ 
08838  3A84             
08839  3A84                        ;JSR AUDIO.DIGIOFF$
08840  3A84  EA                    NOP
08841  3A85  EA                    NOP
08842  3A86  EA                    NOP
08843  3A87             
08844  3A87  86 31                 STX AUDIO.DIGISOUNDPTR+1
08845  3A89  84 30                 STY AUDIO.DIGISOUNDPTR
08846  3A8B             
08847  3A8B  A0 00                 LDY #$00
08848  3A8D  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08849  3A8F  85 32                 STA AUDIO.DIGIPOINT
08850  3A91  C8                    INY
08851  3A92  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08852  3A94  85 33                 STA AUDIO.DIGIPOINT+1
08853  3A96  C8                    INY
08854  3A97  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08855  3A99  8D CD 3A              STA AUDIO.DIGISTOPLO+1
08856  3A9C  C8                    INY
08857  3A9D  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08858  3A9F  8D C7 3A              STA AUDIO.DIGISTOPHI+1
08859  3AA2  C8                    INY
08860  3AA3  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08861  3AA5  8D 04 DD              STA $DD04
08862  3AA8  C8                    INY
08863  3AA9  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08864  3AAB  8D 05 DD              STA $DD05
08865  3AAE             
08866  3AAE             
08868  3AAE  A9 00                 LDA #$00
08869  3AB0  8D E4 3A              STA AUDIO.DIGI_NIB+1
08871  3AB3             
08872  3AB3  20 43 3A              JSR AUDIO.DIGION$
08873  3AB6             
08874  3AB6  60                    RTS
08875  3AB7             
08876  3AB7             ;-------------------------------------------
08877  3AB7             ;ALIGN $100
08878  3AB7             
08879  3AB7             AUDIO._DIGION 
08880  3AB7  8D 06 3B              STA AUDIO._DIGIABUFFER
08881  3ABA  8C 08 3B              STY AUDIO._DIGIYBUFFER
08882  3ABD             
08883  3ABD                        ;JSR AUDIO.CHECKCALLBACK
08884  3ABD             
08889  3ABD  A9 10                 LDA #$10
08891  3ABF             
08892  3ABF  09 00      AUDIO.DIGID418NMI ORA #$00
08893  3AC1  8D 18 D4              STA AUDIO.SIDADDRESS+$18          ; VOLUME REG
08894  3AC4             
08898  3AC4             
08902  3AC4             
08903  3AC4  A5 33                 LDA AUDIO.DIGIPOINT+1
08904  3AC6  C9 12      AUDIO.DIGISTOPHI CMP #$12                ;ENDHIGH
08905  3AC8  D0 17                 BNE AUDIO.DIGI_SK1
08906  3ACA             
08907  3ACA  A5 32                 LDA AUDIO.DIGIPOINT
08908  3ACC  C9 00      AUDIO.DIGISTOPLO CMP #$00                ;ENDLOW
08909  3ACE  D0 11                 BNE AUDIO.DIGI_SK1
08910  3AD0             
08914  3AD0  A9 00                 LDA #$00
08916  3AD2             
08917  3AD2  8D C0 3A              STA AUDIO.DIGID418NMI+1
08918  3AD5             
08919  3AD5  A9 01                 LDA #$01
08920  3AD7  8D D9 39              STA AUDIO.DIGIFINISHED$
08921  3ADA             
08922  3ADA                        ;JSR AUDIO.DIGIOFF$
08923  3ADA  EA                    NOP
08924  3ADB  EA                    NOP
08925  3ADC  EA                    NOP
08926  3ADD             
08927  3ADD  AD 06 3B              LDA AUDIO._DIGIABUFFER
08928  3AE0             
08929  3AE0  40                    RTI
08930  3AE1             
08931  3AE1             AUDIO.DIGI_SK1 
08932  3AE1             
08933  3AE1  A0 00                 LDY #$00
08934  3AE3             
08936  3AE3             AUDIO.DIGI_NIB 
08937  3AE3  A9 00                 LDA #$00
08938  3AE5  29 01                 AND #$01
08939  3AE7  D0 09                 BNE AUDIO.DIGI_S1
08941  3AE9             
08942  3AE9  B1 32                 LDA (AUDIO.DIGIPOINT),Y
08943  3AEB             
08946  3AEB  4A                    LSR A
08947  3AEC  4A                    LSR A
08948  3AED  4A                    LSR A
08949  3AEE  4A                    LSR A
08953  3AEF             
08954  3AEF  4C FC 3A              JMP AUDIO.DIGI_S2
08955  3AF2             AUDIO.DIGI_S1 
08956  3AF2  B1 32                 LDA (AUDIO.DIGIPOINT),Y
08963  3AF4  29 0F                 AND #$0F
08966  3AF6             
08967  3AF6  E6 32                 INC AUDIO.DIGIPOINT
08968  3AF8  D0 02                 BNE @SK
08969  3AFA  E6 33                 INC AUDIO.DIGIPOINT+1
08970  3AFC             @SK
08971  3AFC             AUDIO.DIGI_S2 
08972  3AFC  8D C0 3A              STA AUDIO.DIGID418NMI+1
08973  3AFF             
08975  3AFF  EE E4 3A              INC AUDIO.DIGI_NIB+1
08977  3B02             
08978  3B02  AD 0D DD              LDA $DD0D ; ACK
08979  3B05             
08980  3B05             AUDIO._DIGIABUFFER=*+1 
08981  3B05  A9 00                 LDA #$00
08982  3B07             AUDIO._DIGIYBUFFER=*+1 
08983  3B07  A0 00                 LDY #$00
08984  3B09             
08985  3B09             AUDIO._DIGIOFF 
08986  3B09  40                    RTI
08987  3B0A             
08988  3B0A             
08989  3B0A             
08990  3B0A             
08991  3B0A             
08992  3B0A             JOYSTICK.PORT1$ = #01
08993  3B0A             JOYSTICK.PORT2$ = #02
08994  3B0A             
08995  3B0A             JOYSTICK.GETSTATE.PORT$ = $7A ; 1 BYTE
08996  3B0A             JOYSTICK.GETSTATE.FIRE$ = $7B ; 1 BYTE
08997  3B0A             JOYSTICK.GETSTATE.DELTAX$ = $7C ; 1 BYTE
08998  3B0A             JOYSTICK.GETSTATE.DELTAY$ = $7D ; 1 BYTE
08999  3B0A             JOYSTICK.GETSTATE$ 
09000  3B0A                        ;HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:JOYSTICK_INPUT_HANDLING
09001  3B0A             
09002  3B0A  A5 7A                 LDA JOYSTICK.GETSTATE.PORT$
09003  3B0C  C9 01                 CMP #JOYSTICK.PORT1$
09004  3B0E  F0 03                 BEQ @PORT1
09005  3B10  4C 19 3B              JMP @PORT2
09006  3B13             @PORT1
09007  3B13  AD 01 DC              LDA $DC01 ; PORT 1
09008  3B16  4C 1C 3B              JMP @GETSTATE
09009  3B19             @PORT2
09010  3B19  AD 00 DC              LDA $DC00 ; PORT 2
09011  3B1C             @GETSTATE
09012  3B1C             
09013  3B1C  A0 00      DJRRB      LDY #0        ; THIS ROUTINE READS AND DECODES THE
09014  3B1E  A2 00                 LDX #0        ; JOYSTICK/FIREBUTTON INPUT DATA IN
09015  3B20  4A                    LSR           ; THE ACCUMULATOR. THIS LEAST SIGNIFICANT
09016  3B21  B0 01                 BCS DJR0      ; 5 BITS CONTAIN THE SWITCH CLOSURE
09017  3B23  88                    DEY           ; INFORMATION. IF A SWITCH IS CLOSED THEN IT
09018  3B24  4A         DJR0       LSR           ; PRODUCES A ZERO BIT. IF A SWITCH IS OPEN THEN
09019  3B25  B0 01                 BCS DJR1      ; IT PRODUCES A ONE BIT. THE JOYSTICK DIR-
09020  3B27  C8                    INY           ; ECTIONS ARE RIGHT, LEFT, FORWARD, BACKWARD
09021  3B28  4A         DJR1       LSR           ; BIT3=RIGHT, BIT2=LEFT, BIT1=BACKWARD,
09022  3B29  B0 01                 BCS DJR2      ; BIT0=FORWARD AND BIT4=FIRE BUTTON.
09023  3B2B  CA                    DEX           ; AT RTS TIME DX AND DY CONTAIN 2'S COMPLIMENT
09024  3B2C  4A         DJR2       LSR           ; DIRECTION NUMBERS I.E. $FF=-1, $00=0, $01=1.
09025  3B2D  B0 01                 BCS DJR3      ; DX=1 (MOVE RIGHT), DX=-1 (MOVE LEFT),
09026  3B2F  E8                    INX           ; DX=0 (NO X CHANGE). DY=-1 (MOVE UP SCREEN),
09027  3B30  4A         DJR3       LSR           ; DY=0 (MOVE DOWN SCREEN), DY=0 (NO Y CHANGE).
09028  3B31  86 7C                 STX JOYSTICK.GETSTATE.DELTAX$        ; THE FORWARD JOYSTICK POSITION CORRESPONDS
09029  3B33  84 7D                 STY JOYSTICK.GETSTATE.DELTAY$        ; TO MOVE UP THE SCREEN AND THE BACKWARD
09030  3B35                        ; POSITION TO MOVE DOWN SCREEN.
09031  3B35  A9 00                 LDA #$00
09032  3B37  90 03                 BCC @FIRE
09033  3B39  4C 3E 3B              JMP @SETFIRE
09034  3B3C             @FIRE      ; AT RTS TIME THE CARRY FLAG CONTAINS THE FIRE
09035  3B3C  A9 01                 LDA #$01      ; BUTTON STATE. IF C=1 THEN BUTTON NOT PRESSED.
09036  3B3E             @SETFIRE   ; IF C=0 THEN PRESSED.
09037  3B3E  85 7B                 STA JOYSTICK.GETSTATE.FIRE$
09038  3B40             
09039  3B40  60                    RTS
09040  3B41             
09041  3B41             
09042  3B41             
09043  3B41             
09044  3B41             
09045  3B41             ;ALIGN $100
09046  3B41             
09047  3B41             ; HTTP://WWW.UNUSEDINO.DE/EC64/TECHNICAL/MISC/C64/ROMLISTING.HTML
09048  3B41  00         DISK.ERROR$ BYTE $00
09049  3B42             ;DISKERR.RUN_STOP$                = $00 ; THIS COULD HAPPEN IF THE USER PRESSES RUN/STOP DURING LOAD
09050  3B42             ;DISKERR.TOO_MANY_FILES$          = $01
09051  3B42             ;DISKERR.FILE_OPEN$               = $02
09052  3B42             ;DISKERR.FILE_NOT_OPEN$           = $03
09053  3B42             ;DISKERR.FILE_NOT_FOUND$          = $04
09054  3B42             ;DISKERR.DEVICE_NOT_PRESENT$      = $05
09055  3B42             ;DISKERR.NOT_INPUT_FILE$          = $06
09056  3B42             ;DISKERR.NOT_OUTPUT_FILE$         = $07
09057  3B42             ;DISKERR.MISSING_FILE_NAME$       = $08
09058  3B42             ;DISKERR.ILLEGAL_DEVICE_NUMBER$   = $09
09059  3B42             ;DISKERR.OUT_OF_DATA$             = $0D
09060  3B42             ;DISKERR.OUT_OF_MEMORY$           = $10
09061  3B42             ;DISKERR.STRING_TOO_LONG$         = $17
09062  3B42             ;DISKERR.FILE_DATA$               = $18
09063  3B42             ;DISKERR.VERIFY$                  = $1C
09064  3B42             ;DISKERR.LOAD$                    = $1D
09065  3B42             ;DISKERR.BREAK$                   = $1E
09066  3B42             DISKERROR.OK$ = 00
09067  3B42             DISKERROR.FILE_SCRATCHED$ = 01
09068  3B42             DISKERROR.FILE_OPEN$ = 02
09069  3B42             ;DISKERROR.FILE_NOT_OPEN$           = 03
09070  3B42             ;DISKERROR.FILE_NOT_FOUND$          = 04
09071  3B42             DISKERROR.DEVICE_NOT_PRESENT$ = 05
09072  3B42             DISKERROR.NOT_INPUT_FILE$ = 06
09073  3B42             DISKERROR.NOT_OUTPUT_FILE$ = 07
09074  3B42             DISKERROR.MISSING_FILE_NAME$ = 08
09075  3B42             DISKERROR.ILLEGAL_DEVICE_NUMBER$ = 09
09076  3B42             DISKERROR.OUT_OF_DATA$ = 13
09077  3B42             DISKERROR.OUT_OF_MEMORY$ = 16
09078  3B42             DISKERROR.BLOCK_HEADER_NOT_FOUND$ = 20
09079  3B42             DISKERROR.SYNC_CHAR_NOT_FOUND$ = 21
09080  3B42             DISKERROR.DATA_BLOCK_NOT_PRESENT$ = 22
09081  3B42             DISKERROR.CHECKSUM_ERROR$ = 23
09082  3B42             DISKERROR.BYTE_DECODE_ERROR$ = 24
09083  3B42             DISKERROR.WRITE_VERIFY_ERROR$ = 25
09084  3B42             DISKERROR.WRITE_PROTECT_ON$ = 26
09085  3B42             DISKERROR.CHECKSUM_ERROR_HEADER$ = 27
09086  3B42             DISKERROR.DATA_EXTENDS_BLOCK$ = 28
09087  3B42             DISKERROR.DISK_ID_MISMATCH$ = 29
09088  3B42             DISKERROR.GENERAL_SYNTAX_ERROR$ = 30
09089  3B42             DISKERROR.INVALID_COMMAND$ = 31
09090  3B42             DISKERROR.LONG_LINE$ = 32
09091  3B42             DISKERROR.INVALID_FILENAME$ = 33
09092  3B42             DISKERROR.NO_FILE_GIVEN$ = 34
09093  3B42             DISKERROR.CMD_FILE_NOT_FOUND$ = 39
09094  3B42             DISKERROR.RCD_NOT_PRESENT$ = 50
09095  3B42             DISKERROR.OVERFLOW_IN_RCD$ = 51
09096  3B42             DISKERROR.FILE_TOO_LARGE$ = 52
09097  3B42             DISKERROR.FILE_OPEN_FOR_WRITE$ = 60
09098  3B42             DISKERROR.FILE_NOT_OPEN$ = 61
09099  3B42             DISKERROR.FILE_NOT_FOUND$ = 62
09100  3B42             DISKERROR.FILE_EXISTS$ = 63
09101  3B42             DISKERROR.FILE_TYPE_MISMATCH$ = 64
09102  3B42             DISKERROR.NO_BLOCK$ = 65
09103  3B42             DISKERROR.ILLEGAL_TRACK_SECTOR$ = 66
09104  3B42             DISKERROR.ILLEGAL_SYS_TRACK_SECTOR$ = 67
09105  3B42             DISKERROR.NO_CHANNELS$ = 70
09106  3B42             DISKERROR.DIRECTORY_ERROR$ = 71
09107  3B42             DISKERROR.DISK_DIRECTORY_FULL$ = 72
09108  3B42             DISKERROR.POWER_UP$ = 73
09109  3B42             DISKERROR.DRIVE_NOT_READY$ = 74
09110  3B42             
09111  3B42             
09112  3B42             
09113  3B42             DISK.SETNAM.FILENAME$ = $20 ; 2 BYTES
09114  3B42             DISK.SETNAM 
09115  3B42             
09116  3B42  A9 00                 LDA #$00
09117  3B44  20 90 FF              JSR $FF90 ; DISABLE KERNAL MESSAGES (SEARCHING/LOADING)
09118  3B47             
09119  3B47                        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
09120  3B47                        ;LDA #$02      ; FILENUMBER 2
09121  3B47                        ;JSR $FFC3     ; CALL CLOSE
09122  3B47             
09123  3B47  A9 00                 LDA #DISKERROR.OK$
09124  3B49  8D 41 3B              STA DISK.ERROR$
09125  3B4C             
09126  3B4C  A5 20                 LDA DISK.SETNAM.FILENAME$
09127  3B4E  85 7A                 STA STRING.GETLENGTH.ADDRESS$
09128  3B50  A5 21                 LDA DISK.SETNAM.FILENAME$+1
09129  3B52  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
09130  3B54  20 72 2B              JSR STRING.GETLENGTH$
09131  3B57             
09132  3B57  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
09133  3B59  A6 20                 LDX DISK.SETNAM.FILENAME$
09134  3B5B  A4 21                 LDY DISK.SETNAM.FILENAME$+1
09135  3B5D  20 BD FF              JSR $FFBD     ; CALL SETNAM
09136  3B60  A9 01                 LDA #$01
09137  3B62  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
09138  3B64  D0 02                 BNE @SKIP
09139  3B66  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
09140  3B68             @SKIP      
09141  3B68                        ;LDY #$01      ; NOT $01 MEANS: LOAD TO ADDRESS STORED IN FILE
09142  3B68  A0 00                 LDY #$00        ; SECONDARY ADDRESS OVERRIDDEN BELOW IN CALL TO $FFD5
09143  3B6A  20 BA FF              JSR $FFBA     ; CALL SETLFS
09144  3B6D             
09145  3B6D  60                    RTS
09146  3B6E             
09147  3B6E             DISK.READFILE.FILENAME$ = $20 ; 2 BYTES
09148  3B6E             DISK.READFILE.ADDRESS$ = $22 ; 2 BYTES
09149  3B6E             DISK.READFILE.LENGTH$ = $24 ; 2 BYTES
09150  3B6E             DISK.READFILE$ 
09151  3B6E             
09152  3B6E  A9 00                 LDA #$00
09153  3B70  85 24                 STA DISK.READFILE.LENGTH$
09154  3B72  85 25                 STA DISK.READFILE.LENGTH$+1
09155  3B74             
09156  3B74  20 42 3B              JSR DISK.SETNAM
09157  3B77             
09158  3B77  A9 00                 LDA #$00      ; $00 MEANS: LOAD TO MEMORY (NOT VERIFY)
09159  3B79  A6 22                 LDX DISK.READFILE.ADDRESS$ ; MEMORY ADDRESS TO LOAD
09160  3B7B  A4 23                 LDY DISK.READFILE.ADDRESS$+1
09161  3B7D  20 D5 FF              JSR $FFD5     ; CALL LOAD
09162  3B80  90 07                 BCC @OK    ; IF CARRY SET, A LOAD ERROR HAS HAPPENED
09163  3B82             @ERROR
09164  3B82                        ; ACCUMULATOR CONTAINS BASIC ERROR CODE
09165  3B82             
09166  3B82                        ; MOST LIKELY ERRORS:
09167  3B82                        ; A = $05 (DEVICE NOT PRESENT)
09168  3B82                        ; A = $04 (FILE NOT FOUND)
09169  3B82                        ; A = $1D (LOAD ERROR)
09170  3B82                        ; A = $00 (BREAK, RUN/STOP HAS BEEN PRESSED DURING LOADING)
09171  3B82             
09172  3B82                        ;... ERROR HANDLING ...
09173  3B82             
09174  3B82                        ;STA DISK.ERROR$
09175  3B82                        ;RTS
09176  3B82             
09177  3B82                        ; FOR SOME REASON THE MACHINE HAS ENCOUNTERED A BREAK.
09178  3B82                        ; TRY LOADING THE FILE AGAIN.
09179  3B82  C9 00                 CMP #$00
09180  3B84  F0 E8                 BEQ DISK.READFILE$
09181  3B86             
09182  3B86  4C 2F 3C              JMP DISK.READERRORCHANNEL
09183  3B89             
09184  3B89             @OK
09185  3B89             
09186  3B89                        ;  X/Y = ADDRESS OF LAST BYTE LOADED/VERIFIED (IF CARRY = 0)
09187  3B89  86 80                 STX MATH.SUBTRACT16.MENUEND$
09188  3B8B                        ;STY MATH.SUBTRACT32.MENUEND$+1
09189  3B8B  84 81                 STY MATH.SUBTRACT16.MENUEND$+1
09190  3B8D  A5 22                 LDA DISK.READFILE.ADDRESS$
09191  3B8F  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
09192  3B91  A5 23                 LDA DISK.READFILE.ADDRESS$+1
09193  3B93  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
09194  3B95  20 96 28              JSR MATH.SUBTRACT16$
09195  3B98  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
09196  3B9A  85 24                 STA DISK.READFILE.LENGTH$
09197  3B9C  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
09198  3B9E  85 25                 STA DISK.READFILE.LENGTH$+1
09199  3BA0             
09200  3BA0  60                    RTS
09201  3BA1             
09202  3BA1             DISK.READFILE.FILENAME$ = $20 ; 2 BYTES
09203  3BA1             DISK.READFILE.ADDRESS$ = $22 ; 2 BYTES
09204  3BA1             DISK.READFILE.LENGTH$ = $24 ; 2 BYTES
09205  3BA1             DISK.READFILE 
09206  3BA1             
09207  3BA1                        ; DEFAULTS
09208  3BA1             
09209  3BA1                        ;JSR CONSOLE.RESETBUFADDRESS
09210  3BA1             
09211  3BA1                        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
09212  3BA1  A9 02                 LDA #$02      ; FILENUMBER 2
09213  3BA3  20 C3 FF              JSR $FFC3     ; CALL CLOSE
09214  3BA6             
09215  3BA6  A9 00                 LDA #DISKERROR.OK$
09216  3BA8  8D 41 3B              STA DISK.ERROR$
09217  3BAB             
09218  3BAB  A9 00                 LDA #$00
09219  3BAD  85 24                 STA DISK.READFILE.LENGTH$
09220  3BAF  85 25                 STA DISK.READFILE.LENGTH$+1
09221  3BB1             
09222  3BB1  A5 20                 LDA DISK.READFILE.FILENAME$
09223  3BB3  85 7A                 STA STRING.GETLENGTH.ADDRESS$
09224  3BB5  A5 21                 LDA DISK.READFILE.FILENAME$+1
09225  3BB7  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
09226  3BB9  20 72 2B              JSR STRING.GETLENGTH$
09227  3BBC             
09228  3BBC  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
09229  3BBE  A6 20                 LDX DISK.READFILE.FILENAME$
09230  3BC0  A4 21                 LDY DISK.READFILE.FILENAME$+1
09231  3BC2  20 BD FF              JSR $FFBD     ; CALL SETNAM
09232  3BC5             
09233  3BC5  A9 02                 LDA #$02      ; FILE NUMBER 2
09234  3BC7  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
09235  3BC9  D0 02                 BNE @SKIP
09236  3BCB  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
09237  3BCD             @SKIP      
09238  3BCD  A0 02                 LDY #$02      ; SECONDARY ADDRESS 2
09239  3BCF  A0 00                 LDY #$00
09240  3BD1  20 BA FF              JSR $FFBA     ; CALL SETLFS
09241  3BD4             
09242  3BD4  20 C0 FF              JSR $FFC0     ; CALL OPEN
09243  3BD7                        ;BCS ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
09244  3BD7  90 06                 BCC @OK
09245  3BD9                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
09246  3BD9             
09247  3BD9                        ; MOST LIKELY ERRORS:
09248  3BD9                        ; A = $05 (DEVICE NOT PRESENT)
09249  3BD9  8D 41 3B              STA DISK.ERROR$
09250  3BDC                        ;NOP
09251  3BDC                        ;NOP
09252  3BDC                        ;NOP
09253  3BDC             
09254  3BDC                        ;... ERROR HANDLING FOR OPEN ERRORS ...
09255  3BDC  4C 24 3C              JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
09256  3BDF                        ;NOP
09257  3BDF                        ;NOP
09258  3BDF                        ;NOP
09259  3BDF             @OK
09260  3BDF             
09261  3BDF                        ;; CHECK DRIVE ERROR CHANNEL HERE TO TEST FOR
09262  3BDF                        ;; FILE NOT FOUND ERROR ETC.
09263  3BDF                        ;JSR DISK.READERRORCHANNEL
09264  3BDF                        ;LDA #DISKERROR.OK$
09265  3BDF                        ;CMP DISK.ERROR$
09266  3BDF                        ;BEQ @OK2
09267  3BDF                        ;JMP @CLOSE
09268  3BDF             
09269  3BDF             @OK2
09270  3BDF  A2 02                 LDX #$02      ; FILENUMBER 2
09271  3BE1  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 2 NOW USED AS INPUT)
09272  3BE4             
09273  3BE4  A5 22                 LDA DISK.READFILE.ADDRESS$
09274  3BE6  85 AE                 STA $AE
09275  3BE8  A5 23                 LDA DISK.READFILE.ADDRESS$+1
09276  3BEA  85 AF                 STA $AF
09277  3BEC             
09278  3BEC  A0 00                 LDY #$00
09279  3BEE             @LOOP
09280  3BEE  20 B7 FF              JSR $FFB7     ; CALL READST (READ STATUS BYTE)
09281  3BF1                        ;BNE @EOF      ; EITHER EOF OR READ ERROR
09282  3BF1                        ;BEQ @CONT
09283  3BF1  D0 03                 BNE @NO_CONT
09284  3BF3  4C 0B 3C              JMP @CONT
09285  3BF6             @NO_CONT
09286  3BF6  4C FE 3B              JMP @EOF
09287  3BF9             
09288  3BF9  EA                    NOP
09289  3BFA  EA                    NOP
09290  3BFB  EA                    NOP
09291  3BFC  EA                    NOP
09292  3BFD  EA                    NOP
09293  3BFE             
09294  3BFE             @EOF
09295  3BFE  29 40                 AND #$40      ; END OF FILE?
09296  3C00                        ;BEQ READERROR
09297  3C00  D0 03                 BNE @READERROR
09298  3C02  4C 24 3C              JMP @CLOSE
09299  3C05                        
09300  3C05             @READERROR 
09301  3C05                        ; FOR FURTHER INFORMATION, THE DRIVE ERROR CHANNEL HAS TO BE READ
09302  3C05  20 2F 3C              JSR DISK.READERRORCHANNEL
09303  3C08             
09304  3C08  4C 24 3C              JMP @CLOSE
09305  3C0B                        
09306  3C0B             @CONT
09307  3C0B                        ;INC $D020
09308  3C0B  20 CF FF              JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
09309  3C0E  91 AE                 STA ($AE),Y   ; WRITE BYTE TO MEMORY
09310  3C10             
09311  3C10                        ; INCREMENT THE LENGTH
09312  3C10  A2 24                 LDX #<DISK.READFILE.LENGTH$
09313  3C12  86 86                 STX MATH.INC16.ADDRESS$
09314  3C14  A2 00                 LDX #>DISK.READFILE.LENGTH$
09315  3C16  86 87                 STX MATH.INC16.ADDRESS$+1
09316  3C18  20 3C 28              JSR MATH.INC16$
09317  3C1B             
09318  3C1B  E6 AE                 INC $AE
09319  3C1D  D0 02                 BNE @SKIP2
09320  3C1F  E6 AF                 INC $AF
09321  3C21             @SKIP2     
09322  3C21  4C EE 3B              JMP @LOOP     ; NEXT BYTE
09323  3C24             
09324  3C24             @CLOSE
09325  3C24  A9 02                 LDA #$02      ; FILENUMBER 2
09326  3C26  20 C3 FF              JSR $FFC3     ; CALL CLOSE
09327  3C29             
09328  3C29  20 CC FF              JSR $FFCC     ; CALL CLRCHN
09329  3C2C  60                    RTS
09330  3C2D             
09331  3C2D  00 00      DISK.READERRORCHANNEL.ERRORDEC WORD $0000
09332  3C2F             DISK.READERRORCHANNEL 
09333  3C2F             ; HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:READING_THE_ERROR_CHANNEL_OF_A_DISK_DRIVE
09334  3C2F  A9 00                 LDA #$00      ; NO FILENAME
09335  3C31  A2 00                 LDX #$00
09336  3C33  A0 00                 LDY #$00
09337  3C35  20 BD FF              JSR $FFBD     ; CALL SETNAM
09338  3C38             
09339  3C38  A9 0F                 LDA #$0F      ; FILE NUMBER 15
09340  3C3A  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
09341  3C3C  D0 02                 BNE @SKIP
09342  3C3E  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
09343  3C40             @SKIP      
09344  3C40  A0 0F                 LDY #$0F      ; SECONDARY ADDRESS 15 (ERROR CHANNEL)
09345  3C42  20 BA FF              JSR $FFBA     ; CALL SETLFS
09346  3C45             
09347  3C45  20 C0 FF              JSR $FFC0     ; CALL OPEN
09348  3C48                        ;BCS @ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
09349  3C48  90 03                 BCC @OK
09350  3C4A  4C 7C 3C              JMP @ERROR
09351  3C4D             @OK
09352  3C4D             
09353  3C4D  A2 0F                 LDX #$0F      ; FILENUMBER 15
09354  3C4F  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 15 NOW USED AS INPUT)
09355  3C52             
09356  3C52                        ; SET THE LENGTH TO BE CONVERTED FROM PETSCII TO INTEGER TO BE 2 CHARACTERS
09357  3C52  A9 02                 LDA #$02
09358  3C54  85 2A                 STA CONVERT.DEC2HEX8.LEN
09359  3C56             
09360  3C56                        ; READ THE FIRST TWO CHARACTER FROM THE DRIVE (THIS WILL BE THE ERROR NUMBER)
09361  3C56  A0 00                 LDY #$00
09362  3C58             @LOOP
09363  3C58  20 B7 FF              JSR $FFB7     ; CALL READST (READ STATUS BYTE)
09364  3C5B                        ;BNE @EOF      ; EITHER EOF OR READ ERROR
09365  3C5B  F0 03                 BEQ @NOTEOF
09366  3C5D  4C 73 3C              JMP @EOF
09367  3C60             @NOTEOF
09368  3C60  20 CF FF              JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
09369  3C63  99 E4 00              STA CONVERT.DEC2HEX8.VALUE,Y
09370  3C66  C8                    INY
09371  3C67  C4 2A                 CPY CONVERT.DEC2HEX8.LEN
09372  3C69  D0 ED                 BNE @LOOP
09373  3C6B             
09374  3C6B                        ; CONVERT THE ERROR NUMBER CHARACTERS TO INTEGER
09375  3C6B  20 65 1C              JSR CONVERT.DEC2HEX8
09376  3C6E  A5 E0                 LDA CONVERT.DEC2HEX8.RESULT
09377  3C70  8D 41 3B              STA DISK.ERROR$
09378  3C73             
09379  3C73             @EOF
09380  3C73             @CLOSE
09381  3C73  A9 0F                 LDA #$0F      ; FILENUMBER 15
09382  3C75  20 C3 FF              JSR $FFC3     ; CALL CLOSE
09383  3C78             
09384  3C78  20 CC FF              JSR $FFCC     ; CALL CLRCHN
09385  3C7B  60                    RTS
09386  3C7C             @ERROR
09387  3C7C                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
09388  3C7C             
09389  3C7C                        ; MOST LIKELY ERROR:
09390  3C7C                        ; A = $05 (DEVICE NOT PRESENT)
09391  3C7C             
09392  3C7C                        ;... ERROR HANDLING FOR OPEN ERRORS ...
09393  3C7C  4C 73 3C              JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
09394  3C7F             
09395  3C7F  24 3A FF   DISK.GETDISKINFO.FILENAME TEXT '$:', CONSOLE.NULL$
09396  3C82  FF FF FF   DISK.GETDISKINFO.LABEL$ TEXT $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, CONSOLE.NULL$
09397  3C93             ;DISK.GETDISKINFO.ID$ TEXT $FF, $FF, CONSOLE.NULL$
09398  3C93             ;DISK.GETDISKINFO.TYPE$   BYTE $00
09399  3C93  00 00      DISK.GETDISKINFO.BLOCKSFREE$ WORD $0000
09400  3C95             DISK.GETDISKINFO$ 
09401  3C95             
09402  3C95  20 EF 19              JSR CONSOLE.RESETBUFADDRESS
09403  3C98             
09404  3C98                        ; LOAD THE FILE INTO MEMORY
09405  3C98  A9 7F                 LDA #<DISK.GETDISKINFO.FILENAME
09406  3C9A  85 20                 STA DISK.READFILE.FILENAME$
09407  3C9C  A9 3C                 LDA #>DISK.GETDISKINFO.FILENAME
09408  3C9E  85 21                 STA DISK.READFILE.FILENAME$+1
09409  3CA0  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
09410  3CA2  85 22                 STA DISK.READFILE.ADDRESS$
09411  3CA4  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
09412  3CA6  85 23                 STA DISK.READFILE.ADDRESS$+1
09413  3CA8  20 A1 3B              JSR DISK.READFILE
09414  3CAB             
09415  3CAB                        ; CLEAR THE LABEL
09416  3CAB  A9 82                 LDA #<DISK.GETDISKINFO.LABEL$
09417  3CAD  85 73                 STA MEMORY.FILL.ADDRESS$
09418  3CAF  A9 3C                 LDA #>DISK.GETDISKINFO.LABEL$
09419  3CB1  85 74                 STA MEMORY.FILL.ADDRESS$+1
09420  3CB3  A9 FF                 LDA #$FF
09421  3CB5  85 75                 STA MEMORY.FILL.VALUE$
09422  3CB7  A9 10                 LDA #16
09423  3CB9  85 76                 STA MEMORY.FILL.LENGTH$
09424  3CBB  20 03 10              JSR MEMORY.FILL$
09425  3CBE             
09426  3CBE                        ; FIGURE OUT THE OFFSET OF THE LABEL
09427  3CBE  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
09428  3CC0  85 80                 STA MATH.ADD16.ADDEND1$
09429  3CC2  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
09430  3CC4  85 81                 STA MATH.ADD16.ADDEND1$+1
09431  3CC6  A9 08                 LDA #8
09432  3CC8  85 82                 STA MATH.ADD16.ADDEND2$
09433  3CCA  A9 00                 LDA #0
09434  3CCC  85 83                 STA MATH.ADD16.ADDEND2$+1
09435  3CCE  20 00 28              JSR MATH.ADD16$
09436  3CD1             
09437  3CD1                        ; DISK LABEL TEXT IS FROM 8 THRU 23
09438  3CD1  A5 84                 LDA MATH.ADD16.SUM$
09439  3CD3  85 73                 STA MEMORY.COPY.SOURCE$
09440  3CD5  A5 85                 LDA MATH.ADD16.SUM$+1
09441  3CD7  85 74                 STA MEMORY.COPY.SOURCE$+1
09442  3CD9  A9 82                 LDA #<DISK.GETDISKINFO.LABEL$
09443  3CDB  85 75                 STA MEMORY.COPY.DESTINATION$
09444  3CDD  A9 3C                 LDA #>DISK.GETDISKINFO.LABEL$
09445  3CDF  85 76                 STA MEMORY.COPY.DESTINATION$+1
09446  3CE1  A9 10                 LDA #16
09447  3CE3  85 77                 STA MEMORY.COPY.LENGTH$
09448  3CE5  20 8A 0F              JSR MEMORY.COPY$
09449  3CE8             
09450  3CE8                        ; CLEAR BLOCKS FREE
09451  3CE8  A9 00                 LDA #$00
09452  3CEA  8D 93 3C              STA DISK.GETDISKINFO.BLOCKSFREE$
09453  3CED  A9 00                 LDA #$00
09454  3CEF  8D 94 3C              STA DISK.GETDISKINFO.BLOCKSFREE$+1
09455  3CF2             
09456  3CF2                        ; FIGURE OUT THE OFFSET OF THE BLOCKS FREE
09457  3CF2  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
09458  3CF4  85 80                 STA MATH.ADD16.ADDEND1$
09459  3CF6  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
09460  3CF8  85 81                 STA MATH.ADD16.ADDEND1$+1
09461  3CFA  A9 22                 LDA #34
09462  3CFC  85 82                 STA MATH.ADD16.ADDEND2$
09463  3CFE  A9 00                 LDA #0
09464  3D00  85 83                 STA MATH.ADD16.ADDEND2$+1
09465  3D02  20 00 28              JSR MATH.ADD16$
09466  3D05             
09467  3D05                        ; DISK BLOCKS FREE HEXADECIMAL IS FROM 34 THRU 35
09468  3D05  A5 84                 LDA MATH.ADD16.SUM$
09469  3D07  85 73                 STA MEMORY.COPY.SOURCE$
09470  3D09  A5 85                 LDA MATH.ADD16.SUM$+1
09471  3D0B  85 74                 STA MEMORY.COPY.SOURCE$+1
09472  3D0D  A9 93                 LDA #<DISK.GETDISKINFO.BLOCKSFREE$
09473  3D0F  85 75                 STA MEMORY.COPY.DESTINATION$
09474  3D11  A9 3C                 LDA #>DISK.GETDISKINFO.BLOCKSFREE$
09475  3D13  85 76                 STA MEMORY.COPY.DESTINATION$+1
09476  3D15  A9 02                 LDA #2
09477  3D17  85 77                 STA MEMORY.COPY.LENGTH$
09478  3D19  20 8A 0F              JSR MEMORY.COPY$
09479  3D1C             
09480  3D1C  60                    RTS
09481  3D1D             
09482  3D1D             ;ALIGN $100
09483  3D1D             
09484  3D1D             DISK.FILEEXISTS.FILENAME$ = $20 ; 2 BYTES
09485  3D1D             DISK.FILEEXISTS.EXISTS$ = $26 ; 1 BYTE
09486  3D1D             DISK.FILEEXISTS$ 
09487  3D1D                        ; FOR REASONS UNCLEAR, AFTER SEARCHING FOR THE FILE USING THE
09488  3D1D                        ; LOAD"$:FILENAME",8 COMMAND, YOU GET A "?DEVICE NOT READY" ERROR
09489  3D1D                        ; WHICH IS ONLY RESOLVED BY USING LOAD"$",8
09490  3D1D                        ; THIS ADDS EXTRA OVERHEAD WHICH USED WITH A 1541 DRIVE
09491  3D1D                        ; NOT SO MUCH WHEN USED WITH A IEC DEVICE
09492  3D1D             
09493  3D1D                        ; FIND THE FILE USING THE LOAD"$:FILENAME",8 COMMAND
09494  3D1D  20 CE 3D              JSR DISK.GETFILEINFO$
09495  3D20  20 4D 3D              JSR DISK.GETFILEINFOCLOSE$
09496  3D23             
09497  3D23                        ; CHECK FOR ERRORS
09498  3D23  AD 41 3B              LDA DISK.ERROR$
09499  3D26  C9 00                 CMP #DISKERROR.OK$
09500  3D28  F0 01                 BEQ @FILEEXISTOK
09501  3D2A  60                    RTS
09502  3D2B             @FILEEXISTOK 
09503  3D2B             
09504  3D2B                        ; IF TYPE != UNKNOWN THEN WE HAVE FOUND THE FILE
09505  3D2B  AD C8 3D              LDA DISK.GETFILEINFO.TYPE$
09506  3D2E  F0 02                 BEQ @DONE
09507  3D30  A9 01                 LDA #$01
09508  3D32             @DONE
09509  3D32  85 26                 STA DISK.FILEEXISTS.EXISTS$
09510  3D34             
09511  3D34                        ; THE FOLLOWING CODE IS THE FIX FOR THE "?DEVICE NOT READY" ERROR
09512  3D34  A9 24                 LDA #'$'
09513  3D36  8D AD 3D              STA DISK.GETFILEINFO.FILENAME
09514  3D39  20 3C 3E              JSR DISK.GETDISKINFO.RESET
09515  3D3C                        
09516  3D3C             @LOOP
09517  3D3C  AD C8 3D              LDA DISK.GETFILEINFO.TYPE$
09518  3D3F  F0 06                 BEQ @DONE2
09519  3D41  20 7D 3E              JSR DISK.GETNEXTFILEINFO$
09520  3D44  4C 3C 3D              JMP @LOOP
09521  3D47             
09522  3D47             @DONE2
09523  3D47  20 4D 3D              JSR DISK.GETFILEINFOCLOSE$
09524  3D4A             
09525  3D4A  A5 26                 LDA DISK.FILEEXISTS.EXISTS$
09526  3D4C             
09527  3D4C  60                    RTS
09528  3D4D             
09529  3D4D             ;DISK.FILEEXISTS.FILENAME$      = $20 ; 2 BYTES
09530  3D4D             ;DISK.FILEEXISTS.EXISTS$        = $26 ; 1 BYTE
09531  3D4D             ;DISK.FILEEXISTS$
09532  3D4D             ;        LDA #$00
09533  3D4D             ;        STA DISK.FILEEXISTS.EXISTS$
09534  3D4D             
09535  3D4D             ;        LDA #'$'
09536  3D4D             ;        STA DISK.GETFILEINFO.FILENAME
09537  3D4D             ;        JSR DISK.GETDISKINFO.RESET
09538  3D4D             ;
09539  3D4D             ;@LOOP
09540  3D4D             ;        LDA DISK.GETFILEINFO.FILENAME$
09541  3D4D             ;        STA STRING.ISEQUAL.ADDRESS1$
09542  3D4D             ;        LDA DISK.GETFILEINFO.FILENAME$+1
09543  3D4D             ;        STA STRING.ISEQUAL.ADDRESS1$+1
09544  3D4D             ;        LDA #<DISK.GETFILEINFO.NAME$
09545  3D4D             ;        STA STRING.ISEQUAL.ADDRESS2$
09546  3D4D             ;        LDA #>DISK.GETFILEINFO.NAME$
09547  3D4D             ;        STA STRING.ISEQUAL.ADDRESS2$+1
09548  3D4D             ;        JSR STRING.ISEQUAL$
09549  3D4D             ;        LDA STRING.ISEQUAL.VALUE$
09550  3D4D             ;        BNE @FOUNDFILE
09551  3D4D             ;        JMP @CHECKFILETYPE
09552  3D4D             ;@FOUNDFILE
09553  3D4D             ;        LDA #$01
09554  3D4D             ;        STA DISK.FILEEXISTS.EXISTS$
09555  3D4D             
09556  3D4D             ;@CHECKFILETYPE
09557  3D4D             ;        LDA DISK.GETFILEINFO.TYPE$
09558  3D4D             ;        BEQ @DONE2
09559  3D4D             ;        JSR DISK.GETNEXTFILEINFO$
09560  3D4D             ;        JMP @LOOP
09561  3D4D             
09562  3D4D             ;@DONE2
09563  3D4D             ;        JSR DISK.GETFILEINFOCLOSE$
09564  3D4D             
09565  3D4D             ;        LDA DISK.FILEEXISTS.EXISTS$
09566  3D4D             
09567  3D4D             ;        RTS
09568  3D4D             
09569  3D4D             DISK.GETFILEINFOCLOSE$ 
09570  3D4D             ;@CLOSE
09571  3D4D  A9 03                 LDA #$03      ; FILENUMBER 3
09572  3D4F  20 C3 FF              JSR $FFC3     ; CALL CLOSE
09573  3D52             
09574  3D52  20 CC FF              JSR $FFCC     ; CALL CLRCHN
09575  3D55  60                    RTS
09576  3D56             
09577  3D56             ;;DISK.WRITEFILE.FILENAME TEXT "@0:"
09578  3D56             ;DISK.WRITEFILE.FILENAME
09579  3D56             ;DISK.WRITEFILE.NAME TEXT '1234567890123456'
09580  3D56             ;DISK.WRITEFILE.EXT TEXT ",P,W"
09581  3D56             ;DISK.WRITEFILE.FILENAME$ = $20 ; 2 BYTES
09582  3D56             ;DISK.WRITEFILE.ADDRESS$ = $22 ; 2 BYTES
09583  3D56             ;DISK.WRITEFILE.LENGTH$ = $24 ; 2 BYTES
09584  3D56             ;DISK.WRITEFILE.LEN = $26 ; 2 BYTES
09585  3D56             ;DISK.WRITEFILE$
09586  3D56             
09587  3D56             ;        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
09588  3D56             ;        LDA #$02      ; FILENUMBER 2
09589  3D56             ;        JSR $FFC3     ; CALL CLOSE
09590  3D56             
09591  3D56             ;        ; DUE TO A BUG FOR THE REPLACE COMMAND WE NEED TO SCRATCH THE FILE PRIOR TO SAVING IT
09592  3D56             ;        ; HTTPS://WWW.C64-WIKI.COM/WIKI/COMMODORE_1541#DISK_DRIVE_COMMANDS
09593  3D56             ;        JSR DISK.SCRATCHFILE
09594  3D56             ;        LDA DISK.ERROR$
09595  3D56             ;        ;NOP
09596  3D56             ;        ;NOP
09597  3D56             ;        CMP #DISKERROR.OK$
09598  3D56             ;        BEQ @SCRATCHOK
09599  3D56             ;        CMP #DISKERROR.FILE_NOT_FOUND$
09600  3D56             ;        BEQ @SCRATCHOK
09601  3D56             ;        RTS
09602  3D56             ;@SCRATCHOK
09603  3D56             
09604  3D56             ;        ; SET DEFAULT VALUES
09605  3D56             ;        LDA #DISKERROR.OK$
09606  3D56             ;        STA DISK.ERROR$
09607  3D56             
09608  3D56             ;        ; CHECK FOR 0 LENGTH$
09609  3D56             ;        LDA #$00
09610  3D56             ;        STA MATH.CMP16.NUM1$
09611  3D56             ;        STA MATH.CMP16.NUM1$+1
09612  3D56             ;        LDA DISK.WRITEFILE.LENGTH$
09613  3D56             ;        STA MATH.CMP16.NUM2$
09614  3D56             ;        LDA DISK.WRITEFILE.LENGTH$+1
09615  3D56             ;        STA MATH.CMP16.NUM2$+1
09616  3D56             ;        JSR MATH.CMP16$
09617  3D56             ;        BNE @LENOK
09618  3D56             ;        RTS
09619  3D56             ;@LENOK
09620  3D56             
09621  3D56             ;;        ; CHECK DRIVE ERROR CHANNEL
09622  3D56             ;;        JSR DISK.READERRORCHANNEL
09623  3D56             ;;        LDA DISK.ERROR$
09624  3D56             ;;        CMP #DISKERROR.OK$
09625  3D56             ;;        BEQ @OK0
09626  3D56             ;;        JMP @CLOSE
09627  3D56             ;;@OK0
09628  3D56             
09629  3D56             ;        ; GET THE LENGTH OF FILENAME$
09630  3D56             ;        LDA DISK.WRITEFILE.FILENAME$
09631  3D56             ;        STA STRING.GETLENGTH.ADDRESS$
09632  3D56             ;        LDA DISK.WRITEFILE.FILENAME$+1
09633  3D56             ;        STA STRING.GETLENGTH.ADDRESS$+1
09634  3D56             ;        JSR STRING.GETLENGTH$
09635  3D56             ;        LDA STRING.GETLENGTH.LENGTH$
09636  3D56             ;        STA DISK.WRITEFILE.LEN
09637  3D56             
09638  3D56             ;        ; COPY FILENAME$ INTO FILENAME AT POSITION 3
09639  3D56             ;        LDA DISK.WRITEFILE.FILENAME$
09640  3D56             ;        STA MEMORY.COPY.SOURCE$
09641  3D56             ;        LDA DISK.WRITEFILE.FILENAME$+1
09642  3D56             ;        STA MEMORY.COPY.SOURCE$+1
09643  3D56             ;        LDA #<DISK.WRITEFILE.NAME
09644  3D56             ;        STA MEMORY.COPY.DESTINATION$
09645  3D56             ;        LDA #>DISK.WRITEFILE.NAME
09646  3D56             ;        STA MEMORY.COPY.DESTINATION$+1
09647  3D56             ;        LDA DISK.WRITEFILE.LEN
09648  3D56             ;        STA MEMORY.COPY.LENGTH$
09649  3D56             ;        JSR MEMORY.COPY$
09650  3D56             ;
09651  3D56             ;        ; APPEND ',P,W'
09652  3D56             ;        LDX #$00
09653  3D56             ;        LDY DISK.WRITEFILE.LEN
09654  3D56             ;@EXTCOPY_LOOP
09655  3D56             ;        LDA DISK.WRITEFILE.EXT,X
09656  3D56             ;        STA DISK.WRITEFILE.NAME,Y
09657  3D56             ;        INX
09658  3D56             ;        INY
09659  3D56             ;        CPX #4
09660  3D56             ;        BNE @EXTCOPY_LOOP
09661  3D56             
09662  3D56             ;        ; CALCULATE THE LENGTH (LENGTH OF FILENAME$ + 7)
09663  3D56             ;        LDA DISK.WRITEFILE.LEN
09664  3D56             ;        CLC
09665  3D56             ;        ;ADC #7
09666  3D56             ;        ADC #4
09667  3D56             
09668  3D56             ;        ; WRITE LENGTH$ NUMBER OF BYTES FROM ADDRESS$ TO DISK
09669  3D56             ;        LDX #<DISK.WRITEFILE.FILENAME
09670  3D56             ;        LDY #>DISK.WRITEFILE.FILENAME
09671  3D56             ;        JSR $FFBD     ; CALL SETNAM
09672  3D56             
09673  3D56             ;        LDA #$02      ; FILE NUMBER 2
09674  3D56             ;        LDX $BA       ; LAST USED DEVICE NUMBER
09675  3D56             ;        BNE @SKIP
09676  3D56             ;        LDX #$08      ; DEFAULT TO DEVICE 8
09677  3D56             ;@SKIP
09678  3D56             ;        LDY #$02      ; SECONDARY ADDRESS 2
09679  3D56             ;        ;LDY #$00
09680  3D56             ;        JSR $FFBA     ; CALL SETLFS
09681  3D56             
09682  3D56             ;        JSR $FFC0     ; CALL OPEN
09683  3D56             ;        ;BCS ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
09684  3D56             ;        BCC @OK
09685  3D56             ;        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
09686  3D56             
09687  3D56             ;        ;LDA #$01 ; RED
09688  3D56             ;        ;STA $D020
09689  3D56             
09690  3D56             ;        ; MOST LIKELY ERRORS:
09691  3D56             ;        ; A = $05 (DEVICE NOT PRESENT)
09692  3D56             ;        STA DISK.ERROR$
09693  3D56             
09694  3D56             ;        ;... ERROR HANDLING FOR OPEN ERRORS ...
09695  3D56             ;        JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
09696  3D56             ;@OK
09697  3D56             ;        ;; CHECK DRIVE ERROR CHANNEL HERE TO TEST FOR
09698  3D56             ;        ;; FILE NOT FOUND ERROR ETC.
09699  3D56             ;        ;JSR DISK.READERRORCHANNEL
09700  3D56             ;        ;LDA DISK.ERROR$
09701  3D56             ;        ;CMP #DISKERROR.OK$
09702  3D56             ;        ;BEQ @OK2
09703  3D56             ;        ;JMP @CLOSE
09704  3D56             
09705  3D56             ;@OK2
09706  3D56             
09707  3D56             ;        ;LDA #$04 ; PURPLE
09708  3D56             ;        ;STA $D020
09709  3D56             
09710  3D56             ;;        ; CHECK FOR 0 LENGTH$
09711  3D56             ;;        LDA #$00
09712  3D56             ;;        STA MATH.CMP16.NUM1$
09713  3D56             ;;        STA MATH.CMP16.NUM1$+1
09714  3D56             ;;        LDA DISK.WRITEFILE.LENGTH$
09715  3D56             ;;        STA MATH.CMP16.NUM2$
09716  3D56             ;;        LDA DISK.WRITEFILE.LENGTH$+1
09717  3D56             ;;        STA MATH.CMP16.NUM2$+1
09718  3D56             ;;        JSR MATH.CMP16$
09719  3D56             ;;        BNE @OK3
09720  3D56             ;;        JMP @CLOSE
09721  3D56             ;@OK3
09722  3D56             
09723  3D56             ;        LDX #$02      ; FILENUMBER 2
09724  3D56             ;        JSR $FFC9     ; CALL CHKOUT (FILE 2 NOW USED AS OUTPUT)
09725  3D56             
09726  3D56             ;        ; SET THE MEMORY ADDRESS
09727  3D56             ;        LDA DISK.WRITEFILE.ADDRESS$
09728  3D56             ;        STA $AE
09729  3D56             ;        LDA DISK.WRITEFILE.ADDRESS$+1
09730  3D56             ;        STA $AF
09731  3D56             
09732  3D56             ;        LDY #$00
09733  3D56             
09734  3D56             ;        ; RESET THE COUNTER
09735  3D56             ;        LDA #$00
09736  3D56             ;        STA DISK.WRITEFILE.LEN
09737  3D56             ;        STA DISK.WRITEFILE.LEN+1
09738  3D56             
09739  3D56             ;@LOOP
09740  3D56             ;        LDY #$00
09741  3D56             ;        LDX #$08
09742  3D56             ;        JSR $FFB7     ; CALL READST (READ STATUS BYTE)
09743  3D56             ;        ;BNE @EOF      ; EITHER EOF OR READ ERROR
09744  3D56             ;        BEQ @CONT
09745  3D56             
09746  3D56             ;@WRITEERROR
09747  3D56             
09748  3D56             ;        ;LDA #$02 ; RED
09749  3D56             ;        ;STA $D020
09750  3D56             
09751  3D56             ;        ; FOR FURTHER INFORMATION, THE DRIVE ERROR CHANNEL HAS TO BE READ
09752  3D56             ;        JSR DISK.READERRORCHANNEL
09753  3D56             
09754  3D56             ;        JMP @CLOSE
09755  3D56             ;
09756  3D56             ;@CONT
09757  3D56             ;        ;LDA #$03 ; CYAN
09758  3D56             ;        ;STA $D020
09759  3D56             
09760  3D56             ;        LDA ($AE),Y   ; GET BYTE FROM MEMORY
09761  3D56             ;        JSR $FFD2     ; CALL CHROUT (WRITE BYTE TO FILE)
09762  3D56             
09763  3D56             ;        ; INCREMENT THE COUNTER
09764  3D56             ;        LDA #<DISK.WRITEFILE.LEN
09765  3D56             ;        STA MATH.INC16.ADDRESS$
09766  3D56             ;        LDA #>DISK.WRITEFILE.LEN
09767  3D56             ;        STA MATH.INC16.ADDRESS$+1
09768  3D56             ;        JSR MATH.INC16$
09769  3D56             
09770  3D56             ;        ; CHECK HOW MANY BYTES HAVE BEEN WRITTEN TO DISK
09771  3D56             ;        LDA DISK.WRITEFILE.LEN
09772  3D56             ;        STA MATH.CMP16.NUM1$
09773  3D56             ;        LDA DISK.WRITEFILE.LEN+1
09774  3D56             ;        STA MATH.CMP16.NUM1$+1
09775  3D56             ;        LDA DISK.WRITEFILE.LENGTH$
09776  3D56             ;        STA MATH.CMP16.NUM2$
09777  3D56             ;        LDA DISK.WRITEFILE.LENGTH$+1
09778  3D56             ;        STA MATH.CMP16.NUM2$+1
09779  3D56             ;        JSR MATH.CMP16$
09780  3D56             ;        BNE @INC_MEM
09781  3D56             ;        JMP @CLOSE
09782  3D56             
09783  3D56             ;@INC_MEM
09784  3D56             ;        ; INCREMENT MEMORY ADDRESS
09785  3D56             ;        INC $AE
09786  3D56             ;        BNE @SKIP2
09787  3D56             ;        INC $AF
09788  3D56             ;@SKIP2
09789  3D56             
09790  3D56             ;        JMP @LOOP     ; NEXT BYTE
09791  3D56             
09792  3D56             ;@CLOSE
09793  3D56             ;        LDA #$02      ; FILENUMBER 2
09794  3D56             ;        JSR $FFC3     ; CALL CLOSE
09795  3D56             
09796  3D56             ;        JSR $FFCC     ; CALL CLRCHN
09797  3D56             
09798  3D56             ;        JSR DISK.READERRORCHANNEL
09799  3D56             
09800  3D56             ;        RTS
09801  3D56             
09802  3D56             DISK.WRITEFILE.FILENAME$ = $20 ; 2 BYTES
09803  3D56             DISK.WRITEFILE.ADDRESS$ = $22 ; 2 BYTES
09804  3D56             DISK.WRITEFILE.LENGTH$ = $24 ; 2 BYTES
09805  3D56             ;DISK.WRITEFILE.LEN = $26 ; 2 BYTES
09806  3D56             DISK.WRITEFILE$ 
09807  3D56             
09808  3D56  20 CF 3F              JSR DISK.SCRATCHFILE
09809  3D59  AD 41 3B              LDA DISK.ERROR$
09810  3D5C  C9 00                 CMP #DISKERROR.OK$
09811  3D5E  F0 05                 BEQ @SCRATCHOK
09812  3D60  C9 3E                 CMP #DISKERROR.FILE_NOT_FOUND$
09813  3D62  F0 01                 BEQ @SCRATCHOK
09814  3D64  60                    RTS
09815  3D65             @SCRATCHOK 
09816  3D65             
09817  3D65                        ; SET DEFAULT VALUES
09818  3D65  A9 00                 LDA #DISKERROR.OK$
09819  3D67  8D 41 3B              STA DISK.ERROR$
09820  3D6A             
09821  3D6A                        ; CHECK FOR 0 LENGTH$
09822  3D6A  A9 00                 LDA #$00
09823  3D6C  85 80                 STA MATH.CMP16.NUM1$
09824  3D6E  85 81                 STA MATH.CMP16.NUM1$+1
09825  3D70  A5 24                 LDA DISK.WRITEFILE.LENGTH$
09826  3D72  85 82                 STA MATH.CMP16.NUM2$
09827  3D74  A5 25                 LDA DISK.WRITEFILE.LENGTH$+1
09828  3D76  85 83                 STA MATH.CMP16.NUM2$+1
09829  3D78  20 E4 28              JSR MATH.CMP16$
09830  3D7B  D0 01                 BNE @LENOK
09831  3D7D  60                    RTS
09832  3D7E             @LENOK
09833  3D7E             
09834  3D7E  20 42 3B              JSR DISK.SETNAM
09835  3D81             
09836  3D81                        ; CALCULATE THE ENDING ADDRESS
09837  3D81  A5 22                 LDA DISK.WRITEFILE.ADDRESS$
09838  3D83  85 80                 STA MATH.ADD16.ADDEND1$
09839  3D85  A5 23                 LDA DISK.WRITEFILE.ADDRESS$+1
09840  3D87  85 81                 STA MATH.ADD16.ADDEND1$+1
09841  3D89  A5 24                 LDA DISK.WRITEFILE.LENGTH$
09842  3D8B  85 82                 STA MATH.ADD16.ADDEND2$
09843  3D8D  A5 25                 LDA DISK.WRITEFILE.LENGTH$+1
09844  3D8F  85 83                 STA MATH.ADD16.ADDEND2$+1
09845  3D91  20 00 28              JSR MATH.ADD16$
09846  3D94             
09847  3D94  A9 22                 LDA #DISK.WRITEFILE.ADDRESS$ ; THE ZP ADDRESS OF THE STARTING ADDRESS
09848  3D96  A6 84                 LDX MATH.ADD16.SUM$
09849  3D98  A4 85                 LDY MATH.ADD16.SUM$+1
09850  3D9A  20 D8 FF              JSR $FFD8     ; CALL SAVE
09851  3D9D  90 03                 BCC @OK       ; IF CARRY SET, A LOAD ERROR HAS HAPPENED
09852  3D9F             @ERROR
09853  3D9F                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
09854  3D9F             
09855  3D9F                        ; ... ERROR HANDLING ...
09856  3D9F             
09857  3D9F                        ;STA DISK.ERROR$
09858  3D9F                        ;RTS
09859  3D9F             
09860  3D9F  4C 2F 3C              JMP DISK.READERRORCHANNEL
09861  3DA2             
09862  3DA2             @OK
09863  3DA2  60                    RTS
09864  3DA3             
09865  3DA3             DISKFILETYPES.NONE$ = 0
09866  3DA3             DISKFILETYPES.PRG$ = 1
09867  3DA3             DISKFILETYPES.SEQ$ = 2
09868  3DA3             DISKFILETYPES.USR$ = 3
09869  3DA3             DISKFILETYPES.REL$ = 4
09870  3DA3             DISKFILETYPES.DEL$ = 5
09871  3DA3             
09872  3DA3             DISK.GETFILEINFO.FILENAME$ = $20 ; 2 BYTES
09873  3DA3  00         DISK.GETFILEINFO.LEN BYTE $00
09874  3DA4  00         DISK.GETFILEINFO.OFFSET BYTE $00
09875  3DA5  00 00      DISK.GETFILEINFO.CBM WORD $0000 ; 2
09876  3DA7  00 00      DISK.GETFILEINFO.CBM2 WORD $0000 ; 2
09877  3DA9  00         DISK.GETFILEINFO.BLOCKS$ BYTE $00 ; 1 (1 BLOCK => 254 BYTES)
09878  3DAA  20 20 20   DISK.GETFILEINFO.BUF1 TEXT '   ' ; 3
09879  3DAD  24 3A      DISK.GETFILEINFO.FILENAME TEXT '$:' ; 2
09880  3DAF  FF FF FF   DISK.GETFILEINFO.NAME$ TEXT $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF ; 16
09881  3DBF  20 20      DISK.GETFILEINFO.BUF2 TEXT '  ' ; 2
09882  3DC1  20 20 20   DISK.GETFILEINFO.EXTENSION TEXT  '   ' ; 3
09883  3DC4  20 20 20   DISK.GETFILEINFO.BUF3 TEXT '    ' ; 5
09884  3DC8  00         DISK.GETFILEINFO.TYPE$ BYTE $00
09885  3DC9  50 53 55   DISK.GETFILEINFO.TYPEMAP TEXT 'PSURD'
09886  3DCE             
09887  3DCE             DISK.GETFILEINFO$ 
09888  3DCE             
09889  3DCE                        ; SET DEFAULT VALUES
09890  3DCE  A9 00                 LDA #DISKERROR.OK$
09891  3DD0  8D 41 3B              STA DISK.ERROR$
09892  3DD3             
09893  3DD3  A9 00                 LDA #$00
09894  3DD5  8D A4 3D              STA DISK.GETFILEINFO.OFFSET
09895  3DD8             
09896  3DD8  A9 24                 LDA #'$'
09897  3DDA  8D AD 3D              STA DISK.GETFILEINFO.FILENAME
09898  3DDD  A9 3A                 LDA #':'
09899  3DDF  8D AE 3D              STA DISK.GETFILEINFO.FILENAME+1
09900  3DE2             
09901  3DE2  A9 AF                 LDA #<DISK.GETFILEINFO.NAME$
09902  3DE4  85 73                 STA MEMORY.FILL.ADDRESS$
09903  3DE6  A9 3D                 LDA #>DISK.GETFILEINFO.NAME$
09904  3DE8  85 74                 STA MEMORY.FILL.ADDRESS$+1
09905  3DEA  A9 FF                 LDA #$FF
09906  3DEC  85 75                 STA MEMORY.FILL.VALUE$
09907  3DEE  A9 10                 LDA #16
09908  3DF0  85 76                 STA MEMORY.FILL.LENGTH$
09909  3DF2  20 03 10              JSR MEMORY.FILL$
09910  3DF5             
09911  3DF5                        ; CHECK TO SEE IF FILENAME$ IS ZERO
09912  3DF5  A5 20                 LDA DISK.GETFILEINFO.FILENAME$
09913  3DF7  85 80                 STA MATH.CMP16.NUM1$
09914  3DF9  A5 21                 LDA DISK.GETFILEINFO.FILENAME$+1
09915  3DFB  85 81                 STA MATH.CMP16.NUM1$+1
09916  3DFD  A9 00                 LDA #$00
09917  3DFF  85 82                 STA MATH.CMP16.NUM2$
09918  3E01  85 83                 STA MATH.CMP16.NUM2$+1
09919  3E03  20 E4 28              JSR MATH.CMP16$
09920  3E06  D0 03                 BNE @SETNAM_SPECIFIC
09921  3E08  4C 3C 3E              JMP DISK.GETDISKINFO._SETNAM_ALL
09922  3E0B             
09923  3E0B             @SETNAM_SPECIFIC ; SET FILENAME = "$:" + FILENAME$
09924  3E0B             
09925  3E0B                        ; GET THE LENGTH OF THE STRING
09926  3E0B  A5 20                 LDA DISK.GETFILEINFO.FILENAME$
09927  3E0D  85 7A                 STA STRING.GETLENGTH.ADDRESS$
09928  3E0F  A5 21                 LDA DISK.GETFILEINFO.FILENAME$+1
09929  3E11  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
09930  3E13  20 72 2B              JSR STRING.GETLENGTH$
09931  3E16  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
09932  3E18  8D A3 3D              STA DISK.GETFILEINFO.LEN
09933  3E1B             
09934  3E1B                        ; COPY THE STRING TO DISK.GETFILEINFO.NAME$
09935  3E1B  A5 20                 LDA DISK.GETFILEINFO.FILENAME$
09936  3E1D  85 73                 STA MEMORY.COPY.SOURCE$
09937  3E1F  A5 21                 LDA DISK.GETFILEINFO.FILENAME$+1
09938  3E21  85 74                 STA MEMORY.COPY.SOURCE$+1
09939  3E23  A9 AF                 LDA #<DISK.GETFILEINFO.NAME$
09940  3E25  85 75                 STA MEMORY.COPY.DESTINATION$
09941  3E27  A9 3D                 LDA #>DISK.GETFILEINFO.NAME$
09942  3E29  85 76                 STA MEMORY.COPY.DESTINATION$+1
09943  3E2B  AD A3 3D              LDA DISK.GETFILEINFO.LEN
09944  3E2E  85 77                 STA MEMORY.COPY.LENGTH$
09945  3E30  20 8A 0F              JSR MEMORY.COPY$
09946  3E33             
09947  3E33                        ; CALCULATE THE LENGTH (LEN OF FILENAME$ + 2)
09948  3E33  AD A3 3D              LDA DISK.GETFILEINFO.LEN
09949  3E36  18                    CLC
09950  3E37  69 02                 ADC #2
09951  3E39             
09952  3E39  4C 3E 3E              JMP DISK.GETDISKINFO._SETNAM
09953  3E3C             
09954  3E3C             DISK.GETDISKINFO.RESET 
09955  3E3C             
09956  3E3C             DISK.GETDISKINFO._SETNAM_ALL ; SET FILENAME = "$"
09957  3E3C  A9 01                 LDA #01
09958  3E3E                        ;JMP @SETNAM
09959  3E3E             
09960  3E3E             DISK.GETDISKINFO._SETNAM 
09961  3E3E  A2 AD                 LDX #<DISK.GETFILEINFO.FILENAME
09962  3E40  A0 3D                 LDY #>DISK.GETFILEINFO.FILENAME
09963  3E42  20 BD FF              JSR $FFBD     ; CALL SETNAM
09964  3E45             
09965  3E45  A9 03                 LDA #$03      ; FILE NUMBER 3
09966  3E47  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
09967  3E49  D0 02                 BNE @SKIP
09968  3E4B  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
09969  3E4D             @SKIP      
09970  3E4D  A0 02                 LDY #$02      ; SECONDARY ADDRESS 2
09971  3E4F  A0 00                 LDY #$00
09972  3E51  20 BA FF              JSR $FFBA     ; CALL SETLFS
09973  3E54             
09974  3E54  20 C0 FF              JSR $FFC0     ; CALL OPEN
09975  3E57  90 06                 BCC @OK
09976  3E59                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
09977  3E59             
09978  3E59  8D 41 3B              STA DISK.ERROR$
09979  3E5C             
09980  3E5C  4C 4D 3D              JMP DISK.GETFILEINFOCLOSE$    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
09981  3E5F             @OK
09982  3E5F             @OK2
09983  3E5F  A2 03                 LDX #$03      ; FILENUMBER 3
09984  3E61  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 3 NOW USED AS INPUT)
09985  3E64             
09986  3E64                        ;; SKIP THE FIRST 2 BYTES
09987  3E64                        ;LDA #2
09988  3E64                        ;STA DISK.GETFILEINFO.LEN
09989  3E64                        ;JSR DISK.GETNEXTFILEINFO$
09990  3E64             
09991  3E64                        ; SKIP THE DISK LABEL
09992  3E64                        ;LDA #28
09993  3E64  A9 1E                 LDA #30
09994  3E66  8D A3 3D              STA DISK.GETFILEINFO.LEN
09995  3E69  20 7D 3E              JSR DISK.GETNEXTFILEINFO$
09996  3E6C             
09997  3E6C  AD 41 3B              LDA DISK.ERROR$
09998  3E6F                        ;NOP
09999  3E6F  F0 03                 BEQ @GET_FIRST_FILE
10000  3E71  4C 4D 3D              JMP DISK.GETFILEINFOCLOSE$
10001  3E74                        ;JMP @DONE
10002  3E74                        ;;CMP #DISKERROR.OK$
10003  3E74                        ;;BNE @DONE
10004  3E74             
10005  3E74             @GET_FIRST_FILE 
10006  3E74                        ; GET THE FIRST FILE
10007  3E74  A9 20                 LDA #32
10008  3E76  8D A3 3D              STA DISK.GETFILEINFO.LEN
10009  3E79  20 7D 3E              JSR DISK.GETNEXTFILEINFO$
10010  3E7C  60                    RTS
10011  3E7D             ;@DONE
10012  3E7D             ;        RTS
10013  3E7D             
10014  3E7D             DISK.GETNEXTFILEINFO$ 
10015  3E7D             
10016  3E7D                        ; SET DEFAULTS
10017  3E7D  A9 00                 LDA #$00
10018  3E7F  8D A4 3D              STA DISK.GETFILEINFO.OFFSET
10019  3E82             
10020  3E82  A9 00                 LDA #DISKFILETYPES.NONE$
10021  3E84  8D C8 3D              STA DISK.GETFILEINFO.TYPE$
10022  3E87             
10023  3E87  A9 A5                 LDA #<DISK.GETFILEINFO.CBM
10024  3E89  85 AE                 STA $AE
10025  3E8B  A9 3D                 LDA #>DISK.GETFILEINFO.CBM
10026  3E8D  85 AF                 STA $AF
10027  3E8F             
10028  3E8F  A0 00                 LDY #$00
10029  3E91             @LOOP
10030  3E91  20 B7 FF              JSR $FFB7     ; CALL READST (READ STATUS BYTE)
10031  3E94  F0 0D                 BEQ @CONT
10032  3E96             
10033  3E96             @EOF
10034  3E96  29 40                 AND #$40      ; END OF FILE?
10035  3E98  D0 03                 BNE @READERROR
10036  3E9A  4C 4D 3D              JMP DISK.GETFILEINFOCLOSE$
10037  3E9D                        
10038  3E9D             @READERROR 
10039  3E9D                        ; FOR FURTHER INFORMATION, THE DRIVE ERROR CHANNEL HAS TO BE READ
10040  3E9D  20 2F 3C              JSR DISK.READERRORCHANNEL
10041  3EA0             
10042  3EA0  4C 4D 3D              JMP DISK.GETFILEINFOCLOSE$
10043  3EA3                        
10044  3EA3             @CONT
10045  3EA3  20 CF FF              JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
10046  3EA6                        ; DO NOT OVERRIDE A!
10047  3EA6             
10048  3EA6                        ; CHECK TO SEE IF WE HAVE READ THE MAX NUMBER OF BYTES THAT WE WANT
10049  3EA6  EE A4 3D              INC DISK.GETFILEINFO.OFFSET
10050  3EA9  AE A4 3D              LDX DISK.GETFILEINFO.OFFSET
10051  3EAC  EC A3 3D              CPX DISK.GETFILEINFO.LEN
10052  3EAF                        ;BEQ @DONE
10053  3EAF                        ;NOP
10054  3EAF  D0 03                 BNE @CONT2
10055  3EB1  4C DC 3E              JMP @DONE
10056  3EB4             @CONT2
10057  3EB4             
10058  3EB4                        ; NEED TO CHECK THE BLOCK SIZE (SEE BELOW)
10059  3EB4  E0 06                 CPX #6
10060  3EB6  D0 03                 BNE @WRITE_MEM
10061  3EB8  4C C6 3E              JMP @CHECK_BLOCKS
10062  3EBB             @WRITE_MEM 
10063  3EBB             
10064  3EBB  91 AE                 STA ($AE),Y   ; WRITE BYTE TO MEMORY
10065  3EBD  E6 AE                 INC $AE
10066  3EBF  D0 02                 BNE @SKIP2
10067  3EC1  E6 AF                 INC $AF
10068  3EC3             
10069  3EC3             @SKIP2     
10070  3EC3  4C 91 3E              JMP @LOOP     ; NEXT BYTE
10071  3EC6             
10072  3EC6             @CHECK_BLOCKS 
10073  3EC6             
10074  3EC6                        ; BECAUSE THE 1541 DIRECTORY LISTING ADDS SPACES BETWEEN THE BLOCK
10075  3EC6                        ; SIZE AND THE FILE NAME, WE NEED TO ADJUST Y BY THE NUMBER OF BLOCKS.
10076  3EC6  AE A9 3D              LDX DISK.GETFILEINFO.BLOCKS$
10077  3EC9                        ;CPX #00 ; IF LESS THAN 0 GET MUST BE 128-255
10078  3EC9                        ;BMI @INC_Y2
10079  3EC9  E0 0A                 CPX #10 ; CHECK IF LESS THAN 10
10080  3ECB             ;        NOP
10081  3ECB             ;        NOP
10082  3ECB             ;        NOP
10083  3ECB             ;        NOP
10084  3ECB             ;        NOP
10085  3ECB                        ;BCC @WRITE_MEM
10086  3ECB  B0 03                 BCS @WRITE_MEM_OK1
10087  3ECD  4C BB 3E              JMP @WRITE_MEM
10088  3ED0             @WRITE_MEM_OK1 
10089  3ED0  C8                    INY
10090  3ED1  E0 64                 CPX #100 ; CHECK IF LESS THAN 100
10091  3ED3                        ;BCC @WRITE_MEM
10092  3ED3  B0 03                 BCS @WRITE_MEM_OK2
10093  3ED5  4C BB 3E              JMP @WRITE_MEM
10094  3ED8             @WRITE_MEM_OK2 
10095  3ED8  C8                    INY
10096  3ED9  4C BB 3E              JMP @WRITE_MEM
10097  3EDC             
10098  3EDC             ;@INC_Y2
10099  3EDC             ;        INY
10100  3EDC             ;        INY
10101  3EDC             ;        JMP @WRITE_MEM
10102  3EDC             
10103  3EDC             @DONE
10104  3EDC             
10105  3EDC                        ; REPLACE THE " CHARACTER IN THE NAME$ WITH A NULL$
10106  3EDC  A9 AF                 LDA #<DISK.GETFILEINFO.NAME$
10107  3EDE  85 AE                 STA $AE
10108  3EE0  A9 3D                 LDA #>DISK.GETFILEINFO.NAME$
10109  3EE2  85 AF                 STA $AF
10110  3EE4  A0 FF                 LDY #$FF
10111  3EE6             @FNAME_LOOP 
10112  3EE6  C8                    INY
10113  3EE7  C0 11                 CPY #17
10114  3EE9  F0 0D                 BEQ @FNAME_DONE
10115  3EEB             @FNAME_CONT 
10116  3EEB  B1 AE                 LDA ($AE),Y
10117  3EED  C9 22                 CMP #$22 ; DOUBLE-QUOTES
10118  3EEF                        ;BNE @FNAME_LOOP
10119  3EEF  F0 03                 BEQ @FNAME_LOOP2
10120  3EF1  4C E6 3E              JMP @FNAME_LOOP
10121  3EF4             @FNAME_LOOP2 
10122  3EF4  A9 FF                 LDA #$FF
10123  3EF6  91 AE                 STA ($AE),Y
10124  3EF8             @FNAME_DONE 
10125  3EF8             
10126  3EF8  A9 C9                 LDA #<DISK.GETFILEINFO.TYPEMAP
10127  3EFA  85 AE                 STA $AE
10128  3EFC  A9 3D                 LDA #>DISK.GETFILEINFO.TYPEMAP
10129  3EFE  85 AF                 STA $AF
10130  3F00  A0 FF                 LDY #$FF
10131  3F02             @FTYPE_LOOP 
10132  3F02  C8                    INY
10133  3F03  C0 05                 CPY #5
10134  3F05                        ;BEQ @FTYPE_DONE
10135  3F05  D0 03                 BNE @FTYPE_CONT
10136  3F07  4C 18 3F              JMP @FTYPE_DONE
10137  3F0A             @FTYPE_CONT 
10138  3F0A  B1 AE                 LDA ($AE),Y
10139  3F0C  CD C1 3D              CMP DISK.GETFILEINFO.EXTENSION
10140  3F0F                        ;BNE @FTYPE_LOOP
10141  3F0F  F0 03                 BEQ @FTYPE_CONT2
10142  3F11  4C 02 3F              JMP @FTYPE_LOOP
10143  3F14             @FTYPE_CONT2 
10144  3F14  C8                    INY
10145  3F15  8C C8 3D              STY DISK.GETFILEINFO.TYPE$
10146  3F18             @FTYPE_DONE 
10147  3F18             
10148  3F18  A9 20                 LDA #32
10149  3F1A  8D A3 3D              STA DISK.GETFILEINFO.LEN
10150  3F1D             
10151  3F1D  60                    RTS
10152  3F1E             
10153  3F1E  58 30 3A   DISK.EXECMD.FILENAME TEXT "X0:"
10154  3F21  31 32 33   DISK.EXECMD.NAME TEXT '1234567890123456789012345678901234567890'
10155  3F49  00         DISK.EXECMD.LEN BYTE $00
10156  3F4A             DISK.EXECMD 
10157  3F4A             
10158  3F4A                        ; SET DEFAULT VALUE
10159  3F4A  A9 00                 LDA #DISKERROR.OK$
10160  3F4C  8D 41 3B              STA DISK.ERROR$
10161  3F4F             
10162  3F4F  AD 49 3F              LDA DISK.EXECMD.LEN
10163  3F52  A2 1E                 LDX #<DISK.EXECMD.FILENAME
10164  3F54  A0 3F                 LDY #>DISK.EXECMD.FILENAME
10165  3F56  20 BD FF              JSR $FFBD     ; CALL SETNAM
10166  3F59             
10167  3F59  A9 04                 LDA #$04      ; FILE NUMBER 4
10168  3F5B  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
10169  3F5D  D0 02                 BNE @SKIP
10170  3F5F  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
10171  3F61             @SKIP      
10172  3F61  A0 0F                 LDY #$0F      ; SECONDARY ADDRESS 15
10173  3F63  20 BA FF              JSR $FFBA     ; CALL SETLFS
10174  3F66             
10175  3F66  20 C0 FF              JSR $FFC0     ; CALL OPEN
10176  3F69  EA                    NOP
10177  3F6A                        ;BCS ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
10178  3F6A  90 03                 BCC @CLOSE
10179  3F6C                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
10180  3F6C             
10181  3F6C                        ; MOST LIKELY ERRORS:
10182  3F6C                        ; A = $05 (DEVICE NOT PRESENT)
10183  3F6C  8D 41 3B              STA DISK.ERROR$
10184  3F6F             
10185  3F6F                        ;... ERROR HANDLING FOR OPEN ERRORS ...
10186  3F6F                        ;JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
10187  3F6F             
10188  3F6F             @CLOSE
10189  3F6F  A9 04                 LDA #$04      ; FILENUMBER 4
10190  3F71  20 C3 FF              JSR $FFC3     ; CALL CLOSE
10191  3F74             
10192  3F74  20 CC FF              JSR $FFCC     ; CALL CLRCHN
10193  3F77             
10194  3F77  20 2F 3C              JSR DISK.READERRORCHANNEL
10195  3F7A             
10196  3F7A  20 8A 1F              JSR DISK.CHECKERROR
10197  3F7D             
10198  3F7D  60                    RTS
10199  3F7E             
10200  3F7E             DISK.EXECMD1.FILENAME = $20 ; 2 BYTES
10201  3F7E             DISK.EXECMD1 
10202  3F7E             
10203  3F7E                        ; GET THE LENGTH OF FILENAME$
10204  3F7E  A5 20                 LDA DISK.EXECMD1.FILENAME
10205  3F80  85 7A                 STA STRING.GETLENGTH.ADDRESS$
10206  3F82  A5 21                 LDA DISK.EXECMD1.FILENAME+1
10207  3F84  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
10208  3F86  20 72 2B              JSR STRING.GETLENGTH$
10209  3F89  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
10210  3F8B  8D 49 3F              STA DISK.EXECMD.LEN
10211  3F8E             
10212  3F8E                        ; COPY FILENAME$ INTO FILENAME
10213  3F8E  A5 20                 LDA DISK.EXECMD1.FILENAME
10214  3F90  85 73                 STA MEMORY.COPY.SOURCE$
10215  3F92  A5 21                 LDA DISK.EXECMD1.FILENAME+1
10216  3F94  85 74                 STA MEMORY.COPY.SOURCE$+1
10217  3F96  A9 21                 LDA #<DISK.EXECMD.NAME
10218  3F98  85 75                 STA MEMORY.COPY.DESTINATION$
10219  3F9A  A9 3F                 LDA #>DISK.EXECMD.NAME
10220  3F9C  85 76                 STA MEMORY.COPY.DESTINATION$+1
10221  3F9E  AD 49 3F              LDA DISK.EXECMD.LEN
10222  3FA1  85 77                 STA MEMORY.COPY.LENGTH$
10223  3FA3  20 8A 0F              JSR MEMORY.COPY$
10224  3FA6             
10225  3FA6                        ; ADD 3 TO LEN
10226  3FA6  AD 49 3F              LDA DISK.EXECMD.LEN
10227  3FA9  18                    CLC
10228  3FAA  69 03                 ADC #3
10229  3FAC  8D 49 3F              STA DISK.EXECMD.LEN
10230  3FAF             
10231  3FAF                        ; EXECUTE THE COMMAND
10232  3FAF  4C 4A 3F              JMP DISK.EXECMD
10233  3FB2             
10234  3FB2             DISK.FORMAT.LABELNAME$ = $20 ; 2 BYTES
10235  3FB2             DISK.FORMAT$ 
10236  3FB2             
10237  3FB2                        ; SET THE PREFIX COMMAND "N"
10238  3FB2  A9 4E                 LDA #"N"
10239  3FB4  8D 1E 3F              STA DISK.EXECMD.FILENAME
10240  3FB7             
10241  3FB7                        ; EXECUTE THE COMMAND
10242  3FB7  4C 7E 3F              JMP DISK.EXECMD1
10243  3FBA             
10244  3FBA             
10245  3FBA             DISK.SCRATCHFILE.FILENAME$ = $20 ; 2 BYTES
10246  3FBA             DISK.SCRATCHFILE$ 
10247  3FBA             
10248  3FBA                        ; NOTE: THE 1541 DOES NOT REPORT AN ERROR IF THE FILE DOESN'T EXIST!
10249  3FBA             
10250  3FBA                        ; CONFIRM THAT FILENAME1 EXISTS
10251  3FBA  20 1D 3D              JSR DISK.FILEEXISTS$
10252  3FBD  AD 41 3B              LDA DISK.ERROR$
10253  3FC0  C9 00                 CMP #DISKERROR.OK$
10254  3FC2  F0 01                 BEQ @FILEEXISTOK
10255  3FC4  60                    RTS
10256  3FC5             @FILEEXISTOK 
10257  3FC5  A5 26                 LDA DISK.FILEEXISTS.EXISTS$
10258  3FC7  D0 06                 BNE @FILEEXISTS
10259  3FC9             ;        BEQ @FILENOEXISTS
10260  3FC9             ;        JMP @FILEEXISTS
10261  3FC9             ;@FILENOEXISTS
10262  3FC9  A9 3E                 LDA #DISKERROR.FILE_NOT_FOUND$
10263  3FCB  8D 41 3B              STA DISK.ERROR$
10264  3FCE  60                    RTS
10265  3FCF             @FILEEXISTS 
10266  3FCF             
10267  3FCF             DISK.SCRATCHFILE 
10268  3FCF             
10269  3FCF                        ; SET THE PREFIX COMMAND "S"
10270  3FCF  A9 53                 LDA #"S"
10271  3FD1  8D 1E 3F              STA DISK.EXECMD.FILENAME
10272  3FD4             
10273  3FD4                        ;; GET THE LENGTH OF FILENAME$
10274  3FD4             ;        LDA DISK.SCRATCHFILE.FILENAME$
10275  3FD4             ;        STA STRING.GETLENGTH.ADDRESS$
10276  3FD4             ;        LDA DISK.SCRATCHFILE.FILENAME$+1
10277  3FD4             ;        STA STRING.GETLENGTH.ADDRESS$+1
10278  3FD4             ;        JSR STRING.GETLENGTH$
10279  3FD4             ;        LDA STRING.GETLENGTH.LENGTH$
10280  3FD4             ;        STA DISK.EXECMD.LEN
10281  3FD4             
10282  3FD4             ;        ; COPY FILENAME$ INTO FILENAME
10283  3FD4             ;        LDA DISK.SCRATCHFILE.FILENAME$
10284  3FD4             ;        STA MEMORY.COPY.SOURCE$
10285  3FD4             ;        LDA DISK.SCRATCHFILE.FILENAME$+1
10286  3FD4             ;        STA MEMORY.COPY.SOURCE$+1
10287  3FD4             ;        LDA #<DISK.EXECMD.NAME
10288  3FD4             ;        STA MEMORY.COPY.DESTINATION$
10289  3FD4             ;        LDA #>DISK.EXECMD.NAME
10290  3FD4             ;        STA MEMORY.COPY.DESTINATION$+1
10291  3FD4             ;        LDA DISK.EXECMD.LEN
10292  3FD4             ;        STA MEMORY.COPY.LENGTH$
10293  3FD4             ;        JSR MEMORY.COPY$
10294  3FD4             
10295  3FD4             ;        ; ADD 3 TO LEN
10296  3FD4             ;        LDA DISK.EXECMD.LEN
10297  3FD4             ;        CLC
10298  3FD4             ;        ADC #3
10299  3FD4             ;        STA DISK.EXECMD.LEN
10300  3FD4             
10301  3FD4                        ; EXECUTE THE COMMAND
10302  3FD4  4C 7E 3F              JMP DISK.EXECMD1
10303  3FD7             
10304  3FD7             
10305  3FD7             DISK.COPYFILE.SRCFILENAME$ = $20 ; 2 BYTES
10306  3FD7             DISK.COPYFILE.DSTFILENAME$ = $22 ; 2 BYTES
10307  3FD7             ;DISK.COPYFILE.SRCLEN = $24 ; 1 BYTE
10308  3FD7             ;DISK.COPYFILE.DSTLEN = $25 ; 1 BYTE
10309  3FD7             DISK.COPYFILE$ 
10310  3FD7             
10311  3FD7                        ; SET THE PREFIX COMMAND "C"
10312  3FD7  A9 43                 LDA #"C"
10313  3FD9  8D 1E 3F              STA DISK.EXECMD.FILENAME
10314  3FDC             
10315  3FDC             ;        ; COPY CHARACTERS FROM DSTFILENAME$ TO FILENAME
10316  3FDC             ;        LDA DISK.COPYFILE.DSTFILENAME$
10317  3FDC             ;        STA $AE
10318  3FDC             ;        LDA DISK.COPYFILE.DSTFILENAME$+1
10319  3FDC             ;        STA $AF
10320  3FDC             ;        LDY #$00
10321  3FDC             ;        LDX #$00
10322  3FDC             ;@DSTLOOP
10323  3FDC             ;        LDA ($AE),Y
10324  3FDC             ;        CMP #CONSOLE.NULL$
10325  3FDC             ;        BEQ @DSTDONE
10326  3FDC             ;        STA DISK.EXECMD.NAME,X
10327  3FDC             ;        INY
10328  3FDC             ;        INX
10329  3FDC             ;        JMP @DSTLOOP
10330  3FDC             ;@DSTDONE
10331  3FDC             ;        STY DISK.COPYFILE.DSTLEN
10332  3FDC             
10333  3FDC             ;        ; APPEND "="
10334  3FDC             ;        LDA #61
10335  3FDC             ;        STA DISK.EXECMD.NAME,X
10336  3FDC             ;        INX
10337  3FDC             
10338  3FDC             ;        ; COPY CHARACTERS FROM SRCFILENAME$ TO FILENAME
10339  3FDC             ;        LDA DISK.COPYFILE.SRCFILENAME$
10340  3FDC             ;        STA $AE
10341  3FDC             ;        LDA DISK.COPYFILE.SRCFILENAME$+1
10342  3FDC             ;        STA $AF
10343  3FDC             ;        LDY #$00
10344  3FDC             ;@SRCLOOP
10345  3FDC             ;        LDA ($AE),Y
10346  3FDC             ;        CMP #CONSOLE.NULL$
10347  3FDC             ;        BEQ @SRCDONE
10348  3FDC             ;        STA DISK.EXECMD.NAME,X
10349  3FDC             ;        INY
10350  3FDC             ;        INX
10351  3FDC             ;        JMP @SRCLOOP
10352  3FDC             ;@SRCDONE
10353  3FDC             ;        STY DISK.COPYFILE.SRCLEN
10354  3FDC             
10355  3FDC             ;        ; LEN = DSTLEN + SRCLEN + 3(C0:) + 1(=)
10356  3FDC             ;        LDA #4
10357  3FDC             ;        CLC
10358  3FDC             ;        ADC DISK.COPYFILE.DSTLEN
10359  3FDC             ;        ADC DISK.COPYFILE.SRCLEN
10360  3FDC             ;        STA DISK.EXECMD.LEN
10361  3FDC             
10362  3FDC                        ; EXECUTE THE COMMAND
10363  3FDC  4C E7 3F              JMP DISK.EXECMD2
10364  3FDF             
10365  3FDF             DISK.RENAMEFILE.OLDFILENAME$ = $20 ; 2 BYTES
10366  3FDF             DISK.RENAMEFILE.NEWFILENAME$ = $22 ; 2 BYTES
10367  3FDF             DISK.RENAMEFILE$ 
10368  3FDF             
10369  3FDF                        ; SET THE PREFIX COMMAND "R"
10370  3FDF  A9 52                 LDA #"R"
10371  3FE1  8D 1E 3F              STA DISK.EXECMD.FILENAME
10372  3FE4             
10373  3FE4                        ; EXECUTE THE COMMAND
10374  3FE4  4C E7 3F              JMP DISK.EXECMD2
10375  3FE7             
10376  3FE7             
10377  3FE7             DISK.EXECMD2.FILENAME1 = $20 ; 2 BYTES
10378  3FE7             DISK.EXECMD2.FILENAME2 = $22 ; 2 BYTES
10379  3FE7             DISK.EXECMD2.LEN1 = $24 ; 1 BYTE
10380  3FE7             DISK.EXECMD2.LEN2 = $25 ; 1 BYTE
10381  3FE7             DISK.EXECMD2 
10382  3FE7             
10383  3FE7                        ; CONFIRM THAT FILENAME1 EXISTS
10384  3FE7             ;        JSR DISK.FILEEXISTS$
10385  3FE7             ;        BNE @FILEEXISTS
10386  3FE7             ;        LDA #DISKERROR.FILE_NOT_FOUND$
10387  3FE7             ;        STA DISK.ERROR$
10388  3FE7             ;        RTS
10389  3FE7             ;@FILEEXISTS
10390  3FE7                        ; CONFIRM THAT FILENAME1 EXISTS
10391  3FE7  20 1D 3D              JSR DISK.FILEEXISTS$
10392  3FEA  AD 41 3B              LDA DISK.ERROR$
10393  3FED  C9 00                 CMP #DISKERROR.OK$
10394  3FEF  F0 01                 BEQ @FILEEXISTOK
10395  3FF1  60                    RTS
10396  3FF2             @FILEEXISTOK 
10397  3FF2  A5 26                 LDA DISK.FILEEXISTS.EXISTS$
10398  3FF4  D0 06                 BNE @FILEEXISTS
10399  3FF6             ;        BEQ @FILENOEXISTS
10400  3FF6             ;        JMP @FILEEXISTS
10401  3FF6             ;@FILENOEXISTS
10402  3FF6  A9 3E                 LDA #DISKERROR.FILE_NOT_FOUND$
10403  3FF8  8D 41 3B              STA DISK.ERROR$
10404  3FFB  60                    RTS
10405  3FFC             @FILEEXISTS 
10406  3FFC             
10407  3FFC                        ; COPY CHARACTERS FROM DSTFILENAME$ TO FILENAME
10408  3FFC  A5 22                 LDA DISK.EXECMD2.FILENAME2
10409  3FFE  85 AE                 STA $AE
10410  4000  A5 23                 LDA DISK.EXECMD2.FILENAME2+1
10411  4002  85 AF                 STA $AF
10412  4004  A0 00                 LDY #$00
10413  4006  A2 00                 LDX #$00
10414  4008             @DSTLOOP
10415  4008  B1 AE                 LDA ($AE),Y
10416  400A  C9 FF                 CMP #CONSOLE.NULL$
10417  400C  EA                    NOP
10418  400D  EA                    NOP
10419  400E  EA                    NOP
10420  400F                        ;BEQ @DSTDONE
10421  400F  D0 03                 BNE @DSTCONT
10422  4011  4C 1C 40              JMP @DSTDONE
10423  4014             @DSTCONT
10424  4014  9D 21 3F              STA DISK.EXECMD.NAME,X
10425  4017  C8                    INY
10426  4018  E8                    INX
10427  4019  4C 08 40              JMP @DSTLOOP
10428  401C             @DSTDONE
10429  401C  84 25                 STY DISK.EXECMD2.LEN2
10430  401E             
10431  401E                        ; APPEND "="
10432  401E  A9 3D                 LDA #61
10433  4020  9D 21 3F              STA DISK.EXECMD.NAME,X
10434  4023  E8                    INX
10435  4024             
10436  4024                        ; COPY CHARACTERS FROM SRCFILENAME$ TO FILENAME
10437  4024  A5 20                 LDA DISK.EXECMD2.FILENAME1
10438  4026  85 AE                 STA $AE
10439  4028  A5 21                 LDA DISK.EXECMD2.FILENAME1+1
10440  402A  85 AF                 STA $AF
10441  402C  A0 00                 LDY #$00
10442  402E             @SRCLOOP
10443  402E  B1 AE                 LDA ($AE),Y
10444  4030  C9 FF                 CMP #CONSOLE.NULL$
10445  4032  F0 08                 BEQ @SRCDONE
10446  4034  9D 21 3F              STA DISK.EXECMD.NAME,X
10447  4037  C8                    INY
10448  4038  E8                    INX
10449  4039  4C 2E 40              JMP @SRCLOOP
10450  403C             @SRCDONE
10451  403C  84 24                 STY DISK.EXECMD2.LEN1
10452  403E             
10453  403E                        ; LEN = DSTLEN + SRCLEN + 3(C0:) + 1(=)
10454  403E  A9 04                 LDA #4
10455  4040  18                    CLC
10456  4041  65 25                 ADC DISK.EXECMD2.LEN2
10457  4043  65 24                 ADC DISK.EXECMD2.LEN1
10458  4045  8D 49 3F              STA DISK.EXECMD.LEN
10459  4048             
10460  4048                        ; EXECUTE THE COMMAND
10461  4048  4C 4A 3F              JMP DISK.EXECMD
10462  404B             
10463  404B             DISK.LOADFILE.FILENAME$ = $20 ; 2 BYTES
10464  404B             DISK.LOADFILE$ 
10465  404B             
10466  404B                        ;LDA #$FE
10467  404B                        ;STA DISK.READFILE.ADDRESS$
10468  404B                        ;LDA #$BF
10469  404B                        ;STA DISK.READFILE.ADDRESS$+1
10470  404B  A9 00                 LDA #$00
10471  404D  85 22                 STA DISK.READFILE.ADDRESS$
10472  404F  A9 C0                 LDA #$C0
10473  4051  85 23                 STA DISK.READFILE.ADDRESS$+1
10474  4053  20 6E 3B              JSR DISK.READFILE$
10475  4056             
10476  4056  AD 41 3B              LDA DISK.ERROR$
10477  4059  F0 03                 BEQ @OK
10478  405B  4C 67 40              JMP @ERROR
10479  405E             
10480  405E             @OK
10481  405E                        ;JMP $C000
10482  405E  20 34 0F              JSR KERNEL.END
10483  4061                        ;PLA
10484  4061                        ;PLA
10485  4061                        ;JMP KERNEL.BEGIN
10486  4061  20 10 0F              JSR KERNEL.BEGIN
10487  4064  20 84 1F              JSR KERNEL.RESET$
10488  4067             
10489  4067             @ERROR
10490  4067  60                    RTS
10491  4068             
10492  4068             
10493  4068             
10494  4068             
10495  4068             
10496  4068  00         PRINTER.PREV_DEVCICE BYTE $00
10497  4069             
10498  4069  00         PRINTER.ERROR$ BYTE $00
10499  406A             PRINTERERROR.OK$ = 00
10500  406A             PRINTERERROR.OPEN_ERROR$ = 01
10501  406A             PRINTERERROR.PRINT_ERROR$ = 02
10502  406A             
10503  406A             PRINTER.CARRIAGE_RETURN$ = $0D
10504  406A             PRINTER.LINE_FEED$ = $0A
10505  406A             PRINTER.NULL$ = $FF
10506  406A             PRINTER.LOWER_CASE$ = 17
10507  406A             PRINTER.UPPER_CASE$ = 145
10508  406A             
10509  406A             PRINTER.PRINTSTR.ADDRESS$ = $20 ; 2 BYTES
10510  406A             PRINTER.PRINTSTR$ 
10511  406A             
10512  406A  A5 BA                 LDA $BA
10513  406C  8D 68 40              STA PRINTER.PREV_DEVCICE
10514  406F             
10515  406F                        ; SET DEFAULT VALUES
10516  406F  A9 00                 LDA #PRINTERERROR.OK$
10517  4071  8D 69 40              STA PRINTER.ERROR$
10518  4074             
10519  4074  A9 04                 LDA #$04      ; FILE NUMBER 4
10520  4076  A2 04                 LDX #$04      ; DEFAULT TO DEVICE 4
10521  4078  A0 04                 LDY #$04      ; SECONDARY ADDRESS 4
10522  407A  20 BA FF              JSR $FFBA     ; CALL SETLFS
10523  407D             
10524  407D  20 C0 FF              JSR $FFC0     ; CALL OPEN
10525  4080  90 08                 BCC @OK
10526  4082             
10527  4082  A9 01                 LDA #PRINTERERROR.OPEN_ERROR$
10528  4084  8D 69 40              STA PRINTER.ERROR$
10529  4087             
10530  4087  4C BE 40              JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
10531  408A             @OK
10532  408A             
10533  408A  A2 04                 LDX #$04      ; FILENUMBER 4
10534  408C  20 C9 FF              JSR $FFC9     ; CALL CHKOUT (FILE 4 NOW USED AS OUTPUT)
10535  408F             
10536  408F                        ; SET THE MEMORY ADDRESS
10537  408F  A5 20                 LDA PRINTER.PRINTSTR.ADDRESS$
10538  4091  85 AE                 STA $AE
10539  4093  A5 21                 LDA PRINTER.PRINTSTR.ADDRESS$+1
10540  4095  85 AF                 STA $AF
10541  4097             
10542  4097             @LOOP
10543  4097  A0 00                 LDY #$00
10544  4099  A2 08                 LDX #$08
10545  409B  20 B7 FF              JSR $FFB7     ; CALL READST (READ STATUS BYTE)
10546  409E                        ;;BNE @EOF      ; EITHER EOF OR READ ERROR
10547  409E                        ;BEQ @CONT
10548  409E  4C A9 40              JMP @CONT
10549  40A1             @WRITEERROR 
10550  40A1             
10551  40A1  A9 02                 LDA #PRINTERERROR.PRINT_ERROR$
10552  40A3  8D 69 40              STA PRINTER.ERROR$
10553  40A6             
10554  40A6  4C BE 40              JMP @CLOSE
10555  40A9                        
10556  40A9             @CONT
10557  40A9  B1 AE                 LDA ($AE),Y   ; GET BYTE FROM MEMORY
10558  40AB  C9 FF                 CMP #PRINTER.NULL$
10559  40AD  D0 03                 BNE @CHROUT
10560  40AF  4C BE 40              JMP @CLOSE
10561  40B2             
10562  40B2             @CHROUT
10563  40B2  20 D2 FF              JSR $FFD2     ; CALL CHROUT (WRITE BYTE TO FILE)
10564  40B5             
10565  40B5                        ;NOP
10566  40B5                        ;NOP
10567  40B5             @INC_MEM
10568  40B5                        ; INCREMENT MEMORY ADDRESS
10569  40B5  E6 AE                 INC $AE
10570  40B7  D0 02                 BNE @SKIP2
10571  40B9  E6 AF                 INC $AF
10572  40BB             @SKIP2     
10573  40BB             
10574  40BB  4C 97 40              JMP @LOOP     ; NEXT BYTE
10575  40BE             
10576  40BE             @CLOSE
10577  40BE  A9 04                 LDA #$04      ; FILENUMBER 4
10578  40C0  20 C3 FF              JSR $FFC3     ; CALL CLOSE
10579  40C3             
10580  40C3  20 CC FF              JSR $FFCC     ; CALL CLRCHN
10581  40C6             
10582  40C6  AD 68 40              LDA PRINTER.PREV_DEVCICE
10583  40C9  85 BA                 STA $BA
10584  40CB             
10585  40CB  60                    RTS
10586  40CC             
10587  40CC             
10588  40CC             
10589  40CC             
10590  40CC             
10591  40CC             
10592  40CC  00         MOUSE.OLDX BYTE $00
10593  40CD  00         MOUSE.OLDY BYTE $00
10594  40CE             
10595  40CE             MOUSE.GETSTATE.LEFTBUTTON$ = $7A ; 1 BYTE
10596  40CE             MOUSE.GETSTATE.RIGHTBUTTON$ = $7B ; 1 BYTE
10597  40CE             MOUSE.GETSTATE.DELTAX$ = $7C ; 1 BYTE
10598  40CE             MOUSE.GETSTATE.DELTAY$ = $7D ; 1 BYTE
10599  40CE             MOUSE.GETSTATE$ 
10600  40CE                        ;HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:C_1351_STANDARD_MOUSE_ROUTINE
10601  40CE             
10602  40CE  A9 10                 LDA #%00010000
10603  40D0  20 FE 40              JSR MOUSE.BUTTONCHECK
10604  40D3  85 7A                 STA MOUSE.GETSTATE.LEFTBUTTON$
10605  40D5             
10606  40D5  A9 01                 LDA #%00000001
10607  40D7  20 FE 40              JSR MOUSE.BUTTONCHECK
10608  40DA  85 7B                 STA MOUSE.GETSTATE.RIGHTBUTTON$
10609  40DC             
10610  40DC  AD 19 D4              LDA $D419
10611  40DF                        ;LSR  //CCS64 FIX (REMOVE FOR OTHER EMUS/REAL HW)
10612  40DF  AC CC 40              LDY MOUSE.OLDX
10613  40E2  20 0F 41              JSR MOUSE.MOVECHECK
10614  40E5  8C CC 40              STY MOUSE.OLDX
10615  40E8  85 7C                 STA MOUSE.GETSTATE.DELTAX$
10616  40EA             
10617  40EA  AD 1A D4              LDA $D41A
10618  40ED                        ;LSR  //CCS64 FIX (REMOVE FOR OTHER EMUS/REAL HW)
10619  40ED  AC CD 40              LDY MOUSE.OLDY
10620  40F0  20 0F 41              JSR MOUSE.MOVECHECK
10621  40F3  8C CD 40              STY MOUSE.OLDY
10622  40F6  38                    SEC  ; MODIFY Y POSITION ( DECREASE Y FOR INCREASE IN POT )
10623  40F7  49 FF                 EOR #$FF
10624  40F9  69 00                 ADC #$00
10625  40FB  85 7D                 STA MOUSE.GETSTATE.DELTAY$
10626  40FD             
10627  40FD  60                    RTS
10628  40FE             
10629  40FE             MOUSE.BUTTONCHECK.BUTTONMASK = $7E ; 1 BYTE
10630  40FE             MOUSE.BUTTONCHECK 
10631  40FE  85 7E                 STA MOUSE.BUTTONCHECK.BUTTONMASK
10632  4100             
10633  4100  AD 01 DC              LDA $DC01 ; PORT 1
10634  4103  25 7E                 AND MOUSE.BUTTONCHECK.BUTTONMASK
10635  4105  C5 7E                 CMP MOUSE.BUTTONCHECK.BUTTONMASK
10636  4107                        
10637  4107  D0 03                 BNE @SETBTN
10638  4109  A9 00                 LDA #$00
10639  410B  60                    RTS
10640  410C             
10641  410C             @SETBTN
10642  410C  A9 01                 LDA #$01
10643  410E  60                    RTS
10644  410F             
10645  410F             MOUSE.MOVECHECK.OLDDELTA = $7E ; 1 BYTE
10646  410F             MOUSE.MOVECHECK.NEWDELTA = $7F ; 1 BYTE
10647  410F             MOUSE.MOVECHECK 
10648  410F  84 7E                 STY MOUSE.MOVECHECK.OLDDELTA
10649  4111  85 7F                 STA MOUSE.MOVECHECK.NEWDELTA
10650  4113  A2 00                 LDX #0
10651  4115             
10652  4115  38                    SEC
10653  4116  E5 7E                 SBC MOUSE.MOVECHECK.OLDDELTA
10654  4118  29 7F                 AND #%01111111
10655  411A  C9 40                 CMP #%01000000
10656  411C  B0 06                 BCS @MOVCHK1
10657  411E  4A                    LSR
10658  411F  F0 10                 BEQ @MOVCHK2
10659  4121  A4 7F                 LDY MOUSE.MOVECHECK.NEWDELTA
10660  4123  60                    RTS
10661  4124             
10662  4124             @MOVCHK1
10663  4124  09 C0                 ORA #%11000000
10664  4126  C9 FF                 CMP #$FF
10665  4128  F0 07                 BEQ @MOVCHK2
10666  412A  38                    SEC
10667  412B  6A                    ROR
10668  412C  A2 FF                 LDX #$FF
10669  412E  A4 7F                 LDY MOUSE.MOVECHECK.NEWDELTA
10670  4130  60                    RTS
10671  4131             @MOVCHK2
10672  4131  A9 00                 LDA #0
10673  4133  60                    RTS
10674  4134             
10675  4134             
10676  4134             
10677  4134             
10678  4134             
10679  4134  00         SERIAL.PREV_DEVICE BYTE $00
10680  4135  00         SERIAL.DISCARD_BYTE$ BYTE $00 ; SET TO ONE TO HAVE THE FIRST FIRST OF EACH SEND/RECV CALL TO BE DISCARDED
10681  4136  00         SERIAL.RECV_EOT$ BYTE $00 ; SET TO ONE TO HAVE THE RECV ROUTINE WAIT FOR THE EOT BYTE - CHR$(13)
10682  4137  00         SERIAL.SEND_EOT$ BYTE $00 ; SET TO ONE TO HAVE THE SEND ROUTINE TO SEND THE EOT BYTE - CHR$(13)
10683  4138             
10684  4138             SERIAL.EOT$ = $FF
10685  4138             SERIAL.SKIP = $FE
10686  4138             ;SERIAL.EOT2    = $7F
10687  4138             ;SERIAL.SKIP2   = $7E
10688  4138             ;SERIAL.ARGS    TEXT 08, 00 ; 1200 BAUDRATE, NO PARITY, 8 DATABITS, 1 STOPBIT, DTR NOT ENABLED, RTS NOT ENABLED, NO HANDSHAKE
10689  4138             ;SERIAL.ARGS    TEXT 08
10690  4138  08         SERIAL.BAUD$ BYTE $08 ; 1200
10691  4139                        ; SEE HTTPS://WWW.COMMODORE.CA/MANUALS/C64_PROGRAMMERS_REFERENCE/C64-PROGRAMMERS_REFERENCE_GUIDE-06-INPUT_OUTPUT_GUIDE.PDF (PAGE 349)
10692  4139             ;        0 0 0 1 50 BAUD
10693  4139             ;        0 0 1 0 75
10694  4139             ;        0 0 1 1 110
10695  4139             ;        0 1 0 0 134.5
10696  4139             ;        0 1 0 1 150
10697  4139             ;        0 1 1 0 300 (6)
10698  4139             ;        0 1 1 1 600
10699  4139             ;        1 0 0 0 1200 (8)
10700  4139             ;        1 0 0 1 (1800) 2400 (9)
10701  4139             ;        1 0 1 0 2400 (10)
10702  4139             ;        1 0 1 1 3600 [NI]
10703  4139             ;        1 1 0 0 4800 [NI]
10704  4139             ;        1 1 0 1 7200 [NI)
10705  4139             ;        1 1 1 0 9600 [NI] (14)
10706  4139             ;        1 1 1 1 19200 [NI]
10707  4139             ;SERIAL.BAUD_50$         = $01
10708  4139             ;SERIAL.BAUD_75$         = $02
10709  4139             ;SERIAL.BAUD_110$        = $03
10710  4139             ;SERIAL.BAUD_135$        = $04
10711  4139             ;SERIAL.BAUD_150$        = $05
10712  4139             SERIAL.BAUD_300$ = $06
10713  4139             SERIAL.BAUD_600$ = $07
10714  4139             SERIAL.BAUD_1200$ = $08
10715  4139             ;SERIAL.BAUD_1800$       = $09
10716  4139             ;SERIAL.BAUD_2400$       = $0A
10717  4139             ;SERIAL.BAUD_3600$       = $0B
10718  4139             ;SERIAL.BAUD_4800$       = $0C
10719  4139             ;SERIAL.BAUD_7200$       = $0D
10720  4139             SERIAL.BAUD_9600$ = $0E
10721  4139             ;SERIAL.BAUD_19200$       = $0F
10722  4139             
10723  4139             ;SERIAL.OPEN$
10724  4139             
10725  4139             ;        JSR SERIAL.SET_BAUD
10726  4139             
10727  4139             ;        LDA $BA
10728  4139             ;        STA SERIAL.PREV_DEVICE
10729  4139             
10730  4139             ;        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
10731  4139             ;        LDA #$05      ; FILENUMBER 5
10732  4139             ;        ;NOP
10733  4139             ;        ;NOP
10734  4139             ;        JSR $FFC3     ; CALL CLOSE
10735  4139             ;        ;NOP
10736  4139             ;        ;NOP
10737  4139             ;        ;NOP
10738  4139             
10739  4139             ;        ;LDA #2
10740  4139             ;        LDA #1
10741  4139             ;        LDX #<SERIAL.BAUD$
10742  4139             ;        LDY #>SERIAL.BAUD$
10743  4139             ;        JSR $FFBD     ; CALL SETNAM
10744  4139             
10745  4139             ;        LDA #$05      ; FILE NUMBER 5
10746  4139             ;        LDX #$02      ; DEFAULT TO DEVICE 2
10747  4139             ;        LDY #$00      ; SECONDARY ADDRESS 0
10748  4139             ;        JSR $FFBA     ; CALL SETLFS
10749  4139             
10750  4139             ;        JSR $FFC0     ; CALL OPEN
10751  4139             
10752  4139             ;        ; SET THE RS232 INPUT TIMER
10753  4139             ;        ;POKE665,73-(PEEK(678)*30)
10754  4139             ;        LDA 678 ; 0=NTSC, 1=PAL
10755  4139             ;        BEQ @POKE_665_73
10756  4139             ;        LDA #43
10757  4139             ;        JMP @STA_665
10758  4139             ;@POKE_665_73
10759  4139             ;        LDA #73
10760  4139             ;@STA_665
10761  4139             ;        STA 665
10762  4139             
10763  4139             ;        RTS
10764  4139             
10765  4139             ;SERIAL.CLOSE$
10766  4139             ;        LDA #$05      ; FILENUMBER 5
10767  4139             ;        JSR $FFC3     ; CALL CLOSE
10768  4139             
10769  4139             ;        JSR $FFCC     ; CALL CLRCHN
10770  4139             
10771  4139             ;        LDA SERIAL.PREV_DEVICE
10772  4139             ;        STA $BA
10773  4139             
10774  4139             ;        RTS
10775  4139             
10776  4139             SERIAL.CLOSE$ 
10777  4139  A9 05                 LDA #$05      ; FILENUMBER 5
10778  413B  20 C3 FF              JSR $FFC3     ; CALL CLOSE
10779  413E             
10780  413E  20 CC FF              JSR $FFCC     ; CALL CLRCHN
10781  4141             
10782  4141  AD 34 41              LDA SERIAL.PREV_DEVICE
10783  4144  85 BA                 STA $BA
10784  4146             
10785  4146  60                    RTS
10786  4147             
10787  4147             SERIAL.SET_BAUD 
10788  4147  AD 38 41              LDA SERIAL.BAUD$
10789  414A                        
10790  414A             ;        CMP #SERIAL.BAUD_2400$ ; 10 = 2400
10791  414A             ;        BNE @NOT_2400
10792  414A             ;        JSR T2400.SETUP
10793  414A             ;        JMP @SET_BAUD
10794  414A             ;@NOT_2400
10795  414A             
10796  414A  C9 0E                 CMP #SERIAL.BAUD_9600$ ; 14 = 9600
10797  414C  D0 06                 BNE @NOT_9600
10798  414E  20 18 48              JSR UP9600.INIT
10799  4151  4C 54 41              JMP @SET_BAUD
10800  4154             @NOT_9600
10801  4154             
10802  4154             @SET_BAUD
10803  4154  8D 93 02              STA $0293
10804  4157  60                    RTS
10805  4158             
10806  4158             
10807  4158             SERIAL.SEND.ADDRESS$ = $22 ; 2 BYTES
10808  4158             SERIAL.SEND$ 
10809  4158             
10810  4158  A5 22                 LDA SERIAL.SEND.ADDRESS$       ; SET BUFFER ADDRESS
10811  415A  85 AE                 STA $AE
10812  415C  A5 23                 LDA SERIAL.SEND.ADDRESS$+1
10813  415E  85 AF                 STA $AF
10814  4160             
10815  4160  A2 05                 LDX #$05      ; FILENUMBER 5
10816  4162  20 C9 FF              JSR $FFC9     ; CALL CHKOUT (FILE 5 NOW USED AS OUTPUT)
10817  4165             
10818  4165             @SEND
10819  4165             
10820  4165  AD 35 41              LDA SERIAL.DISCARD_BYTE$
10821  4168  F0 05                 BEQ @NO_DISCARD
10822  416A  A9 FE                 LDA #SERIAL.SKIP
10823  416C  20 D2 FF              JSR $FFD2     ; THROW AWAY FIRST BYTE
10824  416F             @NO_DISCARD 
10825  416F             
10826  416F  A0 00                 LDY #$00
10827  4171             @WLOOP     
10828  4171  B1 AE                 LDA ($AE),Y   ; GET BYTE FROM MEMORY
10829  4173             
10830  4173  C9 FF                 CMP #SERIAL.EOT$
10831  4175  D0 0D                 BNE @WJSR
10832  4177  AD 37 41              LDA SERIAL.SEND_EOT$
10833  417A  F0 11                 BEQ @WEND
10834  417C  A9 0D                 LDA #13
10835  417E  20 D2 FF              JSR $FFD2
10836  4181  4C 8D 41              JMP @WEND
10837  4184             @WJSR
10838  4184  20 D2 FF              JSR $FFD2     ; CALL CHROUT (WRITE BYTE TO FILE)
10839  4187                        
10840  4187                        ;CMP #SERIAL.EOT$
10841  4187                        ;BEQ @WEND
10842  4187             
10843  4187                        ;LDA SERIAL.CHECK_FOR_EOT$
10844  4187                        ;BEQ @WEND
10845  4187             
10846  4187  C8                    INY
10847  4188  F0 03                 BEQ @WEND
10848  418A  4C 71 41              JMP @WLOOP
10849  418D             @WEND
10850  418D             
10851  418D  A2 03                 LDX #$03      ; FILENUMBER 3 (SCREEN OUTPUT)
10852  418F  20 C9 FF              JSR $FFC9     ; CALL CHKOUT (FILE 3 NOW USED AS OUTPUT)
10853  4192             
10854  4192  60                    RTS
10855  4193             
10856  4193             SERIAL.RECV.ADDRESS$ = $22 ; 2 BYTES
10857  4193  00         SERIAL.RECV.FIRST_BYTE BYTE $00
10858  4194             SERIAL.RECV$ 
10859  4194             
10860  4194  A5 22                 LDA SERIAL.RECV.ADDRESS$       ; SET BUFFER ADDRESS
10861  4196  85 AE                 STA $AE
10862  4198  A5 23                 LDA SERIAL.RECV.ADDRESS$+1
10863  419A  85 AF                 STA $AF
10864  419C             
10865  419C  A9 00                 LDA #$00
10866  419E  8D 93 41              STA SERIAL.RECV.FIRST_BYTE
10867  41A1                        
10868  41A1  A2 05                 LDX #$05      ; FILENUMBER 5
10869  41A3  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 5 NOW USED AS INPUT)
10870  41A6                        
10871  41A6                        ;LDA $0297 ; IS THE RS-232 INPUT BUFFER EMPTY OR STOP BIT PRESENT
10872  41A6                        ;AND #%00001010
10873  41A6                        ;BEQ @BUFFER_OK
10874  41A6                        ;JMP @DONE
10875  41A6             
10876  41A6             @BUFFER_OK 
10877  41A6             
10878  41A6  AD 35 41              LDA SERIAL.DISCARD_BYTE$
10879  41A9  F0 03                 BEQ @NO_DISCARD
10880  41AB  20 CF FF              JSR $FFCF     ; THROW AWAY FIRST BYTE
10881  41AE             @NO_DISCARD 
10882  41AE             
10883  41AE  A0 00                 LDY #$00
10884  41B0             @RLOOP     
10885  41B0             
10886  41B0  AD 93 41              LDA SERIAL.RECV.FIRST_BYTE
10887  41B3  D0 03                 BNE @CHRIN_WAIT
10888  41B5  4C C1 41              JMP @CHRIN_NO_WAIT
10889  41B8             
10890  41B8             @CHRIN_WAIT 
10891  41B8  20 CF FF              JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
10892  41BB  EE 93 41              INC SERIAL.RECV.FIRST_BYTE
10893  41BE  4C D5 41              JMP @CHIN_DONE
10894  41C1             
10895  41C1             @CHRIN_NO_WAIT 
10896  41C1                        ;JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
10897  41C1  20 4E F1              JSR $F14E
10898  41C4             
10899  41C4  AA                    TAX
10900  41C5  AD 97 02              LDA $0297
10901  41C8                        ;AND #%00001010 ; IS THE RS-232 INPUT BUFFER EMPTY OR STOP BIT PRESENT
10902  41C8  29 08                 AND #%00001000 ; IS THE RS-232 INPUT BUFFER EMPTY
10903  41CA  F0 08                 BEQ @BUFFER_OK2
10904  41CC             
10905  41CC  AD 36 41              LDA SERIAL.RECV_EOT$
10906  41CF  D0 F0                 BNE @CHRIN_NO_WAIT
10907  41D1             
10908  41D1  4C EA 41              JMP @DONE
10909  41D4             @BUFFER_OK2 
10910  41D4             
10911  41D4                        ;LDA #$01
10912  41D4                        ;STA SERIAL.RECV.FIRST_BYTE
10913  41D4  8A                    TXA
10914  41D5             
10915  41D5             @CHIN_DONE 
10916  41D5             
10917  41D5             ;        CMP #13
10918  41D5             ;        BNE @RJSR
10919  41D5             ;        LDA #SERIAL.EOT$
10920  41D5             ;@RJSR
10921  41D5             
10922  41D5                        ;BEQ @REND    ; NO DATA
10923  41D5             
10924  41D5  91 AE                 STA ($AE),Y   ; WRITE BYTE TO MEMORY
10925  41D7             
10926  41D7  C9 0A                 CMP #10
10927  41D9  D0 05                 BNE @RINC
10928  41DB  AD 36 41              LDA SERIAL.RECV_EOT$
10929  41DE  D0 06                 BNE @REND
10930  41E0                        ;CMP #SERIAL.EOT2
10931  41E0                        ;BEQ @REND
10932  41E0             
10933  41E0                        ;LDA SERIAL.WAIT_FOR_EOT$
10934  41E0                        ;BEQ @DONE
10935  41E0             
10936  41E0             @RINC
10937  41E0  C8                    INY
10938  41E1  F0 07                 BEQ @DONE
10939  41E3  4C B0 41              JMP @RLOOP     ; NEXT BYTE
10940  41E6             @REND
10941  41E6  A9 FF                 LDA #SERIAL.EOT$
10942  41E8  91 AE                 STA ($AE),Y
10943  41EA             
10944  41EA             @DONE
10945  41EA  A2 03                 LDX #$03      ; FILENUMBER 3
10946  41EC  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 3 NOW USED AS INPUT)
10947  41EF             
10948  41EF  60                    RTS
10949  41F0             
10950  41F0             
10951  41F0             
10952  41F0             
10953  41F0             *=$5000
10954  5000             
10955  5000             CONVERT.STR2ASCII.STR$ = $E0 ; 2 BYTES
10956  5000             CONVERT.STR2ASCII$ 
10957  5000             
10958  5000  A5 E0                 LDA CONVERT.STR2ASCII.STR$
10959  5002  85 AE                 STA $AE
10960  5004  A5 E1                 LDA CONVERT.STR2ASCII.STR$+1
10961  5006  85 AF                 STA $AF
10962  5008             
10963  5008             @SKIP
10964  5008             
10965  5008  A0 00                 LDY #$00
10966  500A             @LOOP
10967  500A  B1 AE                 LDA ($AE),Y
10968  500C             
10969  500C  C9 FF                 CMP #CONSOLE.NULL$
10970  500E  F0 03                 BEQ @NULL_YES
10971  5010  4C 16 50              JMP @NULL_NO
10972  5013             @NULL_YES
10973  5013  4C 50 50              JMP @DONE
10974  5016             @NULL_NO
10975  5016             
10976  5016  C9 FE                 CMP #CONSOLE.NEWLINE$
10977  5018  F0 03                 BEQ @NEWLINE_YES
10978  501A  4C 22 50              JMP @NEWLINE_NO
10979  501D             @NEWLINE_YES 
10980  501D  A9 0D                 LDA #13
10981  501F  4C 42 50              JMP @NEXTCHAR
10982  5022             @NEWLINE_NO 
10983  5022             
10984  5022  C9 FD                 CMP #CONSOLE.BACKSPACE$
10985  5024  F0 03                 BEQ @BACKSPACE_YES
10986  5026  4C 2E 50              JMP @BACKSPACE_NO
10987  5029             @BACKSPACE_YES 
10988  5029             
10989  5029  A9 14                 LDA #20
10990  502B             
10991  502B  4C 42 50              JMP @NEXTCHAR
10992  502E             @BACKSPACE_NO 
10993  502E             
10994  502E  C9 01                 CMP #$01
10995  5030  B0 03                 BCS @ALPHA1 ; A >= $01
10996  5032  4C 42 50              JMP @NOTALPHA1
10997  5035             @ALPHA1
10998  5035  C9 1B                 CMP #$1B
10999  5037  90 03                 BCC @ALPHA2 ; A < $1B
11000  5039  4C 42 50              JMP @NOTALPHA2
11001  503C             @ALPHA2
11002  503C  18                    CLC
11003  503D                        ;ADC #$40
11004  503D  69 60                 ADC #$60
11005  503F  4C 42 50              JMP @NEXTCHAR
11006  5042             @NOTALPHA1 
11007  5042             @NOTALPHA2 
11008  5042             
11009  5042             ;        CMP #$41
11010  5042             ;        BCS @ALPHA12 ; A >= $41
11011  5042             ;        JMP @NOTALPHA12
11012  5042             ;@ALPHA12
11013  5042             ;        CMP #$5B
11014  5042             ;        BCC @ALPHA22 ; A < $5B
11015  5042             ;        JMP @NOTALPHA22
11016  5042             ;@ALPHA22
11017  5042             ;        CLC
11018  5042             ;        ADC #$20
11019  5042             ;        JMP @NEXTCHAR
11020  5042             ;@NOTALPHA12
11021  5042             ;@NOTALPHA22
11022  5042             
11023  5042             @NEXTCHAR
11024  5042  91 AE                 STA ($AE),Y
11025  5044             
11026  5044  E6 AE                 INC $AE
11027  5046  F0 03                 BEQ @INC_AF
11028  5048  4C 0A 50              JMP @LOOP
11029  504B             @INC_AF
11030  504B  E6 AF                 INC $AF
11031  504D  4C 0A 50              JMP @LOOP
11032  5050             
11033  5050             @DONE
11034  5050             
11035  5050  A9 FF                 LDA #$FF
11036  5052  91 AE                 STA ($AE),Y
11037  5054             
11038  5054  60                    RTS
11039  5055             
11040  5055             CONVERT.ASCII2STR.ASCII$ = $E0 ; 2 BYTES
11041  5055             CONVERT.ASCII2STR$ 
11042  5055             
11043  5055  A5 E0                 LDA CONVERT.ASCII2STR.ASCII$
11044  5057  85 AE                 STA $AE
11045  5059  A5 E1                 LDA CONVERT.ASCII2STR.ASCII$+1
11046  505B  85 AF                 STA $AF
11047  505D             
11048  505D             @SKIP
11049  505D             
11050  505D  A0 00                 LDY #$00
11051  505F             @LOOP
11052  505F  B1 AE                 LDA ($AE),Y
11053  5061             
11054  5061  C9 FF                 CMP #$FF
11055  5063  F0 03                 BEQ @NULL_YES
11056  5065  4C 6B 50              JMP @NULL_NO
11057  5068             @NULL_YES
11058  5068  4C B1 50              JMP @DONE
11059  506B             @NULL_NO
11060  506B             
11061  506B  C9 0A                 CMP #10
11062  506D  F0 03                 BEQ @SKIP_YES
11063  506F  4C 77 50              JMP @SKIP_NO
11064  5072             @SKIP_YES
11065  5072  A5 00                 LDA '-'
11066  5074  4C A3 50              JMP @NEXTCHAR
11067  5077             @SKIP_NO
11068  5077             
11069  5077  C9 0D                 CMP #13
11070  5079  F0 03                 BEQ @NEWLINE_YES
11071  507B  4C 83 50              JMP @NEWLINE_NO
11072  507E             @NEWLINE_YES 
11073  507E  A9 FE                 LDA #CONSOLE.NEWLINE$
11074  5080  4C A3 50              JMP @NEXTCHAR
11075  5083             @NEWLINE_NO 
11076  5083             
11077  5083  C9 14                 CMP #20
11078  5085  F0 03                 BEQ @BACKSPACE_YES
11079  5087  4C 8F 50              JMP @BACKSPACE_NO
11080  508A             @BACKSPACE_YES 
11081  508A             
11082  508A             ;        LDA #CONSOLE.BACKSPACE$
11083  508A             ;        STA CONSOLE.WRITECHR.CHAR$
11084  508A             ;        JSR CONSOLE.WRITECHR$
11085  508A             
11086  508A             ;        LDA #' '
11087  508A             ;        STA CONSOLE.WRITECHR.CHAR$
11088  508A             ;        JSR CONSOLE.WRITECHR$
11089  508A             
11090  508A  A9 FD                 LDA #CONSOLE.BACKSPACE$
11091  508C             
11092  508C  4C A3 50              JMP @NEXTCHAR
11093  508F             @BACKSPACE_NO 
11094  508F             
11095  508F             ;        CMP #$41
11096  508F             ;        BCS @ALPHA1 ; A >= $41
11097  508F             ;        JMP @NOTALPHA1
11098  508F             ;@ALPHA1
11099  508F             ;        CMP #$5B
11100  508F             ;        BCC @ALPHA2 ; A < $5B
11101  508F             ;        JMP @NOTALPHA2
11102  508F             ;@ALPHA2
11103  508F             ;        SEC
11104  508F             ;        SBC #$40
11105  508F             ;        JMP @NEXTCHAR
11106  508F             ;@NOTALPHA1
11107  508F             ;@NOTALPHA2
11108  508F             
11109  508F  C9 61                 CMP #$61
11110  5091  B0 03                 BCS @ALPHA12 ; A >= $61
11111  5093  4C A3 50              JMP @NOTALPHA12
11112  5096             @ALPHA12
11113  5096  C9 7B                 CMP #$7B
11114  5098  90 03                 BCC @ALPHA22 ; A < $7B
11115  509A  4C A3 50              JMP @NOTALPHA22
11116  509D             @ALPHA22
11117  509D  38                    SEC
11118  509E                        ;SBC #$20
11119  509E  E9 60                 SBC #$60
11120  50A0  4C A3 50              JMP @NEXTCHAR
11121  50A3             @NOTALPHA12 
11122  50A3             @NOTALPHA22 
11123  50A3             
11124  50A3             @NEXTCHAR
11125  50A3  91 AE                 STA ($AE),Y
11126  50A5             
11127  50A5  E6 AE                 INC $AE
11128  50A7  F0 03                 BEQ @INC_AF
11129  50A9  4C 5F 50              JMP @LOOP
11130  50AC             @INC_AF
11131  50AC  E6 AF                 INC $AF
11132  50AE  4C 5F 50              JMP @LOOP
11133  50B1             
11134  50B1             @DONE
11135  50B1             
11136  50B1  A9 FF                 LDA #CONSOLE.NULL$
11137  50B3  91 AE                 STA ($AE),Y
11138  50B5             
11139  50B5  60                    RTS
11140  50B6             
11141  50B6             
11142  50B6             
11143  50B6             
11144  50B6             ; HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:REU_PROGRAMMING
11145  50B6             
11146  50B6             REU.STATUS = $DF00
11147  50B6             REU.COMMAND = $DF01
11148  50B6             REU.C64BASE = $DF02
11149  50B6             REU.REUBASE = $DF04
11150  50B6             REU.TRANSLEN = $DF07
11151  50B6             REU.IRQMASK = $DF09
11152  50B6             REU.CONTROL = $DF0A
11153  50B6             
11154  50B6             REU.ISINSTALLED.VALUE$ = $FB ; 1 BYTE
11155  50B6             REU.ISINSTALLED$ 
11156  50B6  A9 00                 LDA #$00
11157  50B8  85 FB                 STA REU.ISINSTALLED.VALUE$ ; SET DEFAULT VALUE
11158  50BA             
11159  50BA                        ; IF THE VALUE PUT INTO THE C64BASE ADDRESS STAYS THEN THERE IS A REU INSTALLED.
11160  50BA  A9 01                 LDA #$01
11161  50BC  8D 02 DF              STA REU.C64BASE
11162  50BF  AD 02 DF              LDA REU.C64BASE
11163  50C2  F0 02                 BEQ @DONE
11164  50C4  85 FB                 STA REU.ISINSTALLED.VALUE$
11165  50C6             @DONE
11166  50C6  60                    RTS
11167  50C7             
11168  50C7             REU.TRANSFERDATA.C64ADDRESS = $FB ; 2 BYTES
11169  50C7             REU.TRANSFERDATA.REUADDRESS = $8B ; 3 BYTES
11170  50C7             REU.TRANSFERDATA.LENGTH = $FD ; 2 BYTES
11171  50C7             REU.TRANSFERDATA.COMMAND = $2A ; 1 BYTE
11172  50C7             REU.TRANSFERDATA.ORGLENGTH = $57 ; 2 BYTES
11173  50C7             REU.TRANSFERDATA 
11174  50C7             
11175  50C7                        ; WE NEED TO DETERMINE WHETHER OR NOT THE REUBASE 3RD AND HIGHEST BYTE
11176  50C7                        ; IS GOING TO WRAP, IF SO WE NEED TO PERFORM A SECOND TRANSFER
11177  50C7  A5 8B                 LDA REU.TRANSFERDATA.REUADDRESS
11178  50C9  85 80                 STA MATH.ADD24.ADDEND1$
11179  50CB  A5 8C                 LDA REU.TRANSFERDATA.REUADDRESS+1
11180  50CD  85 81                 STA MATH.ADD24.ADDEND1$+1
11181  50CF  A5 8D                 LDA REU.TRANSFERDATA.REUADDRESS+2
11182  50D1  85 82                 STA MATH.ADD24.ADDEND1$+2
11183  50D3  A5 FD                 LDA REU.TRANSFERDATA.LENGTH
11184  50D5  85 83                 STA MATH.ADD24.ADDEND2$
11185  50D7  A5 FE                 LDA REU.TRANSFERDATA.LENGTH+1
11186  50D9  85 84                 STA MATH.ADD24.ADDEND2$+1
11187  50DB  A9 00                 LDA #0
11188  50DD  85 85                 STA MATH.ADD24.ADDEND2$+2
11189  50DF  20 0E 28              JSR MATH.ADD24$
11190  50E2  A5 88                 LDA MATH.ADD24.SUM$+2
11191  50E4  C5 8D                 CMP REU.TRANSFERDATA.REUADDRESS+2
11192  50E6  D0 03                 BNE @WRAPPED
11193  50E8  4C 44 51              JMP REU.TRANSFERDATA.SETREGISTERS
11194  50EB             @WRAPPED
11195  50EB             
11196  50EB                        ; AT THIS POINT THERE WILL BE A WRAP SO WE NEED TO PERFORM
11197  50EB                        ; TWO SEPARATE TRANSFERS
11198  50EB             
11199  50EB                        ; COPY THE ORIGINAL LENGTH
11200  50EB  A5 FD                 LDA REU.TRANSFERDATA.LENGTH
11201  50ED  85 57                 STA REU.TRANSFERDATA.ORGLENGTH
11202  50EF  A5 FE                 LDA REU.TRANSFERDATA.LENGTH+1
11203  50F1  85 58                 STA REU.TRANSFERDATA.ORGLENGTH+1
11204  50F3             
11205  50F3                        ; $010000 - RUE.TRANSFERDATA.REUADDRESS(16 BITS) = 1ST NEW LENGTH
11206  50F3  A9 00                 LDA #$00
11207  50F5  85 80                 STA MATH.SUBTRACT24.MENUEND$
11208  50F7  85 81                 STA MATH.SUBTRACT24.MENUEND$+1
11209  50F9  A9 01                 LDA #$01
11210  50FB  85 82                 STA MATH.SUBTRACT24.MENUEND$+2
11211  50FD  A5 8B                 LDA REU.TRANSFERDATA.REUADDRESS
11212  50FF  85 83                 STA MATH.SUBTRACT24.SUBTRAHEND$
11213  5101  A5 8C                 LDA REU.TRANSFERDATA.REUADDRESS+1
11214  5103  85 84                 STA MATH.SUBTRACT24.SUBTRAHEND$+1
11215  5105  A9 00                 LDA #$00
11216  5107  85 85                 STA MATH.SUBTRACT24.SUBTRAHEND$+2
11217  5109  20 DC 17              JSR MATH.SUBTRACT24$
11218  510C  A5 86                 LDA MATH.SUBTRACT24.DIFFERENCE$
11219  510E  85 FD                 STA REU.TRANSFERDATA.LENGTH
11220  5110  A5 87                 LDA MATH.SUBTRACT24.DIFFERENCE$+1
11221  5112  85 FE                 STA REU.TRANSFERDATA.LENGTH+1
11222  5114                        
11223  5114                        ; PERFORM THE FIRST TRANSFER
11224  5114  20 44 51              JSR REU.TRANSFERDATA.SETREGISTERS
11225  5117                        
11226  5117             
11227  5117                        ; THE C64 WILL DO THIS FOR US!
11228  5117             ;        ; NEED TO INCREASE REU.TRANSFERDATA.C64ADDRESS BY 1ST NEW LENGTH
11229  5117             ;        LDA REU.C64BASE
11230  5117             ;        STA MATH.ADD16.ADDEND1$
11231  5117             ;        LDA REU.C64BASE+1
11232  5117             ;        STA MATH.ADD16.ADDEND1$+1
11233  5117             ;        LDA REU.TRANSLEN
11234  5117             ;        STA MATH.ADD16.ADDEND2$
11235  5117             ;        LDA REU.TRANSLEN+1
11236  5117             ;        STA MATH.ADD16.ADDEND2$+1
11237  5117             ;        JSR MATH.ADD16$
11238  5117             ;        LDA MATH.ADD16.SUM$
11239  5117             ;        STA REU.C64BASE
11240  5117             ;        LDA MATH.ADD16.SUM$+1
11241  5117             ;        STA REU.C64BASE+1
11242  5117  AD 02 DF              LDA REU.C64BASE
11243  511A  85 FB                 STA REU.TRANSFERDATA.C64ADDRESS
11244  511C  AD 03 DF              LDA REU.C64BASE+1
11245  511F  85 FC                 STA REU.TRANSFERDATA.C64ADDRESS+1
11246  5121             
11247  5121                        ; ORIGINAL LENGTH - 1ST NEW LENGTH = 2ND NEW LENGTH
11248  5121  A5 57                 LDA REU.TRANSFERDATA.ORGLENGTH
11249  5123  85 80                 STA MATH.SUBTRACT16.MENUEND$
11250  5125  A5 58                 LDA REU.TRANSFERDATA.ORGLENGTH+1
11251  5127  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
11252  5129  A5 FD                 LDA REU.TRANSFERDATA.LENGTH
11253  512B  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
11254  512D  A5 FE                 LDA REU.TRANSFERDATA.LENGTH+1
11255  512F  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
11256  5131  20 96 28              JSR MATH.SUBTRACT16$
11257  5134  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
11258  5136  85 FD                 STA REU.TRANSFERDATA.LENGTH
11259  5138  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
11260  513A  85 FE                 STA REU.TRANSFERDATA.LENGTH+1
11261  513C             
11262  513C                        ; SET THE REU.TRANSFERDATA.REUADDRESS TO THE NEXT 24-BIT PAGE
11263  513C  A9 00                 LDA #0
11264  513E  85 8B                 STA REU.TRANSFERDATA.REUADDRESS
11265  5140  85 8C                 STA REU.TRANSFERDATA.REUADDRESS+1
11266  5142  E6 8D                 INC REU.TRANSFERDATA.REUADDRESS+2
11267  5144             
11268  5144                        ; FALL THROUGH TO THE CODE BELOW
11269  5144             
11270  5144             REU.TRANSFERDATA.SETREGISTERS 
11271  5144  A9 00                 LDA #0
11272  5146  8D 0A DF              STA REU.CONTROL ; TO MAKE SURE BOTH ADDRESSES ARE COUNTED UP
11273  5149             
11274  5149  A5 FB                 LDA REU.TRANSFERDATA.C64ADDRESS
11275  514B  8D 02 DF              STA REU.C64BASE
11276  514E  A5 FC                 LDA REU.TRANSFERDATA.C64ADDRESS+1
11277  5150  8D 03 DF              STA REU.C64BASE+1
11278  5153             
11279  5153  A5 8B                 LDA REU.TRANSFERDATA.REUADDRESS
11280  5155  8D 04 DF              STA REU.REUBASE
11281  5158  A5 8C                 LDA REU.TRANSFERDATA.REUADDRESS+1
11282  515A  8D 05 DF              STA REU.REUBASE+1
11283  515D  A5 8D                 LDA REU.TRANSFERDATA.REUADDRESS+2
11284  515F  8D 06 DF              STA REU.REUBASE+2
11285  5162             
11286  5162  A5 FD                 LDA REU.TRANSFERDATA.LENGTH
11287  5164  8D 07 DF              STA REU.TRANSLEN
11288  5167  A5 FE                 LDA REU.TRANSFERDATA.LENGTH+1
11289  5169  8D 08 DF              STA REU.TRANSLEN+1
11290  516C             
11291  516C             ;REU.TRANSFERDATA.SETCOMMAND
11292  516C             
11293  516C  A5 2A                 LDA REU.TRANSFERDATA.COMMAND
11294  516E  8D 01 DF              STA REU.COMMAND
11295  5171             
11296  5171  60                    RTS
11297  5172             
11298  5172             REU.SAVEDATA.C64ADDRESS$ = $FB ; 2 BYTES
11299  5172             REU.SAVEDATA.REUADDRESS$ = $8B ; 3 BYTES
11300  5172             REU.SAVEDATA.LENGTH$ = $FD ; 2 BYTES
11301  5172             REU.SAVEDATA$ 
11302  5172  A9 90                 LDA #%10010000;  C64 -> REU WITH IMMEDIATE EXECUTION
11303  5174  85 2A                 STA REU.TRANSFERDATA.COMMAND
11304  5176  4C C7 50              JMP REU.TRANSFERDATA
11305  5179             
11306  5179             REU.LOADDATA.C64ADDRESS$ = $FB ; 2 BYTES
11307  5179             REU.LOADDATA.REUADDRESS$ = $8B ; 3 BYTES
11308  5179             REU.LOADDATA.LENGTH$ = $FD ; 2 BYTES
11309  5179             REU.LOADDATA$ 
11310  5179  A9 91                 LDA #%10010001;  REU -> C64 WITH IMMEDIATE EXECUTION
11311  517B  85 2A                 STA REU.TRANSFERDATA.COMMAND
11312  517D  4C C7 50              JMP REU.TRANSFERDATA
11313  5180             
11314  5180             REU.SWAPDATA.C64ADDRESS$ = $FB ; 2 BYTES
11315  5180             REU.SWAPDATA.REUADDRESS$ = $8B ; 3 BYTES
11316  5180             REU.SWAPDATA.LENGTH$ = $FD ; 2 BYTES
11317  5180             REU.SWAPDATA$ 
11318  5180  A9 92                 LDA #%10010010;  C64 <-> REU WITH IMMEDIATE EXECUTION
11319  5182  85 2A                 STA REU.TRANSFERDATA.COMMAND
11320  5184  4C C7 50              JMP REU.TRANSFERDATA
11321  5187             
11322  5187             REU.COMPAREDATA.C64ADDRESS$ = $FB ; 2 BYTES
11323  5187             REU.COMPAREDATA.REUADDRESS$ = $8B ; 3 BYTES
11324  5187             REU.COMPAREDATA.LENGTH$ = $FD ; 2 BYTES
11325  5187             REU.COMPAREDATA.ISEQUAL$ = $02 ; 1 BYTES
11326  5187             REU.COMPAREDATA$ 
11327  5187  A9 00                 LDA #$00
11328  5189  85 02                 STA REU.COMPAREDATA.ISEQUAL$ ; SET DEFAULT VALUE
11329  518B             
11330  518B  A9 93                 LDA #%10010011;  C64 - REU WITH IMMEDIATE EXECUTION
11331  518D  85 2A                 STA REU.TRANSFERDATA.COMMAND
11332  518F  20 C7 50              JSR REU.TRANSFERDATA
11333  5192             
11334  5192                        ;BIT 5:     FAULT  (1 = BLOCK VERIFY ERROR)
11335  5192                        ;           SET IF A DIFFERENCE BETWEEN C64- AND REU-MEMORY AREAS WAS FOUND
11336  5192                        ;           DURING A COMPARE-COMMAND.
11337  5192  AD 00 DF              LDA REU.STATUS
11338  5195  29 20                 AND #%00100000
11339  5197  D0 04                 BNE @DONE ; IF NOT EQUAL TO 0 THEN THERE WAS A FAULT (DIFFERENCE)
11340  5199  A9 01                 LDA #$01
11341  519B  85 02                 STA REU.COMPAREDATA.ISEQUAL$
11342  519D             @DONE
11343  519D  60                    RTS
11344  519E             
11345  519E             
11346  519E             
11347  519E             
11348  519E             
11349  519E             ;IRQ.RATERLINE$ BYTE 210
11350  519E  8C         IRQ.RATERLINE$ BYTE 140
11351  519F             
11352  519F  00 00      IRQ.ADDRESS WORD $000
11353  51A1  00 00      IRQ.OLDADDRESS WORD $000
11354  51A3             IRQ.INSTALL.ADDRESS$ = $FB ; 2 BYTES
11355  51A3             IRQ.INSTALL$ 
11356  51A3  78                    SEI        ;DISABLE MASKABLE IRQS
11357  51A4             
11358  51A4  A5 FB                 LDA IRQ.INSTALL.ADDRESS$
11359  51A6  8D 9F 51              STA IRQ.ADDRESS
11360  51A9  A5 FC                 LDA IRQ.INSTALL.ADDRESS$+1
11361  51AB  8D A0 51              STA IRQ.ADDRESS+1
11362  51AE             
11363  51AE  AD FE FF              LDA $FFFE
11364  51B1  8D A1 51              STA IRQ.OLDADDRESS
11365  51B4  AD FF FF              LDA $FFFF
11366  51B7  8D A2 51              STA IRQ.OLDADDRESS+1
11367  51BA             
11368  51BA  A9 7F                 LDA #$7F
11369  51BC  8D 0D DC              STA $DC0D  ;DISABLE TIMER INTERRUPTS WHICH CAN BE GENERATED BY THE TWO CIA CHIPS
11370  51BF  8D 0D DD              STA $DD0D  ;THE KERNAL USES SUCH AN INTERRUPT TO FLASH THE CURSOR AND SCAN THE KEYBOARD, SO WE BETTER
11371  51C2                        ;STOP IT.
11372  51C2             
11373  51C2  AD 0D DC              LDA $DC0D  ;BY READING THIS TWO REGISTERS WE NEGATE ANY PENDING CIA IRQS.
11374  51C5  AD 0D DD              LDA $DD0D  ;IF WE DON'T DO THIS, A PENDING CIA IRQ MIGHT OCCUR AFTER WE FINISH SETTING UP OUR IRQ.
11375  51C8                        ;WE DON'T WANT THAT TO HAPPEN.
11376  51C8             
11377  51C8  A9 01                 LDA #$01   ;THIS IS HOW TO TELL THE VICII TO GENERATE A RASTER INTERRUPT
11378  51CA  8D 1A D0              STA $D01A
11379  51CD             
11380  51CD  AD 9E 51              LDA IRQ.RATERLINE$ ;THIS IS HOW TO TELL AT WHICH RASTERLINE WE WANT THE IRQ TO BE TRIGGERED
11381  51D0  8D 12 D0              STA $D012
11382  51D3             
11383  51D3  A9 1B                 LDA #$1B   ;AS THERE ARE MORE THAN 256 RASTERLINES, THE TOPMOST BIT OF $D011 SERVES AS
11384  51D5  8D 11 D0              STA $D011  ;THE 9TH BIT FOR THE RASTERLINE WE WANT OUR IRQ TO BE TRIGGERED.
11385  51D8                        ;HERE WE SIMPLY SET UP A CHARACTER SCREEN, LEAVING THE TOPMOST BIT 0.
11386  51D8             
11387  51D8  A9 35                 LDA #$35   ;WE TURN OFF THE BASIC AND KERNAL ROM HERE
11388  51DA  85 01                 STA $01    ;THE CPU NOW SEES RAM EVERYWHERE EXCEPT AT $D000-$E000, WHERE STILL THE REGISTERS OF
11389  51DC                        ;SID/VICII/ETC ARE VISIBLE
11390  51DC             
11391  51DC  A9 1D                 LDA #<IRQ.HANDLER  ;THIS IS HOW WE SET UP
11392  51DE  8D FE FF              STA $FFFE  ;THE ADDRESS OF OUR INTERRUPT CODE
11393  51E1  A9 52                 LDA #>IRQ.HANDLER
11394  51E3  8D FF FF              STA $FFFF
11395  51E6             
11396  51E6  58                    CLI        ;ENABLE MASKABLE INTERRUPTS AGAIN
11397  51E7             
11398  51E7  60                    RTS
11399  51E8             
11400  51E8             IRQ.UNINSTALL$ 
11401  51E8  78                    SEI        ;DISABLE MASKABLE IRQS
11402  51E9             
11403  51E9  A9 81                 LDA #$81
11404  51EB  8D 0D DC              STA $DC0D  ;DISABLE TIMER INTERRUPTS WHICH CAN BE GENERATED BY THE TWO CIA CHIPS
11405  51EE  8D 0D DD              STA $DD0D  ;THE KERNAL USES SUCH AN INTERRUPT TO FLASH THE CURSOR AND SCAN THE KEYBOARD, SO WE BETTER
11406  51F1                        ;STOP IT.
11407  51F1             
11408  51F1  AD 0D DC              LDA $DC0D  ;BY READING THIS TWO REGISTERS WE NEGATE ANY PENDING CIA IRQS.
11409  51F4  AD 0D DD              LDA $DD0D  ;IF WE DON'T DO THIS, A PENDING CIA IRQ MIGHT OCCUR AFTER WE FINISH SETTING UP OUR IRQ.
11410  51F7                        ;WE DON'T WANT THAT TO HAPPEN.
11411  51F7             
11412  51F7  A9 00                 LDA #$00   ;THIS IS HOW TO TELL THE VICII TO GENERATE A RASTER INTERRUPT
11413  51F9  8D 1A D0              STA $D01A
11414  51FC             
11415  51FC  AD 9E 51              LDA IRQ.RATERLINE$ ;THIS IS HOW TO TELL AT WHICH RASTERLINE WE WANT THE IRQ TO BE TRIGGERED
11416  51FF  8D 12 D0              STA $D012
11417  5202             
11418  5202  A9 1B                 LDA #$1B   ;AS THERE ARE MORE THAN 256 RASTERLINES, THE TOPMOST BIT OF $D011 SERVES AS
11419  5204  8D 11 D0              STA $D011  ;THE 9TH BIT FOR THE RASTERLINE WE WANT OUR IRQ TO BE TRIGGERED.
11420  5207                        ;HERE WE SIMPLY SET UP A CHARACTER SCREEN, LEAVING THE TOPMOST BIT 0.
11421  5207             
11422  5207  A9 35                 LDA #$35   ;WE TURN OFF THE BASIC AND KERNAL ROM HERE
11423  5209  85 01                 STA $01    ;THE CPU NOW SEES RAM EVERYWHERE EXCEPT AT $D000-$E000, WHERE STILL THE REGISTERS OF
11424  520B                        ;SID/VICII/ETC ARE VISIBLE
11425  520B             
11426  520B  AD A1 51              LDA IRQ.OLDADDRESS
11427  520E  8D FE FF              STA $FFFE  ;THE ADDRESS OF OUR INTERRUPT CODE
11428  5211  AD A2 51              LDA IRQ.OLDADDRESS+1
11429  5214  8D FF FF              STA $FFFF
11430  5217             
11431  5217  58                    CLI        ;ENABLE MASKABLE INTERRUPTS AGAIN
11432  5218             
11433  5218             
11434  5218  A9 36                 LDA #$36 ; BANK SWITCH BASIC ROM INTO RAM
11435  521A  85 01                 STA $01
11436  521C             
11437  521C  60                    RTS
11438  521D             
11439  521D             IRQ.HANDLER 
11440  521D  8D 34 52              STA @ATEMP+1
11441  5220  8E 36 52              STX @XTEMP+1
11442  5223  8C 38 52              STY @YTEMP+1
11443  5226             
11444  5226                        ; THIS IS HOW TO DO AN INDIRECT JSR
11445  5226  A9 52                 LDA #>@RETURN   ; BECAUSE THE STACK WORKS BACKWARDS YOU NEED TO PUSH FIRST THEN HI THEN LO ADDRESS
11446  5228  48                    PHA
11447  5229  A9 2F                 LDA #<@RETURN
11448  522B  48                    PHA
11449  522C  6C 9F 51              JMP (IRQ.ADDRESS)
11450  522F             @RETURN
11451  522F  EA                    NOP             ; BECAUSE RTS ADDS 1 TO THE RETURN ADDRESS WE PUT THIS NOP AS A PLACE HOLDER.
11452  5230             
11453  5230  4E 19 D0              LSR $D019    ;AS STATED EARLIER THIS MIGHT FAIL ONLY ON EXOTIC HW LIKE C65 ETC.
11454  5233                        ;LDA #$FF STA $D019 IS EQUALLY FAST, BUT USES TWO MORE BYTES AND
11455  5233                        ;TRASHES A
11456  5233             @ATEMP     
11457  5233  A9 00                 LDA #$00
11458  5235             @XTEMP     
11459  5235  A2 00                 LDX #$00
11460  5237             @YTEMP     
11461  5237  A0 00                 LDY #$00
11462  5239             
11463  5239  40                    RTI        ;RETURN FROM INTERRUPT, THIS WILL LOAD INTO THE PROGRAM VCOUNTER REGISTER THE ADDRESS
11464  523A                        ;WHERE THE CPU WAS WHEN THE INTERRUPT CONDITION ARISED WHICH WILL MAKE THE CPU CONTINUE
11465  523A                        ;THE CODE IT WAS INTERRUPTED AT ALSO RESTORES THE STATUS REGISTER OF THE CPU
11466  523A             IRQ.DISABLE$ 
11467  523A  78                    SEI
11468  523B  60                    RTS
11469  523C             
11470  523C             IRQ.ENABLE$ 
11471  523C  58                    CLI
11472  523D  60                    RTS
11473  523E             
11474  523E             
11475  523E             
11476  523E             ;ALIGN $100 ; ALIGN THE MAIN ENTRY POINT
11477  523E             *=$C000
11478  C000             
11479  C000                        
11480  C000             

******* 389 Label(s) *******
audio._digioff = $3B09 
audio._digion = $3AB7 
audio.beep$ = $38D2 
audio.digi_nib = $3AE3 
audio.digi_s1 = $3AF2 
audio.digi_s2 = $3AFC 
audio.digi_SK1 = $3AE1 
audio.digid418nmi = $3ABF 
audio.digiend$ = $39EF 
audio.digiendaddress$ = $39D5 
audio.digifinished$ = $39D9 
audio.digiinit$ = $39F8 
audio.digioff$ = $3A5B 
audio.digion$ = $3A43 
audio.digiplay$ = $3A84 
audio.digisamplerate$ = $39D7 
audio.digistart$ = $39DA 
audio.digistartaddress$ = $39D3 
audio.digistophi = $3AC6 
audio.digistoplo = $3ACC 
audio.getvoiceaddress = $387D 
audio.setattackdecay$ = $38A3 
audio.setfrequency$ = $38BF 
audio.setsustainrelease$ = $38B1 
audio.setvolume$ = $3877 
audio.setwaveform$ = $3895 
audio.sid_init = $391D 
audio.sid_off = $394B 
audio.sid_on = $392C 
audio.sid_play = $3991 
audio.sidend$ = $390F 
audio.sidfinished$ = $3900 
audio.sidinitaddress$ = $38FC 
audio.sidoff = $39D2 
audio.sidon = $39A4 
audio.sidplayaddress$ = $38FE 
audio.sidstart$ = $3903 
audio.sidtimer$ = $3901 
console.calc_currentaddress = $13C4 
console.caretchar$ = $1872 
console.caretstartaddress = $1873 
console.charactercolor = $12F4 
console.charactersinverted = $12F5 
console.clear$ = $1376 
console.currentaddress = $12EE 
console.currentcoloraddr = $12F2 
console.currentcolumn = $12F0 
console.currentrow = $12F1 
console.dec_memaddress = $1626 
console.dec_memaddress.dec_currentcolumn = $1690 
console.dec_memaddress.dec_currentrow = $168D 
console.dec_memaddress.end = $1693 
console.dec_memaddress.reset_lr = $166F 
console.end = $1335 
console.getcolumn$ = $13B5 
console.getkey = $1A6A 
console.getkey.Buffer = $1803 
console.getkey.BufferEmpty = $1B9D 
console.getkey.BufferOld = $1800 
console.getkey.BufferQuantity = $1807 
console.getkey.ControlPort = $1A66 
console.getkey.Exist = $1B80 
console.getkey.KeyFound = $1A3C 
console.getkey.KeyInRow = $1A04 
console.getkey.KeyTable = $1BC0 
console.getkey.KeyTableShift$ = $1809 
console.getkey.loop1 = $1A86 
console.getkey.loop2 = $1B5E 
console.getkey.NoActivityDetected = $1A54 
console.getkey.OverFlow = $1A4C 
console.getkey.Return = $1B9F 
console.getkey.SimultaneousAlphanumericKeysFlag = $1808 
console.getkey.TooManyNewKeys = $1BB4 
console.getrow$ = $13A6 
console.inc_memaddress = $15A5 
console.inc_memaddress.end = $1622 
console.inc_memaddress.inc_currentcolumn = $161F 
console.inc_memaddress.inc_currentrow = $161C 
console.inc_memaddress.inc_currentrow_skip = $1600 
console.inc_memaddress.reset_lr = $15F1 
console.readchr = $1882 
console.readchr$ = $1876 
console.readchr.caret = $16CE 
console.readchr.prev_chr = $1875 
console.readgen = $1969 
console.readgen.SkipAllowChr = $19BF 
console.readint.allowedchrs = $1752 
console.readint.copymem = $17BC 
console.readint16$ = $1778 
console.readint32$ = $1796 
console.readint8$ = $175E 
console.readkey$ = $1849 
console.readstr$ = $1923 
console.resetbufaddress = $19EF 
console.scrollup$ = $142D 
console.scrollupchrs = $1463 
console.setbackgroundcolor$ = $1697 
console.setbordercolor$ = $169D 
console.setcharactercolor$ = $16B7 
console.setcharacterinverted$ = $16BD 
console.setcolumn$ = $13BB 
console.setforegroundcolor$ = $16A3 
console.setrow$ = $13AC 
console.start = $12F6 
console.writechr$ = $1519 
console.writechr.offset = $1517 
console.writeint = $1500 
console.writeint16$ = $14D7 
console.writeint32$ = $14DF 
console.writeint8$ = $14CF 
console.writeln$ = $14AF 
console.writestr$ = $14B7 
convert.ascii2str$ = $5055 
convert.dec2hex16 = $1CB9 
convert.dec2hex32 = $1D2D 
convert.dec2hex8 = $1C65 
convert.hex2dec16 = $1C1F 
convert.hex2dec32 = $1C40 
convert.hex2dec8 = $1C00 
convert.str2ascii$ = $5000 
disk.checkerror = $1F8A 
disk.copyfile$ = $3FD7 
disk.error$ = $3B41 
disk.execmd = $3F4A 
disk.execmd.filename = $3F1E 
disk.execmd.len = $3F49 
disk.execmd.name = $3F21 
disk.execmd1 = $3F7E 
disk.execmd2 = $3FE7 
disk.fileexists$ = $3D1D 
disk.format$ = $3FB2 
disk.getdiskinfo$ = $3C95 
disk.getdiskinfo._setnam = $3E3E 
disk.getdiskinfo._setnam_all = $3E3C 
disk.getdiskinfo.blocksfree$ = $3C93 
disk.getdiskinfo.filename = $3C7F 
disk.getdiskinfo.label$ = $3C82 
disk.getdiskinfo.reset = $3E3C 
disk.getfileinfo$ = $3DCE 
disk.getfileinfo.blocks$ = $3DA9 
disk.getfileinfo.buf1 = $3DAA 
disk.getfileinfo.buf2 = $3DBF 
disk.getfileinfo.buf3 = $3DC4 
disk.getfileinfo.cbm = $3DA5 
disk.getfileinfo.cbm2 = $3DA7 
disk.getfileinfo.extension = $3DC1 
disk.getfileinfo.filename = $3DAD 
disk.getfileinfo.len = $3DA3 
disk.getfileinfo.name$ = $3DAF 
disk.getfileinfo.offset = $3DA4 
disk.getfileinfo.type$ = $3DC8 
disk.getfileinfo.typemap = $3DC9 
disk.getfileinfoclose$ = $3D4D 
disk.getnextfileinfo$ = $3E7D 
disk.loadfile$ = $404B 
disk.readerrorchannel = $3C2F 
disk.readerrorchannel.errordec = $3C2D 
disk.readfile = $3BA1 
disk.readfile$ = $3B6E 
disk.renamefile$ = $3FDF 
disk.reset$ = $1FA9 
disk.reset.string = $1FA7 
disk.scratchfile = $3FCF 
disk.scratchfile$ = $3FBA 
disk.setnam = $3B42 
disk.validate$ = $1F9A 
disk.writefile$ = $3D56 
djr0 = $3B24 
djr1 = $3B28 
djr2 = $3B2C 
djr3 = $3B30 
djrrb = $3B1C 
graphics.clear$ = $2EC7 
graphics.createtable = $2F83 
graphics.currentaddress = $2DBF 
graphics.currentcoloraddr = $2DC1 
graphics.disablemulticolormode$ = $2E2E 
graphics.drawbox$ = $33F6 
graphics.drawchr = $2FCA 
graphics.drawcircle$ = $3483 
graphics.drawfill$ = $3135 
graphics.drawline$ = $3184 
graphics.enablemulticolormode$ = $2E75 
graphics.end = $2EA6 
graphics.enter$ = $2DC4 
graphics.getspriteandmask = $3778 
graphics.getspritecolor$ = $37FC 
graphics.getspritelocation$ = $3846 
graphics.getspriteormask = $3765 
graphics.hidesprite$ = $378C 
graphics.isactive$ = $2DC3 
graphics.leave$ = $2DC8 
graphics.plotcircle = $359C 
graphics.scrollup = $30AC 
graphics.setbitmapmode$ = $2DCC 
graphics.setcolor$ = $2EB0 
graphics.sethiresmode$ = $2E0E 
graphics.setmulticolormode$ = $2E37 
graphics.setpixel$ = $3107 
graphics.setspritecolor$ = $37EC 
graphics.setspritehires$ = $37A7 
graphics.setspritelocation$ = $380E 
graphics.setspritemulticolor$ = $379B 
graphics.settextmode$ = $2E7E 
graphics.showsprite$ = $3780 
graphics.start = $2E96 
graphics.stretchspritehorizontally$ = $37B6 
graphics.stretchspritevertically$ = $37D1 
graphics.tablecreated = $2F82 
graphics.unstretchspritehorizontally$ = $37C2 
graphics.unstretchspritevertically$ = $37DD 
irq.address = $519F 
irq.disable$ = $523A 
irq.enable$ = $523C 
irq.handler = $521D 
irq.install$ = $51A3 
irq.oldaddress = $51A1 
irq.raterline$ = $519E 
irq.uninstall$ = $51E8 
joystick.getstate$ = $3B0A 
kernel.begin = $0F10 
kernel.debugmode$ = $0F0B 
kernel.end = $0F34 
kernel.halt$ = $0F49 
kernel.reset$ = $1F84 
kernel.start = $0F1A 
math.abs16$ = $2A73 
math.add16$ = $2800 
math.add24$ = $280E 
math.add32$ = $2822 
math.cmp16$ = $28E4 
math.cmp32$ = $2900 
math.dec16$ = $28BE 
math.divide16$ = $2A00 
math.divide32$ = $2A26 
math.divide8$ = $29DA 
math.exponent8$ = $2A90 
math.inc16$ = $283C 
math.inc24$ = $2862 
math.multiply16$ = $2967 
math.multiply32$ = $298D 
math.multiply8$ = $2948 
math.random16$ = $2926 
math.random8$ = $2917 
math.subtract16$ = $2896 
math.subtract24$ = $17DC 
math.subtract32$ = $28A4 
memory.allocate$ = $109D 
memory.allocate.dec_length = $115A 
memory.allocate.find = $1176 
memory.allocate.inc_address = $1244 
memory.allocate.inc_length = $113E 
memory.backupzp = $0F61 
memory.calculate_free = $12CC 
memory.copy$ = $0F8A 
memory.copy16$ = $0F9C 
memory.deallocate$ = $1287 
memory.end = $0F5A 
memory.endheap$ = $1097 
memory.fill$ = $1003 
memory.fill16$ = $1015 
memory.free$ = $1063 
memory.heapadress = $105D 
memory.heapadress_lr = $105F 
memory.heapstarted = $1067 
memory.pullregs$ = $104D 
memory.pullzp$ = $1F31 
memory.pushregs$ = $1037 
memory.pushzp$ = $1F1B 
memory.restorezp = $0F6E 
memory.sizeof$ = $1260 
memory.start = $0F56 
memory.startheap$ = $1068 
memory.swap$ = $0FC0 
memory.swap16$ = $0FD7 
memory.total$ = $1061 
memory.used$ = $1065 
mouse.buttoncheck = $40FE 
mouse.getstate$ = $40CE 
mouse.movecheck = $410F 
mouse.oldx = $40CC 
mouse.oldy = $40CD 
printer.error$ = $4069 
printer.prev_devcice = $4068 
printer.printstr$ = $406A 
reu.comparedata$ = $5187 
reu.isinstalled$ = $50B6 
reu.loaddata$ = $5179 
reu.savedata$ = $5172 
reu.swapdata$ = $5180 
reu.transferdata = $50C7 
reu.transferdata.setregisters = $5144 
serial.baud$ = $4138 
serial.close$ = $4139 
serial.discard_byte$ = $4135 
serial.open$ = $1FC8 
serial.prev_device = $4134 
serial.recv$ = $4194 
serial.recv.first_byte = $4193 
serial.recv_eot$ = $4136 
serial.send$ = $4158 
serial.send_eot$ = $4137 
serial.set_baud = $4147 
string.concat$ = $2D11 
string.contains$ = $2C0D 
string.copy$ = $2BCF 
string.create$ = $2AAD 
string.create.dec_length = $2B1F 
string.create.inc_length = $2B03 
string.getlength$ = $2B72 
string.getlength_GetNullChar = $2B8D 
string.getlength_GetSizeOf = $2BA8 
string.indexof$ = $2C43 
string.isequal$ = $1F46 
string.isheap$ = $2B3B 
time.getticks$ = $1DD5 
time.halt$ = $1EA5 
time.wait$ = $1EB9 
UP9600.DISABL2 = $4BA1 
UP9600.DISABLE = $4B88 
UP9600.DOCHKI1 = $491A 
UP9600.DOCHKI2 = $4923 
UP9600.DOCHKI3 = $4930 
UP9600.DOCHKI4 = $4936 
UP9600.DOCHKIN = $4910 
UP9600.DOCHKO1 = $494A 
UP9600.DOCHKO2 = $4953 
UP9600.DOCHKO3 = $4960 
UP9600.DOCHKO4 = $4966 
UP9600.DOCHKOUT = $4940 
UP9600.DOCHRIN = $4889 
UP9600.DOCLO2 = $48F9 
UP9600.DOCLO3 = $4902 
UP9600.DOCLO4 = $4906 
UP9600.DOCLOSE = $48ED 
UP9600.DOGET2 = $48A5 
UP9600.DOGET4 = $48C6 
UP9600.DOGETIN = $4897 
UP9600.DOGOTIN = $48C3 
UP9600.DOOPEN = $4861 
UP9600.DOPUT = $48CF 
UP9600.DOPUT2 = $48DF 
UP9600.DOPUT4 = $48EA 
UP9600.ENABL2 = $4B0B 
UP9600.ENABLE = $4AE8 
UP9600.ENABLE_1 = $4AFB 
UP9600.ENABLE_2 = $4B05 
UP9600.ENABLE2 = $4B7D 
UP9600.EOPEN = $4882 
UP9600.IHITAB = $4B86 
UP9600.ILOTAB = $4B84 
UP9600.INIT = $4818 
UP9600.INSTALL = $4A85 
UP9600.INSTALL2 = $4AC6 
UP9600.INSTALL3 = $4AD8 
UP9600.INSTALL4 = $4ADC 
UP9600.INSTERR = $4A82 
UP9600.NEWIRQ = $49D3 
UP9600.NEWIRQ1 = $49D6 
UP9600.NEWIRQ2 = $49E3 
UP9600.NEWIRQ3 = $49E8 
UP9600.NEWIRQ3_1 = $49F3 
UP9600.NEWIRQ3_2 = $49FA 
UP9600.NEWIRQ4 = $4A1A 
UP9600.NEWIRQ5 = $4A1F 
UP9600.NEWIRQ6 = $4A22 
UP9600.NMIBYTR2 = $49CD 
UP9600.NMIBYTRY = $498A 
UP9600.NMIDOBI2 = $4988 
UP9600.NMIDOBIT = $4970 
UP9600.NOCHKIN = $493D 
UP9600.NOCHKOUT = $496D 
UP9600.NOCHRIN = $4894 
UP9600.NODIS = $4B9B 
UP9600.NOGETIN = $48A2 
UP9600.NOPUT1 = $48DB 
UP9600.PRINT = $4BD7 
UP9600.REVTAB = $4BD7 
UP9600.RSIN = $4A25 
UP9600.RSIN2 = $4A46 
UP9600.RSIN3 = $4A47 
UP9600.RSOUT = $4A48 
UP9600.RSOUT3 = $4A57 
UP9600.RSOUTX = $4A72 
UP9600.RSOUTX2 = $4A77 
UP9600.RSOUTX3 = $4A7F 
UP9600.SAVBYTE = $4814 
UP9600.STIME = $4812 
UP9600.UPFLAG = $4813 

******* 109 Unused label(s) *******
@again
@Alpha1
@Alpha12
@Alpha2
@Alpha22
@atemp
@AtMax
@BackSpace_No
@BackSpace_No
@BackSpace_Yes
@BackSpace_Yes
@BackSpaced
@backup
@buffer_ok
@buffer_ok2
@CharOk
@CharOK
@check_blocks
@check_counter
@check_mem
@check_size
@check_y_x
@CheckSpecial
@chin_done
@chrin_no_wait
@chrin_wait
@chrout
@clear_lr
@ClearCarret
@ClearValue
@ClearXHi
@ClearXHi
@close
@close
@close
@close
@close
@cont
@cont
@cont
@cont
@cont
@cont2
@continue
@Continue
@copylow
@d_neg
@d_not_neg
@d_pos
@DigitOk
@DigitOk
@DigitOk
@div10_16
@div10_32
@div10_8
@divloop
@do_backspace
@do_newline
@doAdd
@DoCheck
@doEor
@doEor
@done
@done
@done
@done
@done
@done
@done
@done
@done
@done
@done
@Done
@Done
@Done
@Done
@Done
@Done
@Done
@done2
@DrawLine
@DrawPixelXY
@DrawPixelYX
@dstcont
@dstdone
@dstloop
@end
@end
@end
@end
@end
@end
@end
@end
@end
@end
@End
@End
@End
@End
@End
@End
@End
@End
@End
@End
@End2
@enterLoop
@eof
@eof
@eof
@error
@error
@error
@error
@error
@Factor
@Factor
@Factor
@FileExistOk
@FileExistOk
@FileExistOk
@FileExists
@FileExists
@FileScratched
@filllow
@find
@fire
@fname_cont
@fname_done
@fname_loop
@fname_loop2
@found
@FoundStr
@ftype_cont
@ftype_cont2
@ftype_done
@ftype_loop
@get_first_file
@GetSizeOf
@getstate
@Halt
@HideCaret
@inc_af
@inc_af
@inc_counter
@inc_mem
@IncY
@IncY
@init_mem
@InitAddresses
@isequal
@l
@l1
@l2
@l3
@l3
@l3
@l4
@l4
@l4
@LengthOK
@lenok
@LenOk
@LenOk
@LenOk
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@loop_lr
@loop1
@loop1
@Loop1
@loop2
@loop2
@loop2
@Loop2
@Loop3
@lowZero
@movchk1
@movchk2
@NeedToCreate
@NewLine_No
@NewLine_No
@NewLine_Yes
@NewLine_Yes
@next_mem
@NextChar
@NextChar
@NextDigit
@NextDigit
@NextDigit
@no_cont
@no_discard
@no_discard
@noEor
@noEor
@NoFoundStr
@NoMatchChr
@not_9600
@NotAlpha1
@NotAlpha12
@NotAlpha2
@NotAlpha22
@noteof
@NoValidInput
@Null_No
@Null_No
@Null_Yes
@Null_Yes
@nz
@ok
@ok
@ok
@ok
@ok
@ok
@ok
@ok
@ok2
@ok2
@OkToDrawChr
@OkToScrollUp
@OkToStart
@poke_665_73
@port1
@port2
@ProcessLoop
@ProcessYError2
@ProcessYError2_1
@readerror
@readerror
@ReadKey
@ReadKey
@ReadKey_skip
@ReadKeyOk
@rend
@reset_counter
@reset_lr
@restore
@return
@ReturnBackSpace
@ReturnNull
@rinc
@rloop
@rotate_r
@scratchok
@send
@set
@Set
@set_baud
@SetBtn
@setfire
@setnam_specific
@SetValue
@SetXHi
@SetXHi
@SetY_Offset1
@shift_r
@ShiftPressed
@ShowCarret
@SK
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip_check_d
@Skip_No
@Skip_Yes
@skip0
@skip1
@Skip1
@skip2
@skip2
@skip2
@skip2
@Skip2
@SkipChar
@SkipCLI
@SkipDrawPixel
@SkipFactor
@SkipFactor
@SkipFactor
@SkipFillStr
@SkipProcessLoop
@SkipProcessYError2
@SkipSetY_Offset
@SkipSwapX1X2_Y1Y2
@SkipSwapX1Y1_X2Y2
@SkipWriteChr
@SMC1
@srcdone
@srcloop
@sta_665
@swaplow
@SwapX1X2_Y1Y2
@SwapX1Y1_X2Y2
@unset
@wend
@wjsr
@wloop
@wrapped
@write_mem
@write_mem_ok1
@write_mem_ok2
@writeerror
@xtemp
@ytemp
audio.beep$
audio.digi_nib
audio.digid418nmi
audio.digiend$
audio.digiendaddress$
audio.digisamplerate$
audio.digistart$
audio.digistartaddress$
audio.digistophi
audio.digistoplo
audio.setattackdecay$
audio.setsustainrelease$
audio.setwaveform$
audio.sidend$
audio.sidinitaddress$
audio.sidplayaddress$
audio.sidstart$
console.dec_memaddress.reset_lr
console.getcolumn$
console.getrow$
console.inc_memaddress.end
console.readchr$
console.readint16$
console.readint32$
console.readint8$
console.readstr$
console.setcharactercolor$
console.setcolumn$
console.setforegroundcolor$
console.setrow$
console.writeint16$
console.writeint32$
console.writeint8$
console.writeln$
console.writestr$
convert.ascii2str$
convert.str2ascii$
disk.copyfile$
disk.format$
disk.getdiskinfo$
disk.getfileinfo.buf1
disk.getfileinfo.buf2
disk.getfileinfo.buf3
disk.getfileinfo.cbm2
disk.loadfile$
disk.readerrorchannel.errordec
disk.renamefile$
disk.scratchfile$
disk.validate$
disk.writefile$
djrrb
graphics.disablemulticolormode$
graphics.drawbox$
graphics.drawcircle$
graphics.drawfill$
graphics.enablemulticolormode$
graphics.enter$
graphics.getspritecolor$
graphics.getspritelocation$
graphics.hidesprite$
graphics.leave$
graphics.setmulticolormode$
graphics.setspritecolor$
graphics.setspritehires$
graphics.setspritelocation$
graphics.setspritemulticolor$
graphics.showsprite$
graphics.stretchspritehorizontally$
graphics.stretchspritevertically$
graphics.unstretchspritehorizontally$
graphics.unstretchspritevertically$
irq.disable$
irq.enable$
irq.install$
irq.uninstall$
joystick.getstate$
kernel.halt$
math.divide16$
math.divide8$
math.inc24$
math.random16$
math.random8$
math.subtract32$
memory.deallocate$
memory.swap16$
mouse.getstate$
printer.printstr$
reu.comparedata$
reu.isinstalled$
reu.loaddata$
reu.savedata$
reu.swapdata$
serial.close$
serial.open$
serial.recv$
serial.send$
string.concat$
string.contains$
string.copy$
string.isequal$
UP9600.DOCHKI3
UP9600.DOCHKO3
UP9600.DOCLO3
UP9600.DOGET4
UP9600.DOPUT4
UP9600.NEWIRQ1
UP9600.PRINT
UP9600.RSOUT3
UP9600.STIME

******* 532 Variable(s) *******
audio._digiabuffer  = $3B06
audio._digiybuffer  = $3B08
audio.attackhigh$  = $0080
audio.attacklow$  = $0020
audio.attacklowest$  = $0010
audio.attackmedium$  = $0040
audio.decayhigh$  = $0008
audio.decaylow$  = $0002
audio.decaylowest$  = $0001
audio.decaymedium$  = $0004
audio.digidb  = $0000
audio.digipoint  = $0032
audio.digisoundptr  = $0030
audio.digitable  = $39D3
audio.getvoiceaddress.address  = $0074
audio.getvoiceaddress.voice  = $0073
audio.noiseoff$  = $0080
audio.noiseon$  = $0081
audio.pulseoff$  = $0040
audio.pulseon$  = $0041
audio.releasehigh$  = $0008
audio.releaselow$  = $0002
audio.releaselowest$  = $0001
audio.releasemedium$  = $0004
audio.sawtoothoff$  = $0020
audio.sawtoothon$  = $0021
audio.setattackdecay.value$  = $0075
audio.setattackdecay.voice$  = $0073
audio.setfrequency.frequency$  = $0075
audio.setfrequency.voice$  = $0073
audio.setsustainrelease.value$  = $0075
audio.setsustainrelease.voice$  = $0073
audio.setvolume.value$  = $0073
audio.setwaveform.value$  = $0075
audio.setwaveform.voice$  = $0073
audio.sidabuff  = $39CD
audio.sidaddress  = $D400
audio.sidafterinijmp  = $392A
audio.sidafterplayjmp  = $39B5
audio.sidxbuff  = $39D1
audio.sidybuff  = $39CF
audio.sustainhigh$  = $0080
audio.sustainlow$  = $0020
audio.sustainlowest$  = $0010
audio.sustainmedium$  = $0040
audio.triangleoff$  = $0010
audio.triangleon$  = $0011
audio.voice1$  = $0001
audio.voice2$  = $0002
audio.voice3$  = $0003
audio.volumeaddress  = $D418
color.black$  = $0000
color.blue$  = $0006
color.brown$  = $0009
color.cyan$  = $0003
color.darkgrey$  = $000B
color.green$  = $0005
color.grey$  = $000C
color.lightblue$  = $000E
color.lightgreen$  = $000D
color.lightgrey$  = $000F
color.lightred$  = $000A
color.orange$  = $0008
color.purple$  = $0004
color.red$  = $0002
color.white$  = $0001
color.yellow$  = $0007
console.backspace$  = $00FD
console.calc_currentaddress.sum  = $0074
console.charmapaddress  = $2000
console.coloraddress  = $D800
console.coloraddress_lr  = $DBC0
console.getcolumn.column$  = $0073
console.getkey.BufferNew  = $007B
console.getkey.KeyQuantity  = $007E
console.getkey.MaxKeyRollover  = $0003
console.getkey.NonAlphaFlagX  = $007F
console.getkey.NonAlphaFlagY  = $0080
console.getkey.ScanResult  = $0073
console.getkey.SimultaneousKeys  = $0082
console.getkey.TempZP  = $0081
console.getrow.row$  = $0073
console.memoryaddress  = $0400
console.memoryaddress_lr  = $07C0
console.newline$  = $00FE
console.null$  = $00FF
console.quote$  = $0027
console.readchr.caretaddress  = $00D9
console.readchr.char$  = $00D0
console.readchr.milliseconds  = $00D4
console.readchr.togglecaret  = $00D8
console.readgen.allowedchrs  = $00EB
console.readgen.char  = $00EE
console.readgen.maxlen  = $00EA
console.readgen.skipchr  = $00ED
console.readint16.integer$  = $007A
console.readint32.integer$  = $007A
console.readint8.integer$  = $007A
console.readkey.char$  = $00D0
console.readkey.char.invalid$  = $00FF
console.readkey.processorstate  = $00DB
console.readkey.shift1$  = $00D1
console.readkey.shift1.f1$  = $0010
console.readkey.shift1.f3$  = $0020
console.readkey.shift1.f5$  = $0040
console.readkey.shift1.f7$  = $0008
console.readkey.shift1.insert_delete$  = $0001
console.readkey.shift1.left_right$  = $0004
console.readkey.shift1.return$  = $0002
console.readkey.shift1.up_down$  = $0080
console.readkey.shift2$  = $00D2
console.readkey.shift2.clear_home$  = $0008
console.readkey.shift2.commodore$  = $0020
console.readkey.shift2.control$  = $0004
console.readkey.shift2.left_shift$  = $0040
console.readkey.shift2.right_shift$  = $0010
console.readkey.shift2.run_stop$  = $0080
console.readkey.state$  = $00D3
console.readkey.state.awaiting_no_activity$  = $0005
console.readkey.state.control_port_1$  = $0002
console.readkey.state.multiplekeys$  = $0004
console.readkey.state.no_activity$  = $0001
console.readkey.state.ok$  = $0000
console.readkey.state.shadowing$  = $0003
console.readstr.bufaddress  = $0900
console.readstr.length  = $00FB
console.readstr.straddress$  = $007A
console.setbackgroundcolor.color$  = $0073
console.setbordercolor.color$  = $0073
console.setcharactercolor.color$  = $0073
console.setcharacterinverted.value$  = $0073
console.setcolumn.column$  = $0073
console.setforegroundcolor.color$  = $0073
console.setrow.row$  = $0073
console.writechr.address  = $00FB
console.writechr.char$  = $0002
console.writeint16.integer$  = $00E0
console.writeint32.integer$  = $00E0
console.writeint8.integer$  = $00E0
console.writestr.straddress$  = $00E0
convert.ascii2str.ascii$  = $00E0
convert.dec2hex.len  = $002A
convert.dec2hex.value  = $00E4
convert.dec2hex16.int  = $00FB
convert.dec2hex16.len  = $002A
convert.dec2hex16.offset  = $0052
convert.dec2hex16.result  = $00E0
convert.dec2hex16.value  = $00E4
convert.dec2hex32.int  = $00FB
convert.dec2hex32.len  = $002A
convert.dec2hex32.offset  = $0052
convert.dec2hex32.result  = $00E0
convert.dec2hex32.value  = $00E4
convert.dec2hex8.int  = $00FB
convert.dec2hex8.len  = $002A
convert.dec2hex8.offset  = $0052
convert.dec2hex8.result  = $00E0
convert.dec2hex8.value  = $00E4
convert.hex2dec.result  = $00E4
convert.hex2dec16.result  = $00E4
convert.hex2dec16.value  = $00E0
convert.hex2dec32.result  = $00E4
convert.hex2dec32.value  = $00E0
convert.hex2dec8.result  = $00E4
convert.hex2dec8.value  = $00E0
convert.str2ascii.str$  = $00E0
disk.copyfile.dstfilename$  = $0022
disk.copyfile.srcfilename$  = $0020
disk.execmd1.filename  = $0020
disk.execmd2.filename1  = $0020
disk.execmd2.filename2  = $0022
disk.execmd2.len1  = $0024
disk.execmd2.len2  = $0025
disk.fileexists.exists$  = $0026
disk.fileexists.filename$  = $0020
disk.format.labelname$  = $0020
disk.getfileinfo.filename$  = $0020
disk.loadfile.filename$  = $0020
disk.readfile.address$  = $0022
disk.readfile.filename$  = $0020
disk.readfile.length$  = $0024
disk.renamefile.newfilename$  = $0022
disk.renamefile.oldfilename$  = $0020
disk.scratchfile.filename$  = $0020
disk.setnam.filename$  = $0020
disk.writefile.address$  = $0022
disk.writefile.filename$  = $0020
disk.writefile.length$  = $0024
diskerror.block_header_not_found$  = $0014
diskerror.byte_decode_error$  = $0018
diskerror.checksum_error$  = $0017
diskerror.checksum_error_header$  = $001B
diskerror.cmd_file_not_found$  = $0027
diskerror.data_block_not_present$  = $0016
diskerror.data_extends_block$  = $001C
diskerror.device_not_present$  = $0005
diskerror.directory_error$  = $0047
diskerror.disk_directory_full$  = $0048
diskerror.disk_id_mismatch$  = $001D
diskerror.drive_not_ready$  = $004A
diskerror.file_exists$  = $003F
diskerror.file_not_found$  = $003E
diskerror.file_not_open$  = $003D
diskerror.file_open$  = $0002
diskerror.file_open_for_write$  = $003C
diskerror.file_scratched$  = $0001
diskerror.file_too_large$  = $0034
diskerror.file_type_mismatch$  = $0040
diskerror.general_syntax_error$  = $001E
diskerror.illegal_device_number$  = $0009
diskerror.illegal_sys_track_sector$  = $0043
diskerror.illegal_track_sector$  = $0042
diskerror.invalid_command$  = $001F
diskerror.invalid_filename$  = $0021
diskerror.long_line$  = $0020
diskerror.missing_file_name$  = $0008
diskerror.no_block$  = $0041
diskerror.no_channels$  = $0046
diskerror.no_file_given$  = $0022
diskerror.not_input_file$  = $0006
diskerror.not_output_file$  = $0007
diskerror.ok$  = $0000
diskerror.out_of_data$  = $000D
diskerror.out_of_memory$  = $0010
diskerror.overflow_in_rcd$  = $0033
diskerror.power_up$  = $0049
diskerror.rcd_not_present$  = $0032
diskerror.sync_char_not_found$  = $0015
diskerror.write_protect_on$  = $001A
diskerror.write_verify_error$  = $0019
diskfiletypes.del$  = $0005
diskfiletypes.none$  = $0000
diskfiletypes.prg$  = $0001
diskfiletypes.rel$  = $0004
diskfiletypes.seq$  = $0002
diskfiletypes.usr$  = $0003
firstnibble  = $0000
font.memoryaddress  = $2000
graphics.bitmapcoloraddress  = $7F40
graphics.BitMask  = $0D00
graphics.BitMask_address  = $0D00
graphics.coloraddress  = $4400
graphics.drawbox.color$  = $0024
graphics.drawbox.x1$  = $0025
graphics.drawbox.x2$  = $0029
graphics.drawbox.y1$  = $0027
graphics.drawbox.y2$  = $002B
graphics.drawchr.bmpaddress  = $0022
graphics.drawchr.chr  = $0028
graphics.drawchr.chraddress  = $0020
graphics.drawchr.col_offset  = $0024
graphics.drawchr.row_offset  = $0026
graphics.drawcircle.color$  = $0024
graphics.drawcircle.d  = $002E
graphics.drawcircle.radius$  = $0025
graphics.drawcircle.x  = $002A
graphics.drawcircle.xcenter$  = $0026
graphics.drawcircle.y  = $002C
graphics.drawcircle.ycenter$  = $0028
graphics.drawfill.color$  = $0024
graphics.drawfill.x1$  = $0025
graphics.drawfill.x2$  = $0029
graphics.drawfill.y  = $002D
graphics.drawfill.y1$  = $0027
graphics.drawfill.y2$  = $002B
graphics.drawline.color$  = $0024
graphics.drawline.derror2  = $00E8
graphics.drawline.dx  = $00D8
graphics.drawline.dx_2  = $00EE
graphics.drawline.dy  = $00DA
graphics.drawline.error2  = $00EA
graphics.drawline.steep  = $00DC
graphics.drawline.x  = $00E0
graphics.drawline.x1$  = $00D0
graphics.drawline.x1_x2  = $00E4
graphics.drawline.x2$  = $00D4
graphics.drawline.y  = $00E2
graphics.drawline.y_offset  = $00EC
graphics.drawline.y1$  = $00D2
graphics.drawline.y1_y2  = $00E6
graphics.drawline.y2$  = $00D6
graphics.getspriteandmask.number  = $0073
graphics.getspritecolor.address  = $0075
graphics.getspritecolor.color$  = $0074
graphics.getspritecolor.number$  = $0073
graphics.getspritelocation.address  = $0078
graphics.getspritelocation.number$  = $0073
graphics.getspritelocation.x$  = $0074
graphics.getspritelocation.y$  = $0076
graphics.getspriteormask.number  = $0073
graphics.hidesprite.number$  = $0073
graphics.imageaddress$  = $6000
graphics.memoryaddress  = $6000
graphics.memoryaddress_2r  = $6140
graphics.memoryaddress_lr  = $7E00
graphics.multibgcoloraddress  = $D021
graphics.multibgcolorfile  = $8710
graphics.multicoloraddress  = $D800
graphics.multicolorfile  = $8328
graphics.multivideoaddress  = $4400
graphics.multivideofile  = $7F40
graphics.setpixel.color$  = $0024
graphics.setpixel.x$  = $0020
graphics.setpixel.y$  = $0022
graphics.setspritecolor.address  = $0075
graphics.setspritecolor.color$  = $0074
graphics.setspritecolor.number$  = $0073
graphics.setspritehires.number$  = $0073
graphics.setspritelocation.address  = $0078
graphics.setspritelocation.number$  = $0073
graphics.setspritelocation.x$  = $0074
graphics.setspritelocation.y$  = $0076
graphics.setspritemulticolor.number$  = $0073
graphics.showsprite.number$  = $0073
graphics.sprite1$  = $0001
graphics.sprite1address$  = $4200
graphics.sprite2$  = $0002
graphics.sprite2address$  = $4240
graphics.sprite3$  = $0003
graphics.sprite3address$  = $4280
graphics.sprite4$  = $0004
graphics.sprite4address$  = $42C0
graphics.sprite5$  = $0005
graphics.sprite5address$  = $4300
graphics.sprite6$  = $0006
graphics.sprite6address$  = $4340
graphics.sprite7$  = $0007
graphics.sprite7address$  = $4380
graphics.sprite8$  = $0008
graphics.sprite8address$  = $43C0
graphics.spritemulticolor1address$  = $D025
graphics.spritemulticolor2address$  = $D026
graphics.stretchspritehorizontally.number$  = $0073
graphics.stretchspritevertically.number$  = $0073
graphics.unstretchspritehorizontally.number$  = $0073
graphics.unstretchspritevertically.number$  = $0073
graphics.X_Table  = $0C00
graphics.X_Table_address  = $0C00
graphics.Y_Table_Hi  = $0B00
graphics.Y_Table_Hi_address  = $0B00
graphics.Y_Table_Lo  = $0A00
graphics.Y_Table_Lo_address  = $0A00
irq.install.address$  = $00FB
joystick.getstate.deltax$  = $007C
joystick.getstate.deltay$  = $007D
joystick.getstate.fire$  = $007B
joystick.getstate.port$  = $007A
joystick.port1$  = $0001
joystick.port2$  = $0002
math.abs16.integer$  = $0080
math.abs16.value$  = $0084
math.add16.addend1$  = $0080
math.add16.addend2$  = $0082
math.add16.sum$  = $0084
math.add24.addend1$  = $0080
math.add24.addend2$  = $0083
math.add24.sum$  = $0086
math.add32.addend1$  = $0080
math.add32.addend2$  = $0084
math.add32.sum$  = $0088
math.cmp16.num1$  = $0080
math.cmp16.num2$  = $0082
math.cmp32.num1$  = $0080
math.cmp32.num2$  = $0084
math.dec16.address$  = $0086
math.divide16.dividend$  = $0082
math.divide16.divisor$  = $0080
math.divide16.quotient$  = $0082
math.divide16.remainder$  = $0084
math.divide32.dividend$  = $0084
math.divide32.divisor$  = $0080
math.divide32.quotient$  = $0084
math.divide32.remainder$  = $008C
math.divide32.temp1  = $00FB
math.divide32.temp2  = $00FE
math.divide8.dividend$  = $0081
math.divide8.divisor$  = $0080
math.divide8.quotient$  = $0081
math.divide8.remainder$  = $0082
math.exponent8.base$  = $008A
math.exponent8.power$  = $008B
math.exponent8.value$  = $008C
math.inc16.address$  = $0086
math.inc24.address$  = $0086
math.multiply16.factor1$  = $0080
math.multiply16.factor2$  = $0082
math.multiply16.product$  = $0084
math.multiply32.factor1$  = $0080
math.multiply32.factor2$  = $0084
math.multiply32.product$  = $0088
math.multiply8.factor1$  = $0080
math.multiply8.factor2$  = $0082
math.multiply8.product$  = $0083
math.random16.result$  = $0080
math.random16.seed$  = $0080
math.random8.result$  = $0080
math.random8.seed$  = $0080
math.subtract16.difference$  = $0084
math.subtract16.menuend$  = $0080
math.subtract16.subtrahend$  = $0082
math.subtract24.difference$  = $0086
math.subtract24.menuend$  = $0080
math.subtract24.subtrahend$  = $0083
math.subtract32.difference$  = $0088
math.subtract32.menuend$  = $0080
math.subtract32.subtrahend$  = $0084
memory.allocate.address$  = $007A
memory.allocate.counter  = $0077
memory.allocate.found  = $0079
memory.allocate.length$  = $0075
memory.backupzpaddress  = $0E00
memory.copy.destination$  = $0075
memory.copy.length$  = $0077
memory.copy.source$  = $0073
memory.copy16.destination$  = $0075
memory.copy16.length$  = $0078
memory.copy16.source$  = $0073
memory.deallocate.address$  = $007A
memory.fill.address$  = $0073
memory.fill.length$  = $0076
memory.fill.value$  = $0075
memory.fill16.address$  = $0073
memory.fill16.length$  = $0077
memory.fill16.value$  = $0075
memory.sizeof.address$  = $007A
memory.sizeof.length$  = $007C
memory.swap.address1$  = $0073
memory.swap.address2$  = $0075
memory.swap.length$  = $0077
memory.swap.temp  = $0079
memory.swap16.address1$  = $0073
memory.swap16.address2$  = $0075
memory.swap16.length$  = $0077
memory.swap16.temp  = $0079
mouse.buttoncheck.buttonmask  = $007E
mouse.getstate.deltax$  = $007C
mouse.getstate.deltay$  = $007D
mouse.getstate.leftbutton$  = $007A
mouse.getstate.rightbutton$  = $007B
mouse.movecheck.newdelta  = $007F
mouse.movecheck.olddelta  = $007E
nonibbles  = $0000
printer.carriage_return$  = $000D
printer.line_feed$  = $000A
printer.lower_case$  = $0011
printer.null$  = $00FF
printer.printstr.address$  = $0020
printer.upper_case$  = $0091
printererror.ok$  = $0000
printererror.open_error$  = $0001
printererror.print_error$  = $0002
reu.c64base  = $DF02
reu.command  = $DF01
reu.comparedata.c64address$  = $00FB
reu.comparedata.isequal$  = $0002
reu.comparedata.length$  = $00FD
reu.comparedata.reuaddress$  = $008B
reu.control  = $DF0A
reu.irqmask  = $DF09
reu.isinstalled.value$  = $00FB
reu.loaddata.c64address$  = $00FB
reu.loaddata.length$  = $00FD
reu.loaddata.reuaddress$  = $008B
reu.reubase  = $DF04
reu.savedata.c64address$  = $00FB
reu.savedata.length$  = $00FD
reu.savedata.reuaddress$  = $008B
reu.status  = $DF00
reu.swapdata.c64address$  = $00FB
reu.swapdata.length$  = $00FD
reu.swapdata.reuaddress$  = $008B
reu.transferdata.c64address  = $00FB
reu.transferdata.command  = $002A
reu.transferdata.length  = $00FD
reu.transferdata.orglength  = $0057
reu.transferdata.reuaddress  = $008B
reu.translen  = $DF07
serial.baud_1200$  = $0008
serial.baud_300$  = $0006
serial.baud_600$  = $0007
serial.baud_9600$  = $000E
serial.eot$  = $00FF
serial.recv.address$  = $0022
serial.send.address$  = $0022
serial.skip  = $00FE
string.concat.address  = $00EA
string.concat.dstaddress$  = $007A
string.concat.dstlength  = $00E8
string.concat.srcaddress1$  = $00E0
string.concat.srcaddress2$  = $00E2
string.concat.srclength1  = $00E4
string.concat.srclength2  = $00E6
string.contains.address1$  = $007A
string.contains.address2$  = $007C
string.contains.value$  = $0073
string.copy.dstaddress$  = $007A
string.copy.srcaddress$  = $007E
string.create.address$  = $007A
string.create.address_lr  = $00FD
string.create.character$  = $0002
string.create.length$  = $00FB
string.getlength.address$  = $007A
string.getlength.length$  = $00FB
string.indexof.address1$  = $007A
string.indexof.address1_org  = $00FB
string.indexof.address2$  = $007C
string.indexof.address2_org  = $00FD
string.indexof.chr1  = $0073
string.indexof.chr2  = $0074
string.indexof.index$  = $007E
string.isequal.address1$  = $007A
string.isequal.address2$  = $007C
string.isequal.char  = $007D
string.isequal.value$  = $007E
string.isheap.address$  = $007A
string.isheap.heap$  = $0073
tgt_c64  = $0001
time.getticks.result$  = $0073
time.wait.milliseconds$  = $0077
UP9600.IRQVECT  = $0314
UP9600.JIFFIES  = $00A2
UP9600.NMIVECT  = $0318
UP9600.ORIGIRQ  = $EA31
UP9600.ORIGNMI  = $FE47
UP9600.OUTSTAT  = $00A9
UP9600.RDRPTR  = $029C
UP9600.RDSPTR  = $029D
UP9600.RECPTR  = $00F7
UP9600.SNDPTR  = $00F9
UP9600.WRRPTR  = $029B
UP9600.WRSPTR  = $029E
withsidplayer  = $0000
******* -161 Unused variables(s) *******
audio.attackhigh$
audio.attacklow$
audio.attacklowest$
audio.attackmedium$
audio.decayhigh$
audio.decaylow$
audio.decaylowest$
audio.decaymedium$
audio.digidb
audio.noiseoff$
audio.noiseon$
audio.pulseoff$
audio.pulseon$
audio.releasehigh$
audio.releaselow$
audio.releaselowest$
audio.releasemedium$
audio.sawtoothoff$
audio.sawtoothon$
audio.setattackdecay.voice$
audio.setsustainrelease.voice$
audio.setwaveform.voice$
audio.sidaddress
audio.sustainhigh$
audio.sustainlow$
audio.sustainlowest$
audio.sustainmedium$
audio.triangleoff$
audio.triangleon$
color.blue$
color.brown$
color.cyan$
color.darkgrey$
color.green$
color.grey$
color.lightblue$
color.lightgreen$
color.lightgrey$
color.lightred$
color.orange$
color.purple$
color.red$
color.yellow$
console.getkey.ScanResult
console.quote$
console.readkey.shift1.f1$
console.readkey.shift1.f3$
console.readkey.shift1.f5$
console.readkey.shift1.f7$
console.readkey.shift1.left_right$
console.readkey.shift1.up_down$
console.readkey.shift2.clear_home$
console.readkey.shift2.commodore$
console.readkey.shift2.control$
console.readkey.shift2.run_stop$
console.readkey.state.awaiting_no_activity$
console.readkey.state.control_port_1$
console.readkey.state.multiplekeys$
console.readkey.state.no_activity$
console.readkey.state.shadowing$
console.writeint16.integer$
console.writeint32.integer$
console.writeint8.integer$
console.writestr.straddress$
convert.dec2hex.value
convert.dec2hex16.value
convert.dec2hex32.value
convert.dec2hex8.value
convert.hex2dec.result
convert.hex2dec16.result
convert.hex2dec32.result
convert.hex2dec8.result
disk.copyfile.dstfilename$
disk.copyfile.srcfilename$
disk.fileexists.filename$
disk.format.labelname$
disk.loadfile.filename$
disk.renamefile.newfilename$
disk.renamefile.oldfilename$
disk.scratchfile.filename$
disk.writefile.filename$
diskerror.block_header_not_found$
diskerror.byte_decode_error$
diskerror.checksum_error$
diskerror.checksum_error_header$
diskerror.cmd_file_not_found$
diskerror.data_block_not_present$
diskerror.data_extends_block$
diskerror.device_not_present$
diskerror.directory_error$
diskerror.disk_directory_full$
diskerror.disk_id_mismatch$
diskerror.drive_not_ready$
diskerror.file_exists$
diskerror.file_not_open$
diskerror.file_open$
diskerror.file_open_for_write$
diskerror.file_too_large$
diskerror.file_type_mismatch$
diskerror.general_syntax_error$
diskerror.illegal_device_number$
diskerror.illegal_sys_track_sector$
diskerror.illegal_track_sector$
diskerror.invalid_command$
diskerror.invalid_filename$
diskerror.long_line$
diskerror.missing_file_name$
diskerror.no_block$
diskerror.no_channels$
diskerror.no_file_given$
diskerror.not_input_file$
diskerror.not_output_file$
diskerror.out_of_data$
diskerror.out_of_memory$
diskerror.overflow_in_rcd$
diskerror.power_up$
diskerror.rcd_not_present$
diskerror.sync_char_not_found$
diskerror.write_protect_on$
diskerror.write_verify_error$
diskfiletypes.del$
diskfiletypes.prg$
diskfiletypes.rel$
diskfiletypes.seq$
diskfiletypes.usr$
firstnibble
graphics.bitmapcoloraddress
graphics.BitMask
graphics.BitMask_address
graphics.drawbox.color$
graphics.drawcircle.color$
graphics.drawfill.color$
graphics.imageaddress$
graphics.multicoloraddress
graphics.multicolorfile
graphics.multivideoaddress
graphics.multivideofile
graphics.sprite1$
graphics.sprite1address$
graphics.sprite2$
graphics.sprite2address$
graphics.sprite3$
graphics.sprite3address$
graphics.sprite4$
graphics.sprite4address$
graphics.sprite5$
graphics.sprite5address$
graphics.sprite6$
graphics.sprite6address$
graphics.sprite7$
graphics.sprite7address$
graphics.sprite8$
graphics.sprite8address$
graphics.spritemulticolor1address$
graphics.spritemulticolor2address$
graphics.X_Table
graphics.X_Table_address
graphics.Y_Table_Hi
graphics.Y_Table_Hi_address
graphics.Y_Table_Lo
graphics.Y_Table_Lo_address
joystick.port2$
math.divide8.quotient$
math.inc24.address$
math.random16.result$
memory.backupzpaddress
memory.swap16.address1$
memory.swap16.address2$
nonibbles
printer.carriage_return$
printer.line_feed$
printer.lower_case$
printer.upper_case$
reu.comparedata.c64address$
reu.comparedata.length$
reu.comparedata.reuaddress$
reu.irqmask
reu.loaddata.c64address$
reu.loaddata.length$
reu.loaddata.reuaddress$
reu.savedata.c64address$
reu.savedata.length$
reu.savedata.reuaddress$
reu.swapdata.c64address$
reu.swapdata.length$
reu.swapdata.reuaddress$
serial.baud_1200$
serial.baud_300$
serial.baud_600$
tgt_c64
UP9600.JIFFIES
UP9600.RECPTR
UP9600.SNDPTR
withsidplayer

