00001  0000             ; KERNEL FOR THE C64
00002  0001             ; ZP ADDRESS THAT ARE SAFE TO USE: $02; $2A; $52; $73-$90; $FB-$FE;
00003  0001             
00004  0001             CHARSET    2 ; UPPER/LOWER CASED CHARACTERS
00005  0001                        
00006  0001             ;; SYS 3840
00007  0001             ;;#REGION BASIC START UP CODE
00008  0001             ;;; ; 10 POKE 2303, 1
00009  0001             ;;; 20 SYS (2304)
00010  0001             ;;; 30 NEW
00011  0001             ;;*=$0801
00012  0001             ;;        ;BYTE    $0E, $08, $0A, $00, $97, $20, $32, $33, $30, $33, $2C, $20, $31, $00 ; 10 POKE 2303, 1
00013  0001             ;;        ;BYTE    $0E, $08, $0A, $00, $9E, $20, $28,  $32, $30, $38, $30, $29, $00 ; 10 SYS (2080)
00014  0001             ;;        BYTE    $0E, $08, $14, $00, $9E, $20, $28,  $32, $33, $30, $34, $29, $00 ; 20 SYS (2304)
00015  0001             ;;        BYTE    $0E, $08, $1E, $00, $A2, $00 ; 30 NEW
00016  0001             ;;#ENDREGION
00017  0001             
00018  0001             
00019  0001             ;; SYS 3856
00020  0001             ;*=$0801
00021  0001             ;        BYTE    $0E, $08, $14, $00, $9E, $20, $28,  $33, $38, $35, $36, $29, $00 ; 20 SYS (3856)
00022  0001             ;        BYTE    $00, $00, $00
00023  0001             ;        ;BYTE    $0E, $08, $1E, $00, $A2, $00, $00, $00 ; 30 NEW
00024  0001             
00025  0001             ; SYS 3849
00026  0001             *=$0801
00027  0801  0E 08 14              BYTE    $0E, $08, $14, $00, $9E, $20, $28,  $33, $38, $34, $39, $29, $00 ; 20 SYS (3849)
00028  080E  00 00 00              BYTE    $00, $00, $00
00029  0811             
00030  0811             
00031  0811             ;*=$1A00
00032  0811             ;CONSOLE.READSTR.BUFADDRESS = *
00033  0811             ;INCASM "BUFFER256.ASM"
00034  0811             CONSOLE.READSTR.BUFADDRESS = $0900
00035  0811             
00036  0811             
00037  0811             
00038  0811             ;*=$1B00
00039  0811             ;GRAPHICS.Y_TABLE_LO_ADDRESS = *
00040  0811             ;INCASM "BUFFER256.ASM"
00041  0811             GRAPHICS.Y_TABLE_LO_ADDRESS = $0A00
00042  0811             ;*=$1C00
00043  0811             ;GRAPHICS.Y_TABLE_HI_ADDRESS = *
00044  0811             ;INCASM "BUFFER256.ASM"
00045  0811             GRAPHICS.Y_TABLE_HI_ADDRESS = $0B00
00046  0811             ;*=$1D00
00047  0811             ;GRAPHICS.X_TABLE_ADDRESS = *
00048  0811             ;INCASM "BUFFER256.ASM"
00049  0811             GRAPHICS.X_TABLE_ADDRESS = $0C00
00050  0811             ;*=$1E00
00051  0811             ;GRAPHICS.BITMASK_ADDRESS = *
00052  0811             ;INCASM "BUFFER256.ASM"
00053  0811             GRAPHICS.BITMASK_ADDRESS = $0D00
00054  0811             
00055  0811             
00056  0811             
00057  0811             ;*=$1F00
00058  0811             ;*=$0D00
00059  0811             ;MEMORY.BACKUPZPADDRESS
00060  0811             ;INCASM "BUFFER256.ASM"
00061  0811             MEMORY.BACKUPZPADDRESS = $0E00
00062  0811             
00063  0811             
00064  0811             
00065  0811             *=$2000
00066  2000             FONT.MEMORYADDRESS = *
00067  2000  38 44 5C              BYTE    $38,$44,$5C,$54,$5C,$40,$38,$00 ; CHARACTER 0
00068  2008  00 00 38              BYTE    $00,$00,$38,$04,$3C,$44,$3C,$00 ; CHARACTER 1
00069  2010  00 40 40              BYTE    $00,$40,$40,$78,$44,$44,$78,$00 ; CHARACTER 2
00070  2018  00 00 3C              BYTE    $00,$00,$3C,$40,$40,$40,$3C,$00 ; CHARACTER 3
00071  2020  00 04 04              BYTE    $00,$04,$04,$3C,$44,$44,$3C,$00 ; CHARACTER 4
00072  2028  00 00 38              BYTE    $00,$00,$38,$44,$7C,$40,$38,$00 ; CHARACTER 5
00073  2030  00 0C 10              BYTE    $00,$0C,$10,$3C,$10,$10,$10,$00 ; CHARACTER 6
00074  2038  00 00 3C              BYTE    $00,$00,$3C,$44,$44,$3C,$04,$78 ; CHARACTER 7
00075  2040  00 40 40              BYTE    $00,$40,$40,$78,$44,$44,$44,$00 ; CHARACTER 8
00076  2048  00 10 00              BYTE    $00,$10,$00,$30,$10,$10,$38,$00 ; CHARACTER 9
00077  2050  00 04 00              BYTE    $00,$04,$00,$04,$04,$04,$04,$38 ; CHARACTER 10
00078  2058  00 40 40              BYTE    $00,$40,$40,$58,$60,$50,$4C,$00 ; CHARACTER 11
00079  2060  00 30 10              BYTE    $00,$30,$10,$10,$10,$10,$38,$00 ; CHARACTER 12
00080  2068  00 00 68              BYTE    $00,$00,$68,$54,$54,$54,$54,$00 ; CHARACTER 13
00081  2070  00 00 78              BYTE    $00,$00,$78,$44,$44,$44,$44,$00 ; CHARACTER 14
00082  2078  00 00 38              BYTE    $00,$00,$38,$44,$44,$44,$38,$00 ; CHARACTER 15
00083  2080  00 00 78              BYTE    $00,$00,$78,$44,$44,$78,$40,$40 ; CHARACTER 16
00084  2088  00 00 3C              BYTE    $00,$00,$3C,$44,$44,$3C,$04,$04 ; CHARACTER 17
00085  2090  00 00 78              BYTE    $00,$00,$78,$44,$40,$40,$40,$00 ; CHARACTER 18
00086  2098  00 00 3C              BYTE    $00,$00,$3C,$40,$38,$04,$78,$00 ; CHARACTER 19
00087  20A0  00 10 7C              BYTE    $00,$10,$7C,$10,$10,$10,$0C,$00 ; CHARACTER 20
00088  20A8  00 00 44              BYTE    $00,$00,$44,$44,$44,$44,$3C,$00 ; CHARACTER 21
00089  20B0  00 00 44              BYTE    $00,$00,$44,$44,$44,$28,$10,$00 ; CHARACTER 22
00090  20B8  00 00 44              BYTE    $00,$00,$44,$54,$54,$54,$28,$00 ; CHARACTER 23
00091  20C0  00 00 44              BYTE    $00,$00,$44,$28,$10,$28,$44,$00 ; CHARACTER 24
00092  20C8  00 00 44              BYTE    $00,$00,$44,$44,$44,$3C,$08,$70 ; CHARACTER 25
00093  20D0  00 00 7C              BYTE    $00,$00,$7C,$08,$10,$20,$7C,$00 ; CHARACTER 26
00094  20D8  38 20 20              BYTE    $38,$20,$20,$20,$20,$20,$38,$00 ; CHARACTER 27
00095  20E0  08 14 10              BYTE    $08,$14,$10,$38,$10,$24,$78,$00 ; CHARACTER 28
00096  20E8  38 08 08              BYTE    $38,$08,$08,$08,$08,$08,$38,$00 ; CHARACTER 29
00097  20F0  00 10 38              BYTE    $00,$10,$38,$7C,$10,$10,$10,$10 ; CHARACTER 30
00098  20F8  00 10 30              BYTE    $00,$10,$30,$7F,$30,$10,$00,$00 ; CHARACTER 31
00099  2100  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00 ; CHARACTER 32
00100  2108  10 10 10              BYTE    $10,$10,$10,$10,$00,$00,$10,$00 ; CHARACTER 33
00101  2110  24 24 24              BYTE    $24,$24,$24,$00,$00,$00,$00,$00 ; CHARACTER 34
00102  2118  28 28 7C              BYTE    $28,$28,$7C,$28,$7C,$28,$28,$00 ; CHARACTER 35
00103  2120  10 3C 40              BYTE    $10,$3C,$40,$38,$04,$78,$10,$00 ; CHARACTER 36
00104  2128  44 44 08              BYTE    $44,$44,$08,$10,$20,$44,$44,$00 ; CHARACTER 37
00105  2130  30 48 30              BYTE    $30,$48,$30,$20,$54,$48,$34,$00 ; CHARACTER 38
00106  2138  04 08 10              BYTE    $04,$08,$10,$00,$00,$00,$00,$00 ; CHARACTER 39
00107  2140  08 10 20              BYTE    $08,$10,$20,$20,$20,$10,$08,$00 ; CHARACTER 40
00108  2148  20 10 08              BYTE    $20,$10,$08,$08,$08,$10,$20,$00 ; CHARACTER 41
00109  2150  00 44 28              BYTE    $00,$44,$28,$7C,$28,$44,$00,$00 ; CHARACTER 42
00110  2158  00 10 10              BYTE    $00,$10,$10,$7C,$10,$10,$00,$00 ; CHARACTER 43
00111  2160  00 00 00              BYTE    $00,$00,$00,$00,$00,$10,$10,$20 ; CHARACTER 44
00112  2168  00 00 00              BYTE    $00,$00,$00,$7C,$00,$00,$00,$00 ; CHARACTER 45
00113  2170  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$10,$00 ; CHARACTER 46
00114  2178  00 02 04              BYTE    $00,$02,$04,$08,$10,$20,$40,$00 ; CHARACTER 47
00115  2180  38 44 4C              BYTE    $38,$44,$4C,$54,$64,$44,$38,$00 ; CHARACTER 48
00116  2188  10 30 10              BYTE    $10,$30,$10,$10,$10,$10,$38,$00 ; CHARACTER 49
00117  2190  38 44 04              BYTE    $38,$44,$04,$18,$20,$40,$7C,$00 ; CHARACTER 50
00118  2198  38 44 04              BYTE    $38,$44,$04,$18,$04,$44,$38,$00 ; CHARACTER 51
00119  21A0  08 18 28              BYTE    $08,$18,$28,$48,$7C,$08,$08,$00 ; CHARACTER 52
00120  21A8  7C 40 78              BYTE    $7C,$40,$78,$04,$04,$44,$38,$00 ; CHARACTER 53
00121  21B0  38 44 40              BYTE    $38,$44,$40,$78,$44,$44,$38,$00 ; CHARACTER 54
00122  21B8  7C 44 08              BYTE    $7C,$44,$08,$10,$10,$10,$10,$00 ; CHARACTER 55
00123  21C0  38 44 44              BYTE    $38,$44,$44,$38,$44,$44,$38,$00 ; CHARACTER 56
00124  21C8  38 44 44              BYTE    $38,$44,$44,$3C,$04,$44,$38,$00 ; CHARACTER 57
00125  21D0  00 00 10              BYTE    $00,$00,$10,$00,$00,$10,$00,$00 ; CHARACTER 58
00126  21D8  00 00 10              BYTE    $00,$00,$10,$00,$00,$10,$10,$20 ; CHARACTER 59
00127  21E0  0C 10 20              BYTE    $0C,$10,$20,$40,$20,$10,$0C,$00 ; CHARACTER 60
00128  21E8  00 00 7C              BYTE    $00,$00,$7C,$00,$7C,$00,$00,$00 ; CHARACTER 61
00129  21F0  60 10 08              BYTE    $60,$10,$08,$04,$08,$10,$60,$00 ; CHARACTER 62
00130  21F8  38 44 04              BYTE    $38,$44,$04,$08,$10,$00,$10,$00 ; CHARACTER 63
00131  2200  00 00 00              BYTE    $00,$00,$00,$FF,$FF,$00,$00,$00 ; CHARACTER 64
00132  2208  10 28 44              BYTE    $10,$28,$44,$7C,$44,$44,$44,$00 ; CHARACTER 65
00133  2210  78 44 44              BYTE    $78,$44,$44,$78,$44,$44,$78,$00 ; CHARACTER 66
00134  2218  38 44 40              BYTE    $38,$44,$40,$40,$40,$44,$38,$00 ; CHARACTER 67
00135  2220  70 48 44              BYTE    $70,$48,$44,$44,$44,$48,$70,$00 ; CHARACTER 68
00136  2228  7C 40 40              BYTE    $7C,$40,$40,$78,$40,$40,$7C,$00 ; CHARACTER 69
00137  2230  7C 40 40              BYTE    $7C,$40,$40,$70,$40,$40,$40,$00 ; CHARACTER 70
00138  2238  38 44 40              BYTE    $38,$44,$40,$4C,$44,$44,$38,$00 ; CHARACTER 71
00139  2240  44 44 44              BYTE    $44,$44,$44,$7C,$44,$44,$44,$00 ; CHARACTER 72
00140  2248  38 10 10              BYTE    $38,$10,$10,$10,$10,$10,$38,$00 ; CHARACTER 73
00141  2250  1C 08 08              BYTE    $1C,$08,$08,$08,$08,$48,$30,$00 ; CHARACTER 74
00142  2258  44 48 50              BYTE    $44,$48,$50,$60,$50,$48,$44,$00 ; CHARACTER 75
00143  2260  40 40 40              BYTE    $40,$40,$40,$40,$40,$40,$7C,$00 ; CHARACTER 76
00144  2268  44 6C 54              BYTE    $44,$6C,$54,$44,$44,$44,$44,$00 ; CHARACTER 77
00145  2270  44 44 64              BYTE    $44,$44,$64,$54,$4C,$44,$44,$00 ; CHARACTER 78
00146  2278  38 44 44              BYTE    $38,$44,$44,$44,$44,$44,$38,$00 ; CHARACTER 79
00147  2280  78 44 44              BYTE    $78,$44,$44,$78,$40,$40,$40,$00 ; CHARACTER 80
00148  2288  38 44 44              BYTE    $38,$44,$44,$44,$44,$38,$0C,$00 ; CHARACTER 81
00149  2290  78 44 44              BYTE    $78,$44,$44,$78,$50,$48,$44,$00 ; CHARACTER 82
00150  2298  38 44 40              BYTE    $38,$44,$40,$38,$04,$44,$38,$00 ; CHARACTER 83
00151  22A0  7C 10 10              BYTE    $7C,$10,$10,$10,$10,$10,$10,$00 ; CHARACTER 84
00152  22A8  44 44 44              BYTE    $44,$44,$44,$44,$44,$44,$38,$00 ; CHARACTER 85
00153  22B0  44 44 44              BYTE    $44,$44,$44,$44,$44,$28,$10,$00 ; CHARACTER 86
00154  22B8  44 44 44              BYTE    $44,$44,$44,$44,$54,$6C,$44,$00 ; CHARACTER 87
00155  22C0  44 44 28              BYTE    $44,$44,$28,$10,$28,$44,$44,$00 ; CHARACTER 88
00156  22C8  44 44 44              BYTE    $44,$44,$44,$28,$10,$10,$10,$00 ; CHARACTER 89
00157  22D0  7C 04 08              BYTE    $7C,$04,$08,$10,$20,$40,$7C,$00 ; CHARACTER 90
00158  22D8  18 18 18              BYTE    $18,$18,$18,$FF,$FF,$18,$18,$18 ; CHARACTER 91
00159  22E0  C0 C0 30              BYTE    $C0,$C0,$30,$30,$C0,$C0,$30,$30 ; CHARACTER 92
00160  22E8  18 18 18              BYTE    $18,$18,$18,$18,$18,$18,$18,$18 ; CHARACTER 93
00161  22F0  33 33 CC              BYTE    $33,$33,$CC,$CC,$33,$33,$CC,$CC ; CHARACTER 94
00162  22F8  33 99 CC              BYTE    $33,$99,$CC,$66,$33,$99,$CC,$66 ; CHARACTER 95
00163  2300  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00 ; CHARACTER 96
00164  2308  F0 F0 F0              BYTE    $F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0 ; CHARACTER 97
00165  2310  00 00 00              BYTE    $00,$00,$00,$00,$FF,$FF,$FF,$FF ; CHARACTER 98
00166  2318  FF 00 00              BYTE    $FF,$00,$00,$00,$00,$00,$00,$00 ; CHARACTER 99
00167  2320  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$FF ; CHARACTER 100
00168  2328  C0 C0 C0              BYTE    $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0 ; CHARACTER 101
00169  2330  CC CC 33              BYTE    $CC,$CC,$33,$33,$CC,$CC,$33,$33 ; CHARACTER 102
00170  2338  03 03 03              BYTE    $03,$03,$03,$03,$03,$03,$03,$03 ; CHARACTER 103
00171  2340  00 00 00              BYTE    $00,$00,$00,$00,$CC,$CC,$33,$33 ; CHARACTER 104
00172  2348  CC 99 33              BYTE    $CC,$99,$33,$66,$CC,$99,$33,$66 ; CHARACTER 105
00173  2350  03 03 03              BYTE    $03,$03,$03,$03,$03,$03,$03,$03 ; CHARACTER 106
00174  2358  18 18 18              BYTE    $18,$18,$18,$1F,$1F,$18,$18,$18 ; CHARACTER 107
00175  2360  00 00 00              BYTE    $00,$00,$00,$00,$0F,$0F,$0F,$0F ; CHARACTER 108
00176  2368  18 18 18              BYTE    $18,$18,$18,$1F,$1F,$00,$00,$00 ; CHARACTER 109
00177  2370  00 00 00              BYTE    $00,$00,$00,$F8,$F8,$18,$18,$18 ; CHARACTER 110
00178  2378  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$FF,$FF ; CHARACTER 111
00179  2380  00 00 00              BYTE    $00,$00,$00,$1F,$1F,$18,$18,$18 ; CHARACTER 112
00180  2388  18 18 18              BYTE    $18,$18,$18,$FF,$FF,$00,$00,$00 ; CHARACTER 113
00181  2390  00 00 00              BYTE    $00,$00,$00,$FF,$FF,$18,$18,$18 ; CHARACTER 114
00182  2398  18 18 18              BYTE    $18,$18,$18,$F8,$F8,$18,$18,$18 ; CHARACTER 115
00183  23A0  C0 C0 C0              BYTE    $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0 ; CHARACTER 116
00184  23A8  E0 E0 E0              BYTE    $E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0 ; CHARACTER 117
00185  23B0  07 07 07              BYTE    $07,$07,$07,$07,$07,$07,$07,$07 ; CHARACTER 118
00186  23B8  FF FF 00              BYTE    $FF,$FF,$00,$00,$00,$00,$00,$00 ; CHARACTER 119
00187  23C0  FF FF FF              BYTE    $FF,$FF,$FF,$00,$00,$00,$00,$00 ; CHARACTER 120
00188  23C8  00 00 00              BYTE    $00,$00,$00,$00,$00,$FF,$FF,$FF ; CHARACTER 121
00189  23D0  00 02 04              BYTE    $00,$02,$04,$48,$50,$60,$40,$00 ; CHARACTER 122
00190  23D8  00 00 00              BYTE    $00,$00,$00,$00,$F0,$F0,$F0,$F0 ; CHARACTER 123
00191  23E0  0F 0F 0F              BYTE    $0F,$0F,$0F,$0F,$00,$00,$00,$00 ; CHARACTER 124
00192  23E8  18 18 18              BYTE    $18,$18,$18,$F8,$F8,$00,$00,$00 ; CHARACTER 125
00193  23F0  F0 F0 F0              BYTE    $F0,$F0,$F0,$F0,$00,$00,$00,$00 ; CHARACTER 126
00194  23F8  F0 F0 F0              BYTE    $F0,$F0,$F0,$F0,$0F,$0F,$0F,$0F ; CHARACTER 127
00195  2400  C6 BA A2              BYTE    $C6,$BA,$A2,$AA,$A2,$BE,$C6,$FE ; CHARACTER 128
00196  2408  FE FE C6              BYTE    $FE,$FE,$C6,$FA,$C2,$BA,$C2,$FE ; CHARACTER 129
00197  2410  FE BE BE              BYTE    $FE,$BE,$BE,$86,$BA,$BA,$86,$FE ; CHARACTER 130
00198  2418  FE FE C2              BYTE    $FE,$FE,$C2,$BE,$BE,$BE,$C2,$FE ; CHARACTER 131
00199  2420  FE FA FA              BYTE    $FE,$FA,$FA,$C2,$BA,$BA,$C2,$FE ; CHARACTER 132
00200  2428  FE FE C6              BYTE    $FE,$FE,$C6,$BA,$82,$BE,$C6,$FE ; CHARACTER 133
00201  2430  FE F2 EE              BYTE    $FE,$F2,$EE,$C2,$EE,$EE,$EE,$FE ; CHARACTER 134
00202  2438  FE FE C2              BYTE    $FE,$FE,$C2,$BA,$BA,$C2,$FA,$86 ; CHARACTER 135
00203  2440  FE BE BE              BYTE    $FE,$BE,$BE,$86,$BA,$BA,$BA,$FE ; CHARACTER 136
00204  2448  FE EE FE              BYTE    $FE,$EE,$FE,$CE,$EE,$EE,$C6,$FE ; CHARACTER 137
00205  2450  FE FA FE              BYTE    $FE,$FA,$FE,$FA,$FA,$FA,$FA,$C6 ; CHARACTER 138
00206  2458  FE BE BE              BYTE    $FE,$BE,$BE,$A6,$9E,$AE,$B2,$FE ; CHARACTER 139
00207  2460  FE CE EE              BYTE    $FE,$CE,$EE,$EE,$EE,$EE,$C6,$FE ; CHARACTER 140
00208  2468  FE FE 96              BYTE    $FE,$FE,$96,$AA,$AA,$AA,$AA,$FE ; CHARACTER 141
00209  2470  FE FE 86              BYTE    $FE,$FE,$86,$BA,$BA,$BA,$BA,$FE ; CHARACTER 142
00210  2478  FE FE C6              BYTE    $FE,$FE,$C6,$BA,$BA,$BA,$C6,$FE ; CHARACTER 143
00211  2480  FE FE 86              BYTE    $FE,$FE,$86,$BA,$BA,$86,$BE,$BE ; CHARACTER 144
00212  2488  FE FE C2              BYTE    $FE,$FE,$C2,$BA,$BA,$C2,$FA,$FA ; CHARACTER 145
00213  2490  FE FE 86              BYTE    $FE,$FE,$86,$BA,$BE,$BE,$BE,$FE ; CHARACTER 146
00214  2498  FE FE C2              BYTE    $FE,$FE,$C2,$BE,$C6,$FA,$86,$FE ; CHARACTER 147
00215  24A0  FE EE 82              BYTE    $FE,$EE,$82,$EE,$EE,$EE,$F2,$FE ; CHARACTER 148
00216  24A8  FE FE BA              BYTE    $FE,$FE,$BA,$BA,$BA,$BA,$C2,$FE ; CHARACTER 149
00217  24B0  FE FE BA              BYTE    $FE,$FE,$BA,$BA,$BA,$D6,$EE,$FE ; CHARACTER 150
00218  24B8  FE FE BA              BYTE    $FE,$FE,$BA,$AA,$AA,$AA,$D6,$FE ; CHARACTER 151
00219  24C0  FE FE BA              BYTE    $FE,$FE,$BA,$D6,$EE,$D6,$BA,$FE ; CHARACTER 152
00220  24C8  FE FE BA              BYTE    $FE,$FE,$BA,$BA,$BA,$C2,$F6,$8E ; CHARACTER 153
00221  24D0  FE FE 82              BYTE    $FE,$FE,$82,$F6,$EE,$DE,$82,$FE ; CHARACTER 154
00222  24D8  C6 DE DE              BYTE    $C6,$DE,$DE,$DE,$DE,$DE,$C6,$FE ; CHARACTER 155
00223  24E0  F6 EA EE              BYTE    $F6,$EA,$EE,$C6,$EE,$DA,$86,$FE ; CHARACTER 156
00224  24E8  C6 F6 F6              BYTE    $C6,$F6,$F6,$F6,$F6,$F6,$C6,$FE ; CHARACTER 157
00225  24F0  FE EE C6              BYTE    $FE,$EE,$C6,$82,$EE,$EE,$EE,$EE ; CHARACTER 158
00226  24F8  FE EE CE              BYTE    $FE,$EE,$CE,$80,$CE,$EE,$FE,$FE ; CHARACTER 159
00227  2500  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 160
00228  2508  EE EE EE              BYTE    $EE,$EE,$EE,$EE,$FE,$FE,$EE,$FE ; CHARACTER 161
00229  2510  DA DA DA              BYTE    $DA,$DA,$DA,$FE,$FE,$FE,$FE,$FE ; CHARACTER 162
00230  2518  D6 D6 82              BYTE    $D6,$D6,$82,$D6,$82,$D6,$D6,$FE ; CHARACTER 163
00231  2520  EE C2 BE              BYTE    $EE,$C2,$BE,$C6,$FA,$86,$EE,$FE ; CHARACTER 164
00232  2528  BA BA F6              BYTE    $BA,$BA,$F6,$EE,$DE,$BA,$BA,$FE ; CHARACTER 165
00233  2530  CE B6 CE              BYTE    $CE,$B6,$CE,$DE,$AA,$B6,$CA,$FE ; CHARACTER 166
00234  2538  FA F6 EE              BYTE    $FA,$F6,$EE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 167
00235  2540  F6 EE DE              BYTE    $F6,$EE,$DE,$DE,$DE,$EE,$F6,$FE ; CHARACTER 168
00236  2548  DE EE F6              BYTE    $DE,$EE,$F6,$F6,$F6,$EE,$DE,$FE ; CHARACTER 169
00237  2550  FE BA D6              BYTE    $FE,$BA,$D6,$82,$D6,$BA,$FE,$FE ; CHARACTER 170
00238  2558  FE EE EE              BYTE    $FE,$EE,$EE,$82,$EE,$EE,$FE,$FE ; CHARACTER 171
00239  2560  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$EE,$EE,$DE ; CHARACTER 172
00240  2568  FE FE FE              BYTE    $FE,$FE,$FE,$82,$FE,$FE,$FE,$FE ; CHARACTER 173
00241  2570  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$E6,$E6,$FE ; CHARACTER 174
00242  2578  FE FC FA              BYTE    $FE,$FC,$FA,$F6,$EE,$DE,$BE,$FE ; CHARACTER 175
00243  2580  C6 BA B2              BYTE    $C6,$BA,$B2,$AA,$9A,$BA,$C6,$FE ; CHARACTER 176
00244  2588  EE CE EE              BYTE    $EE,$CE,$EE,$EE,$EE,$EE,$C6,$FE ; CHARACTER 177
00245  2590  C6 BA FA              BYTE    $C6,$BA,$FA,$E6,$DE,$BE,$82,$FE ; CHARACTER 178
00246  2598  C6 BA FA              BYTE    $C6,$BA,$FA,$E6,$FA,$BA,$C6,$FE ; CHARACTER 179
00247  25A0  F6 E6 D6              BYTE    $F6,$E6,$D6,$B6,$82,$F6,$F6,$FE ; CHARACTER 180
00248  25A8  82 BE 86              BYTE    $82,$BE,$86,$FA,$FA,$BA,$C6,$FE ; CHARACTER 181
00249  25B0  C6 BA BE              BYTE    $C6,$BA,$BE,$86,$BA,$BA,$C6,$FE ; CHARACTER 182
00250  25B8  82 BA F6              BYTE    $82,$BA,$F6,$EE,$EE,$EE,$EE,$FE ; CHARACTER 183
00251  25C0  C6 BA BA              BYTE    $C6,$BA,$BA,$C6,$BA,$BA,$C6,$FE ; CHARACTER 184
00252  25C8  C6 BA BA              BYTE    $C6,$BA,$BA,$C2,$FA,$BA,$C6,$FE ; CHARACTER 185
00253  25D0  FE FE EE              BYTE    $FE,$FE,$EE,$FE,$FE,$EE,$FE,$FE ; CHARACTER 186
00254  25D8  FE FE EE              BYTE    $FE,$FE,$EE,$FE,$FE,$EE,$EE,$DE ; CHARACTER 187
00255  25E0  F2 EE DE              BYTE    $F2,$EE,$DE,$BE,$DE,$EE,$F2,$FE ; CHARACTER 188
00256  25E8  FE FE 82              BYTE    $FE,$FE,$82,$FE,$82,$FE,$FE,$FE ; CHARACTER 189
00257  25F0  9E EE F6              BYTE    $9E,$EE,$F6,$FA,$F6,$EE,$9E,$FE ; CHARACTER 190
00258  25F8  C6 BA FA              BYTE    $C6,$BA,$FA,$F6,$EE,$FE,$EE,$FE ; CHARACTER 191
00259  2600  FE FE FE              BYTE    $FE,$FE,$FE,$00,$00,$FE,$FE,$FE ; CHARACTER 192
00260  2608  EE D6 BA              BYTE    $EE,$D6,$BA,$82,$BA,$BA,$BA,$FE ; CHARACTER 193
00261  2610  86 BA BA              BYTE    $86,$BA,$BA,$86,$BA,$BA,$86,$FE ; CHARACTER 194
00262  2618  C6 BA BE              BYTE    $C6,$BA,$BE,$BE,$BE,$BA,$C6,$FE ; CHARACTER 195
00263  2620  8E B6 BA              BYTE    $8E,$B6,$BA,$BA,$BA,$B6,$8E,$FE ; CHARACTER 196
00264  2628  82 BE BE              BYTE    $82,$BE,$BE,$86,$BE,$BE,$82,$FE ; CHARACTER 197
00265  2630  82 BE BE              BYTE    $82,$BE,$BE,$8E,$BE,$BE,$BE,$FE ; CHARACTER 198
00266  2638  C6 BA BE              BYTE    $C6,$BA,$BE,$B2,$BA,$BA,$C6,$FE ; CHARACTER 199
00267  2640  BA BA BA              BYTE    $BA,$BA,$BA,$82,$BA,$BA,$BA,$FE ; CHARACTER 200
00268  2648  C6 EE EE              BYTE    $C6,$EE,$EE,$EE,$EE,$EE,$C6,$FE ; CHARACTER 201
00269  2650  E2 F6 F6              BYTE    $E2,$F6,$F6,$F6,$F6,$B6,$CE,$FE ; CHARACTER 202
00270  2658  BA B6 AE              BYTE    $BA,$B6,$AE,$9E,$AE,$B6,$BA,$FE ; CHARACTER 203
00271  2660  BE BE BE              BYTE    $BE,$BE,$BE,$BE,$BE,$BE,$82,$FE ; CHARACTER 204
00272  2668  BA 92 AA              BYTE    $BA,$92,$AA,$BA,$BA,$BA,$BA,$FE ; CHARACTER 205
00273  2670  BA BA 9A              BYTE    $BA,$BA,$9A,$AA,$B2,$BA,$BA,$FE ; CHARACTER 206
00274  2678  C6 BA BA              BYTE    $C6,$BA,$BA,$BA,$BA,$BA,$C6,$FE ; CHARACTER 207
00275  2680  86 BA BA              BYTE    $86,$BA,$BA,$86,$BE,$BE,$BE,$FE ; CHARACTER 208
00276  2688  C6 BA BA              BYTE    $C6,$BA,$BA,$BA,$BA,$C6,$F2,$FE ; CHARACTER 209
00277  2690  86 BA BA              BYTE    $86,$BA,$BA,$86,$AE,$B6,$BA,$FE ; CHARACTER 210
00278  2698  C6 BA BE              BYTE    $C6,$BA,$BE,$C6,$FA,$BA,$C6,$FE ; CHARACTER 211
00279  26A0  82 EE EE              BYTE    $82,$EE,$EE,$EE,$EE,$EE,$EE,$FE ; CHARACTER 212
00280  26A8  BA BA BA              BYTE    $BA,$BA,$BA,$BA,$BA,$BA,$C6,$FE ; CHARACTER 213
00281  26B0  BA BA BA              BYTE    $BA,$BA,$BA,$BA,$BA,$D6,$EE,$FE ; CHARACTER 214
00282  26B8  BA BA BA              BYTE    $BA,$BA,$BA,$BA,$AA,$92,$BA,$FE ; CHARACTER 215
00283  26C0  BA BA D6              BYTE    $BA,$BA,$D6,$EE,$D6,$BA,$BA,$FE ; CHARACTER 216
00284  26C8  BA BA BA              BYTE    $BA,$BA,$BA,$D6,$EE,$EE,$EE,$FE ; CHARACTER 217
00285  26D0  82 FA F6              BYTE    $82,$FA,$F6,$EE,$DE,$BE,$82,$FE ; CHARACTER 218
00286  26D8  E6 E6 E6              BYTE    $E6,$E6,$E6,$00,$00,$E6,$E6,$E6 ; CHARACTER 219
00287  26E0  3E 3E CE              BYTE    $3E,$3E,$CE,$CE,$3E,$3E,$CE,$CE ; CHARACTER 220
00288  26E8  E6 E6 E6              BYTE    $E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6 ; CHARACTER 221
00289  26F0  CC CC 32              BYTE    $CC,$CC,$32,$32,$CC,$CC,$32,$32 ; CHARACTER 222
00290  26F8  CC 66 32              BYTE    $CC,$66,$32,$98,$CC,$66,$32,$98 ; CHARACTER 223
00291  2700  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 224
00292  2708  0E 0E 0E              BYTE    $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E ; CHARACTER 225
00293  2710  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$00,$00,$00,$00 ; CHARACTER 226
00294  2718  00 FE FE              BYTE    $00,$FE,$FE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 227
00295  2720  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$FE,$FE,$00 ; CHARACTER 228
00296  2728  3E 3E 3E              BYTE    $3E,$3E,$3E,$3E,$3E,$3E,$3E,$3E ; CHARACTER 229
00297  2730  32 32 CC              BYTE    $32,$32,$CC,$CC,$32,$32,$CC,$CC ; CHARACTER 230
00298  2738  FC FC FC              BYTE    $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC ; CHARACTER 231
00299  2740  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$32,$32,$CC,$CC ; CHARACTER 232
00300  2748  FE 66 CC              BYTE    $FE,$66,$CC,$98,$32,$66,$CC,$98 ; CHARACTER 233
00301  2750  FE FC FC              BYTE    $FE,$FC,$FC,$FC,$FC,$FC,$FC,$FC ; CHARACTER 234
00302  2758  E6 E6 E6              BYTE    $E6,$E6,$E6,$E0,$E0,$E6,$E6,$E6 ; CHARACTER 235
00303  2760  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$F0,$F0,$F0,$F0 ; CHARACTER 236
00304  2768  E6 E6 E6              BYTE    $E6,$E6,$E6,$E0,$E0,$FE,$FE,$FE ; CHARACTER 237
00305  2770  FE FE FE              BYTE    $FE,$FE,$FE,$06,$06,$E6,$E6,$E6 ; CHARACTER 238
00306  2778  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$FE,$00,$00 ; CHARACTER 239
00307  2780  FE FE FE              BYTE    $FE,$FE,$FE,$E0,$E0,$E6,$E6,$E6 ; CHARACTER 240
00308  2788  E6 E6 E6              BYTE    $E6,$E6,$E6,$00,$00,$FE,$FE,$FE ; CHARACTER 241
00309  2790  FE FE FE              BYTE    $FE,$FE,$FE,$00,$00,$E6,$E6,$E6 ; CHARACTER 242
00310  2798  E6 E6 E6              BYTE    $E6,$E6,$E6,$06,$06,$E6,$E6,$E6 ; CHARACTER 243
00311  27A0  3E 3E 3E              BYTE    $3E,$3E,$3E,$3E,$3E,$3E,$3E,$3E ; CHARACTER 244
00312  27A8  1E 1E 1E              BYTE    $1E,$1E,$1E,$1E,$1E,$1E,$1E,$1E ; CHARACTER 245
00313  27B0  F8 F8 F8              BYTE    $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8 ; CHARACTER 246
00314  27B8  00 00 FE              BYTE    $00,$00,$FE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 247
00315  27C0  00 00 00              BYTE    $00,$00,$00,$FE,$FE,$FE,$FE,$FE ; CHARACTER 248
00316  27C8  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$00,$00,$00 ; CHARACTER 249
00317  27D0  FE FC F8              BYTE    $FE,$FC,$F8,$92,$86,$8E,$9E,$FE ; CHARACTER 250
00318  27D8  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$0E,$0E,$0E,$0E ; CHARACTER 251
00319  27E0  F0 F0 F0              BYTE    $F0,$F0,$F0,$F0,$FE,$FE,$FE,$FE ; CHARACTER 252
00320  27E8  E6 E6 E6              BYTE    $E6,$E6,$E6,$06,$06,$FE,$FE,$FE ; CHARACTER 253
00321  27F0  0E 0E 0E              BYTE    $0E,$0E,$0E,$0E,$FE,$FE,$FE,$FE ; CHARACTER 254
00322  27F8  0E 0E 0E              BYTE    $0E,$0E,$0E,$0E,$F0,$F0,$F0,$F0 ; CHARACTER 255
00323  2800             
00324  2800             
00325  2800             
00326  2800             
00327  2800             ;#REGION RESERVED ADDRESSES
00328  2800             ;*=$0400 ; CHARACTERS
00329  2800             ;        NOP
00330  2800             ;;*=$2000 ; CHARACTERMAP (DECLARED ABOVE)
00331  2800             ;;        NOP
00332  2800             ;*=$4200 ; SPRITE MEMORY
00333  2800             ;*=$4400 ; BITMAP COLOR MEMORY
00334  2800             ;        NOP
00335  2800             ;*=$6000 ; BITMAP DATA MEMORY (-$8FFF)
00336  2800             ;        NOP
00337  2800             ;*=$A000 ; HEAP (-$BFFF)
00338  2800             ;*=$D400 ; SOUND MEMORY
00339  2800             ;*=$C000 ; USER CODE (-$CFFF) *** NEED TO RELOCATE THE ZP BACKUP AND THE GRAPHICS CALC TABLES! ***
00340  2800             ;#ENDREGION
00341  2800             
00342  2800             ;; UP9600
00343  2800             ;*=$4800
00344  2800             ;INCASM "UP9600.ASM"
00345  2800             
00346  2800             ;*=$5E00
00347  2800             ;INCASM "T2400.ASM"
00348  2800             
00349  2800             
00350  2800             ; KERNEL ENTRY POINT
00351  2800             ;*=$2000
00352  2800             
00353  2800             ;*=$08F0
00354  2800             ;*=$0FF0
00355  2800             *=$0F00
00356  0F00                        ;LDA #$01 ; IF DEBUGGING IN CBM PRG STUDIO, UNREMARK THIS LINE
00357  0F00  A9 00                 LDA #$00 ; IF RUNNING FROM DEPACKER, UNREMARK THIS LINE
00358  0F02  8D 08 0F              STA KERNEL.DEBUGMODE$
00359  0F05  4C 10 0F              JMP KERNEL.BEGIN
00360  0F08             
00361  0F08  00         KERNEL.DEBUGMODE$ BYTE $00
00362  0F09             
00363  0F09  A9 00                 LDA #$00
00364  0F0B  8D 08 0F              STA KERNEL.DEBUGMODE$
00365  0F0E  EA                    NOP
00366  0F0F  EA                    NOP
00367  0F10             
00368  0F10             ;*=$0900
00369  0F10             *=$0F10
00370  0F10             KERNEL.BEGIN 
00371  0F10  20 1A 0F              JSR KERNEL.START
00372  0F13                        ;JSR MAIN
00373  0F13  20 00 C0              JSR $C000
00374  0F16  20 34 0F              JSR KERNEL.END
00375  0F19  60                    RTS
00376  0F1A             
00377  0F1A             
00378  0F1A             
00379  0F1A             
00380  0F1A             COLOR.BLACK$ = $00
00381  0F1A             COLOR.WHITE$ = $01
00382  0F1A             COLOR.RED$ = $02
00383  0F1A             COLOR.CYAN$ = $03
00384  0F1A             COLOR.PURPLE$ = $04
00385  0F1A             COLOR.GREEN$ = $05
00386  0F1A             COLOR.BLUE$ = $06
00387  0F1A             COLOR.YELLOW$ = $07
00388  0F1A             COLOR.ORANGE$ = $08
00389  0F1A             COLOR.BROWN$ = $09
00390  0F1A             COLOR.LIGHTRED$ = $0A
00391  0F1A             COLOR.DARKGREY$ = $0B
00392  0F1A             COLOR.GREY$ = $0C
00393  0F1A             COLOR.LIGHTGREEN$ = $0D
00394  0F1A             COLOR.LIGHTBLUE$ = $0E
00395  0F1A             COLOR.LIGHTGREY$ = $0F
00396  0F1A             
00397  0F1A             
00398  0F1A             
00399  0F1A             ;*=$C000 ; SYS 49152
00400  0F1A             ;*=$A000 ; SYS 40960
00401  0F1A             
00402  0F1A             ;ALIGN $100
00403  0F1A             
00404  0F1A             KERNEL.START 
00405  0F1A             
00406  0F1A                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:MEMORY_MANAGEMENT
00407  0F1A  A9 36                 LDA #$36 ; BANK SWITCH BASIC ROM INTO RAM
00408  0F1C  85 01                 STA $01
00409  0F1E             
00410  0F1E                        ; DISABLES C= (COMMODORE KEY) + SHIFT WHICH SWITCHES THE CHARACTERS
00411  0F1E                        ; AND MESSES WITH THE CHARACTERS ON THE SCREEN.
00412  0F1E  A9 08                 LDA #$08
00413  0F20  20 D2 FF              JSR $FFD2
00414  0F23             
00415  0F23  20 56 0F              JSR MEMORY.START
00416  0F26             
00417  0F26                        ;$DD00 = %XXXXXX11 -> BANK0: $0000-$3FFF
00418  0F26                        ;$DD00 = %XXXXXX10 -> BANK1: $4000-$7FFF
00419  0F26                        ;$DD00 = %XXXXXX01 -> BANK2: $8000-$BFFF
00420  0F26                        ;$DD00 = %XXXXXX00 -> BANK3: $C000-$FFFF
00421  0F26                        ; DEFAULT: 10010111
00422  0F26  AD 00 DD              LDA $DD00
00423  0F29  29 FC                 AND #%11111100
00424  0F2B                        ;ORA #%00000010 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
00425  0F2B  09 03                 ORA #%00000011 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
00426  0F2D  8D 00 DD              STA $DD00
00427  0F30             
00428  0F30  20 F6 12              JSR CONSOLE.START
00429  0F33             
00430  0F33                        ;; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:MEMORY_MANAGEMENT
00431  0F33             ;        LDA #$36 ; BANK SWITCH BASIC ROM INTO RAM
00432  0F33             ;        STA $01
00433  0F33             
00434  0F33             ;CHARSET 2 ; UPPER/LOWER CASED CHARACTERS
00435  0F33             ;           LDA $D018
00436  0F33             ;           ORA #$0E       ; SET CHARS LOCATION TO $3800 FOR DISPLAYING THE CUSTOM FONT
00437  0F33             ;           STA $D018      ; BITS 1-3 ($400+512BYTES * LOW NIBBLE VALUE) OF $D018 SETS CHAR LOCATION
00438  0F33             ;                          ; $400 + $200*$0E = $3800
00439  0F33             
00440  0F33                        ;JSR MAIN
00441  0F33                        
00442  0F33             
00443  0F33                        ;; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:MEMORY_MANAGEMENT
00444  0F33             ;        LDA #$37 ; BANK SWITCH RAM BACK INTO BASIC ROM
00445  0F33             ;        STA $01
00446  0F33                        
00447  0F33                        ;JSR KERNEL.RESET
00448  0F33             
00449  0F33  60                    RTS
00450  0F34                        ;BRK
00451  0F34             
00452  0F34             KERNEL.END 
00453  0F34  20 35 13              JSR CONSOLE.END
00454  0F37             
00455  0F37                        ;$DD00 = %XXXXXX11 -> BANK0: $0000-$3FFF
00456  0F37                        ;$DD00 = %XXXXXX10 -> BANK1: $4000-$7FFF
00457  0F37                        ;$DD00 = %XXXXXX01 -> BANK2: $8000-$BFFF
00458  0F37                        ;$DD00 = %XXXXXX00 -> BANK3: $C000-$FFFF
00459  0F37  AD 00 DD              LDA $DD00
00460  0F3A  29 FC                 AND #%11111100
00461  0F3C  09 03                 ORA #%00000011 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
00462  0F3E  8D 00 DD              STA $DD00
00463  0F41             
00464  0F41  20 5A 0F              JSR MEMORY.END
00465  0F44             
00466  0F44                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:MEMORY_MANAGEMENT
00467  0F44  A9 37                 LDA #$37 ; BANK SWITCH RAM BACK INTO BASIC ROM
00468  0F46  85 01                 STA $01
00469  0F48             
00470  0F48             ;        ; RESET THE COMPUTER.
00471  0F48             ;        ; IN ORDER TO PREVENT THE DEBUGGER FROM CRASHING JUST RETURN.
00472  0F48             ;        LDA KERNEL.DEBUGMODE$
00473  0F48             ;        CMP #$01
00474  0F48             ;        BNE @RESET
00475  0F48             ;        RTS
00476  0F48             ;@RESET
00477  0F48             ;        JSR KERNEL.RESET$
00478  0F48             
00479  0F48  60                    RTS
00480  0F49             
00481  0F49             ;KERNEL.RESET$
00482  0F49             ;        JMP ($FFFC)
00483  0F49             
00484  0F49             KERNEL.HALT$ 
00485  0F49             ;        JMP KERNEL.HALT$
00486  0F49             
00487  0F49  AD 08 0F              LDA KERNEL.DEBUGMODE$
00488  0F4C  C9 00                 CMP #$00
00489  0F4E  F0 03                 BEQ @HALT
00490  0F50  4C 00 00              JMP $0000
00491  0F53             
00492  0F53             @HALT
00493  0F53  4C 53 0F              JMP @HALT
00494  0F56             
00495  0F56             
00496  0F56             
00497  0F56             
00498  0F56             ;ALIGN $100
00499  0F56             
00500  0F56             MEMORY.START 
00501  0F56  20 61 0F              JSR MEMORY.BACKUPZP
00502  0F59                        ;JSR MEMORY.STARTHEAP
00503  0F59  60                    RTS
00504  0F5A             
00505  0F5A             MEMORY.END 
00506  0F5A  20 97 10              JSR MEMORY.ENDHEAP$
00507  0F5D  20 6E 0F              JSR MEMORY.RESTOREZP
00508  0F60  60                    RTS
00509  0F61             
00510  0F61             MEMORY.BACKUPZP 
00511  0F61                        ; BACK ZERO PAGE MEMORY
00512  0F61  A2 00                 LDX #$00
00513  0F63             @LOOP
00514  0F63  B5 00                 LDA $00,X
00515  0F65                        ;STA $E3A2,X
00516  0F65                        ;STA $CF00,X
00517  0F65  9D 00 0E              STA MEMORY.BACKUPZPADDRESS,X
00518  0F68  E8                    INX
00519  0F69  E0 FF                 CPX #$FF
00520  0F6B  D0 F6                 BNE @LOOP
00521  0F6D  60                    RTS
00522  0F6E             
00523  0F6E             MEMORY.RESTOREZP 
00524  0F6E                        ; DO NOT RESTORE THE RTC VARIABLES SO THAT THE TICKS DO NOT RESET
00525  0F6E  A5 A0                 LDA $A0
00526  0F70  8D A0 0E              STA MEMORY.BACKUPZPADDRESS+$A0
00527  0F73  A5 A1                 LDA $A1
00528  0F75  8D A1 0E              STA MEMORY.BACKUPZPADDRESS+$A1
00529  0F78  A5 A2                 LDA $A2
00530  0F7A  8D A2 0E              STA MEMORY.BACKUPZPADDRESS+$A2
00531  0F7D             
00532  0F7D                        ; BACK ZERO PAGE MEMORY
00533  0F7D  A2 00                 LDX #$00
00534  0F7F             @LOOP
00535  0F7F                        ;LDA $CF00,X
00536  0F7F  BD 00 0E              LDA MEMORY.BACKUPZPADDRESS,X
00537  0F82  95 00                 STA $00,X
00538  0F84  E8                    INX
00539  0F85  E0 FF                 CPX #$FF
00540  0F87  D0 F6                 BNE @LOOP
00541  0F89  60                    RTS
00542  0F8A             
00543  0F8A             
00544  0F8A             MEMORY.COPY.SOURCE$ = $73 ; 2 BYTES
00545  0F8A             MEMORY.COPY.DESTINATION$ = $75 ; 2 BYTES
00546  0F8A             MEMORY.COPY.LENGTH$ = $77 ; 1 BYTE
00547  0F8A             
00548  0F8A             MEMORY.COPY$ 
00549  0F8A  A5 77                 LDA MEMORY.COPY.LENGTH$
00550  0F8C  C9 00                 CMP #$00
00551  0F8E  F0 0B                 BEQ @END
00552  0F90             
00553  0F90  A0 00                 LDY #$00
00554  0F92             @LOOP
00555  0F92  B1 73                 LDA (MEMORY.COPY.SOURCE$),Y
00556  0F94  91 75                 STA (MEMORY.COPY.DESTINATION$),Y
00557  0F96  C8                    INY
00558  0F97  C4 77                 CPY MEMORY.COPY.LENGTH$
00559  0F99  D0 F7                 BNE @LOOP
00560  0F9B             @END
00561  0F9B  60                    RTS
00562  0F9C             
00563  0F9C             MEMORY.COPY16.SOURCE$ = $73 ; 2 BYTES
00564  0F9C             MEMORY.COPY16.DESTINATION$ = $75 ; 2 BYTES
00565  0F9C             MEMORY.COPY16.LENGTH$ = $78 ; 2 BYTES
00566  0F9C             
00567  0F9C             MEMORY.COPY16$ 
00568  0F9C             @LOOP
00569  0F9C  A5 79                 LDA MEMORY.COPY16.LENGTH$+1
00570  0F9E  C9 00                 CMP #$00
00571  0FA0  F0 16                 BEQ @COPYLOW
00572  0FA2             
00573  0FA2  A9 FF                 LDA #$FF
00574  0FA4  85 77                 STA MEMORY.COPY.LENGTH$
00575  0FA6  20 8A 0F              JSR MEMORY.COPY$
00576  0FA9             
00577  0FA9  A0 FF                 LDY #$FF
00578  0FAB  B1 73                 LDA (MEMORY.COPY16.SOURCE$),Y
00579  0FAD  91 75                 STA (MEMORY.COPY16.DESTINATION$),Y
00580  0FAF             
00581  0FAF  E6 74                 INC MEMORY.COPY16.SOURCE$+1
00582  0FB1  E6 76                 INC MEMORY.COPY16.DESTINATION$+1
00583  0FB3  C6 79                 DEC MEMORY.COPY16.LENGTH$+1
00584  0FB5             
00585  0FB5  4C 9C 0F              JMP @LOOP
00586  0FB8             
00587  0FB8             @COPYLOW
00588  0FB8  A5 78                 LDA MEMORY.COPY16.LENGTH$
00589  0FBA  85 77                 STA MEMORY.COPY.LENGTH$
00590  0FBC  20 8A 0F              JSR MEMORY.COPY$
00591  0FBF             
00592  0FBF  60                    RTS
00593  0FC0             
00594  0FC0             MEMORY.SWAP.ADDRESS1$ = $73 ; 2 BYTES
00595  0FC0             MEMORY.SWAP.ADDRESS2$ = $75 ; 2 BYTES
00596  0FC0             MEMORY.SWAP.LENGTH$ = $77 ; 1 BYTE
00597  0FC0             MEMORY.SWAP.TEMP = $79 ; 1 BYTE
00598  0FC0             MEMORY.SWAP$ 
00599  0FC0  A0 00                 LDY #$00
00600  0FC2             @AGAIN
00601  0FC2  C4 77                 CPY MEMORY.SWAP.LENGTH$
00602  0FC4  D0 01                 BNE @CONT
00603  0FC6  60                    RTS
00604  0FC7             @CONT
00605  0FC7  B1 73                 LDA (MEMORY.SWAP.ADDRESS1$),Y
00606  0FC9  85 79                 STA MEMORY.SWAP.TEMP
00607  0FCB  B1 75                 LDA (MEMORY.SWAP.ADDRESS2$),Y
00608  0FCD  91 73                 STA (MEMORY.SWAP.ADDRESS1$),Y
00609  0FCF  A5 79                 LDA MEMORY.SWAP.TEMP
00610  0FD1  91 75                 STA (MEMORY.SWAP.ADDRESS2$),Y
00611  0FD3  C8                    INY
00612  0FD4  4C C2 0F              JMP @AGAIN
00613  0FD7             
00614  0FD7             MEMORY.SWAP16.ADDRESS1$ = $73 ; 2 BYTES
00615  0FD7             MEMORY.SWAP16.ADDRESS2$ = $75 ; 2 BYTES
00616  0FD7             MEMORY.SWAP16.LENGTH$ = $77 ; 2 BYTES
00617  0FD7             MEMORY.SWAP16.TEMP = $79 ; 1 BYTE
00618  0FD7             MEMORY.SWAP16$ 
00619  0FD7             @LOOP
00620  0FD7  A5 78                 LDA MEMORY.SWAP16.LENGTH$+1
00621  0FD9  C9 00                 CMP #$00
00622  0FDB  F0 1E                 BEQ @SWAPLOW
00623  0FDD             
00624  0FDD  A9 FF                 LDA #$FF
00625  0FDF  85 77                 STA MEMORY.SWAP.LENGTH$
00626  0FE1  20 C0 0F              JSR MEMORY.SWAP$
00627  0FE4             
00628  0FE4  A0 FF                 LDY #$FF
00629  0FE6  B1 73                 LDA (MEMORY.SWAP16.ADDRESS1$),Y
00630  0FE8  85 79                 STA MEMORY.SWAP16.TEMP
00631  0FEA  B1 75                 LDA (MEMORY.SWAP16.ADDRESS2$),Y
00632  0FEC  91 73                 STA (MEMORY.SWAP16.ADDRESS1$),Y
00633  0FEE  A5 79                 LDA MEMORY.SWAP16.TEMP
00634  0FF0  91 75                 STA (MEMORY.SWAP16.ADDRESS2$),Y
00635  0FF2             
00636  0FF2  E6 74                 INC MEMORY.SWAP16.ADDRESS1$+1
00637  0FF4  E6 76                 INC MEMORY.SWAP16.ADDRESS2$+1
00638  0FF6  C6 78                 DEC MEMORY.SWAP16.LENGTH$+1
00639  0FF8             
00640  0FF8  4C D7 0F              JMP @LOOP
00641  0FFB             
00642  0FFB             @SWAPLOW
00643  0FFB  A5 77                 LDA MEMORY.SWAP16.LENGTH$
00644  0FFD  85 77                 STA MEMORY.SWAP.LENGTH$
00645  0FFF  20 C0 0F              JSR MEMORY.SWAP$
00646  1002             
00647  1002  60                    RTS
00648  1003             
00649  1003             ;ALIGN $100
00650  1003             
00651  1003             MEMORY.FILL.ADDRESS$ = $73 ; 2 BYTES
00652  1003             MEMORY.FILL.VALUE$ = $75 ; 1 BYTE
00653  1003             MEMORY.FILL.LENGTH$ = $76 ; 1 BYTE
00654  1003             
00655  1003             MEMORY.FILL$ 
00656  1003  A5 76                 LDA MEMORY.FILL.LENGTH$
00657  1005  C9 00                 CMP #$00
00658  1007  F0 0B                 BEQ @END
00659  1009             
00660  1009  A5 75                 LDA MEMORY.FILL.VALUE$
00661  100B  A0 00                 LDY #$00
00662  100D             @LOOP
00663  100D  91 73                 STA (MEMORY.FILL.ADDRESS$),Y
00664  100F  C8                    INY
00665  1010  C4 76                 CPY MEMORY.FILL.LENGTH$
00666  1012  D0 F9                 BNE @LOOP
00667  1014             @END
00668  1014  60                    RTS
00669  1015             
00670  1015             MEMORY.FILL16.ADDRESS$ = $73 ; 2 BYTES
00671  1015             MEMORY.FILL16.VALUE$ = $75 ; 1 BYTE
00672  1015             MEMORY.FILL16.LENGTH$ = $77 ; 2 BYTES
00673  1015             
00674  1015             MEMORY.FILL16$ 
00675  1015             @LOOP
00676  1015  A5 78                 LDA MEMORY.FILL16.LENGTH$+1
00677  1017  C9 00                 CMP #$00
00678  1019  F0 14                 BEQ @FILLLOW
00679  101B             
00680  101B  A9 FF                 LDA #$FF
00681  101D  85 76                 STA MEMORY.FILL.LENGTH$
00682  101F  20 03 10              JSR MEMORY.FILL$
00683  1022             
00684  1022  A0 FF                 LDY #$FF
00685  1024  A5 75                 LDA MEMORY.FILL16.VALUE$
00686  1026  91 73                 STA (MEMORY.FILL16.ADDRESS$),Y
00687  1028             
00688  1028  E6 74                 INC MEMORY.FILL16.ADDRESS$+1
00689  102A  C6 78                 DEC MEMORY.FILL16.LENGTH$+1
00690  102C             
00691  102C  4C 15 10              JMP @LOOP
00692  102F             
00693  102F             @FILLLOW
00694  102F  A5 77                 LDA MEMORY.FILL16.LENGTH$
00695  1031  85 76                 STA MEMORY.FILL.LENGTH$
00696  1033  20 03 10              JSR MEMORY.FILL$
00697  1036             
00698  1036  60                    RTS
00699  1037             
00700  1037             MEMORY.PUSHREGS$ 
00701  1037  85 FC                 STA $FC ; PUT  THE A REGSITER INTO MEMORY SINCE WE NEED IT TO DO WORK IN THIS ROUTINE.
00702  1039             
00703  1039                        ; THE STACK IS POINTING TO THE RETURN ADDRESS.
00704  1039                        ; GET THE RETURN ADDRESS
00705  1039  68                    PLA
00706  103A  85 FD                 STA $FD
00707  103C  E6 FD                 INC $FD
00708  103E  68                    PLA
00709  103F  85 FE                 STA $FE
00710  1041             
00711  1041                        ; PUSH THE A, X, AND Y REGISTERS ONTO THE STACK.
00712  1041  A5 FC                 LDA $FC
00713  1043  48                    PHA
00714  1044  8A                    TXA
00715  1045  48                    PHA
00716  1046  98                    TYA
00717  1047  48                    PHA
00718  1048                        
00719  1048  A5 FC                 LDA $FC ; RESTORE THE A REGISTER.
00720  104A             
00721  104A                        ; IMPLICIT RETURN.
00722  104A  6C FD 00              JMP ($00FD)
00723  104D             
00724  104D             MEMORY.PULLREGS$ 
00725  104D                        ; THE STACK IS POINTING TO THE RETURN ADDRESS.
00726  104D                        ; GET THE RETURN ADDRESS
00727  104D  68                    PLA
00728  104E  85 FD                 STA $FD
00729  1050  E6 FD                 INC $FD
00730  1052  68                    PLA
00731  1053  85 FE                 STA $FE
00732  1055             
00733  1055                        ; PULL THE A, X, AND Y REGISTERS FROM THE STACK.
00734  1055  68                    PLA
00735  1056  A8                    TAY
00736  1057  68                    PLA
00737  1058  AA                    TAX
00738  1059  68                    PLA
00739  105A                        
00740  105A                        ; IMPLICIT RETURN.
00741  105A  6C FD 00              JMP ($00FD)
00742  105D             
00743  105D             ;ALIGN $100
00744  105D             
00745  105D  00 A0      MEMORY.HEAPADRESS WORD $A000
00746  105F  FF BF      MEMORY.HEAPADRESS_LR WORD $BFFF
00747  1061  00 20      MEMORY.TOTAL$ WORD $2000 ; 8,192 BYTES
00748  1063  00 20      MEMORY.FREE$ WORD $2000 ; 8,192 BYTES
00749  1065  00 00      MEMORY.USED$ WORD $0000 ; 0 BYTES
00750  1067  00         MEMORY.HEAPSTARTED BYTE $00
00751  1068             
00752  1068             MEMORY.STARTHEAP$ 
00753  1068             
00754  1068                        ; CHECK TO SEE IF THE HEAP HAS ALREADY BEEN STARTED
00755  1068  AD 67 10              LDA MEMORY.HEAPSTARTED
00756  106B  C9 01                 CMP #$01
00757  106D  D0 01                 BNE @OKTOSTART
00758  106F  60                    RTS
00759  1070             @OKTOSTART 
00760  1070             
00761  1070  A9 01                 LDA #$01
00762  1072  8D 67 10              STA MEMORY.HEAPSTARTED
00763  1075             
00764  1075  20 1B 1F              JSR MEMORY.PUSHZP$
00765  1078             
00766  1078  AD 5D 10              LDA MEMORY.HEAPADRESS
00767  107B  85 73                 STA MEMORY.FILL16.ADDRESS$
00768  107D  AD 5E 10              LDA MEMORY.HEAPADRESS+1
00769  1080  85 74                 STA MEMORY.FILL16.ADDRESS$+1
00770  1082             
00771  1082  AD 61 10              LDA MEMORY.TOTAL$
00772  1085  85 77                 STA MEMORY.FILL16.LENGTH$
00773  1087  AD 62 10              LDA MEMORY.TOTAL$+1
00774  108A  85 78                 STA MEMORY.FILL16.LENGTH$+1
00775  108C             
00776  108C  A9 FF                 LDA #$FF
00777  108E  85 75                 STA MEMORY.FILL16.VALUE$
00778  1090             
00779  1090  20 15 10              JSR MEMORY.FILL16$
00780  1093             
00781  1093  20 31 1F              JSR MEMORY.PULLZP$
00782  1096             
00783  1096  60                    RTS
00784  1097             
00785  1097             MEMORY.ENDHEAP$ 
00786  1097  A9 00                 LDA #$00
00787  1099  8D 67 10              STA MEMORY.HEAPSTARTED
00788  109C  60                    RTS
00789  109D             
00790  109D             ; NEW METHOD: (N + 2 BYTES)
00791  109D             ;       LOOK FOR 2 NULL$ BYTES AND THEN START COUNTING AS LONG AS THERE ISN'T ANY NON-NULL$ BYTES.  RETURN THE ADDRESS AFTER THE SIZE BYTES.
00792  109D             ;       2 BYTES BEFORE THE ALLOCATED BLOCK IS THE SIZE OF THE BLOCK.
00793  109D             ;       DEALLOCTION WILL INSERT NULL$ BYTES FOR THE SIZE OF THE BLOCK INCLUDING THE 2 BYTES BEFORE THE ADDRESS
00794  109D             
00795  109D             ; OLD METHOD: (N + 1 BYTES) [SEE KERNEL.18.ASM]
00796  109D             ;       EACH BLOCK OF ALLOCATED MEMORY MUST END WITH A NULL$ BYTE.
00797  109D             ;       THE SIZE OF THE BLOCK IS DETERMINE HOW MANY BYTES BEFORE IT REACHES THE NEXT NULL$ BYTE.
00798  109D             ;       DEALLOCATION WILL INSERT NULL$ BYTES UNTIL IT ENCOUNTERS THE NEXT NULL$ BYTE.
00799  109D             
00800  109D             MEMORY.ALLOCATE.ADDRESS$ = $7A ; 2 BYTES
00801  109D             MEMORY.ALLOCATE.LENGTH$ = $75 ; 2 BYTES
00802  109D             MEMORY.ALLOCATE.COUNTER = $77 ; 2 BYTES
00803  109D             MEMORY.ALLOCATE.FOUND = $79 ; 1 BYTE
00804  109D             MEMORY.ALLOCATE$ 
00805  109D             
00806  109D  20 68 10              JSR MEMORY.STARTHEAP$ ; SANITY CHECK
00807  10A0             
00808  10A0                        ; CLEAR ADDRESS ($0000 MEANS NOTHING WAS ALLOCATED)
00809  10A0  A9 00                 LDA #$00
00810  10A2  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
00811  10A4  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
00812  10A6             
00813  10A6  20 3E 11              JSR MEMORY.ALLOCATE.INC_LENGTH ; LENGTH = LENGTH + 2
00814  10A9             
00815  10A9  A5 84                 LDA MATH.ADD16.SUM$
00816  10AB  85 75                 STA MEMORY.ALLOCATE.LENGTH$
00817  10AD  A5 85                 LDA MATH.ADD16.SUM$+1
00818  10AF  85 76                 STA MEMORY.ALLOCATE.LENGTH$+1
00819  10B1             
00820  10B1                        ; ENSURE THAT WE ARE NOT ALLOCATING MORE MEMORY THAN WANT IS FREE
00821  10B1  AD 63 10              LDA MEMORY.FREE$
00822  10B4  85 80                 STA MATH.CMP16.NUM1$
00823  10B6  AD 64 10              LDA MEMORY.FREE$+1
00824  10B9  85 81                 STA MATH.CMP16.NUM1$+1
00825  10BB             
00826  10BB  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
00827  10BD  85 82                 STA MATH.CMP16.NUM2$
00828  10BF  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
00829  10C1  85 83                 STA MATH.CMP16.NUM2$+1
00830  10C3                        
00831  10C3  20 E4 28              JSR MATH.CMP16$ ; IF FREE$ < LENGTH$ (CARRY IS CLEARED) THEN EXIT
00832  10C6                        ;BCC @END
00833  10C6  B0 01                 BCS @FIND
00834  10C8  60                    RTS
00835  10C9             
00836  10C9             @FIND
00837  10C9                        ;JSR MEMORY.ALLOCATE.DEC_LENGTH ; LENGTH = LENGTH - 2
00838  10C9             
00839  10C9  20 76 11              JSR MEMORY.ALLOCATE.FIND ; LOCATE MEMORY THAT CAN BE USED.
00840  10CC             
00841  10CC                        ; CONFIRM THAT WE FOUND A SPOT OF MEMORY THAT CAN BE USED.
00842  10CC  A5 79                 LDA MEMORY.ALLOCATE.FOUND
00843  10CE  C9 01                 CMP #$01
00844  10D0  F0 09                 BEQ @INIT_MEM
00845  10D2             
00846  10D2                        ; IF NOTHING WAS FOUND, RESET THE RETURN VALUE AND EXIT.
00847  10D2  A9 00                 LDA #$00
00848  10D4  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
00849  10D6  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
00850  10D8  4C 3D 11              JMP @END
00851  10DB             
00852  10DB             @INIT_MEM
00853  10DB                        ;JSR MEMORY.ALLOCATE.INC_LENGTH ; LENGTH = LENGTH + 2
00854  10DB             
00855  10DB                        ; NEED TO RECALCULATE THE MEMORY FREE/USED.
00856  10DB  AD 65 10              LDA MEMORY.USED$
00857  10DE  85 80                 STA MATH.ADD16.ADDEND1$
00858  10E0  AD 66 10              LDA MEMORY.USED$+1
00859  10E3  85 81                 STA MATH.ADD16.ADDEND1$+1
00860  10E5             
00861  10E5  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
00862  10E7  85 82                 STA MATH.ADD16.ADDEND2$
00863  10E9  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
00864  10EB  85 83                 STA MATH.ADD16.ADDEND2$+1
00865  10ED             
00866  10ED  20 00 28              JSR MATH.ADD16$ ; MEMORY.USED$ = MEMORY.USED$ + LENGTH
00867  10F0             
00868  10F0  A5 84                 LDA MATH.ADD16.SUM$
00869  10F2  8D 65 10              STA MEMORY.USED$
00870  10F5  A5 85                 LDA MATH.ADD16.SUM$+1
00871  10F7  8D 66 10              STA MEMORY.USED$+1
00872  10FA             
00873  10FA  20 CC 12              JSR MEMORY.CALCULATE_FREE ; MEMORY.FREE$ = MEMORY.TOTAL$ - MEMORY.USED$
00874  10FD             
00875  10FD                        ; STORE THE LENGTH OF THE BLOCK AT ADDRESS - 2
00876  10FD  A0 00                 LDY #$00
00877  10FF  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
00878  1101  91 7A                 STA (MEMORY.ALLOCATE.ADDRESS$),Y
00879  1103  C8                    INY
00880  1104  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
00881  1106  91 7A                 STA (MEMORY.ALLOCATE.ADDRESS$),Y
00882  1108             
00883  1108                        ; ADD 2 TO THE ADDRESS VALUE.
00884  1108  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
00885  110A  85 80                 STA MATH.ADD16.ADDEND1$
00886  110C  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
00887  110E  85 81                 STA MATH.ADD16.ADDEND1$+1
00888  1110                        
00889  1110  A9 02                 LDA #$02
00890  1112  85 82                 STA MATH.ADD16.ADDEND2$
00891  1114  A9 00                 LDA #$00
00892  1116  85 83                 STA MATH.ADD16.ADDEND2$+1
00893  1118                        
00894  1118  20 00 28              JSR MATH.ADD16$ ; ADDRESS = ADDRESS + 2
00895  111B             
00896  111B  A5 84                 LDA MATH.ADD16.SUM$
00897  111D  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
00898  111F  A5 85                 LDA MATH.ADD16.SUM$+1
00899  1121  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
00900  1123             
00901  1123  20 5A 11              JSR MEMORY.ALLOCATE.DEC_LENGTH ; LENGTH = LENGTH - 2
00902  1126             
00903  1126                        ; INITAILIZE THE MEMORY WITH NON-NULL$ CHARACTERS.
00904  1126  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
00905  1128  85 73                 STA MEMORY.FILL16.ADDRESS$
00906  112A  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
00907  112C  85 74                 STA MEMORY.FILL16.ADDRESS$+1
00908  112E             
00909  112E  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
00910  1130  85 77                 STA MEMORY.FILL16.LENGTH$
00911  1132  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
00912  1134  85 78                 STA MEMORY.FILL16.LENGTH$+1
00913  1136             
00914  1136  A9 00                 LDA #$00
00915  1138  85 75                 STA MEMORY.FILL.VALUE$
00916  113A  20 15 10              JSR MEMORY.FILL16$
00917  113D             
00918  113D             @END
00919  113D             
00920  113D  60                    RTS
00921  113E             
00922  113E             MEMORY.ALLOCATE.INC_LENGTH 
00923  113E                        ; ADD 2 TO THE LENGTH OF THE MEMORY
00924  113E  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
00925  1140  85 80                 STA MATH.ADD16.ADDEND1$
00926  1142  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
00927  1144  85 81                 STA MATH.ADD16.ADDEND1$+1
00928  1146             
00929  1146  A9 02                 LDA #$02
00930  1148  85 82                 STA MATH.ADD16.ADDEND2$
00931  114A  A9 00                 LDA #$00
00932  114C  85 83                 STA MATH.ADD16.ADDEND2$+1
00933  114E             
00934  114E  20 00 28              JSR MATH.ADD16$ ; LENGTH = LENGTH + 2
00935  1151             
00936  1151  A5 84                 LDA MATH.ADD16.SUM$
00937  1153  85 75                 STA MEMORY.ALLOCATE.LENGTH$
00938  1155  A5 85                 LDA MATH.ADD16.SUM$+1
00939  1157  85 76                 STA MEMORY.ALLOCATE.LENGTH$+1
00940  1159             
00941  1159  60                    RTS
00942  115A             
00943  115A             MEMORY.ALLOCATE.DEC_LENGTH 
00944  115A                        ; SUBTRACT 2 TO THE LENGTH OF THE MEMORY
00945  115A  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
00946  115C  85 80                 STA MATH.SUBTRACT16.MENUEND$
00947  115E  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
00948  1160  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
00949  1162             
00950  1162  A9 02                 LDA #$02
00951  1164  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
00952  1166  A9 00                 LDA #$00
00953  1168  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
00954  116A             
00955  116A  20 96 28              JSR MATH.SUBTRACT16$ ; LENGTH = LENGTH - 2
00956  116D             
00957  116D  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
00958  116F  85 75                 STA MEMORY.ALLOCATE.LENGTH$
00959  1171  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
00960  1173  85 76                 STA MEMORY.ALLOCATE.LENGTH$+1
00961  1175             
00962  1175  60                    RTS
00963  1176             
00964  1176             
00965  1176             ;ALIGN $100
00966  1176             
00967  1176             MEMORY.ALLOCATE.FIND 
00968  1176                        ; DEFAULT TO THE START OF THE HEAP
00969  1176  AD 5D 10              LDA MEMORY.HEAPADRESS
00970  1179  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
00971  117B  AD 5E 10              LDA MEMORY.HEAPADRESS+1
00972  117E  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
00973  1180             
00974  1180                        ; LOCATE THE FIRST SPOT THAT CONTAINS NULL$
00975  1180  A0 00                 LDY #$00
00976  1182  A2 00                 LDX #$00
00977  1184  86 77                 STX MEMORY.ALLOCATE.COUNTER
00978  1186  86 78                 STX MEMORY.ALLOCATE.COUNTER+1
00979  1188             @LOOP
00980  1188  B1 7A                 LDA (MEMORY.ALLOCATE.ADDRESS$),Y
00981  118A             @CHECK_MEM 
00982  118A  C9 FF                 CMP #$FF
00983  118C                        ;BEQ @INC_COUNTER
00984  118C  D0 03                 BNE @RESET_COUNTER
00985  118E  4C 00 12              JMP @INC_COUNTER
00986  1191             
00987  1191             @RESET_COUNTER 
00988  1191                        ; GET THE SIZE OF THE MEMORY BLOCK
00989  1191  A0 00                 LDY #$00
00990  1193  B1 7A                 LDA (MEMORY.ALLOCATE.ADDRESS$),Y
00991  1195  85 7C                 STA MEMORY.SIZEOF.LENGTH$
00992  1197  C8                    INY
00993  1198  B1 7A                 LDA (MEMORY.ALLOCATE.ADDRESS$),Y
00994  119A  85 7D                 STA MEMORY.SIZEOF.LENGTH$+1
00995  119C             
00996  119C                        ; INC THE ADDRESS BY THE SIZE OF THE MEMORY BLOCK
00997  119C  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
00998  119E  85 80                 STA MATH.ADD16.ADDEND1$
00999  11A0  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01000  11A2  85 81                 STA MATH.ADD16.ADDEND1$+1
01001  11A4             
01002  11A4  A5 7C                 LDA MEMORY.SIZEOF.LENGTH$
01003  11A6  85 82                 STA MATH.ADD16.ADDEND2$
01004  11A8  A5 7D                 LDA MEMORY.SIZEOF.LENGTH$+1
01005  11AA  85 83                 STA MATH.ADD16.ADDEND2$+1
01006  11AC             
01007  11AC  20 00 28              JSR MATH.ADD16$ ; ADDRESS = ADDRESS + LENGTH
01008  11AF             
01009  11AF  A5 84                 LDA MATH.ADD16.SUM$
01010  11B1  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
01011  11B3  A5 85                 LDA MATH.ADD16.SUM$+1
01012  11B5  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
01013  11B7             
01014  11B7  A0 00                 LDY #$00
01015  11B9  A2 00                 LDX #$00
01016  11BB  86 77                 STX MEMORY.ALLOCATE.COUNTER
01017  11BD  86 78                 STX MEMORY.ALLOCATE.COUNTER+1
01018  11BF             
01019  11BF  4C C5 11              JMP @CHECK_SIZE
01020  11C2             
01021  11C2             @NEXT_MEM
01022  11C2                        ; INCREASE THE MEMORY ADDRESS
01023  11C2  20 44 12              JSR MEMORY.ALLOCATE.INC_ADDRESS
01024  11C5             
01025  11C5             @CHECK_SIZE 
01026  11C5                        ; IF THE ADDRESS IS GREATER THAN THE LAST HEAP ADDRESS THEN EXIT
01027  11C5  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
01028  11C7  85 80                 STA MATH.CMP16.NUM1$
01029  11C9  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01030  11CB  85 81                 STA MATH.CMP16.NUM1$+1
01031  11CD             
01032  11CD  AD 5F 10              LDA MEMORY.HEAPADRESS_LR
01033  11D0  85 82                 STA MATH.CMP16.NUM2$
01034  11D2  AD 60 10              LDA MEMORY.HEAPADRESS_LR+1
01035  11D5  85 83                 STA MATH.CMP16.NUM2$+1
01036  11D7             
01037  11D7  20 E4 28              JSR MATH.CMP16$ ; IF THE ADDRESS$ >= HEAPADRESS_LR THEN EXIT
01038  11DA                        ;BCS @END
01039  11DA             
01040  11DA  90 03                 BCC @OK
01041  11DC  4C 43 12              JMP @END
01042  11DF             @OK
01043  11DF             
01044  11DF  A0 00                 LDY #$00
01045  11E1  4C 88 11              JMP @LOOP
01046  11E4             
01047  11E4             ALIGN      $100
01048  1200             
01049  1200             @INC_COUNTER 
01050  1200  E8                    INX
01051  1201  86 77                 STX MEMORY.ALLOCATE.COUNTER
01052  1203  E0 00                 CPX #$00
01053  1205  D0 02                 BNE @CHECK_COUNTER
01054  1207  E6 78                 INC MEMORY.ALLOCATE.COUNTER+1
01055  1209             @CHECK_COUNTER 
01056  1209             
01057  1209                        ; IF THE COUNTER IS EQUAL TO THE LENGTH THEN EXIT
01058  1209  A5 77                 LDA MEMORY.ALLOCATE.COUNTER
01059  120B  85 80                 STA MATH.CMP16.NUM1$
01060  120D  A5 78                 LDA MEMORY.ALLOCATE.COUNTER+1
01061  120F  85 81                 STA MATH.CMP16.NUM1$+1
01062  1211             
01063  1211  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
01064  1213  85 82                 STA MATH.CMP16.NUM2$
01065  1215  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
01066  1217  85 83                 STA MATH.CMP16.NUM2$+1
01067  1219             
01068  1219  20 E4 28              JSR MATH.CMP16$ ; IF COUNTER = LENGTH THEN EXIT
01069  121C             
01070  121C             ;ALIGN $100
01071  121C             
01072  121C                        ;BEQ @FOUND
01073  121C  B0 03                 BCS @FOUND
01074  121E             
01075  121E  4C C2 11              JMP @NEXT_MEM
01076  1221             
01077  1221             @FOUND
01078  1221  20 44 12              JSR MEMORY.ALLOCATE.INC_ADDRESS
01079  1224             
01080  1224                        ; DECREASE BY THE LENGTH TO GET THE STARTING LOCATION
01081  1224  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
01082  1226  85 80                 STA MATH.SUBTRACT16.MENUEND$
01083  1228  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01084  122A  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
01085  122C             
01086  122C  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
01087  122E  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
01088  1230  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
01089  1232  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
01090  1234             
01091  1234  20 96 28              JSR MATH.SUBTRACT16$ ; ADDRESS = ADDRESS - LENGTH
01092  1237             
01093  1237  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
01094  1239  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
01095  123B  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
01096  123D  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
01097  123F             
01098  123F  A9 01                 LDA #$01
01099  1241  85 79                 STA MEMORY.ALLOCATE.FOUND
01100  1243             
01101  1243             @END
01102  1243  60                    RTS
01103  1244             
01104  1244             MEMORY.ALLOCATE.INC_ADDRESS 
01105  1244             
01106  1244  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
01107  1246  85 80                 STA MATH.ADD16.ADDEND1$
01108  1248  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01109  124A  85 81                 STA MATH.ADD16.ADDEND1$+1
01110  124C             
01111  124C  A9 01                 LDA #$01
01112  124E  85 82                 STA MATH.ADD16.ADDEND2$
01113  1250  A9 00                 LDA #$00
01114  1252  85 83                 STA MATH.ADD16.ADDEND2$+1
01115  1254                        
01116  1254  20 00 28              JSR MATH.ADD16$ ; ADDRESS = ADDRESS + 1
01117  1257             
01118  1257  A5 84                 LDA MATH.ADD16.SUM$
01119  1259  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
01120  125B  A5 85                 LDA MATH.ADD16.SUM$+1
01121  125D  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
01122  125F             
01123  125F  60                    RTS
01124  1260             
01125  1260             MEMORY.SIZEOF.ADDRESS$ = $7A ; 2 BYTES
01126  1260             MEMORY.SIZEOF.LENGTH$ = $7C ; 2 BYTES
01127  1260             MEMORY.SIZEOF$ 
01128  1260                        ; THE SIZE OF THE BLOCK OF MEMORY IS STORE IN THE PREVIOUS 2 BYTES.
01129  1260             
01130  1260                        ; SUBTRACT THE 2 BYTES AT THE BEGINNING OF THE ADDRESS.
01131  1260                        
01132  1260  A5 7A                 LDA MEMORY.SIZEOF.ADDRESS$
01133  1262  85 80                 STA MATH.SUBTRACT16.MENUEND$
01134  1264  A5 7B                 LDA MEMORY.SIZEOF.ADDRESS$+1
01135  1266  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
01136  1268             
01137  1268  A9 02                 LDA #$02
01138  126A  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
01139  126C  A9 00                 LDA #$00
01140  126E  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
01141  1270             
01142  1270  20 96 28              JSR MATH.SUBTRACT16$ ; ADDRESS = ADDRESS - 2
01143  1273             
01144  1273  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
01145  1275  85 7A                 STA MEMORY.SIZEOF.ADDRESS$
01146  1277  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
01147  1279  85 7B                 STA MEMORY.SIZEOF.ADDRESS$+1
01148  127B             
01149  127B                        ; GET THE VALUE STORED AT ADDRESS - 2 AND PUT INTO LENGTH
01150  127B  A0 00                 LDY #$00
01151  127D  B1 7A                 LDA (MEMORY.SIZEOF.ADDRESS$),Y
01152  127F  85 7C                 STA MEMORY.SIZEOF.LENGTH$
01153  1281  C8                    INY
01154  1282  B1 7A                 LDA (MEMORY.SIZEOF.ADDRESS$),Y
01155  1284  85 7D                 STA MEMORY.SIZEOF.LENGTH$+1
01156  1286             
01157  1286  60                    RTS
01158  1287             
01159  1287             MEMORY.DEALLOCATE.ADDRESS$ = $7A ; 2 BYTES
01160  1287             MEMORY.DEALLOCATE$ 
01161  1287                        ; FREE UP THE MEMORY.
01162  1287             
01163  1287                        ; GET THE SIZE OF THE MEMORY BLOCK.
01164  1287  A5 7A                 LDA MEMORY.DEALLOCATE.ADDRESS$
01165  1289  85 7A                 STA MEMORY.SIZEOF.ADDRESS$
01166  128B  A5 7B                 LDA MEMORY.DEALLOCATE.ADDRESS$+1
01167  128D  85 7B                 STA MEMORY.SIZEOF.ADDRESS$+1
01168  128F             
01169  128F  20 60 12              JSR MEMORY.SIZEOF$ ; LENGTH = SIZEOF(ADDRESS)
01170  1292             
01171  1292                        ; DECREASE MEMORY.USED$
01172  1292  AD 65 10              LDA MEMORY.USED$
01173  1295  85 80                 STA MATH.SUBTRACT16.MENUEND$
01174  1297  AD 66 10              LDA MEMORY.USED$+1
01175  129A  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
01176  129C             
01177  129C  A5 7C                 LDA MEMORY.SIZEOF.LENGTH$
01178  129E  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
01179  12A0  A5 7D                 LDA MEMORY.SIZEOF.LENGTH$+1
01180  12A2  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
01181  12A4             
01182  12A4  20 96 28              JSR MATH.SUBTRACT16$ ; MEMORY.USED$ = MEMORY.USED$ - LENGTH
01183  12A7             
01184  12A7  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
01185  12A9  8D 65 10              STA MEMORY.USED$
01186  12AC  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
01187  12AE  8D 66 10              STA MEMORY.USED$+1
01188  12B1             
01189  12B1  20 CC 12              JSR MEMORY.CALCULATE_FREE ; MEMORY.FREE$ = MEMORY.TOTAL$ - MEMORY.USED$
01190  12B4             
01191  12B4                        ; SET THE MEMORY FOR RE-USE
01192  12B4  A5 7A                 LDA MEMORY.DEALLOCATE.ADDRESS$
01193  12B6  85 73                 STA MEMORY.FILL16.ADDRESS$
01194  12B8  A5 7B                 LDA MEMORY.DEALLOCATE.ADDRESS$+1
01195  12BA  85 74                 STA MEMORY.FILL16.ADDRESS$+1
01196  12BC             
01197  12BC  A5 7C                 LDA MEMORY.SIZEOF.LENGTH$
01198  12BE  85 77                 STA MEMORY.FILL16.LENGTH$
01199  12C0  A5 7D                 LDA MEMORY.SIZEOF.LENGTH$+1
01200  12C2  85 78                 STA MEMORY.FILL16.LENGTH$+1
01201  12C4             
01202  12C4  A9 FF                 LDA #$FF
01203  12C6  85 75                 STA MEMORY.FILL16.VALUE$
01204  12C8             
01205  12C8  20 15 10              JSR MEMORY.FILL16$
01206  12CB             
01207  12CB  60                    RTS
01208  12CC             
01209  12CC             MEMORY.CALCULATE_FREE 
01210  12CC  AD 61 10              LDA MEMORY.TOTAL$
01211  12CF  85 80                 STA MATH.SUBTRACT16.MENUEND$
01212  12D1  AD 62 10              LDA MEMORY.TOTAL$+1
01213  12D4  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
01214  12D6             
01215  12D6  AD 65 10              LDA MEMORY.USED$
01216  12D9  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
01217  12DB  AD 66 10              LDA MEMORY.USED$+1
01218  12DE  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
01219  12E0             
01220  12E0  20 96 28              JSR MATH.SUBTRACT16$ ; MEMORY.FREE$ = MEMORY.TOTAL$ - MEMORY.USED$
01221  12E3             
01222  12E3  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
01223  12E5  8D 63 10              STA MEMORY.FREE$
01224  12E8  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
01225  12EA  8D 64 10              STA MEMORY.FREE$+1
01226  12ED             
01227  12ED  60                    RTS
01228  12EE             
01229  12EE             ;ALIGN $100
01230  12EE             ;MEMORY.HEAPMANADR = *
01231  12EE             ;INCASM "BUFFER1024.ASM"
01232  12EE             
01233  12EE             ;;ALIGN $100
01234  12EE             
01235  12EE             
01236  12EE             
01237  12EE             
01238  12EE             
01239  12EE             ;ALIGN $100
01240  12EE             
01241  12EE             CONSOLE.CHARMAPADDRESS = $2000
01242  12EE             CONSOLE.MEMORYADDRESS = $0400 ; FIRST POSITION
01243  12EE             CONSOLE.MEMORYADDRESS_LR = $07C0 ; LAST ROW
01244  12EE  00 04      CONSOLE.CURRENTADDRESS WORD CONSOLE.MEMORYADDRESS
01245  12F0  00         CONSOLE.CURRENTCOLUMN BYTE $00 ; 40 COLUMNS
01246  12F1  00         CONSOLE.CURRENTROW BYTE $00 ; 25 ROWS
01247  12F2             CONSOLE.COLORADDRESS = $D800
01248  12F2             CONSOLE.COLORADDRESS_LR = $DBC0 ; LAST ROW
01249  12F2  00 D8      CONSOLE.CURRENTCOLORADDR WORD CONSOLE.COLORADDRESS
01250  12F4  01         CONSOLE.CHARACTERCOLOR BYTE COLOR.WHITE$
01251  12F5  00         CONSOLE.CHARACTERSINVERTED BYTE $00
01252  12F6             
01253  12F6             CONSOLE.START 
01254  12F6                        
01255  12F6  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
01256  12F8  8D EE 12              STA CONSOLE.CURRENTADDRESS
01257  12FB  A9 01                 LDA #<CONSOLE.MEMORYADDRESS+1
01258  12FD  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
01259  1300             
01260  1300  A9 00                 LDA #<CONSOLE.COLORADDRESS
01261  1302  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
01262  1305  A9 01                 LDA #<CONSOLE.COLORADDRESS+1
01263  1307  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
01264  130A             
01265  130A  A9 00                 LDA #$00
01266  130C  8D F0 12              STA CONSOLE.CURRENTCOLUMN
01267  130F  8D F1 12              STA CONSOLE.CURRENTROW
01268  1312             
01269  1312  20 76 13              JSR CONSOLE.CLEAR$
01270  1315             
01271  1315  A9 00                 LDA #COLOR.BLACK$
01272  1317  85 73                 STA CONSOLE.SETBACKGROUNDCOLOR.COLOR$
01273  1319  20 97 16              JSR CONSOLE.SETBACKGROUNDCOLOR$
01274  131C             
01275  131C  A9 00                 LDA #COLOR.BLACK$
01276  131E  85 73                 STA CONSOLE.SETBORDERCOLOR.COLOR$
01277  1320  20 9D 16              JSR CONSOLE.SETBORDERCOLOR$
01278  1323             
01279  1323                        ;LDA #COLOR.WHITE$
01280  1323                        ;STA CONSOLE.SETFOREGROUNDCOLOR.COLOR$
01281  1323                        ;JSR CONSOLE.SETFOREGROUNDCOLOR$
01282  1323                        ;;STA $0286
01283  1323             
01284  1323  A9 00                 LDA #0
01285  1325  85 73                 STA CONSOLE.SETCHARACTERINVERTED.VALUE$
01286  1327  20 BD 16              JSR CONSOLE.SETCHARACTERINVERTED$
01287  132A             
01288  132A             ;        ; COPY THE FONT TO $<CONSOLE.CHARMAPADDRESS
01289  132A             ;        LDA #<FONTADDRESS
01290  132A             ;        STA MEMORY.COPY16.SOURCE$
01291  132A             ;        LDA #>FONTADDRESS
01292  132A             ;        STA MEMORY.COPY16.SOURCE$+1
01293  132A             ;        LDA #<CONSOLE.CHARMAPADDRESS
01294  132A             ;        STA MEMORY.COPY16.DESTINATION$
01295  132A             ;        LDA #>CONSOLE.CHARMAPADDRESS
01296  132A             ;        STA MEMORY.COPY16.DESTINATION$+1
01297  132A             ;        LDA #$00
01298  132A             ;        STA MEMORY.COPY16.LENGTH$
01299  132A             ;        LDA #$08
01300  132A             ;        STA MEMORY.COPY16.LENGTH$+1
01301  132A             ;        JSR MEMORY.COPY16$
01302  132A             
01303  132A                        ; SET TO CUSTOM CHARACTER SET
01304  132A                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:VICII_MEMORY_ORGANIZING
01305  132A                        ;$D018 = %XXXX010X -> CHARMEM IS AT $1000
01306  132A                        ; DEFAULT VALUE = %00010101
01307  132A  AD 18 D0              LDA $D018
01308  132D  29 F1                 AND #%11110001
01309  132F                        ;ORA #%00000000 ; $0000
01310  132F                        ;ORA #%00000010 ; $0800
01311  132F                        ;ORA #%00000100 ; $1000
01312  132F                        ;ORA #%00000110 ; $1800
01313  132F  09 08                 ORA #%00001000 ; $2000
01314  1331                        ;ORA #%00001010 ; $2800
01315  1331                        ;ORA #%00001100 ; $3000
01316  1331                        ;ORA #%00001110 ; $3800
01317  1331  8D 18 D0              STA $D018
01318  1334             
01319  1334  60                    RTS
01320  1335             
01321  1335             CONSOLE.END 
01322  1335             
01323  1335                        ; COPY THE FONT TO $<CONSOLE.CHARMAPADDRESS
01324  1335  A9 00                 LDA #<CONSOLE.CHARMAPADDRESS
01325  1337  85 73                 STA MEMORY.COPY16.SOURCE$
01326  1339  A9 20                 LDA #>CONSOLE.CHARMAPADDRESS
01327  133B  85 74                 STA MEMORY.COPY16.SOURCE$+1
01328  133D  A9 00                 LDA #$00
01329  133F  85 75                 STA MEMORY.COPY16.DESTINATION$
01330  1341  A9 20                 LDA #$20
01331  1343  85 76                 STA MEMORY.COPY16.DESTINATION$+1
01332  1345  A9 00                 LDA #$00
01333  1347  85 78                 STA MEMORY.COPY16.LENGTH$
01334  1349  A9 08                 LDA #$08
01335  134B  85 79                 STA MEMORY.COPY16.LENGTH$+1
01336  134D  20 9C 0F              JSR MEMORY.COPY16$
01337  1350             
01338  1350                        ; COPY THE SCREEN CHARACTERS
01339  1350  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
01340  1352  85 73                 STA MEMORY.COPY16.SOURCE$
01341  1354  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
01342  1356  85 74                 STA MEMORY.COPY16.SOURCE$+1
01343  1358  A9 00                 LDA #$00
01344  135A  85 75                 STA MEMORY.COPY16.DESTINATION$
01345  135C  A9 04                 LDA #$04
01346  135E  85 76                 STA MEMORY.COPY16.DESTINATION$+1
01347  1360  A9 C0                 LDA #$C0
01348  1362  85 78                 STA MEMORY.COPY16.LENGTH$
01349  1364  A9 03                 LDA #$03
01350  1366  85 79                 STA MEMORY.COPY16.LENGTH$+1
01351  1368  20 9C 0F              JSR MEMORY.COPY16$
01352  136B             
01353  136B                        ; SET TO CUSTOM CHARACTER SET
01354  136B                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:VICII_MEMORY_ORGANIZING
01355  136B                        ;$D018 = %XXXX010X -> CHARMEM IS AT $1000
01356  136B                        ; DEFAULT VALUE = %00010101
01357  136B  AD 18 D0              LDA $D018
01358  136E  29 F1                 AND #%11110001
01359  1370                        ;ORA #%00000000 ; $0000
01360  1370                        ;ORA #%00000010 ; $0800
01361  1370                        ;ORA #%00000100 ; $1000
01362  1370                        ;ORA #%00000110 ; $1800
01363  1370  09 08                 ORA #%00001000 ; $2000
01364  1372                        ;ORA #%00001010 ; $2800
01365  1372                        ;ORA #%00001100 ; $3000
01366  1372                        ;ORA #%00001110 ; $3800
01367  1372  8D 18 D0              STA $D018
01368  1375             
01369  1375                        ;JSR CONSOLE.CLEAR$
01370  1375             
01371  1375  60                    RTS
01372  1376             
01373  1376             ;ALIGN $100
01374  1376             
01375  1376             CONSOLE.CLEAR$ 
01376  1376  A2 00                 LDX #$00
01377  1378  A9 20                 LDA #$20
01378  137A             @LOOP
01379  137A  9D 00 04              STA CONSOLE.MEMORYADDRESS,X
01380  137D  9D 00 05              STA CONSOLE.MEMORYADDRESS+$100,X
01381  1380  9D 00 06              STA CONSOLE.MEMORYADDRESS+$200,X
01382  1383  9D 00 07              STA CONSOLE.MEMORYADDRESS+$300,X
01383  1386  CA                    DEX
01384  1387  D0 F1                 BNE @LOOP
01385  1389             
01386  1389  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
01387  138B  8D EE 12              STA CONSOLE.CURRENTADDRESS
01388  138E  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
01389  1390  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
01390  1393             
01391  1393  A9 00                 LDA #<CONSOLE.COLORADDRESS
01392  1395  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
01393  1398  A9 D8                 LDA #>CONSOLE.COLORADDRESS
01394  139A  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
01395  139D             
01396  139D  A9 00                 LDA #$00
01397  139F  8D F1 12              STA CONSOLE.CURRENTROW
01398  13A2  8D F0 12              STA CONSOLE.CURRENTCOLUMN
01399  13A5             
01400  13A5  60                    RTS
01401  13A6             
01402  13A6             CONSOLE.GETROW.ROW$ = $73 ; 1 BYTE
01403  13A6             CONSOLE.GETROW$ 
01404  13A6  AD F1 12              LDA CONSOLE.CURRENTROW
01405  13A9  85 73                 STA CONSOLE.GETROW.ROW$
01406  13AB  60                    RTS
01407  13AC             
01408  13AC             CONSOLE.SETROW.ROW$ = $73 ; 1 BYTE
01409  13AC             CONSOLE.SETROW$ 
01410  13AC  A5 73                 LDA CONSOLE.SETROW.ROW$
01411  13AE  8D F1 12              STA CONSOLE.CURRENTROW
01412  13B1  20 C4 13              JSR CONSOLE.CALC_CURRENTADDRESS
01413  13B4  60                    RTS
01414  13B5             
01415  13B5             CONSOLE.GETCOLUMN.COLUMN$ = $73 ; 1 BYTE
01416  13B5             CONSOLE.GETCOLUMN$ 
01417  13B5  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
01418  13B8  85 73                 STA CONSOLE.GETCOLUMN.COLUMN$
01419  13BA  60                    RTS
01420  13BB             
01421  13BB             CONSOLE.SETCOLUMN.COLUMN$ = $73 ; 1 BYTE
01422  13BB             CONSOLE.SETCOLUMN$ 
01423  13BB  A5 73                 LDA CONSOLE.SETCOLUMN.COLUMN$
01424  13BD  8D F0 12              STA CONSOLE.CURRENTCOLUMN
01425  13C0  20 C4 13              JSR CONSOLE.CALC_CURRENTADDRESS
01426  13C3  60                    RTS
01427  13C4             
01428  13C4             CONSOLE.CALC_CURRENTADDRESS.SUM = $74 ; 2 BYTES
01429  13C4             CONSOLE.CALC_CURRENTADDRESS 
01430  13C4                        ; CACULATE CONSOLE.CURRENTADDRESS BY THE UPDATED ROW AND COLUMN VALUES.
01431  13C4             
01432  13C4                        ; CONSOLE.CURRENTADDRESS = CONSOLE.MEMORYADDRESS + ((COLUMN) + (ROW * 40))
01433  13C4                        ; CONSOLE.CURRENTCOLORADDR = CONSOLE.COLORADDRESS + ((COLUMN) + (ROW * 40))
01434  13C4             
01435  13C4  AD F1 12              LDA CONSOLE.CURRENTROW
01436  13C7  85 80                 STA MATH.MULTIPLY16.FACTOR1$
01437  13C9  A9 28                 LDA #40
01438  13CB  85 82                 STA MATH.MULTIPLY16.FACTOR2$
01439  13CD  A9 00                 LDA #$00
01440  13CF  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
01441  13D1  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
01442  13D3  20 67 29              JSR MATH.MULTIPLY16$ ; PRODUCT = CURRENTROW * 40
01443  13D6                        
01444  13D6  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
01445  13D8  85 80                 STA MATH.ADD16.ADDEND1$
01446  13DA  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
01447  13DC  85 81                 STA MATH.ADD16.ADDEND1$+1
01448  13DE  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
01449  13E1  85 82                 STA MATH.ADD16.ADDEND2$
01450  13E3  A9 00                 LDA #$00
01451  13E5  85 83                 STA MATH.ADD16.ADDEND2$+1
01452  13E7  20 00 28              JSR MATH.ADD16$ ; SUM = COLUMN + PRODUCT
01453  13EA  A5 84                 LDA MATH.ADD16.SUM$
01454  13EC  85 74                 STA CONSOLE.CALC_CURRENTADDRESS.SUM
01455  13EE  A5 85                 LDA MATH.ADD16.SUM$+1
01456  13F0  85 75                 STA CONSOLE.CALC_CURRENTADDRESS.SUM+1
01457  13F2                        
01458  13F2  A5 74                 LDA CONSOLE.CALC_CURRENTADDRESS.SUM
01459  13F4  85 80                 STA MATH.ADD16.ADDEND1$
01460  13F6  A5 75                 LDA CONSOLE.CALC_CURRENTADDRESS.SUM+1
01461  13F8  85 81                 STA MATH.ADD16.ADDEND1$+1
01462  13FA  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
01463  13FC  85 82                 STA MATH.ADD16.ADDEND2$
01464  13FE  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
01465  1400  85 83                 STA MATH.ADD16.ADDEND2$+1
01466  1402  20 00 28              JSR MATH.ADD16$ ; CURRENTADDRESS = MEMORYADDRESS + SUM
01467  1405  A5 84                 LDA MATH.ADD16.SUM$
01468  1407  8D EE 12              STA CONSOLE.CURRENTADDRESS
01469  140A  A5 85                 LDA MATH.ADD16.SUM$+1
01470  140C  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
01471  140F             
01472  140F                        ; CONSOLE.CURRENTCOLORADDR = CONSOLE.COLORADDRESS + SUM
01473  140F  A5 74                 LDA CONSOLE.CALC_CURRENTADDRESS.SUM
01474  1411  85 80                 STA MATH.ADD16.ADDEND1$
01475  1413  A5 75                 LDA CONSOLE.CALC_CURRENTADDRESS.SUM+1
01476  1415  85 81                 STA MATH.ADD16.ADDEND1$+1
01477  1417  A9 00                 LDA #<CONSOLE.COLORADDRESS
01478  1419  85 82                 STA MATH.ADD16.ADDEND2$
01479  141B  A9 D8                 LDA #>CONSOLE.COLORADDRESS
01480  141D  85 83                 STA MATH.ADD16.ADDEND2$+1
01481  141F  20 00 28              JSR MATH.ADD16$ ; CURRENTADDRESS = MEMORYADDRESS + SUM
01482  1422  A5 84                 LDA MATH.ADD16.SUM$
01483  1424  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
01484  1427  A5 85                 LDA MATH.ADD16.SUM$+1
01485  1429  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
01486  142C             
01487  142C  60                    RTS
01488  142D             
01489  142D             ;CONSOLE.SCROLLUP$
01490  142D             ;        ; COPY THE CHARACTERS FROM THE 2ND ROW AND OVERRIDE THE FIRST ROW.
01491  142D             ;        ; CLEAR OUT THE TEXT ON THE LAST ROW.
01492  142D             
01493  142D             ;        ;LDX #$28
01494  142D             ;        LDY #$00
01495  142D             ;@LOOP
01496  142D             ;        LDA $0428,Y
01497  142D             ;        STA $0400,Y
01498  142D             ;        LDA $0518,Y
01499  142D             ;        STA $04F0,Y
01500  142D             ;        INY
01501  142D             ;        ;CPY #215 ;(255-40)
01502  142D             ;        ;CPY #$FF
01503  142D             ;        CPY #240
01504  142D             ;        BNE @LOOP
01505  142D             
01506  142D             ;;        LDA $0500,X
01507  142D             ;;        STA $0500,Y
01508  142D             ;;        LDA $0600,X
01509  142D             ;;        STA $0600,Y
01510  142D             ;;        LDA $0700,X
01511  142D             ;;        STA $0700,Y
01512  142D             
01513  142D             ;        RTS
01514  142D             
01515  142D             ;ALIGN $100
01516  142D             
01517  142D             CONSOLE.SCROLLUP$ 
01518  142D                        ; COPY THE CHARACTERS FROM THE 2ND ROW AND OVERRIDE THE FIRST ROW.
01519  142D                        ; CLEAR OUT THE TEXT ON THE LAST ROW.
01520  142D             
01521  142D             ;        LDA #$00
01522  142D             ;        STA $FB
01523  142D             ;        LDA #$04
01524  142D             ;        STA $FC
01525  142D             ;        LDA #$28
01526  142D             ;        STA $FD
01527  142D             ;        LDA #$04
01528  142D             ;        STA $FE
01529  142D  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
01530  142F  85 FB                 STA $FB
01531  1431  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
01532  1433  85 FC                 STA $FC
01533  1435  A9 28                 LDA #<CONSOLE.MEMORYADDRESS+$28
01534  1437  85 FD                 STA $FD
01535  1439  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
01536  143B  85 FE                 STA $FE
01537  143D  20 63 14              JSR CONSOLE.SCROLLUPCHRS
01538  1440             
01539  1440                        ; NEED TO "SCROLL" UP THE CHARACTER COLORS AS WELL
01540  1440  A9 00                 LDA #<CONSOLE.COLORADDRESS
01541  1442  85 FB                 STA $FB
01542  1444  A9 D8                 LDA #>CONSOLE.COLORADDRESS
01543  1446  85 FC                 STA $FC
01544  1448  A9 28                 LDA #<CONSOLE.COLORADDRESS+$28
01545  144A  85 FD                 STA $FD
01546  144C  A9 D8                 LDA #>CONSOLE.COLORADDRESS
01547  144E  85 FE                 STA $FE
01548  1450  20 63 14              JSR CONSOLE.SCROLLUPCHRS
01549  1453             
01550  1453                        ; CLEAR THE LAST LINE
01551  1453  A9 20                 LDA #$20
01552  1455  A0 00                 LDY #$00
01553  1457             @LOOP_LR
01554  1457  99 C0 07              STA CONSOLE.MEMORYADDRESS_LR,Y
01555  145A  C8                    INY
01556  145B  C0 28                 CPY #$28
01557  145D  D0 F8                 BNE @LOOP_LR
01558  145F             
01559  145F  20 AC 30              JSR GRAPHICS.SCROLLUP
01560  1462             
01561  1462  60                    RTS
01562  1463             
01563  1463             CONSOLE.SCROLLUPCHRS 
01564  1463  A2 00                 LDX #$00
01565  1465             @LOOP1     ; DO PROCESS 4 TIMES (6*4 = 24)
01566  1465  A0 00                 LDY #$00
01567  1467             @LOOP2     ; MOVE UP 6 LINES
01568  1467  B1 FD                 LDA ($FD),Y
01569  1469  91 FB                 STA ($FB),Y
01570  146B  C8                    INY
01571  146C  C0 F0                 CPY #240 ; (40*6)
01572  146E  D0 F7                 BNE @LOOP2
01573  1470             
01574  1470  E8                    INX
01575  1471  E0 04                 CPX #4
01576  1473  F0 39                 BEQ @CLEAR_LR
01577  1475             
01578  1475                        ; NEED TO INCREASE THE VALUE OF THE ADDRESS THAT $FB AND $FD ARE POINTING TO.
01579  1475  A5 FB                 LDA $FB
01580  1477  85 80                 STA MATH.ADD16.ADDEND1$
01581  1479  A5 FC                 LDA $FC
01582  147B  85 81                 STA MATH.ADD16.ADDEND1$+1
01583  147D             
01584  147D  A9 F0                 LDA #240
01585  147F  85 82                 STA MATH.ADD16.ADDEND2$
01586  1481  A9 00                 LDA #0
01587  1483  85 83                 STA MATH.ADD16.ADDEND2$+1
01588  1485             
01589  1485  20 00 28              JSR MATH.ADD16$ ; ($FB+$FC) = ($FB+$FC) + $28
01590  1488             
01591  1488  A5 84                 LDA MATH.ADD16.SUM$
01592  148A  85 FB                 STA $FB
01593  148C  A5 85                 LDA MATH.ADD16.SUM$+1
01594  148E  85 FC                 STA $FC
01595  1490             
01596  1490  A5 FD                 LDA $FD
01597  1492  85 80                 STA MATH.ADD16.ADDEND1$
01598  1494  A5 FE                 LDA $FE
01599  1496  85 81                 STA MATH.ADD16.ADDEND1$+1
01600  1498             
01601  1498  A9 F0                 LDA #240
01602  149A  85 82                 STA MATH.ADD16.ADDEND2$
01603  149C  A9 00                 LDA #0
01604  149E  85 83                 STA MATH.ADD16.ADDEND2$+1
01605  14A0             
01606  14A0  20 00 28              JSR MATH.ADD16$ ; ($FD+$FE) = ($FD+$FE) + $28
01607  14A3             
01608  14A3  A5 84                 LDA MATH.ADD16.SUM$
01609  14A5  85 FD                 STA $FD
01610  14A7  A5 85                 LDA MATH.ADD16.SUM$+1
01611  14A9  85 FE                 STA $FE
01612  14AB             
01613  14AB  4C 65 14              JMP @LOOP1
01614  14AE             
01615  14AE             @CLEAR_LR
01616  14AE             ;        LDA #$20
01617  14AE             ;        LDY #$00
01618  14AE             ;@LOOP_LR
01619  14AE             ;        STA CONSOLE.MEMORYADDRESS_LR,Y
01620  14AE             ;        INY
01621  14AE             ;        CPY #$28
01622  14AE             ;        BNE @LOOP_LR
01623  14AE             
01624  14AE  60                    RTS
01625  14AF             
01626  14AF             
01627  14AF             CONSOLE.WRITELN$ 
01628  14AF  A9 FE                 LDA #CONSOLE.NEWLINE$
01629  14B1  85 02                 STA CONSOLE.WRITECHR.CHAR$
01630  14B3  20 19 15              JSR CONSOLE.WRITECHR$
01631  14B6  60                    RTS
01632  14B7             
01633  14B7             CONSOLE.WRITESTR.STRADDRESS$ = $E0 ; 2 BYTES
01634  14B7             
01635  14B7             CONSOLE.WRITESTR$ 
01636  14B7                        ; PRINT EACH CHARACTER TO THE SCREEN
01637  14B7  A0 00                 LDY #$00
01638  14B9             @LOOP
01639  14B9  B1 E0                 LDA (CONSOLE.WRITESTR.STRADDRESS$),Y
01640  14BB                        ;CMP #$00
01641  14BB  C9 FF                 CMP #CONSOLE.NULL$
01642  14BD  F0 0F                 BEQ @END
01643  14BF  85 02                 STA CONSOLE.WRITECHR.CHAR$
01644  14C1  20 19 15              JSR CONSOLE.WRITECHR$
01645  14C4  C8                    INY
01646  14C5  C0 00                 CPY #$00
01647  14C7  D0 F0                 BNE @LOOP
01648  14C9  E6 E1                 INC CONSOLE.WRITESTR.STRADDRESS$+1
01649  14CB  4C B9 14              JMP @LOOP
01650  14CE             @END
01651  14CE  60                    RTS
01652  14CF             
01653  14CF             ;ALIGN $100
01654  14CF             
01655  14CF             CONSOLE.WRITEINT8.INTEGER$ = $E0 ; 1 BYTE
01656  14CF             CONSOLE.WRITEINT8$ 
01657  14CF  20 00 1C              JSR CONVERT.HEX2DEC8
01658  14D2  A2 02                 LDX #2 ; MAX. LENGTH - 1
01659  14D4  4C 00 15              JMP CONSOLE.WRITEINT
01660  14D7             
01661  14D7             CONSOLE.WRITEINT16.INTEGER$ = $E0 ; 2 BYTES
01662  14D7             CONSOLE.WRITEINT16$ 
01663  14D7  20 1F 1C              JSR CONVERT.HEX2DEC16
01664  14DA  A2 04                 LDX #4 ; MAX. LENGTH - 1
01665  14DC  4C 00 15              JMP CONSOLE.WRITEINT
01666  14DF             
01667  14DF             CONSOLE.WRITEINT32.INTEGER$ = $E0 ; 4 BYTES
01668  14DF             CONSOLE.WRITEINT32$ 
01669  14DF  20 40 1C              JSR CONVERT.HEX2DEC32
01670  14E2  A2 09                 LDX #9 ; MAX. LENGTH - 1
01671  14E4  4C 00 15              JMP CONSOLE.WRITEINT
01672  14E7             
01673  14E7             ALIGN      $100
01674  1500             
01675  1500             CONSOLE.WRITEINT 
01676  1500             @L1        
01677  1500  B5 E4                 LDA CONVERT.HEX2DEC.RESULT,X
01678  1502  D0 03                 BNE @L2
01679  1504  CA                    DEX             ; SKIP LEADING ZEROS
01680  1505  D0 F9                 BNE @L1
01681  1507             
01682  1507             @L2
01683  1507  A0 00                 LDY #$00
01684  1509             @LOOP
01685  1509  B5 E4                 LDA CONVERT.HEX2DEC.RESULT,X
01686  150B  09 30                 ORA #$30  ;(CONVERT TO ASCII)
01687  150D                        ;STA CONSOLE.MEMORYADDRESS,Y
01688  150D  85 02                 STA CONSOLE.WRITECHR.CHAR$
01689  150F  20 19 15              JSR CONSOLE.WRITECHR$
01690  1512  C8                    INY
01691  1513  CA                    DEX
01692  1514  10 F3                 BPL @LOOP
01693  1516  60                    RTS
01694  1517             
01695  1517             ;ALIGN $100
01696  1517             
01697  1517             CONSOLE.NEWLINE$ = $FE
01698  1517             CONSOLE.NULL$ = $FF
01699  1517             CONSOLE.BACKSPACE$ = $FD
01700  1517             CONSOLE.QUOTE$ = $27
01701  1517             
01702  1517             CONSOLE.WRITECHR.CHAR$ = $02 ; 1 BYTE
01703  1517             CONSOLE.WRITECHR.ADDRESS = $FB ; 2 BYTES
01704  1517  00 00      CONSOLE.WRITECHR.OFFSET WORD $0000
01705  1519             CONSOLE.WRITECHR$ 
01706  1519                        ; PRINTS AN INDIVIDUAL CHARACTER TO THE SCREEN.
01707  1519                        ; THE CHARACTER TO PRINT IS STORED IN A.
01708  1519             
01709  1519                        ;STA CONSOLE.WRITECHR.CHAR$
01710  1519             
01711  1519             ;        PHA ; SAVE A ONTO STACK.
01712  1519             ;        TXA
01713  1519             ;        PHA ; SAVE X ONTO STACK.
01714  1519             ;        TYA
01715  1519             ;        PHA ; SAVE Y ONTO STACK.
01716  1519  20 37 10              JSR MEMORY.PUSHREGS$
01717  151C             
01718  151C                        ; SET THE COLOR OF THIS CHARACTER.
01719  151C  A0 00                 LDY #$00
01720  151E  AD F2 12              LDA CONSOLE.CURRENTCOLORADDR
01721  1521  85 FB                 STA CONSOLE.WRITECHR.ADDRESS
01722  1523  AD F3 12              LDA CONSOLE.CURRENTCOLORADDR+1
01723  1526  85 FC                 STA CONSOLE.WRITECHR.ADDRESS+1
01724  1528             
01725  1528  AD F4 12              LDA CONSOLE.CHARACTERCOLOR
01726  152B  91 FB                 STA (CONSOLE.WRITECHR.ADDRESS),Y
01727  152D             
01728  152D                        ; WRITE THE CHARACTER TO THE SCREEN MEMORY.
01729  152D  A0 00                 LDY #$00
01730  152F  AD EE 12              LDA CONSOLE.CURRENTADDRESS
01731  1532  85 FB                 STA CONSOLE.WRITECHR.ADDRESS
01732  1534  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
01733  1537  85 FC                 STA CONSOLE.WRITECHR.ADDRESS+1
01734  1539             
01735  1539                        ; IF {RETURN} DETECTED THEN WE NEED TO START AT THE BEGINNING OF THE NEXT ROW.
01736  1539  A5 02                 LDA CONSOLE.WRITECHR.CHAR$
01737  153B  C9 FE                 CMP #CONSOLE.NEWLINE$
01738  153D  F0 1C                 BEQ @DO_NEWLINE
01739  153F             
01740  153F                        ; IF {DELETE} DETECTED THEN WE NEED TO PERFORM A BACKSPACE OPERATION.
01741  153F  A5 02                 LDA CONSOLE.WRITECHR.CHAR$
01742  1541  C9 FD                 CMP #CONSOLE.BACKSPACE$
01743  1543  F0 36                 BEQ @DO_BACKSPACE
01744  1545             
01745  1545                        ; INVERT THE CHARACTER AS NEEDED.
01746  1545  18                    CLC
01747  1546  6D F5 12              ADC CONSOLE.CHARACTERSINVERTED
01748  1549             
01749  1549             ;        LDA GRAPHICS.ISACTIVE$
01750  1549             ;        CMP #$01
01751  1549             ;        BEQ @DRAWCHR
01752  1549             ;        STA (CONSOLE.WRITECHR.ADDRESS),Y
01753  1549             ;        JMP @SKIPDRAWCHR
01754  1549             ;@DRAWCHR
01755  1549             ;        JSR GRAPHICS.DRAWCHR
01756  1549             ;@SKIPDRAWCHR
01757  1549  91 FB                 STA (CONSOLE.WRITECHR.ADDRESS),Y
01758  154B  20 CA 2F              JSR GRAPHICS.DRAWCHR
01759  154E             
01760  154E                        ;LDY #$01
01761  154E  A9 01                 LDA #$01
01762  1550  8D 17 15              STA CONSOLE.WRITECHR.OFFSET
01763  1553  A9 00                 LDA #$00
01764  1555  8D 18 15              STA CONSOLE.WRITECHR.OFFSET+1
01765  1558             
01766  1558  4C A5 15              JMP CONSOLE.INC_MEMADDRESS
01767  155B             
01768  155B             ;@INC_MEMADDRESS
01769  155B             ;        ; UPDATE CONSOLE.CURRENTADDRESS
01770  155B             ;        LDA CONSOLE.WRITECHR.ADDRESS
01771  155B             ;        STA MATH.ADD16.ADDEND1$
01772  155B             ;        LDA CONSOLE.WRITECHR.ADDRESS+1
01773  155B             ;        STA MATH.ADD16.ADDEND1$+1
01774  155B             
01775  155B             ;        ;LDA #$01
01776  155B             ;        ;TYA
01777  155B             ;        LDA CONSOLE.WRITECHR.OFFSET
01778  155B             ;        STA MATH.ADD16.ADDEND2$
01779  155B             ;        LDA CONSOLE.WRITECHR.OFFSET+1
01780  155B             ;        STA MATH.ADD16.ADDEND2$+1
01781  155B             
01782  155B             ;        JSR MATH.ADD16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS + 1
01783  155B             ;
01784  155B             ;        LDA MATH.ADD16.SUM$
01785  155B             ;        STA CONSOLE.CURRENTADDRESS
01786  155B             ;        LDA MATH.ADD16.SUM$+1
01787  155B             ;        STA CONSOLE.CURRENTADDRESS+1
01788  155B             ;
01789  155B             ;        ; UPDATE CONSOLE.CURRENTCOLORADDR
01790  155B             ;        LDA CONSOLE.CURRENTCOLORADDR
01791  155B             ;        STA MATH.ADD16.ADDEND1$
01792  155B             ;        LDA CONSOLE.CURRENTCOLORADDR+1
01793  155B             ;        STA MATH.ADD16.ADDEND1$+1
01794  155B             
01795  155B             ;        LDA CONSOLE.WRITECHR.OFFSET
01796  155B             ;        STA MATH.ADD16.ADDEND2$
01797  155B             ;        LDA CONSOLE.WRITECHR.OFFSET+1
01798  155B             ;        STA MATH.ADD16.ADDEND2$+1
01799  155B             
01800  155B             ;        JSR MATH.ADD16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS + 1
01801  155B             ;
01802  155B             ;        LDA MATH.ADD16.SUM$
01803  155B             ;        STA CONSOLE.CURRENTCOLORADDR
01804  155B             ;        LDA MATH.ADD16.SUM$+1
01805  155B             ;        STA CONSOLE.CURRENTCOLORADDR+1
01806  155B             ;
01807  155B             ;        ; INCREASE THE CURRENT COLUMN NUMBER
01808  155B             ;        LDA CONSOLE.CURRENTCOLUMN
01809  155B             ;        CMP #39
01810  155B             ;        BNE @INC_CURRENTCOLUMN
01811  155B             
01812  155B             ;@RESET_LR
01813  155B             ;        ; RESET THE CURRENT COLUMN
01814  155B             ;        LDA #$FF
01815  155B             ;        STA CONSOLE.CURRENTCOLUMN
01816  155B             
01817  155B             ;        ; INCREASE THE CURRENT ROW NUMBER
01818  155B             ;        LDA CONSOLE.CURRENTROW
01819  155B             ;        CMP #24
01820  155B             ;        BNE @INC_CURRENTROW
01821  155B             ;
01822  155B             ;        ; SCROLL ALL TEXT UP ONE ROW
01823  155B             ;        LDA #23
01824  155B             ;        STA CONSOLE.CURRENTROW
01825  155B             
01826  155B             ;        ; NEED TO SCROLL THE CHARCTERS UP ONE ROW.
01827  155B             ;        JSR CONSOLE.SCROLLUP$
01828  155B             
01829  155B             ;        ; UPDATE THE ADDRESS
01830  155B             ;        LDA #<CONSOLE.MEMORYADDRESS_LR
01831  155B             ;        STA CONSOLE.CURRENTADDRESS
01832  155B             ;        LDA #>CONSOLE.MEMORYADDRESS_LR
01833  155B             ;        STA CONSOLE.CURRENTADDRESS+1
01834  155B             
01835  155B             ;@INC_CURRENTROW
01836  155B             ;        INC CONSOLE.CURRENTROW
01837  155B             
01838  155B             ;@INC_CURRENTCOLUMN
01839  155B             ;        INC CONSOLE.CURRENTCOLUMN
01840  155B             
01841  155B             ;        JMP @END
01842  155B             
01843  155B             @DO_NEWLINE 
01844  155B                        ; WE NEED TO INCREASE THE CURRENT ADDRESS BY THE DIFFERENCE OF THE NUMBER OF COLUMNS REMAINING
01845  155B             
01846  155B  AD F1 12              LDA CONSOLE.CURRENTROW
01847  155E  C9 18                 CMP #24
01848  1560  F0 16                 BEQ @RESET_LR
01849  1562                        ;BEQ CONSOLE.INC_MEMADDRESS.RESET_LR
01850  1562             
01851  1562  A9 28                 LDA #40
01852  1564  38                    SEC
01853  1565  ED F0 12              SBC CONSOLE.CURRENTCOLUMN
01854  1568                        ;TAY ; STORE THE NUMBER OF COLUMNS WE NEED TO ADD TO GET THE NEXT ROW
01855  1568  8D 17 15              STA CONSOLE.WRITECHR.OFFSET
01856  156B  A9 00                 LDA #0
01857  156D  8D 18 15              STA CONSOLE.WRITECHR.OFFSET+1
01858  1570             
01859  1570                        ; RESET CONSOLE.CURRENTCOLUMN
01860  1570  A9 27                 LDA #39
01861  1572  8D F0 12              STA CONSOLE.CURRENTCOLUMN
01862  1575             
01863  1575  4C A5 15              JMP CONSOLE.INC_MEMADDRESS
01864  1578             
01865  1578             @RESET_LR
01866  1578  4C F1 15              JMP CONSOLE.INC_MEMADDRESS.RESET_LR
01867  157B             
01868  157B             @DO_BACKSPACE 
01869  157B                        ; WE NEED TO DECREASE THE CURRENT ADDRESS BY 1 AND CLEAR THE CURRENT TEXT.
01870  157B                        ; IF WE ARE AT THE STARTING MEMORY ADDRESS THEN CANNOT GO BACK ANY FUTHER.
01871  157B             
01872  157B  A9 01                 LDA #$01
01873  157D  8D 17 15              STA CONSOLE.WRITECHR.OFFSET
01874  1580  A9 00                 LDA #$00
01875  1582  8D 18 15              STA CONSOLE.WRITECHR.OFFSET+1
01876  1585                        
01877  1585                        ; DO NOT MOVE BACKWARDS OF THE LOCATION IS AT THE BEGINNING OF THE CARET STARTING ADDRESS.
01878  1585  AD EE 12              LDA CONSOLE.CURRENTADDRESS
01879  1588  85 80                 STA MATH.CMP16.NUM1$
01880  158A  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
01881  158D  85 81                 STA MATH.CMP16.NUM1$+1
01882  158F             
01883  158F  AD 73 18              LDA CONSOLE.CARETSTARTADDRESS
01884  1592  85 82                 STA MATH.CMP16.NUM2$
01885  1594  AD 74 18              LDA CONSOLE.CARETSTARTADDRESS+1
01886  1597  85 83                 STA MATH.CMP16.NUM2$+1
01887  1599             
01888  1599  20 E4 28              JSR MATH.CMP16$ ; IF CONSOLE.CURRENTADDRESS = CONSOLE.CARETSTARTADDRESS THEN EXIT
01889  159C  F0 03                 BEQ @END
01890  159E             
01891  159E             ;        LDA CONSOLE.CURRENTROW
01892  159E             ;        CMP #0
01893  159E             ;        BNE @DEC_MEMADDRESS
01894  159E             
01895  159E             ;        LDA CONSOLE.CURRENTCOLUMN
01896  159E             ;        CMP #0
01897  159E             ;        BNE @DEC_MEMADDRESS
01898  159E             
01899  159E             ;        JMP @END
01900  159E             
01901  159E             ;@DEC_MEMADDRESS
01902  159E  4C 26 16              JMP CONSOLE.DEC_MEMADDRESS
01903  15A1             
01904  15A1             @END
01905  15A1             ;        PLA ; SAVE Y ONTO STACK.
01906  15A1             ;        TAY
01907  15A1             ;        PLA ; SAVE X ONTO STACK.
01908  15A1             ;        TAX
01909  15A1             ;        PLA ; SAVE A ONTO STACK.
01910  15A1  20 4D 10              JSR MEMORY.PULLREGS$
01911  15A4             
01912  15A4  60                    RTS
01913  15A5             
01914  15A5             CONSOLE.INC_MEMADDRESS 
01915  15A5             
01916  15A5                        ; UPDATE CONSOLE.CURRENTADDRESS
01917  15A5  AD EE 12              LDA CONSOLE.CURRENTADDRESS
01918  15A8  85 80                 STA MATH.ADD16.ADDEND1$
01919  15AA  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
01920  15AD  85 81                 STA MATH.ADD16.ADDEND1$+1
01921  15AF             
01922  15AF                        ;LDA #$01
01923  15AF                        ;TYA
01924  15AF  AD 17 15              LDA CONSOLE.WRITECHR.OFFSET
01925  15B2  85 82                 STA MATH.ADD16.ADDEND2$
01926  15B4  AD 18 15              LDA CONSOLE.WRITECHR.OFFSET+1
01927  15B7  85 83                 STA MATH.ADD16.ADDEND2$+1
01928  15B9             
01929  15B9  20 00 28              JSR MATH.ADD16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS + 1
01930  15BC                        
01931  15BC  A5 84                 LDA MATH.ADD16.SUM$
01932  15BE  8D EE 12              STA CONSOLE.CURRENTADDRESS
01933  15C1  A5 85                 LDA MATH.ADD16.SUM$+1
01934  15C3  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
01935  15C6                        
01936  15C6                        ; UPDATE CONSOLE.CURRENTCOLORADDR
01937  15C6  AD F2 12              LDA CONSOLE.CURRENTCOLORADDR
01938  15C9  85 80                 STA MATH.ADD16.ADDEND1$
01939  15CB  AD F3 12              LDA CONSOLE.CURRENTCOLORADDR+1
01940  15CE  85 81                 STA MATH.ADD16.ADDEND1$+1
01941  15D0             
01942  15D0  AD 17 15              LDA CONSOLE.WRITECHR.OFFSET
01943  15D3  85 82                 STA MATH.ADD16.ADDEND2$
01944  15D5  AD 18 15              LDA CONSOLE.WRITECHR.OFFSET+1
01945  15D8  85 83                 STA MATH.ADD16.ADDEND2$+1
01946  15DA             
01947  15DA  20 00 28              JSR MATH.ADD16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS + 1
01948  15DD                        
01949  15DD  A5 84                 LDA MATH.ADD16.SUM$
01950  15DF  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
01951  15E2  A5 85                 LDA MATH.ADD16.SUM$+1
01952  15E4  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
01953  15E7                        
01954  15E7                        ; INCREASE THE CURRENT COLUMN NUMBER
01955  15E7  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
01956  15EA  C9 27                 CMP #39
01957  15EC                        ;BNE CONSOLE.INC_MEMADDRESS.INC_CURRENTCOLUMN
01958  15EC  F0 03                 BEQ CONSOLE.INC_MEMADDRESS.RESET_LR
01959  15EE  4C 1F 16              JMP CONSOLE.INC_MEMADDRESS.INC_CURRENTCOLUMN
01960  15F1                        
01961  15F1             
01962  15F1             ;@RESET_LR
01963  15F1             CONSOLE.INC_MEMADDRESS.RESET_LR 
01964  15F1                        ; RESET THE CURRENT COLUMN
01965  15F1  A9 FF                 LDA #$FF
01966  15F3  8D F0 12              STA CONSOLE.CURRENTCOLUMN
01967  15F6             
01968  15F6                        ; INCREASE THE CURRENT ROW NUMBER
01969  15F6  AD F1 12              LDA CONSOLE.CURRENTROW
01970  15F9  C9 18                 CMP #24
01971  15FB                        ;BNE CONSOLE.INC_MEMADDRESS.INC_CURRENTROW
01972  15FB  F0 03                 BEQ CONSOLE.INC_MEMADDRESS.INC_CURRENTROW_SKIP
01973  15FD  4C 1C 16              JMP CONSOLE.INC_MEMADDRESS.INC_CURRENTROW
01974  1600             CONSOLE.INC_MEMADDRESS.INC_CURRENTROW_SKIP 
01975  1600                        
01976  1600                        ; SCROLL ALL TEXT UP ONE ROW
01977  1600  A9 17                 LDA #23
01978  1602  8D F1 12              STA CONSOLE.CURRENTROW
01979  1605             
01980  1605                        ; NEED TO SCROLL THE CHARCTERS UP ONE ROW.
01981  1605  20 2D 14              JSR CONSOLE.SCROLLUP$
01982  1608             
01983  1608                        ; UPDATE THE ADDRESS
01984  1608  A9 C0                 LDA #<CONSOLE.MEMORYADDRESS_LR
01985  160A  8D EE 12              STA CONSOLE.CURRENTADDRESS
01986  160D  A9 07                 LDA #>CONSOLE.MEMORYADDRESS_LR
01987  160F  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
01988  1612             
01989  1612                        ; UPDATE THE ADDRESS
01990  1612  A9 C0                 LDA #<CONSOLE.COLORADDRESS_LR
01991  1614  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
01992  1617  A9 DB                 LDA #>CONSOLE.COLORADDRESS_LR
01993  1619  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
01994  161C             
01995  161C             CONSOLE.INC_MEMADDRESS.INC_CURRENTROW 
01996  161C  EE F1 12              INC CONSOLE.CURRENTROW
01997  161F             
01998  161F             CONSOLE.INC_MEMADDRESS.INC_CURRENTCOLUMN 
01999  161F  EE F0 12              INC CONSOLE.CURRENTCOLUMN
02000  1622             
02001  1622                        ;JMP CONSOLE.INC_MEMADDRESS.END
02002  1622             
02003  1622             CONSOLE.INC_MEMADDRESS.END 
02004  1622  20 4D 10              JSR MEMORY.PULLREGS$
02005  1625  60                    RTS
02006  1626             
02007  1626             ;ALIGN $100
02008  1626             
02009  1626             CONSOLE.DEC_MEMADDRESS 
02010  1626             
02011  1626                        ; UPDATE CONSOLE.CURRENTADDRESS
02012  1626  AD EE 12              LDA CONSOLE.CURRENTADDRESS
02013  1629  85 80                 STA MATH.SUBTRACT16.MENUEND$
02014  162B  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
02015  162E  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
02016  1630             
02017  1630  AD 17 15              LDA CONSOLE.WRITECHR.OFFSET
02018  1633  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
02019  1635  AD 18 15              LDA CONSOLE.WRITECHR.OFFSET+1
02020  1638  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
02021  163A             
02022  163A  20 96 28              JSR MATH.SUBTRACT16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS - 1
02023  163D                        
02024  163D  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
02025  163F  8D EE 12              STA CONSOLE.CURRENTADDRESS
02026  1642  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
02027  1644  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
02028  1647                        
02029  1647                        ; UPDATE CONSOLE.CURRENTCOLORADDR
02030  1647  AD F2 12              LDA CONSOLE.CURRENTCOLORADDR
02031  164A  85 80                 STA MATH.SUBTRACT16.MENUEND$
02032  164C  AD F3 12              LDA CONSOLE.CURRENTCOLORADDR+1
02033  164F  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
02034  1651             
02035  1651  AD 17 15              LDA CONSOLE.WRITECHR.OFFSET
02036  1654  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
02037  1656  AD 18 15              LDA CONSOLE.WRITECHR.OFFSET+1
02038  1659  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
02039  165B             
02040  165B  20 96 28              JSR MATH.SUBTRACT16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS - 1
02041  165E                        
02042  165E  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
02043  1660  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
02044  1663  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
02045  1665  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
02046  1668                        
02047  1668                        ; DECREASE THE CURRENT COLUMN NUMBER
02048  1668  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
02049  166B  C9 00                 CMP #0
02050  166D  D0 21                 BNE CONSOLE.DEC_MEMADDRESS.DEC_CURRENTCOLUMN
02051  166F             
02052  166F             CONSOLE.DEC_MEMADDRESS.RESET_LR 
02053  166F                        ; RESET THE CURRENT COLUMN
02054  166F                        ;LDA #$39
02055  166F  A9 28                 LDA #$28
02056  1671  8D F0 12              STA CONSOLE.CURRENTCOLUMN
02057  1674             
02058  1674                        ; DESCREASE THE CURRENT ROW NUMBER
02059  1674  AD F1 12              LDA CONSOLE.CURRENTROW
02060  1677  C9 00                 CMP #0
02061  1679  D0 12                 BNE CONSOLE.DEC_MEMADDRESS.DEC_CURRENTROW
02062  167B             
02063  167B  A9 00                 LDA #0
02064  167D  8D F0 12              STA CONSOLE.CURRENTCOLUMN
02065  1680             
02066  1680                        ; UPDATE THE ADDRESS
02067  1680  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
02068  1682  8D EE 12              STA CONSOLE.CURRENTADDRESS
02069  1685  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
02070  1687  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
02071  168A                        
02072  168A  4C 93 16              JMP CONSOLE.DEC_MEMADDRESS.END
02073  168D             
02074  168D             CONSOLE.DEC_MEMADDRESS.DEC_CURRENTROW 
02075  168D  CE F1 12              DEC CONSOLE.CURRENTROW
02076  1690             
02077  1690             CONSOLE.DEC_MEMADDRESS.DEC_CURRENTCOLUMN 
02078  1690  CE F0 12              DEC CONSOLE.CURRENTCOLUMN
02079  1693             
02080  1693             CONSOLE.DEC_MEMADDRESS.END 
02081  1693             
02082  1693  20 4D 10              JSR MEMORY.PULLREGS$
02083  1696  60                    RTS
02084  1697             
02085  1697             ;ALIGN $100
02086  1697             
02087  1697             CONSOLE.SETBACKGROUNDCOLOR.COLOR$ = $73 ; 1 BYTE
02088  1697             CONSOLE.SETBACKGROUNDCOLOR$ 
02089  1697  A5 73                 LDA CONSOLE.SETBACKGROUNDCOLOR.COLOR$
02090  1699  8D 21 D0              STA $D021
02091  169C  60                    RTS
02092  169D             
02093  169D             CONSOLE.SETBORDERCOLOR.COLOR$ = $73 ; 1 BYTE
02094  169D             CONSOLE.SETBORDERCOLOR$ 
02095  169D  A5 73                 LDA CONSOLE.SETBORDERCOLOR.COLOR$
02096  169F  8D 20 D0              STA $D020
02097  16A2  60                    RTS
02098  16A3             
02099  16A3             CONSOLE.SETFOREGROUNDCOLOR.COLOR$ = $73 ; 1 BYTE
02100  16A3             CONSOLE.SETFOREGROUNDCOLOR$ 
02101  16A3  A5 73                 LDA CONSOLE.SETFOREGROUNDCOLOR.COLOR$
02102  16A5  A2 00                 LDX #$00
02103  16A7             @LOOP
02104  16A7  9D 00 D8              STA CONSOLE.COLORADDRESS,X
02105  16AA  9D 00 D9              STA CONSOLE.COLORADDRESS+$100,X
02106  16AD  9D 00 DA              STA CONSOLE.COLORADDRESS+$200,X
02107  16B0  9D 00 DB              STA CONSOLE.COLORADDRESS+$300,X
02108  16B3  CA                    DEX
02109  16B4  D0 F1                 BNE @LOOP
02110  16B6  60                    RTS
02111  16B7             
02112  16B7             ;CONSOLE.SETCHRFORECOLOR.COLOR$ = $73 ; 1 BYTES
02113  16B7             ;CONSOLE.SETCHRFORECOLOR$
02114  16B7             ;        ; GET THE COLOR AT THE CONSOLE'S CURRENT MEMORY ADDRESS.
02115  16B7             ;        ; AND THE FORECOLOR WITH ZEROS.
02116  16B7             ;        ; OR THE FORECOLOR WITH THE NEW COLOR.
02117  16B7             ;        ; PUT THE NEW COLOR AT THE CONSOLE'S CURRENT MEMORY ADDRESS.
02118  16B7             
02119  16B7             ;        LDA CONSOLE.COLORADDRESS
02120  16B7             ;        AND #%11110000 ; CLEAR THE LOW BITS
02121  16B7             ;        ORA CONSOLE.SETCHRFORECOLOR.COLOR$ ; SET THE LOW BITS
02122  16B7             ;        STA CONSOLE.COLORADDRESS
02123  16B7             
02124  16B7             ;        RTS
02125  16B7             
02126  16B7             ; THIS IS NOT POSSIBLE USING THE VIC CHIP!
02127  16B7             ;CONSOLE.SETCHRBACKCOLOR.COLOR$ = $73 ; 1 BYTES
02128  16B7             ;CONSOLE.SETCHRBACKCOLOR$
02129  16B7             ;        ; NEED TO SHIFT THE BACKCOLOR TO THE LEFT 4 BITS.
02130  16B7             ;        ; GET THE COLOR AT THE CONSOLE'S CURRENT MEMORY ADDRESS.
02131  16B7             ;        ; AND THE BACKCOLOR WITH ZEROS.
02132  16B7             ;        ; OR THE BACKCOLOR WITH THE NEW COLOR.
02133  16B7             ;        ; PUT THE NEW COLOR AT THE CONSOLE'S CURRENT MEMORY ADDRESS.
02134  16B7             
02135  16B7             ;        ; SHIFT THE BITS TO THE LEFT 4 TIMES (LO->HI)
02136  16B7             ;        ASL CONSOLE.SETCHRBACKCOLOR.COLOR$
02137  16B7             ;        ASL CONSOLE.SETCHRBACKCOLOR.COLOR$
02138  16B7             ;        ASL CONSOLE.SETCHRBACKCOLOR.COLOR$
02139  16B7             ;        ASL CONSOLE.SETCHRBACKCOLOR.COLOR$
02140  16B7             
02141  16B7             ;        LDA CONSOLE.COLORADDRESS
02142  16B7             ;        AND #%00001111 ; CLEAR THE HIGH BITS
02143  16B7             ;        ORA CONSOLE.SETCHRBACKCOLOR.COLOR$ ; SET THE HIGH BITS
02144  16B7             ;        STA CONSOLE.COLORADDRESS
02145  16B7             
02146  16B7             ;        RTS
02147  16B7             
02148  16B7             CONSOLE.SETCHARACTERCOLOR.COLOR$ = $73 ; 1 BYTE
02149  16B7             CONSOLE.SETCHARACTERCOLOR$ 
02150  16B7  A5 73                 LDA CONSOLE.SETCHARACTERCOLOR.COLOR$
02151  16B9  8D F4 12              STA CONSOLE.CHARACTERCOLOR
02152  16BC  60                    RTS
02153  16BD             
02154  16BD             CONSOLE.SETCHARACTERINVERTED.VALUE$ = $73 ; 1 BYTE
02155  16BD             CONSOLE.SETCHARACTERINVERTED$ 
02156  16BD  A5 73                 LDA CONSOLE.SETCHARACTERINVERTED.VALUE$
02157  16BF  C9 01                 CMP #1
02158  16C1  F0 05                 BEQ @SET
02159  16C3             @UNSET
02160  16C3  A9 00                 LDA #$00
02161  16C5  4C CA 16              JMP @END
02162  16C8             @SET
02163  16C8  A9 80                 LDA #$80
02164  16CA             @END
02165  16CA  8D F5 12              STA CONSOLE.CHARACTERSINVERTED
02166  16CD  60                    RTS
02167  16CE             
02168  16CE             
02169  16CE             CONSOLE.READCHR.CARET ; SEPARATE ROUTINE BECAUSE BRANCHES WEREN'T WORKING
02170  16CE                        ; GET THE CURRENT TICKS
02171  16CE  20 D5 1D              JSR TIME.GETTICKS$
02172  16D1             
02173  16D1  A5 73                 LDA TIME.GETTICKS.RESULT$
02174  16D3  85 80                 STA MATH.CMP32.NUM1$
02175  16D5  A5 74                 LDA TIME.GETTICKS.RESULT$+1
02176  16D7  85 81                 STA MATH.CMP32.NUM1$+1
02177  16D9  A5 75                 LDA TIME.GETTICKS.RESULT$+2
02178  16DB  85 82                 STA MATH.CMP32.NUM1$+2
02179  16DD  A5 76                 LDA TIME.GETTICKS.RESULT$+3
02180  16DF  85 83                 STA MATH.CMP32.NUM1$+3
02181  16E1             
02182  16E1  A5 D4                 LDA CONSOLE.READCHR.MILLISECONDS
02183  16E3  85 84                 STA MATH.CMP32.NUM2$
02184  16E5  A5 D5                 LDA CONSOLE.READCHR.MILLISECONDS+1
02185  16E7  85 85                 STA MATH.CMP32.NUM2$+1
02186  16E9  A5 D6                 LDA CONSOLE.READCHR.MILLISECONDS+2
02187  16EB  85 86                 STA MATH.CMP32.NUM2$+2
02188  16ED  A5 D7                 LDA CONSOLE.READCHR.MILLISECONDS+3
02189  16EF  85 87                 STA MATH.CMP32.NUM2$+3
02190  16F1             
02191  16F1  20 00 29              JSR MATH.CMP32$ ; IF TICKS > (MILLISECONDS + TICKS) THEN CARRY FLAG SHOULD BE SET.
02192  16F4             
02193  16F4                        ;BCC @READKEY ; GOTO @READKEY IF TICKS < (MILLISECONDS + TICKS).
02194  16F4  B0 03                 BCS @READKEY_SKIP ; GOTO @READKEY IF TICKS < (MILLISECONDS + TICKS).
02195  16F6  4C 51 17              JMP @READKEY
02196  16F9             @READKEY_SKIP 
02197  16F9             
02198  16F9                        ; GET THE CURRENT TIME AND STORE
02199  16F9  20 D5 1D              JSR TIME.GETTICKS$
02200  16FC             
02201  16FC                        ; 500 = $01F4
02202  16FC                        ; 400 = $0190
02203  16FC  A9 90                 LDA #$90
02204  16FE  85 80                 STA MATH.ADD32.ADDEND1$
02205  1700  A9 01                 LDA #$01
02206  1702  85 81                 STA MATH.ADD32.ADDEND1$+1
02207  1704  A9 00                 LDA #$00
02208  1706  85 82                 STA MATH.ADD32.ADDEND1$+2
02209  1708  A9 00                 LDA #$00
02210  170A  85 83                 STA MATH.ADD32.ADDEND1$+3
02211  170C             
02212  170C  A5 73                 LDA TIME.GETTICKS.RESULT$
02213  170E  85 84                 STA MATH.ADD32.ADDEND2$
02214  1710  A5 74                 LDA TIME.GETTICKS.RESULT$+1
02215  1712  85 85                 STA MATH.ADD32.ADDEND2$+1
02216  1714  A5 75                 LDA TIME.GETTICKS.RESULT$+2
02217  1716  85 86                 STA MATH.ADD32.ADDEND2$+2
02218  1718  A5 76                 LDA TIME.GETTICKS.RESULT$+3
02219  171A  85 87                 STA MATH.ADD32.ADDEND2$+3
02220  171C             
02221  171C  20 22 28              JSR MATH.ADD32$
02222  171F                        
02223  171F                        ; STORE THE SUM
02224  171F  A5 88                 LDA MATH.ADD32.SUM$
02225  1721  85 D4                 STA CONSOLE.READCHR.MILLISECONDS
02226  1723  A5 89                 LDA MATH.ADD32.SUM$+1
02227  1725  85 D5                 STA CONSOLE.READCHR.MILLISECONDS+1
02228  1727  A5 8A                 LDA MATH.ADD32.SUM$+2
02229  1729  85 D6                 STA CONSOLE.READCHR.MILLISECONDS+2
02230  172B  A5 8B                 LDA MATH.ADD32.SUM$+3
02231  172D  85 D7                 STA CONSOLE.READCHR.MILLISECONDS+3
02232  172F             
02233  172F             ;        ; DELAY ADDED TO SLOW DOWN THE QUICK BACKSPACE CHARACTERS.
02234  172F             ;        ; 100 = $64
02235  172F             ;        ; 50 = $32
02236  172F             ;        LDA #$64
02237  172F             ;        STA TIME.WAIT.MILLISECONDS$
02238  172F             ;        LDA #$00
02239  172F             ;        STA TIME.WAIT.MILLISECONDS$+1
02240  172F             ;        LDA #$00
02241  172F             ;        STA TIME.WAIT.MILLISECONDS$+2
02242  172F             ;        LDA #$00
02243  172F             ;        STA TIME.WAIT.MILLISECONDS$+3
02244  172F             ;        JSR TIME.WAIT$
02245  172F             
02246  172F                        ; TOGGLE THE CARET
02247  172F  A0 00                 LDY #$00
02248  1731  A5 D8                 LDA CONSOLE.READCHR.TOGGLECARET
02249  1733  C9 01                 CMP #$01
02250  1735  F0 0F                 BEQ @CLEARCARRET
02251  1737             @SHOWCARRET 
02252  1737                        ; RENDER THE CARET AT THE CURRENT MEMORY LOCATION
02253  1737  AD 72 18              LDA CONSOLE.CARETCHAR$
02254  173A  91 D9                 STA (CONSOLE.READCHR.CARETADDRESS),Y
02255  173C  20 CA 2F              JSR GRAPHICS.DRAWCHR
02256  173F  A9 01                 LDA #$01
02257  1741  85 D8                 STA CONSOLE.READCHR.TOGGLECARET
02258  1743  4C 51 17              JMP @READKEY
02259  1746             @CLEARCARRET 
02260  1746                        ; RENDER THE CARET AT THE CURRENT MEMORY LOCATION
02261  1746  A9 20                 LDA #$20
02262  1748  91 D9                 STA (CONSOLE.READCHR.CARETADDRESS),Y
02263  174A  20 CA 2F              JSR GRAPHICS.DRAWCHR
02264  174D  A9 00                 LDA #$00
02265  174F  85 D8                 STA CONSOLE.READCHR.TOGGLECARET
02266  1751             
02267  1751             @READKEY
02268  1751  60                    RTS
02269  1752             
02270  1752  31 32 33   CONSOLE.READINT.ALLOWEDCHRS TEXT '1234567890', CONSOLE.BACKSPACE$, CONSOLE.NULL$
02271  175E             
02272  175E             CONSOLE.READINT8.INTEGER$ = $7A ; 1 BYTE
02273  175E             CONSOLE.READINT8$ 
02274  175E                        ; READ CHARACTERS FROM THE CONSOLE.
02275  175E  A9 03                 LDA #$03
02276  1760  85 EA                 STA CONSOLE.READGEN.MAXLEN
02277  1762             
02278  1762  A9 52                 LDA #<CONSOLE.READINT.ALLOWEDCHRS
02279  1764  85 EB                 STA CONSOLE.READGEN.ALLOWEDCHRS
02280  1766  A9 17                 LDA #>CONSOLE.READINT.ALLOWEDCHRS
02281  1768  85 EC                 STA CONSOLE.READGEN.ALLOWEDCHRS+1
02282  176A             
02283  176A  20 69 19              JSR CONSOLE.READGEN
02284  176D             
02285  176D                        ; CONVERT THE DECIMAL CHARACTERS TO HEXIDECIMAL.
02286  176D  20 BC 17              JSR CONSOLE.READINT.COPYMEM
02287  1770             
02288  1770  20 65 1C              JSR CONVERT.DEC2HEX8
02289  1773             
02290  1773  A5 E0                 LDA CONVERT.DEC2HEX8.RESULT
02291  1775  85 7A                 STA CONSOLE.READINT8.INTEGER$
02292  1777  60                    RTS
02293  1778             
02294  1778             CONSOLE.READINT16.INTEGER$ = $7A ; 2 BYTES
02295  1778             CONSOLE.READINT16$ 
02296  1778                        ; READ CHARACTERS FROM THE CONSOLE.
02297  1778  A9 05                 LDA #$05
02298  177A  85 EA                 STA CONSOLE.READGEN.MAXLEN
02299  177C             
02300  177C  A9 52                 LDA #<CONSOLE.READINT.ALLOWEDCHRS
02301  177E  85 EB                 STA CONSOLE.READGEN.ALLOWEDCHRS
02302  1780  A9 17                 LDA #>CONSOLE.READINT.ALLOWEDCHRS
02303  1782  85 EC                 STA CONSOLE.READGEN.ALLOWEDCHRS+1
02304  1784             
02305  1784  20 69 19              JSR CONSOLE.READGEN
02306  1787             
02307  1787                        ; CONVERT THE DECIMAL CHARACTERS TO HEXIDECIMAL.
02308  1787  20 BC 17              JSR CONSOLE.READINT.COPYMEM
02309  178A             
02310  178A  20 B9 1C              JSR CONVERT.DEC2HEX16
02311  178D             
02312  178D  A5 E0                 LDA CONVERT.DEC2HEX16.RESULT
02313  178F  85 7A                 STA CONSOLE.READINT16.INTEGER$
02314  1791  A5 E1                 LDA CONVERT.DEC2HEX16.RESULT+1
02315  1793  85 7B                 STA CONSOLE.READINT16.INTEGER$+1
02316  1795             
02317  1795  60                    RTS
02318  1796             
02319  1796             CONSOLE.READINT32.INTEGER$ = $7A ; 4 BYTES
02320  1796             CONSOLE.READINT32$ 
02321  1796                        ; READ CHARACTERS FROM THE CONSOLE.
02322  1796  A9 0A                 LDA #$0A ; 10
02323  1798  85 EA                 STA CONSOLE.READGEN.MAXLEN
02324  179A             
02325  179A  A9 52                 LDA #<CONSOLE.READINT.ALLOWEDCHRS
02326  179C  85 EB                 STA CONSOLE.READGEN.ALLOWEDCHRS
02327  179E  A9 17                 LDA #>CONSOLE.READINT.ALLOWEDCHRS
02328  17A0  85 EC                 STA CONSOLE.READGEN.ALLOWEDCHRS+1
02329  17A2             
02330  17A2  20 69 19              JSR CONSOLE.READGEN
02331  17A5             
02332  17A5                        ; CONVERT THE DECIMAL CHARACTERS TO HEXIDECIMAL.
02333  17A5  20 BC 17              JSR CONSOLE.READINT.COPYMEM
02334  17A8             
02335  17A8  20 2D 1D              JSR CONVERT.DEC2HEX32
02336  17AB             
02337  17AB  A5 E0                 LDA CONVERT.DEC2HEX32.RESULT
02338  17AD  85 7A                 STA CONSOLE.READINT32.INTEGER$
02339  17AF  A5 E1                 LDA CONVERT.DEC2HEX32.RESULT+1
02340  17B1  85 7B                 STA CONSOLE.READINT32.INTEGER$+1
02341  17B3  A5 E2                 LDA CONVERT.DEC2HEX32.RESULT+2
02342  17B5  85 7C                 STA CONSOLE.READINT32.INTEGER$+2
02343  17B7  A5 E3                 LDA CONVERT.DEC2HEX32.RESULT+3
02344  17B9  85 7D                 STA CONSOLE.READINT32.INTEGER$+3
02345  17BB             
02346  17BB  60                    RTS
02347  17BC             
02348  17BC             CONSOLE.READINT.COPYMEM 
02349  17BC                        ; GET THE LENGTH OF THE STRING
02350  17BC  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
02351  17BE  85 7A                 STA STRING.GETLENGTH.ADDRESS$
02352  17C0  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
02353  17C2  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
02354  17C4             
02355  17C4  20 72 2B              JSR STRING.GETLENGTH$
02356  17C7             
02357  17C7  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
02358  17C9  C9 00                 CMP #$00
02359  17CB  F0 0E                 BEQ @END
02360  17CD  85 2A                 STA CONVERT.DEC2HEX.LEN
02361  17CF             
02362  17CF  A2 00                 LDX #$00
02363  17D1             @LOOP
02364  17D1  BD 00 09              LDA CONSOLE.READSTR.BUFADDRESS,X
02365  17D4  95 E4                 STA CONVERT.DEC2HEX.VALUE,X
02366  17D6  E8                    INX
02367  17D7  E4 2A                 CPX CONVERT.DEC2HEX.LEN
02368  17D9  D0 F6                 BNE @LOOP
02369  17DB             
02370  17DB             @END
02371  17DB  60                    RTS
02372  17DC             
02373  17DC             ALIGN      $100
02374  1800             
02375  1800  FF FF FF   CONSOLE.GETKEY.BUFFEROLD BYTE $FF, $FF, $FF
02376  1803             
02377  1803  FF FF FF   CONSOLE.GETKEY.BUFFER BYTE $FF, $FF, $FF, $FF
02378  1807             
02379  1807  FF         CONSOLE.GETKEY.BUFFERQUANTITY BYTE $FF
02380  1808             
02381  1808  00         CONSOLE.GETKEY.SIMULTANEOUSALPHANUMERICKEYSFLAG BYTE $00
02382  1809             
02383  1809             CONSOLE.GETKEY.KEYTABLESHIFT$ 
02384  1809  FF 41 42              BYTE $FF, $41, $42, $43, $44, $45, $46, $47  ; "@", "A", "B", "C", "D", "E", "F", "G"
02385  1811  48 49 4A              BYTE $48, $49, $4A, $4B, $4C, $4D, $4E, $4F  ; "H", "I", "J", "K", "L", "M", "N", "O"
02386  1819  50 51 52              BYTE $50, $51, $52, $53, $54, $55, $56, $57  ; "P", "Q", "R", "S", "T", "U", "V", "W"
02387  1821  58 59 5A              BYTE $58, $59, $5A, $FF, $FF, $FF, $FF, $FF  ; "X", "Y", "Z", "[", (POUND), "]", UP-ARROW, "<-"
02388  1829  20 FF FF              BYTE $20, $FF, $FF, $FF, $FF, $FF, $FF, $FF  ; " " (SPC), "!", (DBL QTE), "#", "$", "%", "&", "`"
02389  1831  FF FF FF              BYTE $FF, $FF, $FF, $FF, $3C, $FF, $3E, $3F  ; "(", ")", "*", "+", ",", "-", ".", "/"
02390  1839  FF 21 22              BYTE $FF, $21, $22, $23, $24, $25, $26, $27  ; "0", "1", "2", "3", "4", "5", "6", "7"
02391  1841  28 29 1B              BYTE $28, $29, $1B, $1D, $FF, $FF, $FF, $FF  ; "8", "9", ":", ";", "<", "=", ">", "?"
02392  1849             
02393  1849             CONSOLE.READKEY.CHAR.INVALID$ = $FF
02394  1849             CONSOLE.READKEY.CHAR$ = $D0 ; 1 BYTE
02395  1849             
02396  1849             CONSOLE.READKEY.SHIFT1.UP_DOWN$ = %10000000
02397  1849             CONSOLE.READKEY.SHIFT1.F5$ = %01000000
02398  1849             CONSOLE.READKEY.SHIFT1.F3$ = %00100000
02399  1849             CONSOLE.READKEY.SHIFT1.F1$ = %00010000
02400  1849             CONSOLE.READKEY.SHIFT1.F7$ = %00001000
02401  1849             CONSOLE.READKEY.SHIFT1.LEFT_RIGHT$ = %00000100
02402  1849             CONSOLE.READKEY.SHIFT1.RETURN$ = %00000010
02403  1849             CONSOLE.READKEY.SHIFT1.INSERT_DELETE$ = %00000001
02404  1849             CONSOLE.READKEY.SHIFT1$ = $D1 ; 1 BYTE
02405  1849             
02406  1849             CONSOLE.READKEY.SHIFT2.RUN_STOP$ = %10000000
02407  1849             CONSOLE.READKEY.SHIFT2.LEFT_SHIFT$ = %01000000
02408  1849             CONSOLE.READKEY.SHIFT2.COMMODORE$ = %00100000
02409  1849             CONSOLE.READKEY.SHIFT2.RIGHT_SHIFT$ = %00010000
02410  1849             CONSOLE.READKEY.SHIFT2.CLEAR_HOME$ = %00001000
02411  1849             CONSOLE.READKEY.SHIFT2.CONTROL$ = %00000100
02412  1849             CONSOLE.READKEY.SHIFT2$ = $D2 ; 1 BYTE
02413  1849             
02414  1849             CONSOLE.READKEY.STATE.OK$ = $00
02415  1849             CONSOLE.READKEY.STATE.NO_ACTIVITY$ = $01
02416  1849             CONSOLE.READKEY.STATE.CONTROL_PORT_1$ = $02
02417  1849             CONSOLE.READKEY.STATE.SHADOWING$ = $03
02418  1849             CONSOLE.READKEY.STATE.MULTIPLEKEYS$ = $04
02419  1849             CONSOLE.READKEY.STATE.AWAITING_NO_ACTIVITY$ = $05
02420  1849             CONSOLE.READKEY.STATE$ = $D3 ; 1 BYTE
02421  1849             CONSOLE.READKEY.PROCESSORSTATE = $DB ; 1 BYTE
02422  1849             CONSOLE.READKEY$ 
02423  1849                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:SCANNING_THE_KEYBOARD_THE_CORRECT_AND_NON_KERNAL_WAY
02424  1849             
02425  1849                        ;THE ROUTINE USES "2 KEY ROLLOWER" OR UP TO 3 IF THE KEY-COMBINATION DOESEN'T INDUCE SHADOWING.
02426  1849                        ;IF 2 OR 3 KEYS ARE PRESSED SIMULTANEOUSLY (WITHIN 1 SCAN) A "NO ACTIVITY" STATE HAS TO OCCUR BEFORE NEW VALID KEYS ARE RETURNED.
02427  1849                        ;RESTORE IS NOT DETECTABLE AND MUST BE HANDLED BY NMI IRQ.
02428  1849                        ;SHIFT LOCK IS NOT DETECTED DUE TO UNRELIABILITY.
02429  1849                        
02430  1849  A9 00                 LDA #$00
02431  184B  85 D0                 STA CONSOLE.READKEY.CHAR$
02432  184D  85 D1                 STA CONSOLE.READKEY.SHIFT1$
02433  184F  85 D2                 STA CONSOLE.READKEY.SHIFT2$
02434  1851  85 D3                 STA CONSOLE.READKEY.STATE$
02435  1853             
02436  1853  08                    PHP ; PUSH THE PROCESSOR STATE ONTO THE STACK
02437  1854  68                    PLA ; PULL THE PROCESSOR STATE INTO A
02438  1855  85 DB                 STA CONSOLE.READKEY.PROCESSORSTATE ; SAVE IN VARIABLE
02439  1857             
02440  1857  78                    SEI ; NEED TO DISABLE INTERRUPTS OTHERWISE PRESSING RUN-STOP (TAB) CAUSES
02441  1858                        ; RANDOM ALPHA-NUMERIC KEY STROKE TO BE RETURNED WHEN NON IS PRESSED
02442  1858  20 6A 1A              JSR CONSOLE.GETKEY
02443  185B  B0 09                 BCS @NOVALIDINPUT ; IF CARRY IS SET, NO VALID CHARACTER PRESSED
02444  185D             
02445  185D  85 D0                 STA CONSOLE.READCHR.CHAR$
02446  185F  86 D1                 STX CONSOLE.READKEY.SHIFT1$
02447  1861  84 D2                 STY CONSOLE.READKEY.SHIFT2$
02448  1863             
02449  1863  4C 68 18              JMP @END
02450  1866             
02451  1866             @NOVALIDINPUT ; THIS MAY BE SUBSTITUTED FOR AN ERRORHANDLER IF NEEDED.
02452  1866  85 D3                 STA CONSOLE.READKEY.STATE$
02453  1868             
02454  1868             @END
02455  1868             
02456  1868                        ; CHECK TO SEE IF INTERRUPTS WERE PREVIOUSLY DISABLED
02457  1868                        ; IF SO, DO NOT RE-ENABLE THEM
02458  1868  A5 DB                 LDA CONSOLE.READKEY.PROCESSORSTATE
02459  186A  29 04                 AND #%00000100
02460  186C  C9 04                 CMP #%00000100
02461  186E  F0 01                 BEQ @SKIPCLI
02462  1870  58                    CLI ; RE-ENABLE INTERRUPTS
02463  1871             @SKIPCLI
02464  1871             
02465  1871  60                    RTS
02466  1872             
02467  1872             
02468  1872             ;CONSOLE.READCHR.CHAR$ = $83
02469  1872             ;CONSOLE.READCHR.YREG = $FB
02470  1872             
02471  1872             ;CONSOLE.READCHR$
02472  1872             ;        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:SCANNING_THE_KEYBOARD_THE_CORRECT_AND_NON_KERNAL_WAY
02473  1872             
02474  1872             ;;        JSR CONSOLE.GETKEY
02475  1872             ;
02476  1872             ;        SEI ; NEED TO DISABLE INTERUPTS OTHERWISE PRESSING RUN-STOP (TAB) CAUSES
02477  1872             ;            ; RANDOM ALPHA-NUMERIC KEY STROKE TO BE RETURNED WHEN NON IS PRESSED
02478  1872             ;@LOOP
02479  1872             ;        JSR CONSOLE.GETKEY
02480  1872             ;        BCS @NOVALIDINPUT ; IF CARRY IS SET, NO VALID CHARACTER PRESSED
02481  1872             
02482  1872             ;        ;STX TEMPX
02483  1872             ;        ;STY TEMPY
02484  1872             ;        CMP #$FF
02485  1872             ;        BEQ @NONEWAPHANUMERICKEY
02486  1872             ;            ;; CHECK A FOR ALPHANUMERIC KEYS
02487  1872             ;            ;STA $0400
02488  1872             
02489  1872             ;        STA CONSOLE.READCHR.CHAR$
02490  1872             
02491  1872             ;        TYA
02492  1872             ;        AND #%01000000 ; LEFT SHIFT
02493  1872             ;        CMP #%01000000
02494  1872             ;        BEQ @SHIFTPRESSED
02495  1872             ;        TYA
02496  1872             ;        AND #%00010000 ; RIGHT SHIFT
02497  1872             ;        CMP #%00010000
02498  1872             ;        BEQ @SHIFTPRESSED
02499  1872             
02500  1872             ;        JMP @END
02501  1872             
02502  1872             ;@SHIFTPRESSED
02503  1872             ;        ;LDA CONSOLE.READCHR.CHAR$
02504  1872             ;        ;ADC #63
02505  1872             ;        ;STA CONSOLE.READCHR.CHAR$
02506  1872             
02507  1872             ;        LDX CONSOLE.READCHR.CHAR$
02508  1872             ;        LDA CONSOLE.GETKEY.KEYTABLESHIFT,X
02509  1872             ;        CMP #$FF
02510  1872             ;        BEQ @LOOP
02511  1872             ;        STA CONSOLE.READCHR.CHAR$
02512  1872             
02513  1872             ;        JMP @END
02514  1872             
02515  1872             ;@NONEWAPHANUMERICKEY
02516  1872             ;            ;; CHECK X & Y FOR NON-ALPHANUMERIC KEYS
02517  1872             ;            ;LDX TEMPX
02518  1872             ;            ;LDY TEMPY
02519  1872             ;            ;STX $0401
02520  1872             ;            ;STY $0402
02521  1872             ;        JMP @LOOP
02522  1872             
02523  1872             ;@NOVALIDINPUT  ; THIS MAY BE SUBSTITUTED FOR AN ERRORHANDLER IF NEEDED.
02524  1872             ;        JMP @LOOP
02525  1872             
02526  1872             ;@END
02527  1872             ;        RTS
02528  1872             
02529  1872             ;ALIGN $100
02530  1872             
02531  1872  64         CONSOLE.CARETCHAR$ BYTE $64 ; MADE PUBLIC SO IT CAN BE OVERRIDDEN
02532  1873  00 00      CONSOLE.CARETSTARTADDRESS WORD $0000
02533  1875  00         CONSOLE.READCHR.PREV_CHR BYTE $00
02534  1876             
02535  1876             CONSOLE.READCHR.CHAR$ = $D0 ; 1 BYTE
02536  1876             CONSOLE.READCHR.MILLISECONDS = $D4 ; 4 BYTES
02537  1876             CONSOLE.READCHR.TOGGLECARET = $D8 ; 1 BYTE
02538  1876             CONSOLE.READCHR.CARETADDRESS = $D9 ; 2 BYTES
02539  1876             
02540  1876             CONSOLE.READCHR$ 
02541  1876  AD EE 12              LDA CONSOLE.CURRENTADDRESS
02542  1879  8D 73 18              STA CONSOLE.CARETSTARTADDRESS
02543  187C  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
02544  187F  8D 74 18              STA CONSOLE.CARETSTARTADDRESS+1
02545  1882             
02546  1882             CONSOLE.READCHR 
02547  1882             
02548  1882                        ;; CHECK FOR DEBUGMODE
02549  1882                        ;LDA KERNEL.DEBUGMODE$
02550  1882                        ;CMP #$00
02551  1882                        ;BEQ @NOT_DEBUGMODE$
02552  1882                        ;RTS
02553  1882             ;@NOT_DEBUGMODE$
02554  1882             
02555  1882                        ; PREVENT QUICK RETURNS FROM BEING PRESSED
02556  1882                        ;JSR TIME.HALT$
02557  1882                        ;JSR TIME.HALT$
02558  1882             
02559  1882                        ; SET THE COLOR OF THE CARET
02560  1882  A0 00                 LDY #$00
02561  1884  AD F2 12              LDA CONSOLE.CURRENTCOLORADDR
02562  1887  85 D9                 STA CONSOLE.READCHR.CARETADDRESS
02563  1889  AD F3 12              LDA CONSOLE.CURRENTCOLORADDR+1
02564  188C  85 DA                 STA CONSOLE.READCHR.CARETADDRESS+1
02565  188E  AD F4 12              LDA CONSOLE.CHARACTERCOLOR
02566  1891  91 D9                 STA (CONSOLE.READCHR.CARETADDRESS),Y
02567  1893             
02568  1893                        ; GET THE LOCATION OF THE CARET
02569  1893  AD EE 12              LDA CONSOLE.CURRENTADDRESS
02570  1896  85 D9                 STA CONSOLE.READCHR.CARETADDRESS
02571  1898  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
02572  189B  85 DA                 STA CONSOLE.READCHR.CARETADDRESS+1
02573  189D             
02574  189D                        ; SHOW THE CARET
02575  189D  A9 00                 LDA #$00
02576  189F  85 D8                 STA CONSOLE.READCHR.TOGGLECARET
02577  18A1             
02578  18A1                        ; RESET THE MILLISECONDS
02579  18A1  A9 00                 LDA #$00
02580  18A3  85 D4                 STA CONSOLE.READCHR.MILLISECONDS
02581  18A5  85 D5                 STA CONSOLE.READCHR.MILLISECONDS+1
02582  18A7  85 D6                 STA CONSOLE.READCHR.MILLISECONDS+2
02583  18A9  85 D7                 STA CONSOLE.READCHR.MILLISECONDS+3
02584  18AB             
02585  18AB             @LOOP
02586  18AB  20 CE 16              JSR CONSOLE.READCHR.CARET ; SEPARATE ROUTINE BECAUSE BRANCHES WEREN'T WORKING
02587  18AE             
02588  18AE             @READKEY
02589  18AE                        ; READ THE KEY FROM THE KEYBOARD
02590  18AE  20 49 18              JSR CONSOLE.READKEY$
02591  18B1             
02592  18B1                        ; DETERMINE IF ANYTHING WAS PRESSED
02593  18B1  A5 D3                 LDA CONSOLE.READKEY.STATE$
02594  18B3  C9 00                 CMP #CONSOLE.READKEY.STATE.OK$
02595  18B5                        ;BNE @LOOP
02596  18B5  F0 08                 BEQ @READKEYOK
02597  18B7  A9 00                 LDA #$00
02598  18B9  8D 75 18              STA CONSOLE.READCHR.PREV_CHR
02599  18BC  4C AB 18              JMP @LOOP
02600  18BF             @READKEYOK 
02601  18BF             
02602  18BF                        ; CONFIRM THAT WE HAVE A VALID CHARACTER
02603  18BF  A5 D0                 LDA CONSOLE.READKEY.CHAR$
02604  18C1  C9 FF                 CMP #CONSOLE.READKEY.CHAR.INVALID$
02605  18C3  F0 21                 BEQ @CHECKSPECIAL
02606  18C5             
02607  18C5                        ; CHECK IF THE SHIFT KEY WAS PRESSED
02608  18C5  A5 D2                 LDA CONSOLE.READKEY.SHIFT2$
02609  18C7  29 40                 AND #CONSOLE.READKEY.SHIFT2.LEFT_SHIFT$
02610  18C9  C9 40                 CMP #CONSOLE.READKEY.SHIFT2.LEFT_SHIFT$
02611  18CB  F0 0B                 BEQ @SHIFTPRESSED
02612  18CD             
02613  18CD  A5 D2                 LDA CONSOLE.READKEY.SHIFT2$
02614  18CF  29 10                 AND #CONSOLE.READKEY.SHIFT2.RIGHT_SHIFT$
02615  18D1  C9 10                 CMP #CONSOLE.READKEY.SHIFT2.RIGHT_SHIFT$
02616  18D3  F0 03                 BEQ @SHIFTPRESSED
02617  18D5                        
02618  18D5  4C 13 19              JMP @END
02619  18D8             
02620  18D8             @SHIFTPRESSED 
02621  18D8                        ; IF A VALID CHARACTER WAS PRESSED WHILE THE SHIFT KEY WAS PRESSED,
02622  18D8                        ; RETURN THE UPPER-CASED VERSION OF THE CHARACTER
02623  18D8  A6 D0                 LDX CONSOLE.READKEY.CHAR$
02624  18DA  BD 09 18              LDA CONSOLE.GETKEY.KEYTABLESHIFT$,X
02625  18DD  C9 FF                 CMP #CONSOLE.READKEY.CHAR.INVALID$
02626  18DF  F0 CA                 BEQ @LOOP
02627  18E1  85 D0                 STA CONSOLE.READCHR.CHAR$
02628  18E3             
02629  18E3  4C 13 19              JMP @END2
02630  18E6             
02631  18E6             ;@CHECKRETURN
02632  18E6             ;        ; IF THE RETURN KEY IS PRESSED, RETURN NULL
02633  18E6             ;        LDA CONSOLE.READKEY.SHIFT1$
02634  18E6             ;        CMP #CONSOLE.READKEY.SHIFT1.RETURN$
02635  18E6             ;        BNE @LOOP
02636  18E6             ;        LDA #CONSOLE.NULL$
02637  18E6             ;        ;LDA #CONSOLE.NEWLINE$
02638  18E6             ;        STA CONSOLE.READKEY.CHAR$
02639  18E6             
02640  18E6             @CHECKSPECIAL 
02641  18E6                        ; IF THE RETURN KEY IS PRESSED, RETURN NULL
02642  18E6  A5 D1                 LDA CONSOLE.READKEY.SHIFT1$
02643  18E8  C9 02                 CMP #CONSOLE.READKEY.SHIFT1.RETURN$
02644  18EA  F0 07                 BEQ @RETURNNULL
02645  18EC  C9 01                 CMP #CONSOLE.READKEY.SHIFT1.INSERT_DELETE$
02646  18EE  F0 0A                 BEQ @RETURNBACKSPACE
02647  18F0                        
02648  18F0  4C AB 18              JMP @LOOP
02649  18F3             
02650  18F3             @RETURNNULL 
02651  18F3  A9 FF                 LDA #CONSOLE.NULL$
02652  18F5  85 D0                 STA CONSOLE.READKEY.CHAR$
02653  18F7  4C 01 19              JMP @HIDECARET
02654  18FA             
02655  18FA             @RETURNBACKSPACE 
02656  18FA  A9 FD                 LDA #CONSOLE.BACKSPACE$
02657  18FC  85 D0                 STA CONSOLE.READKEY.CHAR$
02658  18FE  4C 01 19              JMP @HIDECARET
02659  1901             
02660  1901             @HIDECARET 
02661  1901             
02662  1901                        ; COMPARE LAST CHARACTER
02663  1901                        ;LDA CONSOLE.READCHR.CHAR$
02664  1901  CD 75 18              CMP CONSOLE.READCHR.PREV_CHR
02665  1904  D0 03                 BNE @CHAROK
02666  1906  4C AB 18              JMP @LOOP
02667  1909             @CHAROK
02668  1909  8D 75 18              STA CONSOLE.READCHR.PREV_CHR
02669  190C             
02670  190C                        ; HIDE THE CARET
02671  190C  A9 20                 LDA #$20
02672  190E  91 D9                 STA (CONSOLE.READCHR.CARETADDRESS),Y
02673  1910  20 CA 2F              JSR GRAPHICS.DRAWCHR
02674  1913                        ;JMP @SKIPWRITECHR
02675  1913             
02676  1913                        ;LDA CONSOLE.READCHR.CHAR$
02677  1913                        ;PHA
02678  1913                        ;JMP @T1
02679  1913             
02680  1913             ;        ; DELAY ADDED TO SLOW DOWN THE QUICK BACKSPACE CHARACTERS.
02681  1913             ;        ; 100 = $64
02682  1913             ;        ; 50 = $32
02683  1913             ;        LDA #$64
02684  1913             ;        STA TIME.WAIT.MILLISECONDS$
02685  1913             ;        LDA #$00
02686  1913             ;        STA TIME.WAIT.MILLISECONDS$+1
02687  1913             ;        LDA #$00
02688  1913             ;        STA TIME.WAIT.MILLISECONDS$+2
02689  1913             ;        LDA #$00
02690  1913             ;        STA TIME.WAIT.MILLISECONDS$+3
02691  1913             ;        JSR TIME.WAIT$
02692  1913             
02693  1913                        ;JSR TIME.HALT2
02694  1913                        ;JSR TIME.HALT2
02695  1913             
02696  1913             ;@T1
02697  1913                        ;PLA
02698  1913                        ;STA CONSOLE.READCHR.CHAR$
02699  1913             
02700  1913             @END
02701  1913             
02702  1913             @END2
02703  1913             
02704  1913                        ; WRITE THE CHARACTER TO THE SCREEN
02705  1913  A5 D0                 LDA CONSOLE.READCHR.CHAR$
02706  1915  C9 FF                 CMP #CONSOLE.NULL$
02707  1917  F0 09                 BEQ @SKIPWRITECHR
02708  1919  48                    PHA
02709  191A  85 02                 STA CONSOLE.WRITECHR.CHAR$
02710  191C  20 19 15              JSR CONSOLE.WRITECHR$
02711  191F  68                    PLA
02712  1920  85 D0                 STA CONSOLE.READCHR.CHAR$
02713  1922             @SKIPWRITECHR 
02714  1922             
02715  1922  60                    RTS
02716  1923             
02717  1923             ;ALIGN $100
02718  1923             
02719  1923             
02720  1923             ; STRINGS WILL HAVE A MAX LENGTH OF 255 CHARACTERS.
02721  1923             CONSOLE.READSTR.STRADDRESS$ = $7A ; 2 BYTES
02722  1923             CONSOLE.READSTR.LENGTH = $FB ; 2 BYTES
02723  1923             CONSOLE.READSTR$ 
02724  1923             
02725  1923  A9 FF                 LDA #$FF
02726  1925  85 EA                 STA CONSOLE.READGEN.MAXLEN
02727  1927  A9 00                 LDA #$00
02728  1929  85 EB                 STA CONSOLE.READGEN.ALLOWEDCHRS
02729  192B  85 EC                 STA CONSOLE.READGEN.ALLOWEDCHRS+1
02730  192D  20 69 19              JSR CONSOLE.READGEN
02731  1930             
02732  1930                        ; STORE THE LENGTH
02733  1930  86 FB                 STX CONSOLE.READSTR.LENGTH
02734  1932  A2 00                 LDX #$00
02735  1934  86 FC                 STX CONSOLE.READSTR.LENGTH+1
02736  1936             
02737  1936                        ; NEED TO COPY THE CONTENTS OF THE BUFFER TO AN INSTANCE OF A NEW STRING.
02738  1936  A5 FB                 LDA CONSOLE.READSTR.LENGTH
02739  1938  85 FB                 STA STRING.CREATE.LENGTH$
02740  193A  A5 FC                 LDA CONSOLE.READSTR.LENGTH+1
02741  193C  85 FC                 STA STRING.CREATE.LENGTH$+1
02742  193E             
02743  193E  A9 00                 LDA #$00 ; OPTIMIZATION - DEFAULT TO CHARACTER $00
02744  1940  85 02                 STA STRING.CREATE.CHARACTER$
02745  1942             
02746  1942  20 AD 2A              JSR STRING.CREATE$ ; STRADDRESS = STRING.CREATE$(LENGTH)
02747  1945             
02748  1945  A5 7A                 LDA STRING.CREATE.ADDRESS$
02749  1947  85 7A                 STA CONSOLE.READSTR.STRADDRESS$
02750  1949  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
02751  194B  85 7B                 STA CONSOLE.READSTR.STRADDRESS$+1
02752  194D             
02753  194D  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
02754  194F  85 73                 STA MEMORY.COPY16.SOURCE$
02755  1951  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
02756  1953  85 74                 STA MEMORY.COPY16.SOURCE$+1
02757  1955             
02758  1955  A5 7A                 LDA CONSOLE.READSTR.STRADDRESS$
02759  1957  85 75                 STA MEMORY.COPY16.DESTINATION$
02760  1959  A5 7B                 LDA CONSOLE.READSTR.STRADDRESS$+1
02761  195B  85 76                 STA MEMORY.COPY16.DESTINATION$+1
02762  195D             
02763  195D  A5 FB                 LDA CONSOLE.READSTR.LENGTH
02764  195F  85 78                 STA MEMORY.COPY16.LENGTH$
02765  1961  A9 00                 LDA #$00
02766  1963  85 79                 STA MEMORY.COPY16.LENGTH$+1
02767  1965             
02768  1965  20 9C 0F              JSR MEMORY.COPY16$ ; MEMORY.COPY16(BUFADDRESS, STRADDRESS)
02769  1968             
02770  1968  60                    RTS
02771  1969             
02772  1969             ;ALIGN $100
02773  1969             
02774  1969             CONSOLE.READGEN.MAXLEN = $EA ; 1 BYTE
02775  1969             CONSOLE.READGEN.ALLOWEDCHRS = $EB ; 2 BYTES
02776  1969             CONSOLE.READGEN.SKIPCHR = $ED ; 1 BYTE
02777  1969             CONSOLE.READGEN.CHAR = $EE ; 1 BYTE
02778  1969             CONSOLE.READGEN 
02779  1969                        ; WHEN THE ABILITY TO ALLOCATE STRING EXISTS,
02780  1969                        ; THE NEW STRING NEEDS TO BE THE EXACT SIZE OF
02781  1969                        ; THE CHARACTERS ENTERED + 1 (NULL$).
02782  1969             
02783  1969             ;        ; FILL THE STRADDRESS WITH NULLS
02784  1969             ;        LDA #<CONSOLE.READSTR.BUFADDRESS
02785  1969             ;        STA MEMORY.FILL.ADDRESS$
02786  1969             ;        LDA #>CONSOLE.READSTR.BUFADDRESS
02787  1969             ;        STA MEMORY.FILL.ADDRESS$+1
02788  1969             ;        LDA #CONSOLE.NULL$
02789  1969             ;        STA MEMORY.FILL.VALUE$
02790  1969             ;        LDX CONSOLE.READGEN.MAXLEN
02791  1969             ;        INX ; LENGTH = MAXLEN+1
02792  1969             ;        STX MEMORY.FILL.LENGTH$
02793  1969             ;        JSR MEMORY.FILL$
02794  1969  20 EF 19              JSR CONSOLE.RESETBUFADDRESS
02795  196C             
02796  196C                        ; SET THE CURRENT ADDRESS AS THE STARTING CARET'S LOCATION.
02797  196C  AD EE 12              LDA CONSOLE.CURRENTADDRESS
02798  196F  8D 73 18              STA CONSOLE.CARETSTARTADDRESS
02799  1972  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
02800  1975  8D 74 18              STA CONSOLE.CARETSTARTADDRESS+1
02801  1978             
02802  1978  A2 00                 LDX #0
02803  197A             @LOOP
02804  197A                        ; STORE THE STRING OFFSET IN THE STACK.
02805  197A  8A                    TXA
02806  197B  48                    PHA
02807  197C             
02808  197C                        ; READ A CHARACTER FROM THE CONSOLE.
02809  197C  20 82 18              JSR CONSOLE.READCHR
02810  197F  A5 D0                 LDA CONSOLE.READCHR.CHAR$
02811  1981  85 EE                 STA CONSOLE.READGEN.CHAR
02812  1983             
02813  1983                        ; GET THE CURRENT STRING OFFSET.
02814  1983  68                    PLA
02815  1984  AA                    TAX
02816  1985             
02817  1985                        ; EXIT IF RETURN WAS PRESSED.
02818  1985  A5 EE                 LDA CONSOLE.READGEN.CHAR
02819  1987  C9 FF                 CMP #CONSOLE.NULL$
02820  1989  F0 33                 BEQ @END
02821  198B             
02822  198B                        ; CHECK WHETHER OR NOT THE CHARACTER IS ALLOWED.
02823  198B  20 BF 19              JSR CONSOLE.READGEN.SKIPALLOWCHR
02824  198E  A5 ED                 LDA CONSOLE.READGEN.SKIPCHR
02825  1990  C9 01                 CMP #$01
02826  1992  F0 20                 BEQ @ATMAX
02827  1994             
02828  1994                        ; IF DELETE WAS PRESSED, INSERT A NULL CHARACTER AT THE CURRENT OFFSET
02829  1994                        ; AND DECREASE THE OFSSET
02830  1994  A5 EE                 LDA CONSOLE.READGEN.CHAR
02831  1996  C9 FD                 CMP #CONSOLE.BACKSPACE$
02832  1998  F0 0D                 BEQ @BACKSPACED
02833  199A             
02834  199A  E4 EA                 CPX CONSOLE.READGEN.MAXLEN ; SANITY CHECK
02835  199C  F0 16                 BEQ @ATMAX
02836  199E             
02837  199E                        ; STORE THE CHARACTER IN MEMORY.
02838  199E  A5 EE                 LDA CONSOLE.READGEN.CHAR
02839  19A0  9D 00 09              STA CONSOLE.READSTR.BUFADDRESS,X
02840  19A3  E8                    INX ; INCREASE THE OFFSET
02841  19A4             
02842  19A4  4C 7A 19              JMP @LOOP
02843  19A7             
02844  19A7             @BACKSPACED 
02845  19A7  E0 00                 CPX #0 ; SANITY CHECK
02846  19A9  F0 CF                 BEQ @LOOP
02847  19AB             
02848  19AB  CA                    DEX ; INCREASE THE OFFSET
02849  19AC  A9 FF                 LDA #CONSOLE.NULL$
02850  19AE  9D 00 09              STA CONSOLE.READSTR.BUFADDRESS,X
02851  19B1             
02852  19B1  4C 7A 19              JMP @LOOP
02853  19B4                        
02854  19B4             @ATMAX
02855  19B4  A9 FD                 LDA #CONSOLE.BACKSPACE$
02856  19B6  85 02                 STA CONSOLE.WRITECHR.CHAR$
02857  19B8  20 19 15              JSR CONSOLE.WRITECHR$
02858  19BB             
02859  19BB  4C 7A 19              JMP @LOOP
02860  19BE             
02861  19BE             @END
02862  19BE  60                    RTS
02863  19BF             
02864  19BF             CONSOLE.READGEN.SKIPALLOWCHR 
02865  19BF                        ;JMP @CHAROK
02866  19BF             
02867  19BF                        ; IF ALLOWEDCHRS IS ZERO THEN SKIP CHECK
02868  19BF  A5 EB                 LDA CONSOLE.READGEN.ALLOWEDCHRS
02869  19C1  85 80                 STA MATH.CMP16.NUM1$
02870  19C3  A5 EC                 LDA CONSOLE.READGEN.ALLOWEDCHRS+1
02871  19C5  85 81                 STA MATH.CMP16.NUM1$+1
02872  19C7             
02873  19C7  A9 00                 LDA #$00
02874  19C9  A5 82                 LDA MATH.CMP16.NUM2$
02875  19CB  A5 83                 LDA MATH.CMP16.NUM2$+1
02876  19CD             
02877  19CD  20 E4 28              JSR MATH.CMP16$ ; IF ALLOWCHRS = 0 THEN RETURN
02878  19D0                        ;BEQ @CHAROK
02879  19D0  D0 03                 BNE @DOCHECK
02880  19D2  4C E5 19              JMP @CHAROK
02881  19D5                        ;;JMP @CHAROK
02882  19D5             
02883  19D5             @DOCHECK
02884  19D5                        ; CONFIRM THAT THE CHARACTER TYPED IS ONE OF THE CHARACTERS ALLOWED
02885  19D5  A0 00                 LDY #$00
02886  19D7             @LOOP
02887  19D7  B1 EB                 LDA (CONSOLE.READGEN.ALLOWEDCHRS),Y
02888  19D9  C5 EE                 CMP CONSOLE.READGEN.CHAR
02889  19DB  F0 08                 BEQ @CHAROK
02890  19DD  C9 FF                 CMP #$FF
02891  19DF  F0 09                 BEQ @SKIPCHAR
02892  19E1  C8                    INY
02893  19E2  4C D7 19              JMP @LOOP
02894  19E5             @CHAROK
02895  19E5  A9 00                 LDA #$00
02896  19E7  4C EC 19              JMP @DONE
02897  19EA             @SKIPCHAR
02898  19EA  A9 01                 LDA #$01
02899  19EC             @DONE
02900  19EC  85 ED                 STA CONSOLE.READGEN.SKIPCHR
02901  19EE  60                    RTS
02902  19EF             
02903  19EF             CONSOLE.RESETBUFADDRESS 
02904  19EF             
02905  19EF                        ; FILL THE STRADDRESS WITH NULLS
02906  19EF  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
02907  19F1  85 73                 STA MEMORY.FILL.ADDRESS$
02908  19F3  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
02909  19F5  85 74                 STA MEMORY.FILL.ADDRESS$+1
02910  19F7  A9 FF                 LDA #CONSOLE.NULL$
02911  19F9  85 75                 STA MEMORY.FILL.VALUE$
02912  19FB  A6 EA                 LDX CONSOLE.READGEN.MAXLEN
02913  19FD  E8                    INX ; LENGTH = MAXLEN+1
02914  19FE  86 76                 STX MEMORY.FILL.LENGTH$
02915  1A00  20 03 10              JSR MEMORY.FILL$
02916  1A03             
02917  1A03  60                    RTS
02918  1A04             
02919  1A04             
02920  1A04             ;ALIGN $100
02921  1A04             ;ALIGN $100
02922  1A04             
02923  1A04             ; ZERO PAGE VARIBLES
02924  1A04             CONSOLE.GETKEY.SCANRESULT = $73  ; 8 BYTES
02925  1A04             CONSOLE.GETKEY.BUFFERNEW = $7B  ; 3 BYTES
02926  1A04             CONSOLE.GETKEY.KEYQUANTITY = $7E  ; 1 BYTE
02927  1A04             CONSOLE.GETKEY.NONALPHAFLAGX = $7F  ; 1 BYTE
02928  1A04             CONSOLE.GETKEY.NONALPHAFLAGY = $80  ; 1 BYTE
02929  1A04             CONSOLE.GETKEY.TEMPZP = $81  ; 1 BYTE
02930  1A04             CONSOLE.GETKEY.SIMULTANEOUSKEYS = $82  ; 1 BYTE
02931  1A04             
02932  1A04             ; OPERATIONAL VARIABLES
02933  1A04             CONSOLE.GETKEY.MAXKEYROLLOVER = 3
02934  1A04             
02935  1A04             ;CONSOLE.GETKEY.KEYBOARD
02936  1A04             ;    JMP CONSOLE.GETKEY.MAIN
02937  1A04             
02938  1A04             
02939  1A04                        ; ROUTINE FOR SCANNING A MATRIX ROW
02940  1A04             
02941  1A04             CONSOLE.GETKEY.KEYINROW 
02942  1A04  0A                    ASL
02943  1A05  B0 03                 BCS *+5
02944  1A07  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02945  1A0A             ;REPEAT 1, 7
02946  1A0A             ;        INX
02947  1A0A             ;        ASL
02948  1A0A             ;        BCS *+5
02949  1A0A             ;            JSR CONSOLE.GETKEY.KEYFOUND
02950  1A0A             ;ENDREPEAT
02951  1A0A  E8                    INX
02952  1A0B  0A                    ASL
02953  1A0C  B0 03                 BCS *+5
02954  1A0E  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02955  1A11  E8                    INX
02956  1A12  0A                    ASL
02957  1A13  B0 03                 BCS *+5
02958  1A15  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02959  1A18  E8                    INX
02960  1A19  0A                    ASL
02961  1A1A  B0 03                 BCS *+5
02962  1A1C  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02963  1A1F  E8                    INX
02964  1A20  0A                    ASL
02965  1A21  B0 03                 BCS *+5
02966  1A23  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02967  1A26  E8                    INX
02968  1A27  0A                    ASL
02969  1A28  B0 03                 BCS *+5
02970  1A2A  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02971  1A2D  E8                    INX
02972  1A2E  0A                    ASL
02973  1A2F  B0 03                 BCS *+5
02974  1A31  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02975  1A34  E8                    INX
02976  1A35  0A                    ASL
02977  1A36  B0 03                 BCS *+5
02978  1A38  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02979  1A3B  60                    RTS
02980  1A3C             
02981  1A3C             
02982  1A3C                        ; ROUTINE FOR HANDLING: KEY FOUND
02983  1A3C             
02984  1A3C             CONSOLE.GETKEY.KEYFOUND 
02985  1A3C  86 81                 STX CONSOLE.GETKEY.TEMPZP
02986  1A3E  C6 7E                 DEC CONSOLE.GETKEY.KEYQUANTITY
02987  1A40  30 0A                 BMI CONSOLE.GETKEY.OVERFLOW
02988  1A42  BC C0 1B              LDY CONSOLE.GETKEY.KEYTABLE,X
02989  1A45  A6 7E                 LDX CONSOLE.GETKEY.KEYQUANTITY
02990  1A47  94 7B                 STY CONSOLE.GETKEY.BUFFERNEW,X
02991  1A49  A6 81                 LDX CONSOLE.GETKEY.TEMPZP
02992  1A4B  60                    RTS
02993  1A4C             
02994  1A4C                        ; ROUTINE FOR HANDLING: OVERFLOW
02995  1A4C             
02996  1A4C             CONSOLE.GETKEY.OVERFLOW 
02997  1A4C  68                    PLA  ; DIRTY HACK TO HANDLE 2 LAYERS OF JSR
02998  1A4D  68                    PLA
02999  1A4E  68                    PLA
03000  1A4F  68                    PLA
03001  1A50                        ; DON'T MANIPULATE LAST LEGAL BUFFER AS THE ROUTINE WILL FIX ITSELF ONCE IT GETS VALID INPUT AGAIN.
03002  1A50  A9 03                 LDA #$03
03003  1A52  38                    SEC
03004  1A53  60                    RTS
03005  1A54             
03006  1A54             
03007  1A54                        ; EXIT ROUTINE FOR: NO ACTIVITY
03008  1A54             
03009  1A54             CONSOLE.GETKEY.NOACTIVITYDETECTED 
03010  1A54                        ; EXIT WITH A = #$01, CARRY SET & RESET BUFFEROLD.
03011  1A54  A9 00                 LDA #$00
03012  1A56  8D 08 18              STA CONSOLE.GETKEY.SIMULTANEOUSALPHANUMERICKEYSFLAG  ; CLEAR THE TOO MANY KEYS FLAG ONCE A "NO ACTIVITY" STATE IS DETECTED.
03013  1A59  8E 00 18              STX CONSOLE.GETKEY.BUFFEROLD
03014  1A5C  8E 01 18              STX CONSOLE.GETKEY.BUFFEROLD+1
03015  1A5F  8E 02 18              STX CONSOLE.GETKEY.BUFFEROLD+2
03016  1A62  38                    SEC
03017  1A63  A9 01                 LDA #$01
03018  1A65  60                    RTS
03019  1A66             
03020  1A66             
03021  1A66                        ; EXIT ROUTINE FOR CONTROL PORT ACTIVITY
03022  1A66             
03023  1A66             CONSOLE.GETKEY.CONTROLPORT 
03024  1A66                        ; EXIT WITH A = #$02, CARRY SET. KEEP BUFFEROLD TO VERIFY INPUT AFTER CONTROL PORT ACTIVITY CEASES
03025  1A66  38                    SEC
03026  1A67  A9 02                 LDA #$02
03027  1A69  60                    RTS
03028  1A6A             
03029  1A6A             
03030  1A6A                        ; CONFIGURE DATA DIRECTION REGISTERS
03031  1A6A             ;CONSOLE.GETKEY.MAIN
03032  1A6A             CONSOLE.GETKEY 
03033  1A6A  A2 FF                 LDX #$FF
03034  1A6C  8E 02 DC              STX $DC02       ; PORT A - OUTPUT
03035  1A6F  A0 00                 LDY #$00
03036  1A71  8C 03 DC              STY $DC03       ; PORT B - INPUT
03037  1A74  18                    CLC
03038  1A75             
03039  1A75                        ; CHECK FOR PORT ACTIVITY
03040  1A75             
03041  1A75  8C 00 DC              STY $DC00       ; CONNECT ALL KEYBOARD ROWS
03042  1A78  EC 01 DC              CPX $DC01
03043  1A7B  F0 D7                 BEQ CONSOLE.GETKEY.NOACTIVITYDETECTED
03044  1A7D             
03045  1A7D  AD 08 18              LDA CONSOLE.GETKEY.SIMULTANEOUSALPHANUMERICKEYSFLAG
03046  1A80                        ;BEQ !+
03047  1A80  F0 04                 BEQ CONSOLE.GETKEY.LOOP1
03048  1A82                        ; WAITING FOR ALL KEYS TO BE RELEASED BEFORE ACCEPTING NEW INPUT.
03049  1A82  A9 05                 LDA #$05
03050  1A84  38                    SEC
03051  1A85  60                    RTS
03052  1A86             ;!:
03053  1A86             CONSOLE.GETKEY.LOOP1 
03054  1A86             
03055  1A86                        ; CHECK FOR CONTROL PORT #1 ACTIVITY
03056  1A86             
03057  1A86  8E 00 DC              STX $DC00       ; DISCONNECT ALL KEYBOARD ROWS
03058  1A89  EC 01 DC              CPX $DC01       ; ONLY CONTROL PORT ACTIVITY WILL BE DETECTED
03059  1A8C  D0 D8                 BNE CONSOLE.GETKEY.CONTROLPORT
03060  1A8E             
03061  1A8E             
03062  1A8E                        ; SCAN KEYBOARD MATRIX
03063  1A8E             
03064  1A8E  A9 FE                 LDA #%11111110
03065  1A90  8D 00 DC              STA $DC00
03066  1A93  AC 01 DC              LDY $DC01
03067  1A96  84 7A                 STY CONSOLE.GETKEY.SCANRESULT+7
03068  1A98  38                    SEC
03069  1A99             ;REPEAT 1, 7, I
03070  1A99             ;RI = 7 - I
03071  1A99             ;        ROL
03072  1A99             ;        STA $DC00
03073  1A99             ;        LDY $DC01
03074  1A99             ;        STY CONSOLE.GETKEY.SCANRESULT+RI
03075  1A99             ;ENDREPEAT
03076  1A99  2A                    ROL
03077  1A9A  8D 00 DC              STA $DC00
03078  1A9D  AC 01 DC              LDY $DC01
03079  1AA0  84 79                 STY CONSOLE.GETKEY.SCANRESULT+6
03080  1AA2  2A                    ROL
03081  1AA3  8D 00 DC              STA $DC00
03082  1AA6  AC 01 DC              LDY $DC01
03083  1AA9  84 78                 STY CONSOLE.GETKEY.SCANRESULT+5
03084  1AAB  2A                    ROL
03085  1AAC  8D 00 DC              STA $DC00
03086  1AAF  AC 01 DC              LDY $DC01
03087  1AB2  84 77                 STY CONSOLE.GETKEY.SCANRESULT+4
03088  1AB4  2A                    ROL
03089  1AB5  8D 00 DC              STA $DC00
03090  1AB8  AC 01 DC              LDY $DC01
03091  1ABB  84 76                 STY CONSOLE.GETKEY.SCANRESULT+3
03092  1ABD  2A                    ROL
03093  1ABE  8D 00 DC              STA $DC00
03094  1AC1  AC 01 DC              LDY $DC01
03095  1AC4  84 75                 STY CONSOLE.GETKEY.SCANRESULT+2
03096  1AC6  2A                    ROL
03097  1AC7  8D 00 DC              STA $DC00
03098  1ACA  AC 01 DC              LDY $DC01
03099  1ACD  84 74                 STY CONSOLE.GETKEY.SCANRESULT+1
03100  1ACF  2A                    ROL
03101  1AD0  8D 00 DC              STA $DC00
03102  1AD3  AC 01 DC              LDY $DC01
03103  1AD6  84 73                 STY CONSOLE.GETKEY.SCANRESULT+0
03104  1AD8             
03105  1AD8                        ; CHECK FOR CONTROL PORT #1 ACTIVITY (AGAIN)
03106  1AD8             
03107  1AD8  8E 00 DC              STX $DC00       ; DISCONNECT ALL KEYBOARD ROWS
03108  1ADB  EC 01 DC              CPX $DC01       ; ONLY CONTROL PORT ACTIVITY WILL BE DETECTED
03109  1ADE  D0 86                 BNE CONSOLE.GETKEY.CONTROLPORT
03110  1AE0             
03111  1AE0             
03112  1AE0                        ; INITIALIZE BUFFER, FLAGS AND MAX KEYS
03113  1AE0             
03114  1AE0                        ; RESET CURRENT READ BUFFER
03115  1AE0  86 7B                 STX CONSOLE.GETKEY.BUFFERNEW
03116  1AE2  86 7C                 STX CONSOLE.GETKEY.BUFFERNEW+1
03117  1AE4  86 7D                 STX CONSOLE.GETKEY.BUFFERNEW+2
03118  1AE6             
03119  1AE6                        ; RESET NON-ALPHANUMERIC FLAG
03120  1AE6  E8                    INX
03121  1AE7  86 80                 STX CONSOLE.GETKEY.NONALPHAFLAGY
03122  1AE9             
03123  1AE9                        ; SET MAX KEYS ALLOWED BEFORE IGNORING RESULT
03124  1AE9  A9 03                 LDA #CONSOLE.GETKEY.MAXKEYROLLOVER
03125  1AEB  85 7E                 STA CONSOLE.GETKEY.KEYQUANTITY
03126  1AED             
03127  1AED                        ; COUNTER TO CHECK FOR SIMULTANEOUS ALPHANUMERIC KEY-PRESSES
03128  1AED  A9 FE                 LDA #$FE
03129  1AEF  85 82                 STA CONSOLE.GETKEY.SIMULTANEOUSKEYS
03130  1AF1             
03131  1AF1             
03132  1AF1                        ; CHECK AND FLAG NON ALPHANUMERIC KEYS
03133  1AF1             
03134  1AF1  A5 79                 LDA CONSOLE.GETKEY.SCANRESULT+6
03135  1AF3  49 FF                 EOR #$FF
03136  1AF5  29 80                 AND #%10000000     ; LEFT SHIFT
03137  1AF7  4A                    LSR
03138  1AF8  85 80                 STA CONSOLE.GETKEY.NONALPHAFLAGY
03139  1AFA  A5 73                 LDA CONSOLE.GETKEY.SCANRESULT+0
03140  1AFC  49 FF                 EOR #$FF
03141  1AFE  29 A4                 AND #%10100100     ; RUN STOP - C= - CTRL
03142  1B00  05 80                 ORA CONSOLE.GETKEY.NONALPHAFLAGY
03143  1B02  85 80                 STA CONSOLE.GETKEY.NONALPHAFLAGY
03144  1B04  A5 74                 LDA CONSOLE.GETKEY.SCANRESULT+1
03145  1B06  49 FF                 EOR #$FF
03146  1B08  29 18                 AND #%00011000     ; RIGHT SHIFT - CLR HOME
03147  1B0A  05 80                 ORA CONSOLE.GETKEY.NONALPHAFLAGY
03148  1B0C  85 80                 STA CONSOLE.GETKEY.NONALPHAFLAGY
03149  1B0E             
03150  1B0E  A5 7A                 LDA CONSOLE.GETKEY.SCANRESULT+7  ; THE REST
03151  1B10  49 FF                 EOR #$FF
03152  1B12  85 7F                 STA CONSOLE.GETKEY.NONALPHAFLAGX
03153  1B14             
03154  1B14             
03155  1B14                        ; CHECK FOR PRESSED KEY(S)
03156  1B14             
03157  1B14  A5 7A                 LDA CONSOLE.GETKEY.SCANRESULT+7
03158  1B16  C9 FF                 CMP #$FF
03159  1B18  F0 03                 BEQ *+5
03160  1B1A  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03161  1B1D             ;REPEAT 1,7,I
03162  1B1D             ;RI = 7 - I
03163  1B1D             ;        LDX #I*8
03164  1B1D             ;        LDA CONSOLE.GETKEY.SCANRESULT+RI
03165  1B1D             ;        BEQ *+5
03166  1B1D             ;            JSR CONSOLE.GETKEY.KEYINROW
03167  1B1D             ;ENDREPEAT
03168  1B1D  A2 08                 LDX #8
03169  1B1F  A5 79                 LDA CONSOLE.GETKEY.SCANRESULT+6
03170  1B21  F0 03                 BEQ *+5
03171  1B23  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03172  1B26  A2 10                 LDX #16
03173  1B28  A5 78                 LDA CONSOLE.GETKEY.SCANRESULT+5
03174  1B2A  F0 03                 BEQ *+5
03175  1B2C  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03176  1B2F  A2 18                 LDX #24
03177  1B31  A5 77                 LDA CONSOLE.GETKEY.SCANRESULT+4
03178  1B33  F0 03                 BEQ *+5
03179  1B35  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03180  1B38  A2 20                 LDX #32
03181  1B3A  A5 76                 LDA CONSOLE.GETKEY.SCANRESULT+3
03182  1B3C  F0 03                 BEQ *+5
03183  1B3E  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03184  1B41  A2 28                 LDX #40
03185  1B43  A5 75                 LDA CONSOLE.GETKEY.SCANRESULT+2
03186  1B45  F0 03                 BEQ *+5
03187  1B47  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03188  1B4A  A2 30                 LDX #48
03189  1B4C  A5 74                 LDA CONSOLE.GETKEY.SCANRESULT+1
03190  1B4E  F0 03                 BEQ *+5
03191  1B50  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03192  1B53  A2 38                 LDX #56
03193  1B55  A5 73                 LDA CONSOLE.GETKEY.SCANRESULT+0
03194  1B57  F0 03                 BEQ *+5
03195  1B59  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03196  1B5C             
03197  1B5C                        ; KEY SCAN COMPLETED
03198  1B5C             
03199  1B5C                        ; PUT ANY NEW KEY (NOT IN OLD SCAN) INTO BUFFER
03200  1B5C  A2 02                 LDX #CONSOLE.GETKEY.MAXKEYROLLOVER-1
03201  1B5E                        ;!:
03202  1B5E             CONSOLE.GETKEY.LOOP2 
03203  1B5E  B5 7B                 LDA CONSOLE.GETKEY.BUFFERNEW,X
03204  1B60  C9 FF                 CMP #$FF
03205  1B62  F0 1C                 BEQ CONSOLE.GETKEY.EXIST        ; HANDLE 'NULL' VALUES
03206  1B64  CD 00 18              CMP CONSOLE.GETKEY.BUFFEROLD
03207  1B67  F0 17                 BEQ CONSOLE.GETKEY.EXIST
03208  1B69  CD 01 18              CMP CONSOLE.GETKEY.BUFFEROLD+1
03209  1B6C  F0 12                 BEQ CONSOLE.GETKEY.EXIST
03210  1B6E  CD 02 18              CMP CONSOLE.GETKEY.BUFFEROLD+2
03211  1B71  F0 0D                 BEQ CONSOLE.GETKEY.EXIST
03212  1B73                        ; NEW KEY DETECTED
03213  1B73  EE 07 18              INC CONSOLE.GETKEY.BUFFERQUANTITY
03214  1B76  AC 07 18              LDY CONSOLE.GETKEY.BUFFERQUANTITY
03215  1B79  99 03 18              STA CONSOLE.GETKEY.BUFFER,Y
03216  1B7C                        ; KEEP TRACK OF HOW MANY NEW ALPHANUMERIC KEYS ARE DETECTED
03217  1B7C  E6 82                 INC CONSOLE.GETKEY.SIMULTANEOUSKEYS
03218  1B7E  F0 34                 BEQ CONSOLE.GETKEY.TOOMANYNEWKEYS
03219  1B80             CONSOLE.GETKEY.EXIST 
03220  1B80  CA                    DEX
03221  1B81                        ;BPL !-
03222  1B81  10 DB                 BPL CONSOLE.GETKEY.LOOP2
03223  1B83             
03224  1B83                        ; ANYTHING IN BUFFER?
03225  1B83  AC 07 18              LDY CONSOLE.GETKEY.BUFFERQUANTITY
03226  1B86  30 15                 BMI CONSOLE.GETKEY.BUFFEREMPTY
03227  1B88                        ; YES: THEN RETURN IT AND TIDY UP THE BUFFER
03228  1B88  CE 07 18              DEC CONSOLE.GETKEY.BUFFERQUANTITY
03229  1B8B  AD 03 18              LDA CONSOLE.GETKEY.BUFFER
03230  1B8E  AE 04 18              LDX CONSOLE.GETKEY.BUFFER+1
03231  1B91  8E 03 18              STX CONSOLE.GETKEY.BUFFER
03232  1B94  AE 05 18              LDX CONSOLE.GETKEY.BUFFER+2
03233  1B97  8E 04 18              STX CONSOLE.GETKEY.BUFFER+1
03234  1B9A  4C 9F 1B              JMP CONSOLE.GETKEY.RETURN
03235  1B9D             
03236  1B9D             CONSOLE.GETKEY.BUFFEREMPTY ; NO NEW ALPHANUMERIC KEYS TO HANDLE.
03237  1B9D  A9 FF                 LDA #$FF
03238  1B9F             
03239  1B9F             CONSOLE.GETKEY.RETURN ; A IS PRESET
03240  1B9F  18                    CLC
03241  1BA0                        ; COPY BUFFERNEW TO BUFFEROLD
03242  1BA0  A6 7B                 LDX CONSOLE.GETKEY.BUFFERNEW
03243  1BA2  8E 00 18              STX CONSOLE.GETKEY.BUFFEROLD
03244  1BA5  A6 7C                 LDX CONSOLE.GETKEY.BUFFERNEW+1
03245  1BA7  8E 01 18              STX CONSOLE.GETKEY.BUFFEROLD+1
03246  1BAA  A6 7D                 LDX CONSOLE.GETKEY.BUFFERNEW+2
03247  1BAC  8E 02 18              STX CONSOLE.GETKEY.BUFFEROLD+2
03248  1BAF                        ; HANDLE NON ALPHANUMERIC KEYS
03249  1BAF  A6 7F                 LDX CONSOLE.GETKEY.NONALPHAFLAGX
03250  1BB1  A4 80                 LDY CONSOLE.GETKEY.NONALPHAFLAGY
03251  1BB3  60                    RTS
03252  1BB4             
03253  1BB4             CONSOLE.GETKEY.TOOMANYNEWKEYS 
03254  1BB4  38                    SEC
03255  1BB5  A9 FF                 LDA #$FF
03256  1BB7  8D 07 18              STA CONSOLE.GETKEY.BUFFERQUANTITY
03257  1BBA  8D 08 18              STA CONSOLE.GETKEY.SIMULTANEOUSALPHANUMERICKEYSFLAG
03258  1BBD  A9 04                 LDA #$04
03259  1BBF  60                    RTS
03260  1BC0             
03261  1BC0             CONSOLE.GETKEY.KEYTABLE 
03262  1BC0  FF FF FF              BYTE $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF  ; CRSR DOWN, F5, F3, F1, F7, CRSR RIGHT, RETURN, INST DEL
03263  1BC8  FF 05 13              BYTE $FF, $05, $13, $1A, $34, $01, $17, $33  ; LEFT SHIFT, "E", "S", "Z", "4", "A", "W", "3"
03264  1BD0  18 14 06              BYTE $18, $14, $06, $03, $36, $04, $12, $35  ; "X", "T", "F", "C", "6", "D", "R", "5"
03265  1BD8  16 15 08              BYTE $16, $15, $08, $02, $38, $07, $19, $37  ; "V", "U", "H", "B", "8", "G", "Y", "7"
03266  1BE0  0E 0F 0B              BYTE $0E, $0F, $0B, $0D, $30, $0A, $09, $39  ; "N", "O" (OSCAR), "K", "M", "0" (ZERO), "J", "I", "9"
03267  1BE8  2C 00 3A              BYTE $2C, $00, $3A, $2E, $2D, $0C, $10, $2B  ; ",", "@", ":", ".", "-", "L", "P", "+"
03268  1BF0  2F 1E 3D              BYTE $2F, $1E, $3D, $FF, $FF, $3B, $2A, $1C  ; "/", "^", "=", RIGHT SHIFT, HOME, ";", "*", "£"
03269  1BF8  FF 11 FF              BYTE $FF, $11, $FF, $20, $32, $FF, $1F, $31  ; RUN STOP, "Q", "C=" (CMD), " " (SPC), "2", "CTRL", "<-", "1"
03270  1C00             
03271  1C00             
03272  1C00             
03273  1C00             
03274  1C00             
03275  1C00             
03276  1C00             ALIGN      $100
03277  1C00             
03278  1C00             CONVERT.HEX2DEC.RESULT = $E4
03279  1C00             
03280  1C00             CONVERT.HEX2DEC8.VALUE = $E0 ; 1 BYTE
03281  1C00             CONVERT.HEX2DEC8.RESULT = $E4 ; 3 BYTES
03282  1C00             
03283  1C00             CONVERT.HEX2DEC8 
03284  1C00                        ; CONVERTS 3 DIGITS (8 BIT VALUES HAVE MAX. 3 DECIMAL DIGITS)
03285  1C00  A2 00                 LDX #0
03286  1C02             @L3
03287  1C02  20 0D 1C              JSR @DIV10_8
03288  1C05  95 E4                 STA CONVERT.HEX2DEC8.RESULT,X
03289  1C07  E8                    INX
03290  1C08  E0 0A                 CPX #10
03291  1C0A  D0 F6                 BNE @L3
03292  1C0C  60                    RTS
03293  1C0D             
03294  1C0D                        ; DIVIDES A 8 BIT VALUE BY 10
03295  1C0D                        ; REMAINDER IS RETURNED IN AKKU
03296  1C0D             @DIV10_8
03297  1C0D  A0 08                 LDY #8         ; 8 BITS
03298  1C0F  A9 00                 LDA #0
03299  1C11  18                    CLC
03300  1C12             @L4        
03301  1C12  2A                    ROL
03302  1C13  C9 0A                 CMP #10
03303  1C15  90 02                 BCC @SKIP
03304  1C17  E9 0A                 SBC #10
03305  1C19             @SKIP      
03306  1C19  26 E0                 ROL CONVERT.HEX2DEC8.VALUE
03307  1C1B  88                    DEY
03308  1C1C  10 F4                 BPL @L4
03309  1C1E  60                    RTS
03310  1C1F             
03311  1C1F             CONVERT.HEX2DEC16.VALUE = $E0 ; 2 BYTES
03312  1C1F             CONVERT.HEX2DEC16.RESULT = $E4 ; 5 BYTES
03313  1C1F             
03314  1C1F             CONVERT.HEX2DEC16 
03315  1C1F                        ; CONVERTS 5 DIGITS (16 BIT VALUES HAVE MAX. 5 DECIMAL DIGITS)
03316  1C1F  A2 00                 LDX #0
03317  1C21             @L3
03318  1C21  20 2C 1C              JSR @DIV10_16
03319  1C24  95 E4                 STA CONVERT.HEX2DEC16.RESULT,X
03320  1C26  E8                    INX
03321  1C27  E0 0A                 CPX #10
03322  1C29  D0 F6                 BNE @L3
03323  1C2B  60                    RTS
03324  1C2C             
03325  1C2C                        ; DIVIDES A 16 BIT VALUE BY 10
03326  1C2C                        ; REMAINDER IS RETURNED IN AKKU
03327  1C2C             @DIV10_16
03328  1C2C  A0 10                 LDY #16         ; 16 BITS
03329  1C2E  A9 00                 LDA #0
03330  1C30  18                    CLC
03331  1C31             @L4        
03332  1C31  2A                    ROL
03333  1C32  C9 0A                 CMP #10
03334  1C34  90 02                 BCC @SKIP
03335  1C36  E9 0A                 SBC #10
03336  1C38             @SKIP      
03337  1C38  26 E0                 ROL CONVERT.HEX2DEC16.VALUE
03338  1C3A  26 E1                 ROL CONVERT.HEX2DEC16.VALUE+1
03339  1C3C  88                    DEY
03340  1C3D  10 F2                 BPL @L4
03341  1C3F  60                    RTS
03342  1C40             
03343  1C40             CONVERT.HEX2DEC32.VALUE = $E0 ; 4 BYTES
03344  1C40             CONVERT.HEX2DEC32.RESULT = $E4 ; 10 BYTES
03345  1C40             
03346  1C40             CONVERT.HEX2DEC32 
03347  1C40                        ; CONVERTS 10 DIGITS (32 BIT VALUES HAVE MAX. 10 DECIMAL DIGITS)
03348  1C40  A2 00                 LDX #0
03349  1C42             @L3
03350  1C42  20 4D 1C              JSR @DIV10_32
03351  1C45  95 E4                 STA CONVERT.HEX2DEC32.RESULT,X
03352  1C47  E8                    INX
03353  1C48  E0 0A                 CPX #10
03354  1C4A  D0 F6                 BNE @L3
03355  1C4C  60                    RTS
03356  1C4D             
03357  1C4D                        ; DIVIDES A 32 BIT VALUE BY 10
03358  1C4D                        ; REMAINDER IS RETURNED IN AKKU
03359  1C4D             @DIV10_32
03360  1C4D  A0 20                 LDY #32         ; 32 BITS
03361  1C4F  A9 00                 LDA #0
03362  1C51  18                    CLC
03363  1C52             @L4        
03364  1C52  2A                    ROL
03365  1C53  C9 0A                 CMP #10
03366  1C55  90 02                 BCC @SKIP
03367  1C57  E9 0A                 SBC #10
03368  1C59             @SKIP      
03369  1C59  26 E0                 ROL CONVERT.HEX2DEC32.VALUE
03370  1C5B  26 E1                 ROL CONVERT.HEX2DEC32.VALUE+1
03371  1C5D  26 E2                 ROL CONVERT.HEX2DEC32.VALUE+2
03372  1C5F  26 E3                 ROL CONVERT.HEX2DEC32.VALUE+3
03373  1C61  88                    DEY
03374  1C62  10 EE                 BPL @L4
03375  1C64  60                    RTS
03376  1C65             
03377  1C65             ;CONVERT.DEC2HEX8
03378  1C65             ;  LDA A
03379  1C65             ;  JSR MULT10
03380  1C65             ;  JSR MULT10   ;X100
03381  1C65             ;  STA TMP0
03382  1C65             ;  LDA B
03383  1C65             ;  JSR MULT10   ;X10
03384  1C65             ;  STA TMP1
03385  1C65             ;  LDA C
03386  1C65             ;  STA TMP2     ;X1
03387  1C65             ;
03388  1C65             ;  CLC
03389  1C65             ;  LDA #$00
03390  1C65             ;  ADC TMP0
03391  1C65             ;  ADC TMP1
03392  1C65             ;  ADC TMP2
03393  1C65             ;  RTS     ;CARRY WILL BE SET IF RESULT WAS > 255
03394  1C65             
03395  1C65             
03396  1C65             ;MULT10  ASL         ;MULTIPLY BY 2
03397  1C65             ;        STA TEMP10  ;TEMP STORE IN TEMP
03398  1C65             ;        ASL         ;AGAIN MULTIPLY BY 2 (*4)
03399  1C65             ;        ASL         ;AGAIN MULTIPLY BY 2 (*8)
03400  1C65             ;        CLC
03401  1C65             ;        ADC TEMP10  ;AS RESULT, A = X*8 + X*2
03402  1C65             ;        RTS
03403  1C65             
03404  1C65             
03405  1C65             CONVERT.DEC2HEX.VALUE = $E4
03406  1C65             CONVERT.DEC2HEX.LEN = $2A
03407  1C65             
03408  1C65             CONVERT.DEC2HEX8.VALUE = $E4 ; 3 BYTES
03409  1C65             CONVERT.DEC2HEX8.RESULT = $E0 ; 1 BYTE
03410  1C65             CONVERT.DEC2HEX8.INT = $FB ; 1 BYTE
03411  1C65             CONVERT.DEC2HEX8.LEN = $2A ; 1 BYTE
03412  1C65             CONVERT.DEC2HEX8.OFFSET = $52 ; 1 BYTE
03413  1C65             CONVERT.DEC2HEX8 
03414  1C65                        ; NEED TO SET CONVERT.DEC2HEX8.VALUE AND CONVERT.DEC2HEX8.LEN
03415  1C65                        
03416  1C65                        ; SET THE DEFAULT VALUE
03417  1C65  A9 00                 LDA #$00
03418  1C67  85 E0                 STA CONVERT.DEC2HEX8.RESULT
03419  1C69  85 E1                 STA CONVERT.DEC2HEX8.RESULT+1
03420  1C6B             
03421  1C6B                        ; CHECK THE LENGTH
03422  1C6B  A5 2A                 LDA CONVERT.DEC2HEX8.LEN
03423  1C6D  C9 00                 CMP #$00
03424  1C6F  D0 01                 BNE @LENOK
03425  1C71  60                    RTS
03426  1C72             @LENOK
03427  1C72                        ; MULTIPLY EACH CHARACTER BY 10^(DIGIT-1) AND ADD TO THE RESULT
03428  1C72             
03429  1C72  A2 00                 LDX #$00
03430  1C74             @LOOP
03431  1C74  B5 E4                 LDA CONVERT.DEC2HEX8.VALUE,X
03432  1C76  C9 30                 CMP #$30 ; SKIP IF THE CHARACTER = '0'
03433  1C78  D0 03                 BNE @DIGITOK
03434  1C7A  4C B0 1C              JMP @NEXTDIGIT
03435  1C7D             @DIGITOK
03436  1C7D  38                    SEC ; DO NOT SUBTRACT ANY ADDITIONAL 1S
03437  1C7E  E9 30                 SBC #$30 ; GET THE NUMBER VALUE OF THE CHARACTER (CHAR - #30)
03438  1C80             
03439  1C80  85 FB                 STA CONVERT.DEC2HEX8.INT
03440  1C82             
03441  1C82                        ; Y = LEN - OFFSET - 1
03442  1C82  86 52                 STX CONVERT.DEC2HEX8.OFFSET
03443  1C84  A5 2A                 LDA CONVERT.DEC2HEX8.LEN
03444  1C86  18                    CLC ; SUBTRACT AN ADDITIONAL 1
03445  1C87  E5 52                 SBC CONVERT.DEC2HEX8.OFFSET
03446  1C89  A8                    TAY
03447  1C8A             
03448  1C8A                        ; MULTIPLY AFFECTS X AND Y
03449  1C8A  8A                    TXA
03450  1C8B  48                    PHA
03451  1C8C             
03452  1C8C             @FACTOR
03453  1C8C  C0 00                 CPY #$00
03454  1C8E  F0 17                 BEQ @SKIPFACTOR
03455  1C90             
03456  1C90  A5 FB                 LDA CONVERT.DEC2HEX8.INT
03457  1C92  85 80                 STA MATH.MULTIPLY8.FACTOR1$
03458  1C94             
03459  1C94  A9 0A                 LDA #$0A
03460  1C96  85 82                 STA MATH.MULTIPLY8.FACTOR2$
03461  1C98             
03462  1C98  98                    TYA
03463  1C99  48                    PHA
03464  1C9A  20 48 29              JSR MATH.MULTIPLY8$
03465  1C9D  68                    PLA
03466  1C9E  A8                    TAY
03467  1C9F             
03468  1C9F  A5 83                 LDA MATH.MULTIPLY8.PRODUCT$
03469  1CA1  85 FB                 STA CONVERT.DEC2HEX8.INT
03470  1CA3             
03471  1CA3  88                    DEY ; Y = Y - 1
03472  1CA4  4C 8C 1C              JMP @FACTOR
03473  1CA7             
03474  1CA7             @SKIPFACTOR 
03475  1CA7             
03476  1CA7                        ; RESTORE X AND Y
03477  1CA7  68                    PLA
03478  1CA8  AA                    TAX
03479  1CA9             
03480  1CA9  A5 E0                 LDA CONVERT.DEC2HEX8.RESULT
03481  1CAB  18                    CLC
03482  1CAC  65 FB                 ADC CONVERT.DEC2HEX8.INT
03483  1CAE  85 E0                 STA CONVERT.DEC2HEX8.RESULT
03484  1CB0             
03485  1CB0             @NEXTDIGIT 
03486  1CB0  E8                    INX ; X = X + 1
03487  1CB1  E4 2A                 CPX CONVERT.DEC2HEX8.LEN
03488  1CB3  F0 03                 BEQ @END
03489  1CB5  4C 74 1C              JMP @LOOP
03490  1CB8             
03491  1CB8             @END
03492  1CB8             
03493  1CB8  60                    RTS
03494  1CB9             
03495  1CB9             ;ALIGN $100
03496  1CB9             
03497  1CB9             CONVERT.DEC2HEX16.VALUE = $E4 ; 5 BYTES
03498  1CB9             CONVERT.DEC2HEX16.RESULT = $E0 ; 2 BYTES
03499  1CB9             CONVERT.DEC2HEX16.INT = $FB ; 2 BYTES
03500  1CB9             CONVERT.DEC2HEX16.LEN = $2A ; 1 BYTE
03501  1CB9             CONVERT.DEC2HEX16.OFFSET = $52 ; 1 BYTE
03502  1CB9             CONVERT.DEC2HEX16 
03503  1CB9                        ; NEED TO SET CONVERT.DEC2HEX16.VALUE AND CONVERT.DEC2HEX16.LEN
03504  1CB9                        
03505  1CB9                        ; SET THE DEFAULT VALUE
03506  1CB9  A9 00                 LDA #$00
03507  1CBB  85 E0                 STA CONVERT.DEC2HEX16.RESULT
03508  1CBD  85 E1                 STA CONVERT.DEC2HEX16.RESULT+1
03509  1CBF             
03510  1CBF                        ; CHECK THE LENGTH
03511  1CBF  A5 2A                 LDA CONVERT.DEC2HEX16.LEN
03512  1CC1  C9 00                 CMP #$00
03513  1CC3  D0 01                 BNE @LENOK
03514  1CC5  60                    RTS
03515  1CC6             @LENOK
03516  1CC6             
03517  1CC6                        ;LDA #$05
03518  1CC6                        ;STA CONVERT.DEC2HEX16.LEN
03519  1CC6             
03520  1CC6                        ; MULTIPLY EACH CHARACTER BY 10^(DIGIT-1) AND ADD TO THE RESULT
03521  1CC6             
03522  1CC6  A2 00                 LDX #$00
03523  1CC8             @LOOP
03524  1CC8  B5 E4                 LDA CONVERT.DEC2HEX16.VALUE,X
03525  1CCA  C9 30                 CMP #$30 ; SKIP IF THE CHARACTER = '0'
03526  1CCC  D0 03                 BNE @DIGITOK
03527  1CCE  4C 24 1D              JMP @NEXTDIGIT
03528  1CD1             @DIGITOK
03529  1CD1  38                    SEC ; DO NOT SUBTRACT ANY ADDITIONAL 1S
03530  1CD2  E9 30                 SBC #$30 ; GET THE NUMBER VALUE OF THE CHARACTER (CHAR - #30)
03531  1CD4             
03532  1CD4  85 FB                 STA CONVERT.DEC2HEX16.INT
03533  1CD6  A9 00                 LDA #$00
03534  1CD8  85 FC                 STA CONVERT.DEC2HEX16.INT+1
03535  1CDA             
03536  1CDA                        ; Y = LEN - OFFSET - 1
03537  1CDA  86 52                 STX CONVERT.DEC2HEX16.OFFSET
03538  1CDC  A5 2A                 LDA CONVERT.DEC2HEX16.LEN
03539  1CDE  18                    CLC ; SUBTRACT AN ADDITIONAL 1
03540  1CDF  E5 52                 SBC CONVERT.DEC2HEX16.OFFSET
03541  1CE1  A8                    TAY
03542  1CE2             
03543  1CE2                        ; MULTIPLY AFFECTS X
03544  1CE2  8A                    TXA
03545  1CE3  48                    PHA
03546  1CE4             
03547  1CE4             @FACTOR
03548  1CE4  C0 00                 CPY #$00
03549  1CE6  F0 1F                 BEQ @SKIPFACTOR
03550  1CE8             
03551  1CE8  A5 FB                 LDA CONVERT.DEC2HEX16.INT
03552  1CEA  85 80                 STA MATH.MULTIPLY16.FACTOR1$
03553  1CEC  A5 FC                 LDA CONVERT.DEC2HEX16.INT+1
03554  1CEE  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
03555  1CF0             
03556  1CF0  A9 0A                 LDA #$0A
03557  1CF2  85 82                 STA MATH.MULTIPLY16.FACTOR2$
03558  1CF4  A9 00                 LDA #$00
03559  1CF6  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
03560  1CF8             
03561  1CF8  20 67 29              JSR MATH.MULTIPLY16$
03562  1CFB             
03563  1CFB  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
03564  1CFD  85 FB                 STA CONVERT.DEC2HEX16.INT
03565  1CFF  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
03566  1D01  85 FC                 STA CONVERT.DEC2HEX16.INT+1
03567  1D03             
03568  1D03  88                    DEY ; Y = Y - 1
03569  1D04  4C E4 1C              JMP @FACTOR
03570  1D07             
03571  1D07             @SKIPFACTOR 
03572  1D07             
03573  1D07                        ; RESTORE X
03574  1D07  68                    PLA
03575  1D08  AA                    TAX
03576  1D09             
03577  1D09  A5 E0                 LDA CONVERT.DEC2HEX16.RESULT
03578  1D0B  85 80                 STA MATH.ADD16.ADDEND1$
03579  1D0D  A5 E1                 LDA CONVERT.DEC2HEX16.RESULT+1
03580  1D0F  85 81                 STA MATH.ADD16.ADDEND1$+1
03581  1D11             
03582  1D11  A5 FB                 LDA CONVERT.DEC2HEX16.INT
03583  1D13  85 82                 STA MATH.ADD16.ADDEND2$
03584  1D15  A5 FC                 LDA CONVERT.DEC2HEX16.INT+1
03585  1D17  85 83                 STA MATH.ADD16.ADDEND2$+1
03586  1D19             
03587  1D19  20 00 28              JSR MATH.ADD16$ ; RESULT = RESULT + INT
03588  1D1C             
03589  1D1C  A5 84                 LDA MATH.ADD16.SUM$
03590  1D1E  85 E0                 STA CONVERT.DEC2HEX16.RESULT
03591  1D20  A5 85                 LDA MATH.ADD16.SUM$+1
03592  1D22  85 E1                 STA CONVERT.DEC2HEX16.RESULT+1
03593  1D24             
03594  1D24             @NEXTDIGIT 
03595  1D24  E8                    INX ; X = X + 1
03596  1D25  E4 2A                 CPX CONVERT.DEC2HEX16.LEN
03597  1D27  F0 03                 BEQ @END
03598  1D29  4C C8 1C              JMP @LOOP
03599  1D2C             
03600  1D2C             @END
03601  1D2C             
03602  1D2C  60                    RTS
03603  1D2D             
03604  1D2D             CONVERT.DEC2HEX32.VALUE = $E4 ; 10 BYTES
03605  1D2D             CONVERT.DEC2HEX32.RESULT = $E0 ; 4 BYTES
03606  1D2D             CONVERT.DEC2HEX32.INT = $FB ; 4 BYTES
03607  1D2D             CONVERT.DEC2HEX32.LEN = $2A ; 1 BYTE
03608  1D2D             CONVERT.DEC2HEX32.OFFSET = $52 ; 1 BYTE
03609  1D2D             CONVERT.DEC2HEX32 
03610  1D2D                        ; NEED TO SET CONVERT.DEC2HEX32.VALUE AND CONVERT.DEC2HEX32.LEN
03611  1D2D                        
03612  1D2D                        ; SET THE DEFAULT VALUE
03613  1D2D  A9 00                 LDA #$00
03614  1D2F  85 E0                 STA CONVERT.DEC2HEX32.RESULT
03615  1D31  85 E1                 STA CONVERT.DEC2HEX32.RESULT+1
03616  1D33  85 E2                 STA CONVERT.DEC2HEX32.RESULT+2
03617  1D35  85 E3                 STA CONVERT.DEC2HEX32.RESULT+3
03618  1D37             
03619  1D37                        ; CHECK THE LENGTH
03620  1D37  A5 2A                 LDA CONVERT.DEC2HEX32.LEN
03621  1D39  C9 00                 CMP #$00
03622  1D3B  D0 01                 BNE @LENOK
03623  1D3D  60                    RTS
03624  1D3E             @LENOK
03625  1D3E             
03626  1D3E                        ; MULTIPLY EACH CHARACTER BY 10^(DIGIT-1) AND ADD TO THE RESULT
03627  1D3E             
03628  1D3E  A2 00                 LDX #$00
03629  1D40             @LOOP
03630  1D40  B5 E4                 LDA CONVERT.DEC2HEX32.VALUE,X ; GET THE CURRENT CHARACTER
03631  1D42  C9 30                 CMP #$30 ; SKIP IF THE CHARACTER = '0'
03632  1D44  D0 03                 BNE @DIGITOK
03633  1D46  4C CC 1D              JMP @NEXTDIGIT
03634  1D49             @DIGITOK
03635  1D49  38                    SEC ; DO NOT SUBTRACT ANY ADDITIONAL 1S
03636  1D4A  E9 30                 SBC #$30 ; GET THE NUMBER VALUE OF THE CHARACTER (CHAR - #30)
03637  1D4C             
03638  1D4C  85 FB                 STA CONVERT.DEC2HEX32.INT
03639  1D4E  A9 00                 LDA #$00
03640  1D50  85 FC                 STA CONVERT.DEC2HEX32.INT+1
03641  1D52  85 FD                 STA CONVERT.DEC2HEX32.INT+2
03642  1D54  85 FE                 STA CONVERT.DEC2HEX32.INT+3
03643  1D56             
03644  1D56                        ; Y = LEN - OFFSET - 1
03645  1D56  86 52                 STX CONVERT.DEC2HEX32.OFFSET
03646  1D58  A5 2A                 LDA CONVERT.DEC2HEX32.LEN
03647  1D5A  18                    CLC ; SUBTRACT AN ADDITIONAL 1
03648  1D5B  E5 52                 SBC CONVERT.DEC2HEX32.OFFSET
03649  1D5D  A8                    TAY
03650  1D5E             
03651  1D5E                        ; MULTIPLY AFFECTS X
03652  1D5E  8A                    TXA
03653  1D5F  48                    PHA
03654  1D60             
03655  1D60             @FACTOR
03656  1D60  C0 00                 CPY #$00
03657  1D62  F0 33                 BEQ @SKIPFACTOR
03658  1D64             
03659  1D64  A5 FB                 LDA CONVERT.DEC2HEX32.INT
03660  1D66  85 80                 STA MATH.MULTIPLY32.FACTOR1$
03661  1D68  A5 FC                 LDA CONVERT.DEC2HEX32.INT+1
03662  1D6A  85 81                 STA MATH.MULTIPLY32.FACTOR1$+1
03663  1D6C  A5 FD                 LDA CONVERT.DEC2HEX32.INT+2
03664  1D6E  85 82                 STA MATH.MULTIPLY32.FACTOR1$+2
03665  1D70  A5 FE                 LDA CONVERT.DEC2HEX32.INT+3
03666  1D72  85 83                 STA MATH.MULTIPLY32.FACTOR1$+3
03667  1D74             
03668  1D74  A9 0A                 LDA #$0A
03669  1D76  85 84                 STA MATH.MULTIPLY32.FACTOR2$
03670  1D78  A9 00                 LDA #$00
03671  1D7A  85 85                 STA MATH.MULTIPLY32.FACTOR2$+1
03672  1D7C  85 86                 STA MATH.MULTIPLY32.FACTOR2$+2
03673  1D7E  85 87                 STA MATH.MULTIPLY32.FACTOR2$+3
03674  1D80             
03675  1D80  20 8D 29              JSR MATH.MULTIPLY32$
03676  1D83             
03677  1D83  A5 88                 LDA MATH.MULTIPLY32.PRODUCT$
03678  1D85  85 FB                 STA CONVERT.DEC2HEX32.INT
03679  1D87  A5 89                 LDA MATH.MULTIPLY32.PRODUCT$+1
03680  1D89  85 FC                 STA CONVERT.DEC2HEX32.INT+1
03681  1D8B  A5 8A                 LDA MATH.MULTIPLY32.PRODUCT$+2
03682  1D8D  85 FD                 STA CONVERT.DEC2HEX32.INT+2
03683  1D8F  A5 8B                 LDA MATH.MULTIPLY32.PRODUCT$+3
03684  1D91  85 FE                 STA CONVERT.DEC2HEX32.INT+3
03685  1D93             
03686  1D93  88                    DEY ; Y = Y - 1
03687  1D94  4C 60 1D              JMP @FACTOR
03688  1D97             
03689  1D97             @SKIPFACTOR 
03690  1D97             
03691  1D97                        ; RESTORE X
03692  1D97  68                    PLA
03693  1D98  AA                    TAX
03694  1D99             
03695  1D99  A5 E0                 LDA CONVERT.DEC2HEX32.RESULT
03696  1D9B  85 80                 STA MATH.ADD32.ADDEND1$
03697  1D9D  A5 E1                 LDA CONVERT.DEC2HEX32.RESULT+1
03698  1D9F  85 81                 STA MATH.ADD32.ADDEND1$+1
03699  1DA1  A5 E2                 LDA CONVERT.DEC2HEX32.RESULT+2
03700  1DA3  85 82                 STA MATH.ADD32.ADDEND1$+2
03701  1DA5  A5 E3                 LDA CONVERT.DEC2HEX32.RESULT+3
03702  1DA7  85 83                 STA MATH.ADD32.ADDEND1$+3
03703  1DA9             
03704  1DA9  A5 FB                 LDA CONVERT.DEC2HEX32.INT
03705  1DAB  85 84                 STA MATH.ADD32.ADDEND2$
03706  1DAD  A5 FC                 LDA CONVERT.DEC2HEX32.INT+1
03707  1DAF  85 85                 STA MATH.ADD32.ADDEND2$+1
03708  1DB1  A5 FD                 LDA CONVERT.DEC2HEX32.INT+2
03709  1DB3  85 86                 STA MATH.ADD32.ADDEND2$+2
03710  1DB5  A5 FE                 LDA CONVERT.DEC2HEX32.INT+3
03711  1DB7  85 87                 STA MATH.ADD32.ADDEND2$+3
03712  1DB9             
03713  1DB9  20 22 28              JSR MATH.ADD32$ ; RESULT = RESULT + INT
03714  1DBC             
03715  1DBC  A5 88                 LDA MATH.ADD32.SUM$
03716  1DBE  85 E0                 STA CONVERT.DEC2HEX32.RESULT
03717  1DC0  A5 89                 LDA MATH.ADD32.SUM$+1
03718  1DC2  85 E1                 STA CONVERT.DEC2HEX32.RESULT+1
03719  1DC4  A5 8A                 LDA MATH.ADD32.SUM$+2
03720  1DC6  85 E2                 STA CONVERT.DEC2HEX32.RESULT+2
03721  1DC8  A5 8B                 LDA MATH.ADD32.SUM$+3
03722  1DCA  85 E3                 STA CONVERT.DEC2HEX32.RESULT+3
03723  1DCC             
03724  1DCC             @NEXTDIGIT 
03725  1DCC  E8                    INX ; X = X + 1
03726  1DCD  E4 2A                 CPX CONVERT.DEC2HEX32.LEN
03727  1DCF  F0 03                 BEQ @END
03728  1DD1  4C 40 1D              JMP @LOOP
03729  1DD4             
03730  1DD4             @END
03731  1DD4             
03732  1DD4  60                    RTS
03733  1DD5             
03734  1DD5             
03735  1DD5             
03736  1DD5             
03737  1DD5             
03738  1DD5             ;ALIGN $100
03739  1DD5             
03740  1DD5             TIME.GETTICKS.RESULT$ = $73 ; 4 BYTES
03741  1DD5             
03742  1DD5             TIME.GETTICKS$ 
03743  1DD5                        ;CLI ; RE-ENABLE INTERRUPTS
03744  1DD5             
03745  1DD5                        ;JSR $FFEA ; CALL UDTIM
03746  1DD5             
03747  1DD5  A5 A2                 LDA $A2
03748  1DD7  85 84                 STA MATH.DIVIDE32.DIVIDEND$
03749  1DD9  A5 A1                 LDA $A1
03750  1DDB  85 85                 STA MATH.DIVIDE32.DIVIDEND$+1
03751  1DDD  A5 A0                 LDA $A0
03752  1DDF  85 86                 STA MATH.DIVIDE32.DIVIDEND$+2
03753  1DE1  A9 00                 LDA #$00
03754  1DE3  85 87                 STA MATH.DIVIDE32.DIVIDEND$+3
03755  1DE5             
03756  1DE5  A9 3C                 LDA #$3C
03757  1DE7  85 80                 STA MATH.DIVIDE32.DIVISOR$
03758  1DE9  A9 00                 LDA #$00
03759  1DEB  85 81                 STA MATH.DIVIDE32.DIVISOR$+1
03760  1DED  A9 00                 LDA #$00
03761  1DEF  85 82                 STA MATH.DIVIDE32.DIVISOR$+2
03762  1DF1  A9 00                 LDA #$00
03763  1DF3  85 83                 STA MATH.DIVIDE32.DIVISOR$+3
03764  1DF5             
03765  1DF5  20 26 2A              JSR MATH.DIVIDE32$ ; QUOTIENT = (TIME / 60)
03766  1DF8             
03767  1DF8  A5 84                 LDA MATH.DIVIDE32.QUOTIENT$
03768  1DFA  85 80                 STA MATH.MULTIPLY32.FACTOR1$
03769  1DFC  A5 85                 LDA MATH.DIVIDE32.QUOTIENT$+1
03770  1DFE  85 81                 STA MATH.MULTIPLY32.FACTOR1$+1
03771  1E00  A5 86                 LDA MATH.DIVIDE32.QUOTIENT$+2
03772  1E02  85 82                 STA MATH.MULTIPLY32.FACTOR1$+2
03773  1E04  A5 87                 LDA MATH.DIVIDE32.QUOTIENT$+3
03774  1E06  85 83                 STA MATH.MULTIPLY32.FACTOR1$+3
03775  1E08             
03776  1E08  A9 E8                 LDA #$E8
03777  1E0A  85 84                 STA MATH.MULTIPLY32.FACTOR2$
03778  1E0C  A9 03                 LDA #$03
03779  1E0E  85 85                 STA MATH.MULTIPLY32.FACTOR2$+1
03780  1E10  A9 00                 LDA #$00
03781  1E12  85 86                 STA MATH.MULTIPLY32.FACTOR2$+2
03782  1E14  A9 00                 LDA #$00
03783  1E16  85 87                 STA MATH.MULTIPLY32.FACTOR2$+3
03784  1E18             
03785  1E18  20 8D 29              JSR MATH.MULTIPLY32$ ; TICKS = QUOTIENT * 1000
03786  1E1B             
03787  1E1B  A5 88                 LDA MATH.MULTIPLY32.PRODUCT$
03788  1E1D  85 73                 STA TIME.GETTICKS.RESULT$
03789  1E1F  A5 89                 LDA MATH.MULTIPLY32.PRODUCT$+1
03790  1E21  85 74                 STA TIME.GETTICKS.RESULT$+1
03791  1E23  A5 8A                 LDA MATH.MULTIPLY32.PRODUCT$+2
03792  1E25  85 75                 STA TIME.GETTICKS.RESULT$+2
03793  1E27  A5 8B                 LDA MATH.MULTIPLY32.PRODUCT$+3
03794  1E29  85 76                 STA TIME.GETTICKS.RESULT$+3
03795  1E2B             
03796  1E2B                        ; AT THIS POINT WE HAVE THE TICKS TO THE SECOND (ROUNDED DOWN).
03797  1E2B                        ; WE NEED TO ADD THE DECIMAL (REMAINDER) TO GET THE MILLISECONDS.
03798  1E2B             
03799  1E2B  A5 8C                 LDA MATH.DIVIDE32.REMAINDER$
03800  1E2D  85 80                 STA MATH.MULTIPLY32.FACTOR1$
03801  1E2F  A5 8D                 LDA MATH.DIVIDE32.REMAINDER$+1
03802  1E31  85 81                 STA MATH.MULTIPLY32.FACTOR1$+1
03803  1E33  A5 8E                 LDA MATH.DIVIDE32.REMAINDER$+2
03804  1E35  85 82                 STA MATH.MULTIPLY32.FACTOR1$+2
03805  1E37  A5 8F                 LDA MATH.DIVIDE32.REMAINDER$+3
03806  1E39  85 83                 STA MATH.MULTIPLY32.FACTOR1$+3
03807  1E3B             
03808  1E3B  A9 E8                 LDA #$E8
03809  1E3D  85 84                 STA MATH.MULTIPLY32.FACTOR2$
03810  1E3F  A9 03                 LDA #$03
03811  1E41  85 85                 STA MATH.MULTIPLY32.FACTOR2$+1
03812  1E43  A9 00                 LDA #$00
03813  1E45  85 86                 STA MATH.MULTIPLY32.FACTOR2$+2
03814  1E47  A9 00                 LDA #$00
03815  1E49  85 87                 STA MATH.MULTIPLY32.FACTOR2$+3
03816  1E4B             
03817  1E4B  20 8D 29              JSR MATH.MULTIPLY32$ ; Y = REMAINDER * 1000
03818  1E4E             
03819  1E4E  A5 88                 LDA MATH.MULTIPLY32.PRODUCT$
03820  1E50  85 84                 STA MATH.DIVIDE32.DIVIDEND$
03821  1E52  A5 89                 LDA MATH.MULTIPLY32.PRODUCT$+1
03822  1E54  85 85                 STA MATH.DIVIDE32.DIVIDEND$+1
03823  1E56  A5 8A                 LDA MATH.MULTIPLY32.PRODUCT$+2
03824  1E58  85 86                 STA MATH.DIVIDE32.DIVIDEND$+2
03825  1E5A  A5 8B                 LDA MATH.MULTIPLY32.PRODUCT$+3
03826  1E5C  85 87                 STA MATH.DIVIDE32.DIVIDEND$+3
03827  1E5E             
03828  1E5E  A9 3C                 LDA #$3C
03829  1E60  85 80                 STA MATH.DIVIDE32.DIVISOR$
03830  1E62  A9 00                 LDA #$00
03831  1E64  85 81                 STA MATH.DIVIDE32.DIVISOR$+1
03832  1E66  A9 00                 LDA #$00
03833  1E68  85 82                 STA MATH.DIVIDE32.DIVISOR$+2
03834  1E6A  A9 00                 LDA #$00
03835  1E6C  85 83                 STA MATH.DIVIDE32.DIVISOR$+3
03836  1E6E             
03837  1E6E  20 26 2A              JSR MATH.DIVIDE32$ ; X = (Y / 60)
03838  1E71             
03839  1E71                        ; ADD TO TICKS
03840  1E71  A5 84                 LDA MATH.DIVIDE32.QUOTIENT$
03841  1E73  85 80                 STA MATH.ADD32.ADDEND1$
03842  1E75  A5 85                 LDA MATH.DIVIDE32.QUOTIENT$+1
03843  1E77  85 81                 STA MATH.ADD32.ADDEND1$+1
03844  1E79  A5 86                 LDA MATH.DIVIDE32.QUOTIENT$+2
03845  1E7B  85 82                 STA MATH.ADD32.ADDEND1$+2
03846  1E7D  A5 87                 LDA MATH.DIVIDE32.QUOTIENT$+3
03847  1E7F  85 83                 STA MATH.ADD32.ADDEND1$+3
03848  1E81             
03849  1E81  A5 73                 LDA TIME.GETTICKS.RESULT$
03850  1E83  85 84                 STA MATH.ADD32.ADDEND2$
03851  1E85  A5 74                 LDA TIME.GETTICKS.RESULT$+1
03852  1E87  85 85                 STA MATH.ADD32.ADDEND2$+1
03853  1E89  A5 75                 LDA TIME.GETTICKS.RESULT$+2
03854  1E8B  85 86                 STA MATH.ADD32.ADDEND2$+2
03855  1E8D  A5 76                 LDA TIME.GETTICKS.RESULT$+3
03856  1E8F  85 87                 STA MATH.ADD32.ADDEND2$+3
03857  1E91             
03858  1E91  20 22 28              JSR MATH.ADD32$ ; TICKS = TICKS + X
03859  1E94             
03860  1E94  A5 88                 LDA MATH.ADD32.SUM$
03861  1E96  85 73                 STA TIME.GETTICKS.RESULT$
03862  1E98  A5 89                 LDA MATH.ADD32.SUM$+1
03863  1E9A  85 74                 STA TIME.GETTICKS.RESULT$+1
03864  1E9C  A5 8A                 LDA MATH.ADD32.SUM$+2
03865  1E9E  85 75                 STA TIME.GETTICKS.RESULT$+2
03866  1EA0  A5 8B                 LDA MATH.ADD32.SUM$+3
03867  1EA2  85 76                 STA TIME.GETTICKS.RESULT$+3
03868  1EA4             
03869  1EA4  60                    RTS
03870  1EA5             
03871  1EA5             
03872  1EA5             TIME.HALT$ 
03873  1EA5                        ; DELAY ADDED TO SLOW DOWN THE QUICK BACKSPACE CHARACTERS.
03874  1EA5                        ; 100 = $64
03875  1EA5                        ; 50 = $32
03876  1EA5  A9 32                 LDA #$32
03877  1EA7  85 77                 STA TIME.WAIT.MILLISECONDS$
03878  1EA9  A9 00                 LDA #$00
03879  1EAB  85 78                 STA TIME.WAIT.MILLISECONDS$+1
03880  1EAD  A9 00                 LDA #$00
03881  1EAF  85 79                 STA TIME.WAIT.MILLISECONDS$+2
03882  1EB1  A9 00                 LDA #$00
03883  1EB3  85 7A                 STA TIME.WAIT.MILLISECONDS$+3
03884  1EB5  20 B9 1E              JSR TIME.WAIT$
03885  1EB8             
03886  1EB8  60                    RTS
03887  1EB9             
03888  1EB9             
03889  1EB9             TIME.WAIT.MILLISECONDS$ = $77 ; 4 BYTES
03890  1EB9             
03891  1EB9             TIME.WAIT$ 
03892  1EB9  20 D5 1D              JSR TIME.GETTICKS$
03893  1EBC             
03894  1EBC  A5 77                 LDA TIME.WAIT.MILLISECONDS$
03895  1EBE  85 80                 STA MATH.ADD32.ADDEND1$
03896  1EC0  A5 78                 LDA TIME.WAIT.MILLISECONDS$+1
03897  1EC2  85 81                 STA MATH.ADD32.ADDEND1$+1
03898  1EC4  A5 79                 LDA TIME.WAIT.MILLISECONDS$+2
03899  1EC6  85 82                 STA MATH.ADD32.ADDEND1$+2
03900  1EC8  A5 7A                 LDA TIME.WAIT.MILLISECONDS$+3
03901  1ECA  85 83                 STA MATH.ADD32.ADDEND1$+3
03902  1ECC             
03903  1ECC  A5 73                 LDA TIME.GETTICKS.RESULT$
03904  1ECE  85 84                 STA MATH.ADD32.ADDEND2$
03905  1ED0  A5 74                 LDA TIME.GETTICKS.RESULT$+1
03906  1ED2  85 85                 STA MATH.ADD32.ADDEND2$+1
03907  1ED4  A5 75                 LDA TIME.GETTICKS.RESULT$+2
03908  1ED6  85 86                 STA MATH.ADD32.ADDEND2$+2
03909  1ED8  A5 76                 LDA TIME.GETTICKS.RESULT$+3
03910  1EDA  85 87                 STA MATH.ADD32.ADDEND2$+3
03911  1EDC             
03912  1EDC  20 22 28              JSR MATH.ADD32$
03913  1EDF                        
03914  1EDF                        ; STORE THE FIND
03915  1EDF  A5 88                 LDA MATH.ADD32.SUM$
03916  1EE1  85 77                 STA TIME.WAIT.MILLISECONDS$
03917  1EE3  A5 89                 LDA MATH.ADD32.SUM$+1
03918  1EE5  85 78                 STA TIME.WAIT.MILLISECONDS$+1
03919  1EE7  A5 8A                 LDA MATH.ADD32.SUM$+2
03920  1EE9  85 79                 STA TIME.WAIT.MILLISECONDS$+2
03921  1EEB  A5 8B                 LDA MATH.ADD32.SUM$+3
03922  1EED  85 7A                 STA TIME.WAIT.MILLISECONDS$+3
03923  1EEF                        
03924  1EEF             @LOOP
03925  1EEF  20 D5 1D              JSR TIME.GETTICKS$
03926  1EF2             
03927  1EF2  A5 73                 LDA TIME.GETTICKS.RESULT$
03928  1EF4  85 80                 STA MATH.CMP32.NUM1$
03929  1EF6  A5 74                 LDA TIME.GETTICKS.RESULT$+1
03930  1EF8  85 81                 STA MATH.CMP32.NUM1$+1
03931  1EFA  A5 75                 LDA TIME.GETTICKS.RESULT$+2
03932  1EFC  85 82                 STA MATH.CMP32.NUM1$+2
03933  1EFE  A5 76                 LDA TIME.GETTICKS.RESULT$+3
03934  1F00  85 83                 STA MATH.CMP32.NUM1$+3
03935  1F02             
03936  1F02  A5 77                 LDA TIME.WAIT.MILLISECONDS$
03937  1F04  85 84                 STA MATH.CMP32.NUM2$
03938  1F06  A5 78                 LDA TIME.WAIT.MILLISECONDS$+1
03939  1F08  85 85                 STA MATH.CMP32.NUM2$+1
03940  1F0A  A5 79                 LDA TIME.WAIT.MILLISECONDS$+2
03941  1F0C  85 86                 STA MATH.CMP32.NUM2$+2
03942  1F0E  A5 7A                 LDA TIME.WAIT.MILLISECONDS$+3
03943  1F10  85 87                 STA MATH.CMP32.NUM2$+3
03944  1F12             
03945  1F12  20 00 29              JSR MATH.CMP32$ ; IF TICKS > (MILLISECONDS + TICKS) THEN CARRY FLAG SHOULD BE SET.
03946  1F15             
03947  1F15             ;        LDA TIME.GETTICKS.RESULT$
03948  1F15             ;        STA CONSOLE.WRITEINT32.INTEGER$
03949  1F15             ;        LDA TIME.GETTICKS.RESULT$+1
03950  1F15             ;        STA CONSOLE.WRITEINT32.INTEGER$+1
03951  1F15             ;        LDA TIME.GETTICKS.RESULT$+2
03952  1F15             ;        STA CONSOLE.WRITEINT32.INTEGER$+2
03953  1F15             ;        LDA TIME.GETTICKS.RESULT$+3
03954  1F15             ;        STA CONSOLE.WRITEINT32.INTEGER$+3
03955  1F15             ;        JSR CONSOLE.WRITEINT32$
03956  1F15             
03957  1F15                        ;BCC @LOOP ; GOTO @LOOP IF TICKS < (MILLISECONDS + TICKS).
03958  1F15  B0 03                 BCS @END
03959  1F17  4C EF 1E              JMP @LOOP
03960  1F1A             @END
03961  1F1A  60                    RTS
03962  1F1B             
03963  1F1B             
03964  1F1B             
03965  1F1B             
03966  1F1B             MEMORY.PUSHZP$ 
03967  1F1B             
03968  1F1B                        ; THE STACK IS POINTING TO THE RETURN ADDRESS.
03969  1F1B                        ; GET THE RETURN ADDRESS
03970  1F1B  68                    PLA
03971  1F1C  85 20                 STA $20
03972  1F1E  E6 20                 INC $20
03973  1F20  68                    PLA
03974  1F21  85 21                 STA $21
03975  1F23             
03976  1F23                        ; BACK UP VALUES $73-$8F
03977  1F23  A2 00                 LDX #0
03978  1F25             @BACKUP
03979  1F25  B5 73                 LDA $73,X
03980  1F27  48                    PHA
03981  1F28  E8                    INX
03982  1F29  E0 1D                 CPX #29
03983  1F2B  D0 F8                 BNE @BACKUP
03984  1F2D             
03985  1F2D                        ; IMPLICIT RETURN.
03986  1F2D  6C 20 00              JMP ($0020)
03987  1F30             
03988  1F30  60                    RTS
03989  1F31             
03990  1F31             MEMORY.PULLZP$ 
03991  1F31             
03992  1F31                        ; THE STACK IS POINTING TO THE RETURN ADDRESS.
03993  1F31                        ; GET THE RETURN ADDRESS
03994  1F31  68                    PLA
03995  1F32  85 20                 STA $20
03996  1F34  E6 20                 INC $20
03997  1F36  68                    PLA
03998  1F37  85 21                 STA $21
03999  1F39             
04000  1F39                        ; RESTORE VALUES $73-$79
04001  1F39  A2 1D                 LDX #29
04002  1F3B             @RESTORE
04003  1F3B  CA                    DEX
04004  1F3C  68                    PLA
04005  1F3D  95 73                 STA $73,X
04006  1F3F  E0 00                 CPX #0
04007  1F41  D0 F8                 BNE @RESTORE
04008  1F43             
04009  1F43                        ; IMPLICIT RETURN.
04010  1F43  6C 20 00              JMP ($0020)
04011  1F46             
04012  1F46             STRING.ISEQUAL.ADDRESS1$ = $7A ; 2 BYTES
04013  1F46             STRING.ISEQUAL.ADDRESS2$ = $7C ; 2 BYTES
04014  1F46             STRING.ISEQUAL.CHAR = $7D ; 1 BYTES
04015  1F46             STRING.ISEQUAL.VALUE$ = $7E ; 1 BYTE
04016  1F46             STRING.ISEQUAL$ 
04017  1F46                        ; COMPARES THE VALUES OF ADDRESS1 AND ADDRESS2 AND DETERMINES IF THEY ARE EQUAL
04018  1F46             
04019  1F46  A9 00                 LDA #$00
04020  1F48  85 7E                 STA STRING.ISEQUAL.VALUE$
04021  1F4A                        
04022  1F4A  A5 7A                 LDA STRING.ISEQUAL.ADDRESS1$
04023  1F4C  85 FB                 STA $FB
04024  1F4E  A5 7B                 LDA STRING.ISEQUAL.ADDRESS1$+1
04025  1F50  85 FC                 STA $FC
04026  1F52             
04027  1F52  A5 7C                 LDA STRING.ISEQUAL.ADDRESS2$
04028  1F54  85 FD                 STA $FD
04029  1F56  A5 7D                 LDA STRING.ISEQUAL.ADDRESS2$+1
04030  1F58  85 FE                 STA $FE
04031  1F5A             
04032  1F5A  A0 00                 LDY #$00
04033  1F5C             @LOOP
04034  1F5C  B1 FB                 LDA ($FB),Y
04035  1F5E  85 7D                 STA STRING.ISEQUAL.CHAR
04036  1F60  B1 FD                 LDA ($FD),Y
04037  1F62  C5 7D                 CMP STRING.ISEQUAL.CHAR
04038  1F64  F0 03                 BEQ @CONT
04039  1F66  4C 83 1F              JMP @DONE
04040  1F69             @CONT
04041  1F69             
04042  1F69  C9 FF                 CMP #CONSOLE.NULL$
04043  1F6B  D0 03                 BNE @SKIP0
04044  1F6D  4C 7F 1F              JMP @ISEQUAL
04045  1F70             @SKIP0
04046  1F70             
04047  1F70  E6 FB                 INC $FB
04048  1F72  D0 02                 BNE @SKIP1
04049  1F74  E6 FC                 INC $FC
04050  1F76             @SKIP1
04051  1F76             
04052  1F76  E6 FD                 INC $FD
04053  1F78  D0 02                 BNE @SKIP2
04054  1F7A  E6 FE                 INC $FE
04055  1F7C             @SKIP2
04056  1F7C  4C 5C 1F              JMP @LOOP
04057  1F7F             
04058  1F7F             @ISEQUAL
04059  1F7F  A9 01                 LDA #$01
04060  1F81  85 7E                 STA STRING.ISEQUAL.VALUE$
04061  1F83                        
04062  1F83             @DONE
04063  1F83  60                    RTS
04064  1F84             
04065  1F84             ;TIME.HALT2
04066  1F84             ;        JSR TIME.HALT$
04067  1F84             ;        JSR TIME.HALT$
04068  1F84             ;        RTS
04069  1F84             
04070  1F84             KERNEL.RESET$ 
04071  1F84  20 A9 1F              JSR DISK.RESET$
04072  1F87  6C FC FF              JMP ($FFFC)
04073  1F8A             
04074  1F8A             
04075  1F8A             DISK.CHECKERROR 
04076  1F8A             
04077  1F8A  AD 41 3B              LDA DISK.ERROR$
04078  1F8D  C9 01                 CMP #DISKERROR.FILE_SCRATCHED$
04079  1F8F  F0 03                 BEQ @FILESCRATCHED
04080  1F91  4C 96 1F              JMP @DONE
04081  1F94             @FILESCRATCHED 
04082  1F94                        ;LDA #DISKERROR.FILE_NOT_FOUND$
04083  1F94  A9 00                 LDA #DISKERROR.OK$
04084  1F96             
04085  1F96             @DONE
04086  1F96  8D 41 3B              STA DISK.ERROR$
04087  1F99  60                    RTS
04088  1F9A             
04089  1F9A             DISK.VALIDATE$ 
04090  1F9A                        ; SET THE PREFIX COMMAND "V"
04091  1F9A  A9 56                 LDA #"V"
04092  1F9C  8D 1E 3F              STA DISK.EXECMD.FILENAME
04093  1F9F             
04094  1F9F  A9 02                 LDA #02
04095  1FA1  8D 49 3F              STA DISK.EXECMD.LEN
04096  1FA4             
04097  1FA4  4C 4A 3F              JMP DISK.EXECMD
04098  1FA7             
04099  1FA7             ;DISK.RESET.STRING TEXT "U:"
04100  1FA7             ;;DISK.RESET.LEN BYTE #02
04101  1FA7             ;DISK.RESET$
04102  1FA7             ;        ; THERE IS NO FILE NAME
04103  1FA7             ;        LDA #$00
04104  1FA7             ;        LDX #$00
04105  1FA7             ;        LDY #$00
04106  1FA7             ;        JSR $FFBD     ; CALL SETNAM
04107  1FA7             
04108  1FA7             ;        LDA #$0F      ; FILE NUMBER 15
04109  1FA7             ;        LDX $BA       ; LAST USED DEVICE NUMBER
04110  1FA7             ;        BNE @SKIP
04111  1FA7             ;        LDX #$08      ; DEFAULT TO DEVICE 8
04112  1FA7             ;@SKIP   LDY #$0F      ; SECONDARY ADDRESS 15
04113  1FA7             ;        JSR $FFBA     ; CALL SETLFS
04114  1FA7             
04115  1FA7             ;        JSR $FFC0     ; CALL OPEN
04116  1FA7             ;        BCS @ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
04117  1FA7             
04118  1FA7             ;        ; CHECK DRIVE ERROR CHANNEL HERE TO TEST FOR
04119  1FA7             ;        ; FILE EXISTS ERROR ETC.
04120  1FA7             
04121  1FA7             ;        LDX #$0F      ; FILENUMBER 15
04122  1FA7             ;        JSR $FFC9     ; CALL CHKOUT (FILE 15 NOW USED AS OUTPUT)
04123  1FA7             
04124  1FA7             ;        ; SET THE MEMORY ADDRESS
04125  1FA7             ;        LDA #<DISK.RESET.STRING
04126  1FA7             ;        STA $AE
04127  1FA7             ;        LDA #>DISK.RESET.STRING
04128  1FA7             ;        STA $AF
04129  1FA7             
04130  1FA7             ;        LDY #$00
04131  1FA7             ;@LOOP
04132  1FA7             ;        ;LDX #$08
04133  1FA7             ;        JSR $FFB7     ; CALL READST (READ STATUS BYTE)
04134  1FA7             ;        ;BNE @WERROR   ; WRITE ERROR
04135  1FA7             ;        BNE @ERROR   ; WRITE ERROR
04136  1FA7             ;        LDA ($AE),Y   ; GET BYTE FROM MEMORY
04137  1FA7             ;        JSR $FFD2     ; CALL CHROUT (WRITE BYTE TO FILE)
04138  1FA7             ;        INY
04139  1FA7             ;        CPY #02
04140  1FA7             ;        BNE @LOOP
04141  1FA7             
04142  1FA7             ;        ;; WAIT TWO SECONDS
04143  1FA7             ;;        ; 2000 = $07D0
04144  1FA7             ;;        LDA #$D0
04145  1FA7             ;;        STA TIME.WAIT.MILLISECONDS$
04146  1FA7             ;;        LDA #$07
04147  1FA7             ;;        STA TIME.WAIT.MILLISECONDS$+1
04148  1FA7             ;;        LDA #$00
04149  1FA7             ;;        STA TIME.WAIT.MILLISECONDS$+2
04150  1FA7             ;;        STA TIME.WAIT.MILLISECONDS$+3
04151  1FA7             ;;        JSR TIME.WAIT$
04152  1FA7             
04153  1FA7             ;@CLOSE
04154  1FA7             ;        ;LDA #$0F      ; FILENUMBER 15
04155  1FA7             ;        ;JSR $FFC3     ; CALL CLOSE
04156  1FA7             
04157  1FA7             ;        JSR $FFCC     ; CALL CLRCHN
04158  1FA7             ;        RTS
04159  1FA7             ;@ERROR
04160  1FA7             ;        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
04161  1FA7             
04162  1FA7             ;        ; MOST LIKELY ERRORS:
04163  1FA7             ;        ; A = $05 (DEVICE NOT PRESENT)
04164  1FA7             
04165  1FA7             ;        ;... ERROR HANDLING FOR OPEN ERRORS ...
04166  1FA7             ;        JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
04167  1FA7             ;;@WERROR
04168  1FA7             ;;        ; FOR FURTHER INFORMATION, THE DRIVE ERROR CHANNEL HAS TO BE READ
04169  1FA7             
04170  1FA7             ;;        ;... ERROR HANDLING FOR WRITE ERRORS ...
04171  1FA7             ;;        JMP @CLOSE
04172  1FA7             
04173  1FA7  55 3A      DISK.RESET.STRING TEXT "U:"
04174  1FA9             DISK.RESET$ 
04175  1FA9                        ; THERE IS NO FILE NAME
04176  1FA9  A9 02                 LDA #$02
04177  1FAB  A2 A7                 LDX #<DISK.RESET.STRING
04178  1FAD  A0 1F                 LDY #>DISK.RESET.STRING
04179  1FAF  20 BD FF              JSR $FFBD     ; CALL SETNAM
04180  1FB2             
04181  1FB2  A9 0F                 LDA #$0F      ; FILE NUMBER 15
04182  1FB4  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
04183  1FB6  D0 02                 BNE @SKIP
04184  1FB8  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
04185  1FBA  A0 0F      @SKIP      LDY #$0F      ; SECONDARY ADDRESS 15
04186  1FBC  20 BA FF              JSR $FFBA     ; CALL SETLFS
04187  1FBF             
04188  1FBF  20 C0 FF              JSR $FFC0     ; CALL OPEN
04189  1FC2  B0 00                 BCS @ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
04190  1FC4             @ERROR
04191  1FC4             @CLOSE
04192  1FC4                        ;LDA #$0F      ; FILENUMBER 15
04193  1FC4                        ;JSR $FFC3     ; CALL CLOSE
04194  1FC4             
04195  1FC4  20 CC FF              JSR $FFCC     ; CALL CLRCHN
04196  1FC7  60                    RTS
04197  1FC8             
04198  1FC8             SERIAL.OPEN$ 
04199  1FC8             
04200  1FC8  20 46 41              JSR SERIAL.SET_BAUD
04201  1FCB             
04202  1FCB  A5 BA                 LDA $BA
04203  1FCD  8D 33 41              STA SERIAL.PREV_DEVICE
04204  1FD0             
04205  1FD0                        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
04206  1FD0  A9 05                 LDA #$05      ; FILENUMBER 5
04207  1FD2                        ;NOP
04208  1FD2                        ;NOP
04209  1FD2  20 C3 FF              JSR $FFC3     ; CALL CLOSE
04210  1FD5                        ;NOP
04211  1FD5                        ;NOP
04212  1FD5                        ;NOP
04213  1FD5             
04214  1FD5                        ;LDA #2
04215  1FD5  A9 01                 LDA #1
04216  1FD7  A2 37                 LDX #<SERIAL.BAUD$
04217  1FD9  A0 41                 LDY #>SERIAL.BAUD$
04218  1FDB  20 BD FF              JSR $FFBD     ; CALL SETNAM
04219  1FDE             
04220  1FDE  A9 05                 LDA #$05      ; FILE NUMBER 5
04221  1FE0  A2 02                 LDX #$02      ; DEFAULT TO DEVICE 2
04222  1FE2  A0 00                 LDY #$00      ; SECONDARY ADDRESS 0
04223  1FE4  20 BA FF              JSR $FFBA     ; CALL SETLFS
04224  1FE7             
04225  1FE7  20 C0 FF              JSR $FFC0     ; CALL OPEN
04226  1FEA             
04227  1FEA                        ; SET THE RS232 INPUT TIMER
04228  1FEA                        ;POKE665,73-(PEEK(678)*30)
04229  1FEA  AD A6 02              LDA 678 ; 0=NTSC, 1=PAL
04230  1FED  F0 05                 BEQ @POKE_665_73
04231  1FEF  A9 2B                 LDA #43
04232  1FF1  4C F6 1F              JMP @STA_665
04233  1FF4             @POKE_665_73 
04234  1FF4  A9 49                 LDA #73
04235  1FF6             @STA_665
04236  1FF6  8D 99 02              STA 665
04237  1FF9             
04238  1FF9  60                    RTS
04239  1FFA             
04240  1FFA             
04241  1FFA             
04242  1FFA             ; SKIP $2000-$2800 FOR CUSTOM CHARACTER SET
04243  1FFA             
04244  1FFA             *=$2800
04245  2800             
04246  2800             
04247  2800             
04248  2800             ALIGN      $100
04249  2800             
04250  2800             MATH.ADD16.ADDEND1$ = $80 ; 2 BYTES
04251  2800             MATH.ADD16.ADDEND2$ = $82 ; 2 BYTES
04252  2800             MATH.ADD16.SUM$ = $84 ; 2 BYTES
04253  2800             
04254  2800             MATH.ADD16$ 
04255  2800                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:16BIT_ADDITION_AND_SUBTRACTION
04256  2800  18                    CLC                             ; CLEAR CARRY
04257  2801  A5 80                 LDA MATH.ADD16.ADDEND1$
04258  2803  65 82                 ADC MATH.ADD16.ADDEND2$
04259  2805  85 84                 STA MATH.ADD16.SUM$                       ; STORE SUM OF LSBS
04260  2807  A5 81                 LDA MATH.ADD16.ADDEND1$+1
04261  2809  65 83                 ADC MATH.ADD16.ADDEND2$+1                      ; ADD THE MSBS USING CARRY FROM
04262  280B  85 85                 STA MATH.ADD16.SUM$+1                       ; THE PREVIOUS CALCULATION
04263  280D  60                    RTS
04264  280E             
04265  280E             MATH.ADD24.ADDEND1$ = $80 ; 3 BYTES
04266  280E             MATH.ADD24.ADDEND2$ = $83 ; 3 BYTES
04267  280E             MATH.ADD24.SUM$ = $86 ; 3 BYTES
04268  280E             
04269  280E             MATH.ADD24$ 
04270  280E  18                    CLC                             ; CLEAR CARRY
04271  280F  A5 80                 LDA MATH.ADD24.ADDEND1$
04272  2811  65 83                 ADC MATH.ADD24.ADDEND2$
04273  2813  85 86                 STA MATH.ADD24.SUM$
04274  2815  A5 81                 LDA MATH.ADD24.ADDEND1$+1
04275  2817  65 84                 ADC MATH.ADD24.ADDEND2$+1
04276  2819  85 87                 STA MATH.ADD24.SUM$+1
04277  281B  A5 82                 LDA MATH.ADD24.ADDEND1$+2
04278  281D  65 85                 ADC MATH.ADD24.ADDEND2$+2
04279  281F  85 88                 STA MATH.ADD24.SUM$+2
04280  2821  60                    RTS
04281  2822             
04282  2822             MATH.ADD32.ADDEND1$ = $80 ; 4 BYTES
04283  2822             MATH.ADD32.ADDEND2$ = $84 ; 4 BYTES
04284  2822             MATH.ADD32.SUM$ = $88 ; 4 BYTES
04285  2822             
04286  2822             MATH.ADD32$ 
04287  2822  18                    CLC                             ; CLEAR CARRY
04288  2823  A5 80                 LDA MATH.ADD32.ADDEND1$
04289  2825  65 84                 ADC MATH.ADD32.ADDEND2$
04290  2827  85 88                 STA MATH.ADD32.SUM$
04291  2829  A5 81                 LDA MATH.ADD32.ADDEND1$+1
04292  282B  65 85                 ADC MATH.ADD32.ADDEND2$+1
04293  282D  85 89                 STA MATH.ADD32.SUM$+1
04294  282F  A5 82                 LDA MATH.ADD32.ADDEND1$+2
04295  2831  65 86                 ADC MATH.ADD32.ADDEND2$+2
04296  2833  85 8A                 STA MATH.ADD32.SUM$+2
04297  2835  A5 83                 LDA MATH.ADD32.ADDEND1$+3
04298  2837  65 87                 ADC MATH.ADD32.ADDEND2$+3
04299  2839  85 8B                 STA MATH.ADD32.SUM$+3
04300  283B  60                    RTS
04301  283C             
04302  283C             MATH.INC16.ADDRESS$ = $86 ; 2 BYTES
04303  283C             
04304  283C             MATH.INC16$ 
04305  283C             
04306  283C                        ; STORE Y
04307  283C  98                    TYA
04308  283D  48                    PHA
04309  283E             
04310  283E  A0 00                 LDY #$00
04311  2840  B1 86                 LDA (MATH.INC16.ADDRESS$),Y
04312  2842  85 80                 STA MATH.ADD16.ADDEND1$
04313  2844  C8                    INY
04314  2845  B1 86                 LDA (MATH.INC16.ADDRESS$),Y
04315  2847  85 81                 STA MATH.ADD16.ADDEND1$+1
04316  2849             
04317  2849  A9 01                 LDA #$01
04318  284B  85 82                 STA MATH.ADD16.ADDEND2$
04319  284D  A9 00                 LDA #$00
04320  284F  85 83                 STA MATH.ADD16.ADDEND2$+1
04321  2851                        
04322  2851  20 00 28              JSR MATH.ADD16$ ; (*ADDRESS) = (*ADDRESS) + 1
04323  2854             
04324  2854  A5 84                 LDA MATH.ADD16.SUM$
04325  2856  A0 00                 LDY #$00
04326  2858  91 86                 STA (MATH.INC16.ADDRESS$),Y
04327  285A  A5 85                 LDA MATH.ADD16.SUM$+1
04328  285C  C8                    INY
04329  285D  91 86                 STA (MATH.INC16.ADDRESS$),Y
04330  285F             
04331  285F                        ; RESTORE Y
04332  285F  68                    PLA
04333  2860  A8                    TAY
04334  2861             
04335  2861  60                    RTS
04336  2862             
04337  2862             MATH.INC24.ADDRESS$ = $86 ; 2 BYTES
04338  2862             MATH.INC24$ 
04339  2862             
04340  2862                        ; STORE Y
04341  2862  98                    TYA
04342  2863  48                    PHA
04343  2864             
04344  2864  A0 00                 LDY #$00
04345  2866  B1 86                 LDA (MATH.INC24.ADDRESS$),Y
04346  2868  85 80                 STA MATH.ADD24.ADDEND1$
04347  286A  C8                    INY
04348  286B  B1 86                 LDA (MATH.INC24.ADDRESS$),Y
04349  286D  85 81                 STA MATH.ADD24.ADDEND1$+1
04350  286F  C8                    INY
04351  2870  B1 86                 LDA (MATH.INC24.ADDRESS$),Y
04352  2872  85 82                 STA MATH.ADD24.ADDEND1$+2
04353  2874             
04354  2874  A9 01                 LDA #$01
04355  2876  85 83                 STA MATH.ADD24.ADDEND2$
04356  2878  A9 00                 LDA #$00
04357  287A  85 84                 STA MATH.ADD24.ADDEND2$+1
04358  287C  A9 00                 LDA #$00
04359  287E  85 85                 STA MATH.ADD24.ADDEND2$+2
04360  2880                        
04361  2880  20 0E 28              JSR MATH.ADD24$ ; (*ADDRESS) = (*ADDRESS) + 1
04362  2883             
04363  2883  A5 86                 LDA MATH.ADD24.SUM$
04364  2885  A0 00                 LDY #$00
04365  2887  91 86                 STA (MATH.INC24.ADDRESS$),Y
04366  2889  A5 87                 LDA MATH.ADD24.SUM$+1
04367  288B  C8                    INY
04368  288C  91 86                 STA (MATH.INC24.ADDRESS$),Y
04369  288E  A5 88                 LDA MATH.ADD24.SUM$+2
04370  2890  C8                    INY
04371  2891  91 86                 STA (MATH.INC24.ADDRESS$),Y
04372  2893             
04373  2893                        ; RESTORE Y
04374  2893  68                    PLA
04375  2894  A8                    TAY
04376  2895             
04377  2895  60                    RTS
04378  2896             
04379  2896             MATH.SUBTRACT16.MENUEND$ = $80 ; 2 BYTES
04380  2896             MATH.SUBTRACT16.SUBTRAHEND$ = $82 ; 2 BYTES
04381  2896             MATH.SUBTRACT16.DIFFERENCE$ = $84 ; 2 BYTES
04382  2896             
04383  2896             MATH.SUBTRACT16$ 
04384  2896                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:16BIT_ADDITION_AND_SUBTRACTION
04385  2896  38                    SEC                             ; SET CARRY FOR BORROW PURPOSE
04386  2897  A5 80                 LDA MATH.SUBTRACT16.MENUEND$
04387  2899  E5 82                 SBC MATH.SUBTRACT16.SUBTRAHEND$                      ; PERFORM SUBTRACTION ON THE LSBS
04388  289B  85 84                 STA MATH.SUBTRACT16.DIFFERENCE$
04389  289D  A5 81                 LDA MATH.SUBTRACT16.MENUEND$+1                     ; DO THE SAME FOR THE MSBS, WITH CARRY
04390  289F  E5 83                 SBC MATH.SUBTRACT16.SUBTRAHEND$+1                      ; SET ACCORDING TO THE PREVIOUS RESULT
04391  28A1  85 85                 STA MATH.SUBTRACT16.DIFFERENCE$+1
04392  28A3  60                    RTS
04393  28A4             
04394  28A4             MATH.SUBTRACT32.MENUEND$ = $80 ; 4 BYTES
04395  28A4             MATH.SUBTRACT32.SUBTRAHEND$ = $84 ; 4 BYTES
04396  28A4             MATH.SUBTRACT32.DIFFERENCE$ = $88 ; 4 BYTES
04397  28A4             
04398  28A4             MATH.SUBTRACT32$ 
04399  28A4  38                    SEC                             ; SET CARRY FOR BORROW PURPOSE
04400  28A5  A5 80                 LDA MATH.SUBTRACT32.MENUEND$
04401  28A7  E5 84                 SBC MATH.SUBTRACT32.SUBTRAHEND$                      ; PERFORM SUBTRACTION ON THE LSBS
04402  28A9  85 88                 STA MATH.SUBTRACT32.DIFFERENCE$
04403  28AB  A5 81                 LDA MATH.SUBTRACT32.MENUEND$+1                      ; DO THE SAME FOR THE MSBS, WITH CARRY
04404  28AD  E5 85                 SBC MATH.SUBTRACT32.SUBTRAHEND$+1                      ; SET ACCORDING TO THE PREVIOUS RESULT
04405  28AF  85 89                 STA MATH.SUBTRACT32.DIFFERENCE$+1
04406  28B1  A5 82                 LDA MATH.SUBTRACT32.MENUEND$+2
04407  28B3  E5 86                 SBC MATH.SUBTRACT32.SUBTRAHEND$+2                      ; PERFORM SUBTRACTION ON THE LSBS
04408  28B5  85 8A                 STA MATH.SUBTRACT32.DIFFERENCE$+2
04409  28B7  A5 83                 LDA MATH.SUBTRACT32.MENUEND$+3                      ; DO THE SAME FOR THE MSBS, WITH CARRY
04410  28B9  E5 87                 SBC MATH.SUBTRACT32.SUBTRAHEND$+3                      ; SET ACCORDING TO THE PREVIOUS RESULT
04411  28BB  85 8B                 STA MATH.SUBTRACT32.DIFFERENCE$+3
04412  28BD  60                    RTS
04413  28BE             
04414  28BE             
04415  28BE             MATH.DEC16.ADDRESS$ = $86 ; 2 BYTES
04416  28BE             
04417  28BE             MATH.DEC16$ 
04418  28BE             
04419  28BE                        ; STORE Y
04420  28BE  98                    TYA
04421  28BF  48                    PHA
04422  28C0             
04423  28C0  A0 00                 LDY #$00
04424  28C2  B1 86                 LDA (MATH.DEC16.ADDRESS$),Y
04425  28C4  85 80                 STA MATH.SUBTRACT16.MENUEND$
04426  28C6  C8                    INY
04427  28C7  B1 86                 LDA (MATH.DEC16.ADDRESS$),Y
04428  28C9  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
04429  28CB             
04430  28CB  A9 01                 LDA #$01
04431  28CD  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
04432  28CF  A9 00                 LDA #$00
04433  28D1  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
04434  28D3                        
04435  28D3  20 96 28              JSR MATH.SUBTRACT16$ ; (*ADDRESS) = (*ADDRESS) - 1
04436  28D6             
04437  28D6  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
04438  28D8  A0 00                 LDY #$00
04439  28DA  91 86                 STA (MATH.DEC16.ADDRESS$),Y
04440  28DC  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
04441  28DE  C8                    INY
04442  28DF  91 86                 STA (MATH.DEC16.ADDRESS$),Y
04443  28E1             
04444  28E1                        ; RESTORE Y
04445  28E1  68                    PLA
04446  28E2  A8                    TAY
04447  28E3             
04448  28E3  60                    RTS
04449  28E4             
04450  28E4             
04451  28E4             MATH.CMP16.NUM1$ = $80 ; 2 BYTES
04452  28E4             MATH.CMP16.NUM2$ = $82 ; 2 BYTES
04453  28E4             
04454  28E4             MATH.CMP16$ 
04455  28E4  A5 81                 LDA MATH.CMP16.NUM1$+1
04456  28E6  C5 83                 CMP MATH.CMP16.NUM2$+1
04457  28E8  D0 04                 BNE @DONE
04458  28EA  A5 80                 LDA MATH.CMP16.NUM1$
04459  28EC  C5 82                 CMP MATH.CMP16.NUM2$
04460  28EE             @DONE
04461  28EE  60                    RTS
04462  28EF             
04463  28EF             ALIGN      $100
04464  2900             
04465  2900             MATH.CMP32.NUM1$ = $80 ; 4 BYTES
04466  2900             MATH.CMP32.NUM2$ = $84 ; 4 BYTES
04467  2900             
04468  2900             MATH.CMP32$ 
04469  2900  A5 83                 LDA MATH.CMP32.NUM1$+3
04470  2902  C5 87                 CMP MATH.CMP32.NUM2$+3
04471  2904  D0 10                 BNE @DONE
04472  2906  A5 82                 LDA MATH.CMP32.NUM1$+2
04473  2908  C5 86                 CMP MATH.CMP32.NUM2$+2
04474  290A  D0 0A                 BNE @DONE
04475  290C  A5 81                 LDA MATH.CMP32.NUM1$+1
04476  290E  C5 85                 CMP MATH.CMP32.NUM2$+1
04477  2910  D0 04                 BNE @DONE
04478  2912  A5 80                 LDA MATH.CMP32.NUM1$
04479  2914  C5 84                 CMP MATH.CMP32.NUM2$
04480  2916             @DONE
04481  2916  60                    RTS
04482  2917             
04483  2917             MATH.RANDOM8.SEED$ = $80 ; 1 BYTE
04484  2917             MATH.RANDOM8.RESULT$ = $80 ; 1 BYTE
04485  2917             
04486  2917             MATH.RANDOM8$ 
04487  2917                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:SMALL_FAST_8-BIT_PRNG
04488  2917  A5 80                 LDA MATH.RANDOM8.SEED$
04489  2919  F0 06                 BEQ @DOEOR
04490  291B  18                    CLC
04491  291C  0A                    ASL
04492  291D  F0 04                 BEQ @NOEOR ;IF THE INPUT WAS $80, SKIP THE EOR
04493  291F  90 02                 BCC @NOEOR
04494  2921             @DOEOR
04495  2921  49 12                 EOR #$12 ; MAGIC NUMBER
04496  2923             @NOEOR
04497  2923  85 80                 STA MATH.RANDOM8.RESULT$
04498  2925  60                    RTS
04499  2926             
04500  2926             MATH.RANDOM16.SEED$ = $80 ; 2 BYTES
04501  2926             MATH.RANDOM16.RESULT$ = $80 ; 2 BYTES
04502  2926             
04503  2926             MATH.RANDOM16$ 
04504  2926  A5 80                 LDA MATH.RANDOM16.SEED$
04505  2928  F0 12                 BEQ @LOWZERO ; $0000 AND $8000 ARE SPECIAL VALUES TO TEST FOR
04506  292A             
04507  292A                        ; DO A NORMAL SHIFT
04508  292A  06 80                 ASL MATH.RANDOM16.SEED$
04509  292C  A5 81                 LDA MATH.RANDOM16.SEED$+1
04510  292E  2A                    ROL
04511  292F  90 14                 BCC @NOEOR
04512  2931             
04513  2931             @DOEOR
04514  2931                        ; HIGH BYTE IS IN .A
04515  2931  49 22                 EOR #34 ; MAGIC NUMBER (HI)
04516  2933  85 81                 STA MATH.RANDOM16.SEED$+1
04517  2935  A5 80                 LDA MATH.RANDOM16.SEED$
04518  2937  49 0C                 EOR #12 ; MAGIC NUMBER (LO)
04519  2939  85 80                 STA MATH.RANDOM16.SEED$
04520  293B  60                    RTS
04521  293C             
04522  293C             @LOWZERO
04523  293C  A5 81                 LDA MATH.RANDOM16.SEED$+1
04524  293E  F0 F1                 BEQ @DOEOR ; HIGH BYTE IS ALSO ZERO, SO APPLY THE EOR
04525  2940                        ; FOR SPEED, YOU COULD STORE 'MAGIC' INTO 'SEED' DIRECTLY
04526  2940                        ; INSTEAD OF RUNNING THE EORS
04527  2940             
04528  2940                        ; WASN'T ZERO, CHECK FOR $8000
04529  2940  0A                    ASL
04530  2941  F0 02                 BEQ @NOEOR ; IF $00 IS LEFT AFTER THE SHIFT, THEN IT WAS $80
04531  2943  B0 EC                 BCS @DOEOR ; ELSE, DO THE EOR BASED ON THE CARRY BIT AS USUAL
04532  2945             
04533  2945             @NOEOR
04534  2945  85 81                 STA MATH.RANDOM16.SEED$+1
04535  2947  60                    RTS
04536  2948             
04537  2948             
04538  2948             ;ALIGN $100
04539  2948             
04540  2948             MATH.MULTIPLY8.FACTOR1$ = $80 ; 1 BYTE
04541  2948             MATH.MULTIPLY8.FACTOR2$ = $82 ; 1 BYTE
04542  2948             MATH.MULTIPLY8.PRODUCT$ = $83 ; 1 BYTE
04543  2948             
04544  2948             MATH.MULTIPLY8$ 
04545  2948                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:8BIT_MULTIPLICATION_16BIT_PRODUCT
04546  2948  A9 00                 LDA #$00
04547  294A  A8                    TAY
04548  294B  84 81                 STY MATH.MULTIPLY8.FACTOR1$+1  ; REMOVE THIS LINE FOR 16*8=16BIT MULTIPLY
04549  294D  F0 0D                 BEQ @ENTERLOOP
04550  294F             
04551  294F             @DOADD
04552  294F  18                    CLC
04553  2950  65 80                 ADC MATH.MULTIPLY8.FACTOR1$
04554  2952  AA                    TAX
04555  2953             
04556  2953  98                    TYA
04557  2954  65 81                 ADC MATH.MULTIPLY8.FACTOR1$+1
04558  2956  A8                    TAY
04559  2957  8A                    TXA
04560  2958             
04561  2958             @LOOP
04562  2958  06 80                 ASL MATH.MULTIPLY8.FACTOR1$
04563  295A  26 81                 ROL MATH.MULTIPLY8.FACTOR1$+1
04564  295C             @ENTERLOOP ; ACCUMULATING MULTIPLY ENTRY POINT (ENTER WITH .A=LO, .Y=HI)
04565  295C  46 82                 LSR MATH.MULTIPLY8.FACTOR2$
04566  295E  B0 EF                 BCS @DOADD
04567  2960  D0 F6                 BNE @LOOP
04568  2962             
04569  2962  85 83                 STA MATH.MULTIPLY8.PRODUCT$
04570  2964  84 84                 STY MATH.MULTIPLY8.PRODUCT$+1
04571  2966  60                    RTS
04572  2967             
04573  2967             MATH.MULTIPLY16.FACTOR1$ = $80 ; 2 BYTES
04574  2967             MATH.MULTIPLY16.FACTOR2$ = $82 ; 2 BYTES
04575  2967             MATH.MULTIPLY16.PRODUCT$ = $84 ; 2 BYTES
04576  2967             
04577  2967             MATH.MULTIPLY16$ 
04578  2967                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:16BIT_MULTIPLICATION_32-BIT_PRODUCT
04579  2967  A9 00                 LDA #$00
04580  2969  85 86                 STA MATH.MULTIPLY16.PRODUCT$+2       ; CLEAR UPPER BITS OF PRODUCT
04581  296B  85 87                 STA MATH.MULTIPLY16.PRODUCT$+3
04582  296D  A2 10                 LDX #$10            ; SET BINARY COUNT TO 16
04583  296F             @SHIFT_R
04584  296F  46 81                 LSR MATH.MULTIPLY16.FACTOR1$+1    ; DIVIDE MULTIPLIER BY 2
04585  2971  66 80                 ROR MATH.MULTIPLY16.FACTOR1$
04586  2973  90 0B                 BCC @ROTATE_R
04587  2975  A5 86                 LDA MATH.MULTIPLY16.PRODUCT$+2       ; GET UPPER HALF OF PRODUCT AND ADD MULTIPLICAND
04588  2977  18                    CLC
04589  2978  65 82                 ADC MATH.MULTIPLY16.FACTOR2$
04590  297A  85 86                 STA MATH.MULTIPLY16.PRODUCT$+2
04591  297C  A5 87                 LDA MATH.MULTIPLY16.PRODUCT$+3
04592  297E  65 83                 ADC MATH.MULTIPLY16.FACTOR2$+1
04593  2980             @ROTATE_R  
04594  2980  6A                    ROR                     ; ROTATE PARTIAL PRODUCT
04595  2981  85 87                 STA MATH.MULTIPLY16.PRODUCT$+3
04596  2983  66 86                 ROR MATH.MULTIPLY16.PRODUCT$+2
04597  2985  66 85                 ROR MATH.MULTIPLY16.PRODUCT$+1
04598  2987  66 84                 ROR MATH.MULTIPLY16.PRODUCT$
04599  2989  CA                    DEX
04600  298A  D0 E3                 BNE @SHIFT_R
04601  298C  60                    RTS
04602  298D             
04603  298D             MATH.MULTIPLY32.FACTOR1$ = $80 ; 4 BYTES
04604  298D             MATH.MULTIPLY32.FACTOR2$ = $84 ; 4 BYTES
04605  298D             MATH.MULTIPLY32.PRODUCT$ = $88 ; 4 BYTES
04606  298D             
04607  298D             MATH.MULTIPLY32$ 
04608  298D  A9 00                 LDA #$00                        ; SET PRODUCT TO ZERO
04609  298F  85 88                 STA MATH.MULTIPLY32.PRODUCT$
04610  2991  85 89                 STA MATH.MULTIPLY32.PRODUCT$+1
04611  2993  85 8A                 STA MATH.MULTIPLY32.PRODUCT$+2
04612  2995  85 8B                 STA MATH.MULTIPLY32.PRODUCT$+3
04613  2997             
04614  2997             @LOOP
04615  2997  A5 84                 LDA MATH.MULTIPLY32.FACTOR2$                     ; WHILE FACTOR2 != 0
04616  2999  D0 0D                 BNE @NZ
04617  299B  A5 85                 LDA MATH.MULTIPLY32.FACTOR2$+1
04618  299D  D0 09                 BNE @NZ
04619  299F  A5 86                 LDA MATH.MULTIPLY32.FACTOR2$+2
04620  29A1  D0 05                 BNE @NZ
04621  29A3  A5 87                 LDA MATH.MULTIPLY32.FACTOR2$+3
04622  29A5  D0 01                 BNE @NZ
04623  29A7  60                    RTS
04624  29A8             @NZ
04625  29A8  A5 84                 LDA MATH.MULTIPLY32.FACTOR2$                     ; IF FACTOR2 IS ODD
04626  29AA  29 01                 AND #$01
04627  29AC  F0 19                 BEQ @SKIP
04628  29AE                        
04629  29AE  A5 80                 LDA MATH.MULTIPLY32.FACTOR1$                     ; PRODUCT += FACTOR1
04630  29B0  18                    CLC
04631  29B1  65 88                 ADC MATH.MULTIPLY32.PRODUCT$
04632  29B3  85 88                 STA MATH.MULTIPLY32.PRODUCT$
04633  29B5                        
04634  29B5  A5 81                 LDA MATH.MULTIPLY32.FACTOR1$+1
04635  29B7  65 89                 ADC MATH.MULTIPLY32.PRODUCT$+1
04636  29B9  85 89                 STA MATH.MULTIPLY32.PRODUCT$+1
04637  29BB                        
04638  29BB  A5 82                 LDA MATH.MULTIPLY32.FACTOR1$+2
04639  29BD  65 8A                 ADC MATH.MULTIPLY32.PRODUCT$+2
04640  29BF  85 8A                 STA MATH.MULTIPLY32.PRODUCT$+2
04641  29C1             
04642  29C1  A5 83                 LDA MATH.MULTIPLY32.FACTOR1$+3
04643  29C3  65 8B                 ADC MATH.MULTIPLY32.PRODUCT$+3
04644  29C5  85 8B                 STA MATH.MULTIPLY32.PRODUCT$+3
04645  29C7             
04646  29C7             @SKIP
04647  29C7  06 80                 ASL MATH.MULTIPLY32.FACTOR1$
04648  29C9  26 81                 ROL MATH.MULTIPLY32.FACTOR1$+1
04649  29CB  26 82                 ROL MATH.MULTIPLY32.FACTOR1$+2
04650  29CD  26 83                 ROL MATH.MULTIPLY32.FACTOR1$+3
04651  29CF  46 87                 LSR MATH.MULTIPLY32.FACTOR2$+3
04652  29D1  66 86                 ROR MATH.MULTIPLY32.FACTOR2$+2
04653  29D3  66 85                 ROR MATH.MULTIPLY32.FACTOR2$+1
04654  29D5  66 84                 ROR MATH.MULTIPLY32.FACTOR2$
04655  29D7             
04656  29D7  4C 97 29              JMP @LOOP                       ; END WHILE
04657  29DA             
04658  29DA             
04659  29DA             ;ALIGN $100
04660  29DA             
04661  29DA             MATH.DIVIDE8.DIVISOR$ = $80 ; 1 BYTE
04662  29DA             MATH.DIVIDE8.DIVIDEND$ = $81 ; 1 BYTE
04663  29DA             MATH.DIVIDE8.QUOTIENT$ = MATH.DIVIDE8.DIVIDEND$ ; 1 BYTE
04664  29DA             MATH.DIVIDE8.REMAINDER$ = $82 ; 1 BYTE
04665  29DA             
04666  29DA             MATH.DIVIDE8$ 
04667  29DA                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:8BIT_DIVIDE_8BIT_PRODUCT
04668  29DA  A9 00                 LDA #$00
04669  29DC  A2 07                 LDX #$07
04670  29DE  18                    CLC
04671  29DF             @LOOP1
04672  29DF  26 81                 ROL MATH.DIVIDE8.DIVIDEND$
04673  29E1  2A                    ROL
04674  29E2  C5 80                 CMP MATH.DIVIDE8.DIVISOR$
04675  29E4  90 02                 BCC @LOOP2
04676  29E6  E5 80                 SBC MATH.DIVIDE8.DIVISOR$
04677  29E8             @LOOP2
04678  29E8  CA                    DEX
04679  29E9  10 F4                 BPL @LOOP1
04680  29EB  26 81                 ROL MATH.DIVIDE8.DIVIDEND$
04681  29ED  85 82                 STA MATH.DIVIDE8.REMAINDER$
04682  29EF  60                    RTS
04683  29F0             
04684  29F0             ALIGN      $100
04685  2A00             
04686  2A00             MATH.DIVIDE16.DIVISOR$ = $80 ; 2 BYTES
04687  2A00             MATH.DIVIDE16.DIVIDEND$ = $82 ; 2 BYTES
04688  2A00             MATH.DIVIDE16.QUOTIENT$ = MATH.DIVIDE16.DIVIDEND$ ; 2 BYTES
04689  2A00             MATH.DIVIDE16.REMAINDER$ = $84 ; 2 BYTES
04690  2A00             
04691  2A00             MATH.DIVIDE16$ 
04692  2A00                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:16BIT_DIVISION_16-BIT_RESULT
04693  2A00  A9 00                 LDA #0          ;PRESET REMAINDER TO 0
04694  2A02  85 84                 STA MATH.DIVIDE16.REMAINDER$
04695  2A04  85 85                 STA MATH.DIVIDE16.REMAINDER$+1
04696  2A06  A2 10                 LDX #16         ;REPEAT FOR EACH BIT: ...
04697  2A08             
04698  2A08             @LOOP
04699  2A08  06 82                 ASL MATH.DIVIDE16.DIVIDEND$    ;DIVIDEND LB & HB*2, MSB -> CARRY
04700  2A0A  26 83                 ROL MATH.DIVIDE16.DIVIDEND$+1
04701  2A0C  26 84                 ROL MATH.DIVIDE16.REMAINDER$   ;REMAINDER LB & HB * 2 + MSB FROM CARRY
04702  2A0E  26 85                 ROL MATH.DIVIDE16.REMAINDER$+1
04703  2A10  A5 84                 LDA MATH.DIVIDE16.REMAINDER$
04704  2A12  38                    SEC
04705  2A13  E5 80                 SBC MATH.DIVIDE16.DIVISOR$     ;SUBSTRACT DIVISOR TO SEE IF IT FITS IN
04706  2A15  A8                    TAY             ;LB RESULT -> Y, FOR WE MAY NEED IT LATER
04707  2A16  A5 85                 LDA MATH.DIVIDE16.REMAINDER$+1
04708  2A18  E5 81                 SBC MATH.DIVIDE16.DIVISOR$+1
04709  2A1A  90 06                 BCC @SKIP        ;IF CARRY=0 THEN DIVISOR DIDN'T FIT IN YET
04710  2A1C             
04711  2A1C  85 85                 STA MATH.DIVIDE16.REMAINDER$+1 ;ELSE SAVE SUBSTRACTION RESULT AS NEW REMAINDER,
04712  2A1E  84 84                 STY MATH.DIVIDE16.REMAINDER$
04713  2A20  E6 82                 INC MATH.DIVIDE16.QUOTIENT$      ;AND INCREMENT RESULT CAUSE DIVISOR FIT IN 1 TIMES
04714  2A22             
04715  2A22             @SKIP      
04716  2A22  CA                    DEX
04717  2A23  D0 E3                 BNE @LOOP
04718  2A25  60                    RTS
04719  2A26             
04720  2A26             MATH.DIVIDE32.DIVISOR$ = $80 ; 4 BYTES
04721  2A26             MATH.DIVIDE32.DIVIDEND$ = $84 ; 4 BYTES
04722  2A26             MATH.DIVIDE32.QUOTIENT$ = MATH.DIVIDE32.DIVIDEND$ ; 4 BYTES
04723  2A26             MATH.DIVIDE32.REMAINDER$ = $8C ; 4 BYTES (DON'T USE $88-$8B AS THIS WILL MESS UP TIME.GETTICKS)
04724  2A26             MATH.DIVIDE32.TEMP1 = $FB ; 1 BYTE
04725  2A26             MATH.DIVIDE32.TEMP2 = $FE ; 1 BYTE
04726  2A26             
04727  2A26             MATH.DIVIDE32$ 
04728  2A26                        ; HTTP://WWW.CODEBASE64.ORG/DOKU.PHP?ID=BASE:24BIT_DIVISION_24-BIT_RESULT
04729  2A26  A9 00                 LDA #0          ;PRESET REMAINDER TO 0
04730  2A28  85 8C                 STA MATH.DIVIDE32.REMAINDER$
04731  2A2A  85 8D                 STA MATH.DIVIDE32.REMAINDER$+1
04732  2A2C  85 8E                 STA MATH.DIVIDE32.REMAINDER$+2
04733  2A2E  85 8F                 STA MATH.DIVIDE32.REMAINDER$+3
04734  2A30  85 FB                 STA MATH.DIVIDE32.TEMP1
04735  2A32  85 FE                 STA MATH.DIVIDE32.TEMP2
04736  2A34  A2 20                 LDX #32         ;REPEAT FOR EACH BIT: ...
04737  2A36             
04738  2A36             @DIVLOOP   
04739  2A36  06 84                 ASL MATH.DIVIDE32.DIVIDEND$    ;DIVIDEND LB & HB*2, MSB -> CARRY
04740  2A38  26 85                 ROL MATH.DIVIDE32.DIVIDEND$+1
04741  2A3A  26 86                 ROL MATH.DIVIDE32.DIVIDEND$+2
04742  2A3C  26 87                 ROL MATH.DIVIDE32.DIVIDEND$+3
04743  2A3E  26 8C                 ROL MATH.DIVIDE32.REMAINDER$   ;REMAINDER LB & HB * 2 + MSB FROM CARRY
04744  2A40  26 8D                 ROL MATH.DIVIDE32.REMAINDER$+1
04745  2A42  26 8E                 ROL MATH.DIVIDE32.REMAINDER$+2
04746  2A44  26 8F                 ROL MATH.DIVIDE32.REMAINDER$+3
04747  2A46  A5 8C                 LDA MATH.DIVIDE32.REMAINDER$
04748  2A48  38                    SEC
04749  2A49  E5 80                 SBC MATH.DIVIDE32.DIVISOR$     ;SUBSTRACT DIVISOR TO SEE IF IT FITS IN
04750  2A4B  A8                    TAY             ;LB RESULT -> Y, FOR WE MAY NEED IT LATER
04751  2A4C  A5 8D                 LDA MATH.DIVIDE32.REMAINDER$+1
04752  2A4E  E5 81                 SBC MATH.DIVIDE32.DIVISOR$+1
04753  2A50  85 FB                 STA MATH.DIVIDE32.TEMP1
04754  2A52  A5 8E                 LDA MATH.DIVIDE32.REMAINDER$+2
04755  2A54  E5 82                 SBC MATH.DIVIDE32.DIVISOR$+2
04756  2A56  85 FE                 STA MATH.DIVIDE32.TEMP2
04757  2A58  A5 8F                 LDA MATH.DIVIDE32.REMAINDER$+3
04758  2A5A  E5 83                 SBC MATH.DIVIDE32.DIVISOR$+3
04759  2A5C  90 0E                 BCC @SKIP        ;IF CARRY=0 THEN DIVISOR DIDN'T FIT IN YET
04760  2A5E             
04761  2A5E  85 8F                 STA MATH.DIVIDE32.REMAINDER$+3 ;ELSE SAVE SUBSTRACTION RESULT AS NEW REMAINDER,
04762  2A60  A5 FE                 LDA MATH.DIVIDE32.TEMP2
04763  2A62  85 8E                 STA MATH.DIVIDE32.REMAINDER$+2 ;ELSE SAVE SUBSTRACTION RESULT AS NEW REMAINDER,
04764  2A64  A5 FB                 LDA MATH.DIVIDE32.TEMP1
04765  2A66  85 8D                 STA MATH.DIVIDE32.REMAINDER$+1
04766  2A68  84 8C                 STY MATH.DIVIDE32.REMAINDER$
04767  2A6A  E6 84                 INC MATH.DIVIDE32.DIVIDEND$    ;AND INCREMENT RESULT CAUSE DIVISOR FIT IN 1 TIMES
04768  2A6C             
04769  2A6C             @SKIP      
04770  2A6C  CA                    DEX
04771  2A6D                        ;BNE @DIVLOOP
04772  2A6D  F0 03                 BEQ @DONE
04773  2A6F  4C 36 2A              JMP @DIVLOOP
04774  2A72             
04775  2A72             @DONE
04776  2A72  60                    RTS
04777  2A73             
04778  2A73             MATH.ABS16.INTEGER$ = $80 ; 2 BYTES
04779  2A73             MATH.ABS16.VALUE$ = $84 ; 2 BYTES
04780  2A73             MATH.ABS16$ 
04781  2A73  A5 80                 LDA MATH.ABS16.INTEGER$
04782  2A75  A4 81                 LDY MATH.ABS16.INTEGER$+1
04783  2A77  A6 81                 LDX MATH.ABS16.INTEGER$+1
04784  2A79  10 10                 BPL @END     ;IF THE NUMBER IS POSITIVE, EXIT
04785  2A7B  38                    SEC           ;ELSE TAKE THE 2'S COMPLEMENT OF THE NEGATIVE
04786  2A7C  85 81                 STA MATH.ABS16.INTEGER$+1       ;  VALUE TO GET THE POSITIVE VALUE
04787  2A7E  A9 00                 LDA #$00
04788  2A80  E5 81                 SBC MATH.ABS16.INTEGER$+1
04789  2A82  48                    PHA
04790  2A83  84 81                 STY MATH.ABS16.INTEGER$+1
04791  2A85  A9 00                 LDA #$00
04792  2A87  E5 81                 SBC MATH.ABS16.INTEGER$+1
04793  2A89  A8                    TAY
04794  2A8A  68                    PLA
04795  2A8B             @END
04796  2A8B  85 84                 STA MATH.ABS16.VALUE$
04797  2A8D  84 85                 STY MATH.ABS16.VALUE$+1
04798  2A8F  60                    RTS
04799  2A90             
04800  2A90             ; SEE MEMORY.SWAP$
04801  2A90             ;MATH.SWAP16.INTADDRESS1$ = $80 ; 2 BYTES
04802  2A90             ;MATH.SWAP16.INTADDRESS2$ = $84 ; 2 BYTES
04803  2A90             ;MATH.SWAP16.TEMP = $88 ; 2 BYTES
04804  2A90             ;MATH.SWAP16$
04805  2A90             ;        ; TEMP = INTEGER1
04806  2A90             ;        LDY #$00
04807  2A90             ;        LDA (MATH.SWAP16.INTADDRESS1$),Y
04808  2A90             ;        STA MATH.SWAP16.TEMP
04809  2A90             ;        INY
04810  2A90             ;        LDA (MATH.SWAP16.INTADDRESS1$),Y
04811  2A90             ;        STA MATH.SWAP16.TEMP+1
04812  2A90             
04813  2A90             ;        ; INTEGER1 = INTEGER2
04814  2A90             ;        LDY #$00
04815  2A90             ;        LDA (MATH.SWAP16.INTADDRESS2$),Y
04816  2A90             ;        STA (MATH.SWAP16.INTADDRESS1$),Y
04817  2A90             ;        INY
04818  2A90             ;        LDA (MATH.SWAP16.INTADDRESS2$),Y
04819  2A90             ;        STA (MATH.SWAP16.INTADDRESS1$),Y
04820  2A90             
04821  2A90             ;        ; INTEGER2 = TEMP
04822  2A90             ;        LDY #$00
04823  2A90             ;        LDA MATH.SWAP16.TEMP
04824  2A90             ;        STA (MATH.SWAP16.INTADDRESS2$),Y
04825  2A90             ;        INY
04826  2A90             ;        LDA MATH.SWAP16.TEMP+1
04827  2A90             ;        STA (MATH.SWAP16.INTADDRESS2$),Y
04828  2A90             
04829  2A90             ;        RTS
04830  2A90             
04831  2A90             MATH.EXPONENT8.BASE$ = $8A
04832  2A90             MATH.EXPONENT8.POWER$ = $8B
04833  2A90             MATH.EXPONENT8.VALUE$ = $8C
04834  2A90             MATH.EXPONENT8$ 
04835  2A90             
04836  2A90  A9 01                 LDA #$01
04837  2A92  85 8C                 STA MATH.EXPONENT8.VALUE$
04838  2A94             
04839  2A94             @LOOP
04840  2A94  A5 8B                 LDA MATH.EXPONENT8.POWER$
04841  2A96  D0 01                 BNE @CONTINUE
04842  2A98  60                    RTS
04843  2A99             @CONTINUE
04844  2A99  A5 8A                 LDA MATH.EXPONENT8.BASE$
04845  2A9B  85 80                 STA MATH.MULTIPLY8.FACTOR1$
04846  2A9D  A5 8C                 LDA MATH.EXPONENT8.VALUE$
04847  2A9F  85 82                 STA MATH.MULTIPLY8.FACTOR2$
04848  2AA1  20 48 29              JSR MATH.MULTIPLY8$
04849  2AA4  A5 83                 LDA MATH.MULTIPLY8.PRODUCT$
04850  2AA6  85 8C                 STA MATH.EXPONENT8.VALUE$
04851  2AA8  C6 8B                 DEC MATH.EXPONENT8.POWER$
04852  2AAA  4C 94 2A              JMP @LOOP
04853  2AAD             
04854  2AAD             
04855  2AAD             
04856  2AAD             
04857  2AAD             
04858  2AAD             
04859  2AAD             ;ALIGN $100
04860  2AAD             
04861  2AAD             STRING.CREATE.CHARACTER$ = $02 ; 1 BYTE
04862  2AAD             STRING.CREATE.LENGTH$ = $FB ; 2 BYTES
04863  2AAD             STRING.CREATE.ADDRESS$ = $7A ; 2 BYTES
04864  2AAD             STRING.CREATE.ADDRESS_LR = $FD ; 2 BYTES
04865  2AAD             STRING.CREATE$ 
04866  2AAD             
04867  2AAD                        ; INCREASE THE LENGTH BY ONE.
04868  2AAD  20 03 2B              JSR STRING.CREATE.INC_LENGTH ; LENGTH = LENGTH + 1
04869  2AB0             
04870  2AB0                        ; ALLOCATE THE MEMORY BLOCK.
04871  2AB0  A5 FB                 LDA STRING.CREATE.LENGTH$
04872  2AB2  85 75                 STA MEMORY.ALLOCATE.LENGTH$
04873  2AB4  A5 FC                 LDA STRING.CREATE.LENGTH$+1
04874  2AB6  85 76                 STA MEMORY.ALLOCATE.LENGTH$+1
04875  2AB8             
04876  2AB8  20 9D 10              JSR MEMORY.ALLOCATE$ ; ADDRESS$ = MEMORY.ALLOCATE$(LENGTH)
04877  2ABB             
04878  2ABB  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
04879  2ABD  85 7A                 STA STRING.CREATE.ADDRESS$
04880  2ABF  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
04881  2AC1  85 7B                 STA STRING.CREATE.ADDRESS$+1
04882  2AC3             
04883  2AC3  20 1F 2B              JSR STRING.CREATE.DEC_LENGTH ; LENGTH = LENGTH - 1
04884  2AC6             
04885  2AC6                        ; FILL THE MEMORY WITH THE DEFAULT CHARACTER.
04886  2AC6  A5 02                 LDA STRING.CREATE.CHARACTER$
04887  2AC8  C9 00                 CMP #$00
04888  2ACA  F0 15                 BEQ @SKIPFILLSTR ; SKIP THE FILL IF THE DEFAULT CHARACTER IS $00
04889  2ACC  85 75                 STA MEMORY.FILL16.VALUE$
04890  2ACE             
04891  2ACE  A5 7A                 LDA STRING.CREATE.ADDRESS$
04892  2AD0  85 73                 STA MEMORY.FILL16.ADDRESS$
04893  2AD2  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
04894  2AD4  85 74                 STA MEMORY.FILL16.ADDRESS$+1
04895  2AD6             
04896  2AD6  A5 FB                 LDA STRING.CREATE.LENGTH$
04897  2AD8  85 77                 STA MEMORY.FILL16.LENGTH$
04898  2ADA  A5 FC                 LDA STRING.CREATE.LENGTH$+1
04899  2ADC  85 78                 STA MEMORY.FILL16.LENGTH$+1
04900  2ADE             
04901  2ADE  20 15 10              JSR MEMORY.FILL16$
04902  2AE1             @SKIPFILLSTR 
04903  2AE1             
04904  2AE1                        ; CACULATE THE LOCATION OF THE LAST CHARACTER.
04905  2AE1  A5 7A                 LDA STRING.CREATE.ADDRESS$
04906  2AE3  85 80                 STA MATH.ADD16.ADDEND1$
04907  2AE5  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
04908  2AE7  85 81                 STA MATH.ADD16.ADDEND1$+1
04909  2AE9             
04910  2AE9  A5 FB                 LDA STRING.CREATE.LENGTH$
04911  2AEB  85 82                 STA MATH.ADD16.ADDEND2$
04912  2AED  A5 FC                 LDA STRING.CREATE.LENGTH$+1
04913  2AEF  85 83                 STA MATH.ADD16.ADDEND2$+1
04914  2AF1             
04915  2AF1  20 00 28              JSR MATH.ADD16$ ; ADDRESS_LR = ADDRESS + LENGTH
04916  2AF4             
04917  2AF4  A5 84                 LDA MATH.ADD16.SUM$
04918  2AF6  85 FD                 STA STRING.CREATE.ADDRESS_LR
04919  2AF8  A5 85                 LDA MATH.ADD16.SUM$+1
04920  2AFA  85 FE                 STA STRING.CREATE.ADDRESS_LR+1
04921  2AFC             
04922  2AFC                        ; THE LAST ADDRESS NEEDS TO BE THE NULL$ CHARACTER.
04923  2AFC  A0 00                 LDY #$00
04924  2AFE  A9 FF                 LDA #CONSOLE.NULL$
04925  2B00  91 FD                 STA (STRING.CREATE.ADDRESS_LR),Y
04926  2B02             
04927  2B02  60                    RTS
04928  2B03             
04929  2B03             STRING.CREATE.INC_LENGTH 
04930  2B03  A5 FB                 LDA STRING.CREATE.LENGTH$
04931  2B05  85 80                 STA MATH.ADD16.ADDEND1$
04932  2B07  A5 FC                 LDA STRING.CREATE.LENGTH$+1
04933  2B09  85 81                 STA MATH.ADD16.ADDEND1$+1
04934  2B0B             
04935  2B0B  A9 01                 LDA #$01
04936  2B0D  85 82                 STA MATH.ADD16.ADDEND2$
04937  2B0F  A9 00                 LDA #$00
04938  2B11  85 83                 STA MATH.ADD16.ADDEND2$+1
04939  2B13             
04940  2B13  20 00 28              JSR MATH.ADD16$ ; LENGTH = LENGTH + 1
04941  2B16             
04942  2B16  A5 84                 LDA MATH.ADD16.SUM$
04943  2B18  85 FB                 STA STRING.CREATE.LENGTH$
04944  2B1A  A5 85                 LDA MATH.ADD16.SUM$+1
04945  2B1C  85 FC                 STA STRING.CREATE.LENGTH$+1
04946  2B1E             
04947  2B1E  60                    RTS
04948  2B1F             
04949  2B1F             STRING.CREATE.DEC_LENGTH 
04950  2B1F  A5 FB                 LDA STRING.CREATE.LENGTH$
04951  2B21  85 80                 STA MATH.SUBTRACT16.MENUEND$
04952  2B23  A5 FC                 LDA STRING.CREATE.LENGTH$+1
04953  2B25  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
04954  2B27             
04955  2B27  A9 01                 LDA #$01
04956  2B29  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
04957  2B2B  A9 00                 LDA #$00
04958  2B2D  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
04959  2B2F             
04960  2B2F  20 96 28              JSR MATH.SUBTRACT16$ ; LENGTH = LENGTH - 1
04961  2B32             
04962  2B32  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
04963  2B34  85 FB                 STA STRING.CREATE.LENGTH$
04964  2B36  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
04965  2B38  85 FC                 STA STRING.CREATE.LENGTH$+1
04966  2B3A             
04967  2B3A  60                    RTS
04968  2B3B             
04969  2B3B             STRING.ISHEAP.ADDRESS$ = $7A ; 2 BYTES
04970  2B3B             STRING.ISHEAP.HEAP$ = $73 ; 1 BYTE
04971  2B3B             STRING.ISHEAP$ 
04972  2B3B             
04973  2B3B                        ; DEFAULT HEAP$ = 0
04974  2B3B  A9 00                 LDA #$00
04975  2B3D  85 73                 STA STRING.ISHEAP.HEAP$
04976  2B3F             
04977  2B3F                        ; DETERMINE WHETHER OR NOT THE ADDRESS IS IN THE MEMORY HEAP.
04978  2B3F  A5 7A                 LDA STRING.ISHEAP.ADDRESS$
04979  2B41  85 80                 STA MATH.CMP16.NUM1$
04980  2B43  A5 7B                 LDA STRING.ISHEAP.ADDRESS$+1
04981  2B45  85 81                 STA MATH.CMP16.NUM1$+1
04982  2B47             
04983  2B47  AD 5F 10              LDA MEMORY.HEAPADRESS_LR
04984  2B4A  85 82                 STA MATH.CMP16.NUM2$
04985  2B4C  AD 60 10              LDA MEMORY.HEAPADRESS_LR+1
04986  2B4F  85 83                 STA MATH.CMP16.NUM2$+1
04987  2B51             
04988  2B51  20 E4 28              JSR MATH.CMP16$ ; CARRY FLAG IS SET IF ADDRESS$ >= MEMORY.HEAPADDRESS_LR
04989  2B54  B0 1B                 BCS @END
04990  2B56                        
04991  2B56                        ; DETERMINE WHETHER OR NOT THE ADDRESS IS IN THE MEMORY HEAP.
04992  2B56  AD 5D 10              LDA MEMORY.HEAPADRESS
04993  2B59  85 80                 STA MATH.CMP16.NUM1$
04994  2B5B  AD 5E 10              LDA MEMORY.HEAPADRESS+1
04995  2B5E  85 81                 STA MATH.CMP16.NUM1$+1
04996  2B60             
04997  2B60  A5 7A                 LDA STRING.ISHEAP.ADDRESS$
04998  2B62  85 82                 STA MATH.CMP16.NUM2$
04999  2B64  A5 7B                 LDA STRING.ISHEAP.ADDRESS$+1
05000  2B66  85 83                 STA MATH.CMP16.NUM2$+1
05001  2B68             
05002  2B68  20 E4 28              JSR MATH.CMP16$ ; CARRY FLAG IS SET IF MEMORY.HEAPADRESS$ >= ADDRESS$
05003  2B6B  B0 04                 BCS @END
05004  2B6D             
05005  2B6D  A9 01                 LDA #$01
05006  2B6F  85 73                 STA STRING.ISHEAP.HEAP$
05007  2B71             
05008  2B71             @END
05009  2B71  60                    RTS
05010  2B72             
05011  2B72             STRING.GETLENGTH.ADDRESS$ = $7A ; 2 BYTES
05012  2B72             STRING.GETLENGTH.LENGTH$ = $FB ; 2 BYTES
05013  2B72             STRING.GETLENGTH$ 
05014  2B72                        
05015  2B72                        ; CHECK TO SEE IF THE ADDRESS IS FROM THE HEAP
05016  2B72  A5 7A                 LDA STRING.GETLENGTH.ADDRESS$
05017  2B74  85 7A                 STA STRING.ISHEAP.ADDRESS$
05018  2B76  A5 7B                 LDA STRING.GETLENGTH.ADDRESS$+1
05019  2B78  85 7B                 STA STRING.ISHEAP.ADDRESS$+1
05020  2B7A             
05021  2B7A  20 3B 2B              JSR STRING.ISHEAP$ ; STRING.ISHEAP$(ADDRESS$)
05022  2B7D  A5 73                 LDA STRING.ISHEAP.HEAP$
05023  2B7F  C9 01                 CMP #$01
05024  2B81  F0 06                 BEQ @GETSIZEOF
05025  2B83  20 8D 2B              JSR STRING.GETLENGTH_GETNULLCHAR
05026  2B86  4C 8C 2B              JMP @END
05027  2B89             @GETSIZEOF 
05028  2B89  20 A8 2B              JSR STRING.GETLENGTH_GETSIZEOF
05029  2B8C             @END
05030  2B8C  60                    RTS
05031  2B8D             
05032  2B8D             STRING.GETLENGTH_GETNULLCHAR 
05033  2B8D                        ; WE SHOULD ONLY GET HERE IF THE STRING IS A CONSTANT.
05034  2B8D             
05035  2B8D                        ; COUNT UP THE NUMBER OF NON-NULL$ CHARACTERS.
05036  2B8D  A0 00                 LDY #$00
05037  2B8F  84 FB                 STY STRING.GETLENGTH.LENGTH$
05038  2B91  84 FC                 STY STRING.GETLENGTH.LENGTH$+1
05039  2B93             @LOOP
05040  2B93  B1 7A                 LDA (STRING.GETLENGTH.ADDRESS$),Y
05041  2B95  C9 FF                 CMP #CONSOLE.NULL$
05042  2B97  F0 0C                 BEQ @DONE
05043  2B99  C8                    INY
05044  2B9A  C0 00                 CPY #$00 ; IF Y = $00 THEN WE WRAPPED AROUND THE LO-BYTE
05045  2B9C  D0 F5                 BNE @LOOP
05046  2B9E                        ; INCREMENT THE ADDRESS AND LENGTH HI-BYTES
05047  2B9E  E6 7B                 INC STRING.GETLENGTH.ADDRESS$+1
05048  2BA0  E6 FC                 INC STRING.GETLENGTH.LENGTH$+1
05049  2BA2  4C 93 2B              JMP @LOOP
05050  2BA5             @DONE
05051  2BA5  84 FB                 STY STRING.GETLENGTH.LENGTH$
05052  2BA7             
05053  2BA7  60                    RTS
05054  2BA8             
05055  2BA8             STRING.GETLENGTH_GETSIZEOF 
05056  2BA8                        ; WE SHOULD ONLY GET HERE IF THE STRING IS CREATED VIA STRING.CREATE$
05057  2BA8             
05058  2BA8  A5 7A                 LDA STRING.GETLENGTH.ADDRESS$
05059  2BAA  85 7A                 STA MEMORY.SIZEOF.ADDRESS$
05060  2BAC  A5 7B                 LDA STRING.GETLENGTH.ADDRESS$+1
05061  2BAE  85 7B                 STA MEMORY.SIZEOF.ADDRESS$+1
05062  2BB0             
05063  2BB0  20 60 12              JSR MEMORY.SIZEOF$ ; LENGTH$ = MEMORY.SIZEOF$(ADDRESS$)
05064  2BB3             
05065  2BB3                        ; MEMORY.SIZEOF() RETURNS THE LENGTH OF THE MEMORY BLOCK
05066  2BB3                        ; INCLUDING THE 2 BYTES WHICH IS THE LENGTH OF THE BLOCK AND
05067  2BB3                        ; BECAUSE STRING.CREATE$ APPENDS A NULL$ CHARACTER,
05068  2BB3                        ; WE NEED TO SUBTRACT 3 BYTES FROM SIZEOF TO GET THE LENGTH.
05069  2BB3                        
05070  2BB3  A5 7C                 LDA MEMORY.SIZEOF.LENGTH$
05071  2BB5  85 80                 STA MATH.SUBTRACT16.MENUEND$
05072  2BB7  A5 7D                 LDA MEMORY.SIZEOF.LENGTH$+1
05073  2BB9  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
05074  2BBB             
05075  2BBB  A9 03                 LDA #$03
05076  2BBD  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
05077  2BBF  A9 00                 LDA #$00
05078  2BC1  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
05079  2BC3             
05080  2BC3  20 96 28              JSR MATH.SUBTRACT16$ ; LENGTH$ = LENGTH$ - 1
05081  2BC6             
05082  2BC6  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
05083  2BC8  85 FB                 STA STRING.GETLENGTH.LENGTH$
05084  2BCA  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
05085  2BCC  85 FC                 STA STRING.GETLENGTH.LENGTH$+1
05086  2BCE             
05087  2BCE  60                    RTS
05088  2BCF             
05089  2BCF             ;ALIGN $100
05090  2BCF             
05091  2BCF             
05092  2BCF             STRING.COPY.SRCADDRESS$ = $7E ; 2 BYTES
05093  2BCF             STRING.COPY.DSTADDRESS$ = $7A ; 2 BYTES
05094  2BCF             STRING.COPY$ 
05095  2BCF                        ; CREATES A NEW INSTANCE OF A STRING WITH THE SAME CHARACTERS AS THE SOURCE
05096  2BCF             
05097  2BCF                        ; GET THE LENGTH OF THE SOURCE ADDRESS
05098  2BCF  A5 7E                 LDA STRING.COPY.SRCADDRESS$
05099  2BD1  85 7A                 STA STRING.GETLENGTH.ADDRESS$
05100  2BD3  A5 7F                 LDA STRING.COPY.SRCADDRESS$+1
05101  2BD5  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
05102  2BD7  20 72 2B              JSR STRING.GETLENGTH$
05103  2BDA             
05104  2BDA                        ; CREATE THE NEW STRING
05105  2BDA  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05106  2BDC  85 FB                 STA STRING.CREATE.LENGTH$
05107  2BDE  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05108  2BE0  85 FC                 STA STRING.CREATE.LENGTH$+1
05109  2BE2             
05110  2BE2                        ; SETTING #0 WILL TELL THE CREATE ROUTINE TO SKIP THE FILL PART
05111  2BE2  A9 00                 LDA #$00
05112  2BE4  85 02                 STA STRING.CREATE.CHARACTER$
05113  2BE6  20 AD 2A              JSR STRING.CREATE$
05114  2BE9             
05115  2BE9  A5 7A                 LDA STRING.CREATE.ADDRESS$
05116  2BEB  85 7A                 STA STRING.COPY.DSTADDRESS$
05117  2BED  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
05118  2BEF  85 7B                 STA STRING.COPY.DSTADDRESS$+1
05119  2BF1             
05120  2BF1                        ; COPY THE CONTENTS OF SOURCE ADDRESS TO ADDRESS
05121  2BF1  A5 7E                 LDA STRING.COPY.SRCADDRESS$
05122  2BF3  85 73                 STA MEMORY.COPY16.SOURCE$
05123  2BF5  A5 7F                 LDA STRING.COPY.SRCADDRESS$+1
05124  2BF7  85 74                 STA MEMORY.COPY16.SOURCE$+1
05125  2BF9             
05126  2BF9  A5 7A                 LDA STRING.COPY.DSTADDRESS$
05127  2BFB  85 75                 STA MEMORY.COPY16.DESTINATION$
05128  2BFD  A5 7B                 LDA STRING.COPY.DSTADDRESS$+1
05129  2BFF  85 76                 STA MEMORY.COPY16.DESTINATION$+1
05130  2C01             
05131  2C01  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05132  2C03  85 78                 STA MEMORY.COPY16.LENGTH$
05133  2C05  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05134  2C07  85 79                 STA MEMORY.COPY16.LENGTH$+1
05135  2C09             
05136  2C09  20 9C 0F              JSR MEMORY.COPY16$
05137  2C0C             
05138  2C0C  60                    RTS
05139  2C0D             
05140  2C0D             STRING.CONTAINS.ADDRESS1$ = $7A ; 2 BYTES
05141  2C0D             STRING.CONTAINS.ADDRESS2$ = $7C ; 2 BYTES
05142  2C0D             STRING.CONTAINS.VALUE$ = $73 ; 1 BYTE
05143  2C0D             STRING.CONTAINS$ 
05144  2C0D                        ; SETS VALUE$ = 1 IF THE STRING AT ADDRESS1$ CONTAINS ADDRESS2$
05145  2C0D             
05146  2C0D  A5 7A                 LDA STRING.CONTAINS.ADDRESS1$
05147  2C0F  85 7A                 STA STRING.INDEXOF.ADDRESS1$
05148  2C11  A5 7B                 LDA STRING.CONTAINS.ADDRESS1$+1
05149  2C13  85 7B                 STA STRING.INDEXOF.ADDRESS1$+1
05150  2C15             
05151  2C15  A5 7C                 LDA STRING.CONTAINS.ADDRESS2$
05152  2C17  85 7C                 STA STRING.INDEXOF.ADDRESS2$
05153  2C19  A5 7D                 LDA STRING.CONTAINS.ADDRESS2$+1
05154  2C1B  85 7D                 STA STRING.INDEXOF.ADDRESS2$+1
05155  2C1D             
05156  2C1D  A9 00                 LDA #$00
05157  2C1F  85 7E                 STA STRING.INDEXOF.INDEX$
05158  2C21  85 7F                 STA STRING.INDEXOF.INDEX$+1
05159  2C23             
05160  2C23  20 43 2C              JSR STRING.INDEXOF$ ; INDEX$ = STRING.INDEXOF$(ADDRESS1$, ADDRESS2$, 0)
05161  2C26             
05162  2C26  A5 7E                 LDA STRING.INDEXOF.INDEX$
05163  2C28  85 80                 STA MATH.CMP16.NUM1$
05164  2C2A  A5 7F                 LDA STRING.INDEXOF.INDEX$+1
05165  2C2C  85 81                 STA MATH.CMP16.NUM1$+1
05166  2C2E             
05167  2C2E  A9 FF                 LDA #$FF
05168  2C30  85 82                 STA MATH.CMP16.NUM2$
05169  2C32  85 83                 STA MATH.CMP16.NUM2$+1
05170  2C34             
05171  2C34  20 E4 28              JSR MATH.CMP16$ ; IF INDEX$ <> $FFFF THEN VALUE$ = 1
05172  2C37  D0 05                 BNE @SETVALUE
05173  2C39             @CLEARVALUE 
05174  2C39  A9 00                 LDA #$00
05175  2C3B  4C 40 2C              JMP @END
05176  2C3E             
05177  2C3E             @SETVALUE
05178  2C3E  A9 01                 LDA #$01
05179  2C40             @END
05180  2C40  85 73                 STA STRING.CONTAINS.VALUE$
05181  2C42  60                    RTS
05182  2C43             
05183  2C43             ;ALIGN $100
05184  2C43             
05185  2C43             STRING.INDEXOF.ADDRESS1$ = $7A ; 2 BYTES
05186  2C43             STRING.INDEXOF.ADDRESS2$ = $7C ; 2 BYTES
05187  2C43             STRING.INDEXOF.INDEX$ = $7E ; 2 BYTES
05188  2C43             STRING.INDEXOF.CHR1 = $73 ; 1 BYTE
05189  2C43             STRING.INDEXOF.CHR2 = $74 ; 1 BYTE
05190  2C43             STRING.INDEXOF.ADDRESS1_ORG = $FB ; 2 BYTES
05191  2C43             STRING.INDEXOF.ADDRESS2_ORG = $FD ; 2 BYTES
05192  2C43             STRING.INDEXOF$ 
05193  2C43                        ; FIND THE INDEX WHERE THEREE EXISTS AN OCCURANCE OF A STRING WITHIN ANOTHER.
05194  2C43             
05195  2C43  20 1B 1F              JSR MEMORY.PUSHZP$
05196  2C46             
05197  2C46                        ; VERIFY THAT THE LENGTH OF INDEX IS NOT GREATER THAN ADDRESS1$
05198  2C46  A5 7A                 LDA STRING.INDEXOF.ADDRESS1$
05199  2C48  85 7A                 STA STRING.GETLENGTH.ADDRESS$
05200  2C4A  A5 7B                 LDA STRING.INDEXOF.ADDRESS1$+1
05201  2C4C  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
05202  2C4E  20 72 2B              JSR STRING.GETLENGTH$
05203  2C51             
05204  2C51  20 31 1F              JSR MEMORY.PULLZP$
05205  2C54             
05206  2C54  A5 7E                 LDA STRING.INDEXOF.INDEX$
05207  2C56  85 80                 STA MATH.CMP16.NUM1$
05208  2C58  A5 7F                 LDA STRING.INDEXOF.INDEX$+1
05209  2C5A  85 81                 STA MATH.CMP16.NUM1$+1
05210  2C5C             
05211  2C5C  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05212  2C5E  85 82                 STA MATH.CMP16.NUM2$
05213  2C60  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05214  2C62  85 83                 STA MATH.CMP16.NUM2$+1
05215  2C64             
05216  2C64  20 E4 28              JSR MATH.CMP16$
05217  2C67  90 05                 BCC @LENGTHOK ; OK IF INDEX$ < STRING.GETLENGTH$(ADDRESS1$)
05218  2C69  F0 03                 BEQ @LENGTHOK ; OK IF INDEX$ = STRING.GETLENGTH$(ADDRESS1$)
05219  2C6B  4C E1 2C              JMP @NOFOUNDSTR
05220  2C6E             
05221  2C6E             @LENGTHOK
05222  2C6E                        ; STORE THE ORGINAL ADDRESSES
05223  2C6E  A5 7A                 LDA STRING.INDEXOF.ADDRESS1$
05224  2C70  85 FB                 STA STRING.INDEXOF.ADDRESS1_ORG
05225  2C72  A5 7B                 LDA STRING.INDEXOF.ADDRESS1$+1
05226  2C74  85 FC                 STA STRING.INDEXOF.ADDRESS1_ORG+1
05227  2C76                        
05228  2C76  A5 7C                 LDA STRING.INDEXOF.ADDRESS2$
05229  2C78  85 FD                 STA STRING.INDEXOF.ADDRESS2_ORG
05230  2C7A  A5 7D                 LDA STRING.INDEXOF.ADDRESS2$+1
05231  2C7C  85 FE                 STA STRING.INDEXOF.ADDRESS2_ORG+1
05232  2C7E                        
05233  2C7E  4C 8C 2C              JMP @INITADDRESSES
05234  2C81                        
05235  2C81             @NOMATCHCHR 
05236  2C81                        ; INCREMENT INDEX$
05237  2C81  A9 7E                 LDA #<STRING.INDEXOF.INDEX$
05238  2C83  85 86                 STA MATH.INC16.ADDRESS$
05239  2C85  A9 00                 LDA #>STRING.INDEXOF.INDEX$
05240  2C87  85 87                 STA MATH.INC16.ADDRESS$+1
05241  2C89  20 3C 28              JSR MATH.INC16$
05242  2C8C             
05243  2C8C             @INITADDRESSES 
05244  2C8C                        ; UPDATE THE LOCATION OF ADDRESS1$ BY THE VALUE IN INDEX$
05245  2C8C  A5 FB                 LDA STRING.INDEXOF.ADDRESS1_ORG
05246  2C8E  85 80                 STA MATH.ADD16.ADDEND1$
05247  2C90  A5 FC                 LDA STRING.INDEXOF.ADDRESS1_ORG+1
05248  2C92  85 81                 STA MATH.ADD16.ADDEND1$+1
05249  2C94             
05250  2C94  A5 7E                 LDA STRING.INDEXOF.INDEX$
05251  2C96  85 82                 STA MATH.ADD16.ADDEND2$
05252  2C98  A5 7F                 LDA STRING.INDEXOF.INDEX$+1
05253  2C9A  85 83                 STA MATH.ADD16.ADDEND2$+1
05254  2C9C             
05255  2C9C  20 00 28              JSR MATH.ADD16$ ; ADDRESS1$ = ADDRESS1$ + INDEX$
05256  2C9F             
05257  2C9F  A5 84                 LDA MATH.ADD16.SUM$
05258  2CA1  85 7A                 STA STRING.INDEXOF.ADDRESS1$
05259  2CA3  A5 85                 LDA MATH.ADD16.SUM$+1
05260  2CA5  85 7B                 STA STRING.INDEXOF.ADDRESS1$+1
05261  2CA7             
05262  2CA7  A5 FD                 LDA STRING.INDEXOF.ADDRESS2_ORG
05263  2CA9  85 7C                 STA STRING.INDEXOF.ADDRESS2$
05264  2CAB  A5 FE                 LDA STRING.INDEXOF.ADDRESS2_ORG+1
05265  2CAD  85 7D                 STA STRING.INDEXOF.ADDRESS2$+1
05266  2CAF             
05267  2CAF             ;        ; DEFAULT STRING.INDEXOF.INDEX$ TO $FFFF (-1)
05268  2CAF             ;        LDA #$00
05269  2CAF             ;        LDA STRING.INDEXOF.INDEX$
05270  2CAF             ;        LDA STRING.INDEXOF.INDEX$+1
05271  2CAF                        
05272  2CAF                        ; BEGIN MATCHING EACH CHARACTER IN THE ADDRESS2$ WITH ADDRESS1$
05273  2CAF  A0 00                 LDY #$00
05274  2CB1             @LOOP
05275  2CB1  B1 7A                 LDA (STRING.INDEXOF.ADDRESS1$),Y
05276  2CB3  85 73                 STA STRING.INDEXOF.CHR1
05277  2CB5             
05278  2CB5  B1 7C                 LDA (STRING.INDEXOF.ADDRESS2$),Y
05279  2CB7  85 74                 STA STRING.INDEXOF.CHR2
05280  2CB9  C9 FF                 CMP #CONSOLE.NULL$
05281  2CBB  F0 2D                 BEQ @FOUNDSTR
05282  2CBD             
05283  2CBD  A5 73                 LDA STRING.INDEXOF.CHR1
05284  2CBF  C9 FF                 CMP #CONSOLE.NULL$
05285  2CC1  F0 1E                 BEQ @NOFOUNDSTR
05286  2CC3             
05287  2CC3  C5 74                 CMP STRING.INDEXOF.CHR2
05288  2CC5  D0 BA                 BNE @NOMATCHCHR
05289  2CC7                        
05290  2CC7             ;        TAX
05291  2CC7             ;        CMP (STRING.INDEXOF.ADDRESS2$),Y
05292  2CC7             ;        BNE @NOMATCHCHR
05293  2CC7             ;        CPX #CONSOLE.NULL$
05294  2CC7             ;        BEQ @NOFOUNDSTR
05295  2CC7             
05296  2CC7                        ; INCREMENT INDEX$
05297  2CC7  A9 7E                 LDA #<STRING.INDEXOF.INDEX$
05298  2CC9  85 86                 STA MATH.INC16.ADDRESS$
05299  2CCB  A9 00                 LDA #>STRING.INDEXOF.INDEX$
05300  2CCD  85 87                 STA MATH.INC16.ADDRESS$+1
05301  2CCF  20 3C 28              JSR MATH.INC16$
05302  2CD2             
05303  2CD2  C8                    INY
05304  2CD3  C0 00                 CPY #$00
05305  2CD5  F0 03                 BEQ @INCY
05306  2CD7  4C B1 2C              JMP @LOOP
05307  2CDA             
05308  2CDA             @INCY
05309  2CDA  E6 7B                 INC STRING.INDEXOF.ADDRESS1$+1
05310  2CDC  E6 7D                 INC STRING.INDEXOF.ADDRESS2$+1
05311  2CDE  4C B1 2C              JMP @LOOP
05312  2CE1             
05313  2CE1             @NOFOUNDSTR 
05314  2CE1                        ; INDEX$ = $FFFF (NOT FOUND)
05315  2CE1  A9 FF                 LDA #$FF
05316  2CE3  85 7E                 STA STRING.INDEXOF.INDEX$
05317  2CE5  85 7F                 STA STRING.INDEXOF.INDEX$+1
05318  2CE7  4C 10 2D              JMP @END
05319  2CEA             
05320  2CEA             @FOUNDSTR
05321  2CEA                        ; INDEX$ = INDEX$ - STRING.GETLENGTH$(ADDRESS2)
05322  2CEA                        
05323  2CEA  A5 7C                 LDA STRING.INDEXOF.ADDRESS2$
05324  2CEC  85 7A                 STA STRING.GETLENGTH.ADDRESS$
05325  2CEE  A5 7D                 LDA STRING.INDEXOF.ADDRESS2$+1
05326  2CF0  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
05327  2CF2             
05328  2CF2  20 72 2B              JSR STRING.GETLENGTH$
05329  2CF5             
05330  2CF5  A5 7E                 LDA STRING.INDEXOF.INDEX$
05331  2CF7  85 80                 STA MATH.SUBTRACT16.MENUEND$
05332  2CF9  A5 7F                 LDA STRING.INDEXOF.INDEX$+1
05333  2CFB  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
05334  2CFD             
05335  2CFD  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05336  2CFF  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
05337  2D01  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05338  2D03  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
05339  2D05             
05340  2D05  20 96 28              JSR MATH.SUBTRACT16$
05341  2D08             
05342  2D08  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
05343  2D0A  85 7E                 STA STRING.INDEXOF.INDEX$
05344  2D0C  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
05345  2D0E  85 7F                 STA STRING.INDEXOF.INDEX$+1
05346  2D10             
05347  2D10             @END
05348  2D10  60                    RTS
05349  2D11             
05350  2D11             STRING.CONCAT.SRCADDRESS1$ = $E0 ; 2 BYTES
05351  2D11             STRING.CONCAT.SRCADDRESS2$ = $E2 ; 2 BYTES
05352  2D11             STRING.CONCAT.DSTADDRESS$ = $7A ; 2 BYTES
05353  2D11             STRING.CONCAT.SRCLENGTH1 = $E4 ; 2 BYTES
05354  2D11             STRING.CONCAT.SRCLENGTH2 = $E6 ; 2 BYTES
05355  2D11             STRING.CONCAT.DSTLENGTH = $E8 ; 2 BYTES
05356  2D11             STRING.CONCAT.ADDRESS = $EA ; 2 BYTES
05357  2D11             STRING.CONCAT$ 
05358  2D11                        ; RETURNS A NEW STRING WHICH CONTAINS THE CONTENTS OF SRCADDRESS1 + SRCADDRESS2
05359  2D11             
05360  2D11                        ; CREATE A NEW STRING WHICH HAS THE LENGTH OF SRCADDRESS1 + SRCADDRESS2
05361  2D11             
05362  2D11                        ; STRING.CONCAT.SRCLENGTH1 = STRING.GETLENGTH$(STRING.CONCAT.SRCADDRESS1$)
05363  2D11  A5 E0                 LDA STRING.CONCAT.SRCADDRESS1$
05364  2D13  85 7A                 STA STRING.GETLENGTH.ADDRESS$
05365  2D15  A5 E1                 LDA STRING.CONCAT.SRCADDRESS1$+1
05366  2D17  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
05367  2D19  20 72 2B              JSR STRING.GETLENGTH$
05368  2D1C  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05369  2D1E  85 E4                 STA STRING.CONCAT.SRCLENGTH1
05370  2D20  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05371  2D22  85 E5                 STA STRING.CONCAT.SRCLENGTH1+1
05372  2D24             
05373  2D24                        ; STRING.CONCAT.SRCLENGTH2 = STRING.GETLENGTH$(STRING.CONCAT.SRCADDRESS2$)
05374  2D24  A5 E2                 LDA STRING.CONCAT.SRCADDRESS2$
05375  2D26  85 7A                 STA STRING.GETLENGTH.ADDRESS$
05376  2D28  A5 E3                 LDA STRING.CONCAT.SRCADDRESS2$+1
05377  2D2A  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
05378  2D2C  20 72 2B              JSR STRING.GETLENGTH$
05379  2D2F  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05380  2D31  85 E6                 STA STRING.CONCAT.SRCLENGTH2
05381  2D33  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05382  2D35  85 E7                 STA STRING.CONCAT.SRCLENGTH2+1
05383  2D37             
05384  2D37                        ; STRING.CONCAT.DSTLENGTH = STRING.CONCAT.SRCLENGTH1 + STRING.CONCAT.SRCLENGTH2
05385  2D37  A5 E4                 LDA STRING.CONCAT.SRCLENGTH1
05386  2D39  85 80                 STA MATH.ADD16.ADDEND1$
05387  2D3B  A5 E5                 LDA STRING.CONCAT.SRCLENGTH1+1
05388  2D3D  85 81                 STA MATH.ADD16.ADDEND1$+1
05389  2D3F  A5 E6                 LDA STRING.CONCAT.SRCLENGTH2
05390  2D41  85 82                 STA MATH.ADD16.ADDEND2$
05391  2D43  A5 E7                 LDA STRING.CONCAT.SRCLENGTH2+1
05392  2D45  85 83                 STA MATH.ADD16.ADDEND2$+1
05393  2D47  20 00 28              JSR MATH.ADD16$
05394  2D4A  A5 84                 LDA MATH.ADD16.SUM$
05395  2D4C  85 E8                 STA STRING.CONCAT.DSTLENGTH
05396  2D4E  A5 85                 LDA MATH.ADD16.SUM$+1
05397  2D50  85 E9                 STA STRING.CONCAT.DSTLENGTH+1
05398  2D52             
05399  2D52                        ; STRING.CONCAT.DSTADDRESS$ = STRING.CREATE$(STRING.CONCAT.DSTLENGTH, 0)
05400  2D52  A5 E8                 LDA STRING.CONCAT.DSTLENGTH
05401  2D54  85 FB                 STA STRING.CREATE.LENGTH$
05402  2D56  A5 E9                 LDA STRING.CONCAT.DSTLENGTH+1
05403  2D58  85 FC                 STA STRING.CREATE.LENGTH$+1
05404  2D5A  A9 00                 LDA #$00
05405  2D5C  85 02                 STA STRING.CREATE.CHARACTER$
05406  2D5E  20 AD 2A              JSR STRING.CREATE$
05407  2D61  A5 7A                 LDA STRING.CREATE.ADDRESS$
05408  2D63  85 7A                 STA STRING.CONCAT.DSTADDRESS$
05409  2D65  85 EA                 STA STRING.CONCAT.ADDRESS
05410  2D67  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
05411  2D69  85 EB                 STA STRING.CONCAT.ADDRESS+1
05412  2D6B  85 7B                 STA STRING.CONCAT.DSTADDRESS$+1
05413  2D6D             
05414  2D6D                        ; COPY THE CONTENTS FROM SRCADDRESS1 TO DSTADDRESS
05415  2D6D  A5 E0                 LDA STRING.CONCAT.SRCADDRESS1$
05416  2D6F  85 73                 STA MEMORY.COPY16.SOURCE$
05417  2D71  A5 E1                 LDA STRING.CONCAT.SRCADDRESS1$+1
05418  2D73  85 74                 STA MEMORY.COPY16.SOURCE$+1
05419  2D75             
05420  2D75  A5 EA                 LDA STRING.CONCAT.ADDRESS
05421  2D77  85 75                 STA MEMORY.COPY16.DESTINATION$
05422  2D79  A5 EB                 LDA STRING.CONCAT.ADDRESS+1
05423  2D7B  85 76                 STA MEMORY.COPY16.DESTINATION$+1
05424  2D7D             
05425  2D7D  A5 E4                 LDA STRING.CONCAT.SRCLENGTH1
05426  2D7F  85 78                 STA MEMORY.COPY16.LENGTH$
05427  2D81  A5 E5                 LDA STRING.CONCAT.SRCLENGTH1+1
05428  2D83  85 79                 STA MEMORY.COPY16.LENGTH$+1
05429  2D85             
05430  2D85  20 9C 0F              JSR MEMORY.COPY16$
05431  2D88             
05432  2D88                        ; INCREMENT ADDRESS BY SRCLENGTH1
05433  2D88  A5 EA                 LDA STRING.CONCAT.ADDRESS
05434  2D8A  85 80                 STA MATH.ADD16.ADDEND1$
05435  2D8C  85 74                 STA MEMORY.COPY16.SOURCE$+1
05436  2D8E  A5 81                 LDA MATH.ADD16.ADDEND1$+1
05437  2D90                        
05438  2D90  A5 E4                 LDA STRING.CONCAT.SRCLENGTH1
05439  2D92  85 82                 STA MATH.ADD16.ADDEND2$
05440  2D94  A5 E5                 LDA STRING.CONCAT.SRCLENGTH1+1
05441  2D96  85 83                 STA MATH.ADD16.ADDEND2$+1
05442  2D98             
05443  2D98  20 00 28              JSR MATH.ADD16$ ; ADDRESS = ADDRESS + SRCLENGTH1
05444  2D9B             
05445  2D9B  A5 84                 LDA MATH.ADD16.SUM$
05446  2D9D  85 EA                 STA STRING.CONCAT.ADDRESS
05447  2D9F  A5 85                 LDA MATH.ADD16.SUM$+1
05448  2DA1  85 EB                 STA STRING.CONCAT.ADDRESS+1
05449  2DA3             
05450  2DA3                        ; COPY THE CONTENTS FROM SRCADDRESS2 TO DSTADDRESS
05451  2DA3  A5 E2                 LDA STRING.CONCAT.SRCADDRESS2$
05452  2DA5  85 73                 STA MEMORY.COPY16.SOURCE$
05453  2DA7  A5 E3                 LDA STRING.CONCAT.SRCADDRESS2$+1
05454  2DA9  85 74                 STA MEMORY.COPY16.SOURCE$+1
05455  2DAB             
05456  2DAB  A5 EA                 LDA STRING.CONCAT.ADDRESS
05457  2DAD  85 75                 STA MEMORY.COPY16.DESTINATION$
05458  2DAF  85 EB                 STA STRING.CONCAT.ADDRESS+1
05459  2DB1  A5 76                 LDA MEMORY.COPY16.DESTINATION$+1
05460  2DB3             
05461  2DB3  A5 E6                 LDA STRING.CONCAT.SRCLENGTH2
05462  2DB5  85 78                 STA MEMORY.COPY16.LENGTH$
05463  2DB7  A5 E7                 LDA STRING.CONCAT.SRCLENGTH2+1
05464  2DB9  85 79                 STA MEMORY.COPY16.LENGTH$+1
05465  2DBB             
05466  2DBB  20 9C 0F              JSR MEMORY.COPY16$
05467  2DBE             
05468  2DBE  60                    RTS
05469  2DBF             
05470  2DBF             
05471  2DBF             
05472  2DBF             
05473  2DBF             ;ALIGN $100
05474  2DBF             
05475  2DBF             GRAPHICS.MEMORYADDRESS = $6000 ; - $7F3F
05476  2DBF             GRAPHICS.MEMORYADDRESS_2R = $6140
05477  2DBF             GRAPHICS.MEMORYADDRESS_LR = $7E00
05478  2DBF  00 04      GRAPHICS.CURRENTADDRESS WORD CONSOLE.MEMORYADDRESS
05479  2DC1             GRAPHICS.COLORADDRESS = $4400
05480  2DC1  00 44      GRAPHICS.CURRENTCOLORADDR WORD GRAPHICS.COLORADDRESS
05481  2DC3             GRAPHICS.BITMAPCOLORADDRESS = $7F40
05482  2DC3             GRAPHICS.MULTIVIDEOFILE = $7F40
05483  2DC3             GRAPHICS.MULTICOLORFILE = $8328
05484  2DC3             GRAPHICS.MULTIBGCOLORFILE = $8710
05485  2DC3             GRAPHICS.MULTIVIDEOADDRESS = $4400
05486  2DC3             GRAPHICS.MULTICOLORADDRESS = $D800
05487  2DC3             GRAPHICS.MULTIBGCOLORADDRESS = $D021
05488  2DC3             
05489  2DC3             GRAPHICS.IMAGEADDRESS$ = $6000
05490  2DC3             
05491  2DC3             ;TODO CHANGE THE ADDRESSES BELOW ACCORDINGLY:
05492  2DC3             ;GRAPHICS.Y_TABLE_LO              = $C100
05493  2DC3             ;GRAPHICS.Y_TABLE_HI              = $C200
05494  2DC3             ;GRAPHICS.X_TABLE                 = $C300
05495  2DC3             ;GRAPHICS.BITMASK                 = $C400
05496  2DC3             GRAPHICS.Y_TABLE_LO = GRAPHICS.Y_TABLE_LO_ADDRESS
05497  2DC3             GRAPHICS.Y_TABLE_HI = GRAPHICS.Y_TABLE_HI_ADDRESS
05498  2DC3             GRAPHICS.X_TABLE = GRAPHICS.X_TABLE_ADDRESS
05499  2DC3             GRAPHICS.BITMASK = GRAPHICS.BITMASK_ADDRESS
05500  2DC3             
05501  2DC3  00         GRAPHICS.ISACTIVE$ BYTE $00
05502  2DC4             
05503  2DC4             GRAPHICS.ENTER$ 
05504  2DC4  20 96 2E              JSR GRAPHICS.START
05505  2DC7  60                    RTS
05506  2DC8             
05507  2DC8             GRAPHICS.LEAVE$ 
05508  2DC8  20 A6 2E              JSR GRAPHICS.END
05509  2DCB  60                    RTS
05510  2DCC             
05511  2DCC             GRAPHICS.SETBITMAPMODE$ 
05512  2DCC                        ; INDICATE THAT GRAPHICS MODE IS ACTIVE
05513  2DCC  A9 01                 LDA #$01
05514  2DCE  8D C3 2D              STA GRAPHICS.ISACTIVE$
05515  2DD1             
05516  2DD1             ;        LDX #$00
05517  2DD1             ;@LOOP
05518  2DD1             ;        LDA GRAPHICS.BITMAPCOLORADDRESS,X  ; COPY COLOURS TO SCREEN RAM
05519  2DD1             ;        STA GRAPHICS.COLORADDRESS,X
05520  2DD1             ;        LDA GRAPHICS.BITMAPCOLORADDRESS+$100,X
05521  2DD1             ;        STA GRAPHICS.COLORADDRESS+$100,X
05522  2DD1             ;        LDA GRAPHICS.BITMAPCOLORADDRESS+$200,X
05523  2DD1             ;        STA GRAPHICS.COLORADDRESS+$200,X
05524  2DD1             ;        LDA GRAPHICS.BITMAPCOLORADDRESS+$300,X
05525  2DD1             ;        STA GRAPHICS.COLORADDRESS+$300,X
05526  2DD1             ;        DEX
05527  2DD1             ;        BNE @LOOP
05528  2DD1             
05529  2DD1                        ;$DD00 = %XXXXXX11 -> BANK0: $0000-$3FFF
05530  2DD1                        ;$DD00 = %XXXXXX10 -> BANK1: $4000-$7FFF
05531  2DD1                        ;$DD00 = %XXXXXX01 -> BANK2: $8000-$BFFF
05532  2DD1                        ;$DD00 = %XXXXXX00 -> BANK3: $C000-$FFFF
05533  2DD1                        ; DEFAULT: 10010111
05534  2DD1  AD 00 DD              LDA $DD00
05535  2DD4  29 FC                 AND #%11111100
05536  2DD6  09 02                 ORA #%00000010 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
05537  2DD8                        ;ORA #%00000011 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
05538  2DD8  8D 00 DD              STA $DD00
05539  2DDB             
05540  2DDB             ;        ; SET BITMAP MEMORY AT $2000+VIC BANK ADDRESS ($6000)
05541  2DDB             ;        LDA $D018
05542  2DDB             ;        ;ORA #%00001000
05543  2DDB             ;        ORA #%00011000
05544  2DDB             ;        STA $D018
05545  2DDB             
05546  2DDB             ;        ; ENTER STANDARD BITMAP MODE
05547  2DDB             ;        LDA $D011
05548  2DDB             ;        ORA #%00100000
05549  2DDB             ;        STA $D011
05550  2DDB             
05551  2DDB  A9 3B                 LDA #$3B     ; BITMAP MODE
05552  2DDD                        ;LDX #$18     ; MULTI-COLOUR MODE
05553  2DDD  A0 18                 LDY #$18     ; SCREEN AT $0400, BITMAP AT $2000
05554  2DDF  8D 11 D0              STA $D011
05555  2DE2                        ;STX $D016
05556  2DE2  8C 18 D0              STY $D018
05557  2DE5             
05558  2DE5                        ; SET THE SPRITE ADDRESSES BE $4200-$43FF
05559  2DE5  A9 08                 LDA #$08
05560  2DE7  8D F8 47              STA $47F8
05561  2DEA  A9 09                 LDA #$09
05562  2DEC  8D F9 47              STA $47F9
05563  2DEF  A9 0A                 LDA #$0A
05564  2DF1  8D FA 47              STA $47FA
05565  2DF4  A9 0B                 LDA #$0B
05566  2DF6  8D FB 47              STA $47FB
05567  2DF9  A9 0C                 LDA #$0C
05568  2DFB  8D FC 47              STA $47FC
05569  2DFE  A9 0D                 LDA #$0D
05570  2E00  8D FD 47              STA $47FD
05571  2E03  A9 0E                 LDA #$0E
05572  2E05  8D FE 47              STA $47FE
05573  2E08  A9 0F                 LDA #$0F
05574  2E0A  8D FF 47              STA $47FF
05575  2E0D             
05576  2E0D  60                    RTS
05577  2E0E             
05578  2E0E             GRAPHICS.SETHIRESMODE$ 
05579  2E0E  20 CC 2D              JSR GRAPHICS.SETBITMAPMODE$
05580  2E11             
05581  2E11  A2 00                 LDX #$00
05582  2E13             @LOOP
05583  2E13                        ; TRANSFERS VIDEO DATA
05584  2E13  BD 40 7F              LDA GRAPHICS.MULTIVIDEOFILE,X
05585  2E16  9D 00 44              STA GRAPHICS.MULTIVIDEOADDRESS,X
05586  2E19  BD 40 80              LDA GRAPHICS.MULTIVIDEOFILE+$100,X
05587  2E1C  9D 00 45              STA GRAPHICS.MULTIVIDEOADDRESS+$100,X
05588  2E1F  BD 40 81              LDA GRAPHICS.MULTIVIDEOFILE+$200,X
05589  2E22  9D 00 46              STA GRAPHICS.MULTIVIDEOADDRESS+$200,X
05590  2E25  BD 28 82              LDA GRAPHICS.MULTIVIDEOFILE+$2E8,X
05591  2E28  9D E8 46              STA GRAPHICS.MULTIVIDEOADDRESS+$2E8,X
05592  2E2B  E8                    INX
05593  2E2C  D0 E5                 BNE @LOOP
05594  2E2E             
05595  2E2E                        ; DISABLE MULTI-COLOR MODE
05596  2E2E  AD 16 D0              LDA $D016
05597  2E31  29 EF                 AND #%11101111 ; BIT #4: 0 = MULTICOLOR MODE OFF.
05598  2E33  8D 16 D0              STA $D016
05599  2E36             
05600  2E36  60                    RTS
05601  2E37             
05602  2E37             GRAPHICS.SETMULTICOLORMODE$ 
05603  2E37  20 CC 2D              JSR GRAPHICS.SETBITMAPMODE$
05604  2E3A             
05605  2E3A  AD 10 87              LDA GRAPHICS.MULTIBGCOLORFILE
05606  2E3D  8D 21 D0              STA GRAPHICS.MULTIBGCOLORADDRESS ; SCREEN COLOR
05607  2E40             
05608  2E40  A2 00                 LDX #$00
05609  2E42             @LOOP
05610  2E42                        ; TRANSFERS VIDEO DATA
05611  2E42  BD 40 7F              LDA GRAPHICS.MULTIVIDEOFILE,X
05612  2E45  9D 00 44              STA GRAPHICS.MULTIVIDEOADDRESS,X
05613  2E48  BD 40 80              LDA GRAPHICS.MULTIVIDEOFILE+$100,X
05614  2E4B  9D 00 45              STA GRAPHICS.MULTIVIDEOADDRESS+$100,X
05615  2E4E  BD 40 81              LDA GRAPHICS.MULTIVIDEOFILE+$200,X
05616  2E51  9D 00 46              STA GRAPHICS.MULTIVIDEOADDRESS+$200,X
05617  2E54  BD 28 82              LDA GRAPHICS.MULTIVIDEOFILE+$2E8,X
05618  2E57  9D E8 46              STA GRAPHICS.MULTIVIDEOADDRESS+$2E8,X
05619  2E5A                        ; TRANSFERS COLOR DATA
05620  2E5A  BD 28 83              LDA GRAPHICS.MULTICOLORFILE,X
05621  2E5D  9D 00 D8              STA GRAPHICS.MULTICOLORADDRESS,X
05622  2E60  BD 28 84              LDA GRAPHICS.MULTICOLORFILE+$100,X
05623  2E63  9D 00 D9              STA GRAPHICS.MULTICOLORADDRESS+$100,X
05624  2E66  BD 28 85              LDA GRAPHICS.MULTICOLORFILE+$200,X
05625  2E69  9D 00 DA              STA GRAPHICS.MULTICOLORADDRESS+$200,X
05626  2E6C  BD 10 86              LDA GRAPHICS.MULTICOLORFILE+$2E8,X
05627  2E6F  9D E8 DA              STA GRAPHICS.MULTICOLORADDRESS+$2E8,X
05628  2E72  E8                    INX
05629  2E73  D0 CD                 BNE @LOOP
05630  2E75             
05631  2E75                        ; ENABLEMULTI-COLOR MODE
05632  2E75  AD 16 D0              LDA $D016
05633  2E78  09 10                 ORA #%00010000 ; BIT #4: 1 = MULTICOLOR MODE ON.
05634  2E7A  8D 16 D0              STA $D016
05635  2E7D             
05636  2E7D  60                    RTS
05637  2E7E             
05638  2E7E             GRAPHICS.SETTEXTMODE$ 
05639  2E7E                        ; LEAVE STANDARD BITMAP MODE
05640  2E7E  AD 11 D0              LDA $D011
05641  2E81  29 DF                 AND #%11011111
05642  2E83  8D 11 D0              STA $D011
05643  2E86             
05644  2E86                        ;$DD00 = %XXXXXX11 -> BANK0: $0000-$3FFF
05645  2E86                        ;$DD00 = %XXXXXX10 -> BANK1: $4000-$7FFF
05646  2E86                        ;$DD00 = %XXXXXX01 -> BANK2: $8000-$BFFF
05647  2E86                        ;$DD00 = %XXXXXX00 -> BANK3: $C000-$FFFF
05648  2E86                        ; DEFAULT: 10010111
05649  2E86  AD 00 DD              LDA $DD00
05650  2E89  29 FC                 AND #%11111100
05651  2E8B                        ;ORA #%00000010 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
05652  2E8B  09 03                 ORA #%00000011 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
05653  2E8D  8D 00 DD              STA $DD00
05654  2E90             
05655  2E90                        ; INDICATE THAT GRAPHICS MODE IS INACTIVE
05656  2E90  A9 00                 LDA #$00
05657  2E92  8D C3 2D              STA GRAPHICS.ISACTIVE$
05658  2E95                        
05659  2E95  60                    RTS
05660  2E96             
05661  2E96             GRAPHICS.START 
05662  2E96             
05663  2E96  20 76 13              JSR CONSOLE.CLEAR$
05664  2E99  20 C7 2E              JSR GRAPHICS.CLEAR$
05665  2E9C             
05666  2E9C  20 0E 2E              JSR GRAPHICS.SETHIRESMODE$
05667  2E9F             
05668  2E9F  20 B0 2E              JSR GRAPHICS.SETCOLOR$
05669  2EA2  20 83 2F              JSR GRAPHICS.CREATETABLE
05670  2EA5                        
05671  2EA5  60                    RTS
05672  2EA6             
05673  2EA6             GRAPHICS.END 
05674  2EA6                        ;; SET BITMAP MEMORY AT $2000+VIC BANK ADDRESS ($2000)
05675  2EA6             ;        LDA $D018
05676  2EA6             ;        AND #%11110001
05677  2EA6             ;        ORA #%00000010 ; $0800
05678  2EA6             ;        STA $D018
05679  2EA6             
05680  2EA6  20 76 13              JSR CONSOLE.CLEAR$
05681  2EA9  20 C7 2E              JSR GRAPHICS.CLEAR$
05682  2EAC             
05683  2EAC  20 7E 2E              JSR GRAPHICS.SETTEXTMODE$
05684  2EAF             
05685  2EAF  60                    RTS
05686  2EB0             
05687  2EB0             ;ALIGN $100
05688  2EB0             
05689  2EB0             GRAPHICS.SETCOLOR$ 
05690  2EB0  A2 00                 LDX #$00
05691  2EB2  A9 10                 LDA #$10 ; WHITE ON BLACK
05692  2EB4             @LOOP
05693  2EB4  9D 00 44              STA GRAPHICS.COLORADDRESS,X
05694  2EB7  9D 00 45              STA GRAPHICS.COLORADDRESS+$100,X
05695  2EBA  9D 00 46              STA GRAPHICS.COLORADDRESS+$200,X
05696  2EBD  9D 00 47              STA GRAPHICS.COLORADDRESS+$300,X
05697  2EC0  CA                    DEX
05698  2EC1                        ;BNE @LOOP
05699  2EC1  F0 03                 BEQ @DONE
05700  2EC3  4C B4 2E              JMP @LOOP
05701  2EC6             
05702  2EC6             @DONE
05703  2EC6  60                    RTS
05704  2EC7             
05705  2EC7             GRAPHICS.CLEAR$ 
05706  2EC7  A2 00                 LDX #$00
05707  2EC9  A9 00                 LDA #$00
05708  2ECB             @LOOP
05709  2ECB  9D 00 60              STA GRAPHICS.MEMORYADDRESS,X
05710  2ECE  9D 00 61              STA GRAPHICS.MEMORYADDRESS+$100,X
05711  2ED1  9D 00 62              STA GRAPHICS.MEMORYADDRESS+$200,X
05712  2ED4  9D 00 63              STA GRAPHICS.MEMORYADDRESS+$300,X
05713  2ED7  9D 00 64              STA GRAPHICS.MEMORYADDRESS+$400,X
05714  2EDA  9D 00 65              STA GRAPHICS.MEMORYADDRESS+$500,X
05715  2EDD  9D 00 66              STA GRAPHICS.MEMORYADDRESS+$600,X
05716  2EE0  9D 00 67              STA GRAPHICS.MEMORYADDRESS+$700,X
05717  2EE3  9D 00 68              STA GRAPHICS.MEMORYADDRESS+$800,X
05718  2EE6  9D 00 69              STA GRAPHICS.MEMORYADDRESS+$900,X
05719  2EE9  9D 00 6A              STA GRAPHICS.MEMORYADDRESS+$A00,X
05720  2EEC  9D 00 6B              STA GRAPHICS.MEMORYADDRESS+$B00,X
05721  2EEF  9D 00 6C              STA GRAPHICS.MEMORYADDRESS+$C00,X
05722  2EF2  9D 00 6D              STA GRAPHICS.MEMORYADDRESS+$D00,X
05723  2EF5  9D 00 6E              STA GRAPHICS.MEMORYADDRESS+$E00,X
05724  2EF8  9D 00 6F              STA GRAPHICS.MEMORYADDRESS+$F00,X
05725  2EFB  9D 00 70              STA GRAPHICS.MEMORYADDRESS+$1000,X
05726  2EFE  9D 00 71              STA GRAPHICS.MEMORYADDRESS+$1100,X
05727  2F01  9D 00 72              STA GRAPHICS.MEMORYADDRESS+$1200,X
05728  2F04  9D 00 73              STA GRAPHICS.MEMORYADDRESS+$1300,X
05729  2F07  9D 00 74              STA GRAPHICS.MEMORYADDRESS+$1400,X
05730  2F0A  9D 00 75              STA GRAPHICS.MEMORYADDRESS+$1500,X
05731  2F0D  9D 00 76              STA GRAPHICS.MEMORYADDRESS+$1600,X
05732  2F10  9D 00 77              STA GRAPHICS.MEMORYADDRESS+$1700,X
05733  2F13  9D 00 78              STA GRAPHICS.MEMORYADDRESS+$1800,X
05734  2F16  9D 00 79              STA GRAPHICS.MEMORYADDRESS+$1900,X
05735  2F19  9D 00 7A              STA GRAPHICS.MEMORYADDRESS+$1A00,X
05736  2F1C  9D 00 7B              STA GRAPHICS.MEMORYADDRESS+$1B00,X
05737  2F1F  9D 00 7C              STA GRAPHICS.MEMORYADDRESS+$1C00,X
05738  2F22  9D 00 7D              STA GRAPHICS.MEMORYADDRESS+$1D00,X
05739  2F25  9D 00 7E              STA GRAPHICS.MEMORYADDRESS+$1E00,X
05740  2F28  9D 00 7F              STA GRAPHICS.MEMORYADDRESS+$1F00,X
05741  2F2B             
05742  2F2B  9D 00 80              STA GRAPHICS.MEMORYADDRESS+$2000,X
05743  2F2E  9D 00 81              STA GRAPHICS.MEMORYADDRESS+$2100,X
05744  2F31  9D 00 82              STA GRAPHICS.MEMORYADDRESS+$2200,X
05745  2F34  9D 00 83              STA GRAPHICS.MEMORYADDRESS+$2300,X
05746  2F37             
05747  2F37  9D 00 84              STA GRAPHICS.MEMORYADDRESS+$2400,X
05748  2F3A  9D 00 85              STA GRAPHICS.MEMORYADDRESS+$2500,X
05749  2F3D  9D 00 86              STA GRAPHICS.MEMORYADDRESS+$2600,X
05750  2F40  9D 00 87              STA GRAPHICS.MEMORYADDRESS+$2700,X
05751  2F43  CA                    DEX
05752  2F44                        ;BNE @LOOP
05753  2F44  F0 03                 BEQ @DONE
05754  2F46  4C CB 2E              JMP @LOOP
05755  2F49             @DONE
05756  2F49             
05757  2F49  A9 00                 LDA #COLOR.BLACK$
05758  2F4B  8D 21 D0              STA GRAPHICS.MULTIBGCOLORADDRESS
05759  2F4E             
05760  2F4E  A2 00                 LDX #$00
05761  2F50  A9 00                 LDA #COLOR.BLACK$
05762  2F52             @LOOP2
05763  2F52                        ; TRANSFERS VIDEO DATA
05764  2F52  9D 00 44              STA GRAPHICS.MULTIVIDEOADDRESS,X
05765  2F55  9D 00 45              STA GRAPHICS.MULTIVIDEOADDRESS+$100,X
05766  2F58  9D 00 46              STA GRAPHICS.MULTIVIDEOADDRESS+$200,X
05767  2F5B  9D E8 46              STA GRAPHICS.MULTIVIDEOADDRESS+$2E8,X
05768  2F5E                        ; TRANSFERS COLOR DATA
05769  2F5E  9D 00 D8              STA GRAPHICS.MULTICOLORADDRESS,X
05770  2F61  9D 00 D9              STA GRAPHICS.MULTICOLORADDRESS+$100,X
05771  2F64  9D 00 DA              STA GRAPHICS.MULTICOLORADDRESS+$200,X
05772  2F67  9D E8 DA              STA GRAPHICS.MULTICOLORADDRESS+$2E8,X
05773  2F6A  E8                    INX
05774  2F6B  D0 E5                 BNE @LOOP2
05775  2F6D             
05776  2F6D  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS
05777  2F6F  8D BF 2D              STA GRAPHICS.CURRENTADDRESS
05778  2F72  A9 60                 LDA #>GRAPHICS.MEMORYADDRESS
05779  2F74  8D C0 2D              STA GRAPHICS.CURRENTADDRESS+1
05780  2F77             
05781  2F77  A9 00                 LDA #<GRAPHICS.COLORADDRESS
05782  2F79  8D C1 2D              STA GRAPHICS.CURRENTCOLORADDR
05783  2F7C  A9 44                 LDA #>GRAPHICS.COLORADDRESS
05784  2F7E  8D C2 2D              STA GRAPHICS.CURRENTCOLORADDR+1
05785  2F81             
05786  2F81  60                    RTS
05787  2F82             
05788  2F82  00         GRAPHICS.TABLECREATED BYTE $00
05789  2F83             
05790  2F83             ;ALIGN $100
05791  2F83             
05792  2F83             GRAPHICS.CREATETABLE 
05793  2F83  AD 82 2F              LDA GRAPHICS.TABLECREATED
05794  2F86  F0 01                 BEQ @NEEDTOCREATE
05795  2F88  60                    RTS
05796  2F89             @NEEDTOCREATE 
05797  2F89  A9 01                 LDA #$01
05798  2F8B  8D 82 2F              STA GRAPHICS.TABLECREATED
05799  2F8E             
05800  2F8E  18                    CLC ; NEED TO CLEAR THE CARRY FLAG
05801  2F8F  A2 00                 LDX #$00
05802  2F91  A9 80                 LDA #$80
05803  2F93             @LOOP1
05804  2F93  9D 00 0D              STA GRAPHICS.BITMASK,X
05805  2F96  6A                    ROR
05806  2F97  90 01                 BCC @SKIP1
05807  2F99  6A                    ROR
05808  2F9A             @SKIP1
05809  2F9A  A8                    TAY
05810  2F9B  8A                    TXA
05811  2F9C  29 F8                 AND #%11111000
05812  2F9E  9D 00 0C              STA GRAPHICS.X_TABLE,X
05813  2FA1  98                    TYA
05814  2FA2  E8                    INX
05815  2FA3  D0 EE                 BNE @LOOP1
05816  2FA5             
05817  2FA5  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS ; CAN BE REPLACED WITH A TXA IF GFX_MEM IS PAGE ALIGNED
05818  2FA7             @LOOP2
05819  2FA7  A0 07                 LDY #$07
05820  2FA9             @LOOP3
05821  2FA9  9D 00 0A              STA GRAPHICS.Y_TABLE_LO,X
05822  2FAC  48                    PHA
05823  2FAD             @SMC1
05824  2FAD  A9 60                 LDA #>GRAPHICS.MEMORYADDRESS
05825  2FAF  9D 00 0B              STA GRAPHICS.Y_TABLE_HI,X
05826  2FB2  68                    PLA
05827  2FB3  E8                    INX
05828  2FB4  18                    CLC
05829  2FB5  69 01                 ADC #$01
05830  2FB7  88                    DEY
05831  2FB8  10 EF                 BPL @LOOP3
05832  2FBA  EE AE 2F              INC @SMC1+1
05833  2FBD  18                    CLC
05834  2FBE                        ;ADC #$40
05835  2FBE  69 38                 ADC #$38
05836  2FC0  90 03                 BCC @SKIP2
05837  2FC2  EE AE 2F              INC @SMC1+1
05838  2FC5             @SKIP2
05839  2FC5  E0 C8                 CPX #8*25
05840  2FC7  D0 DE                 BNE @LOOP2
05841  2FC9  60                    RTS
05842  2FCA             
05843  2FCA             ;ALIGN $100
05844  2FCA             
05845  2FCA             GRAPHICS.DRAWCHR.CHRADDRESS = $20 ; 2 BYTES
05846  2FCA             GRAPHICS.DRAWCHR.BMPADDRESS = $22 ; 2 BYTES
05847  2FCA             GRAPHICS.DRAWCHR.COL_OFFSET = $24 ; 2 BYTES
05848  2FCA             GRAPHICS.DRAWCHR.ROW_OFFSET = $26 ; 2 BYTES
05849  2FCA             GRAPHICS.DRAWCHR.CHR = $28 ; 1 BYTE
05850  2FCA             GRAPHICS.DRAWCHR 
05851  2FCA             
05852  2FCA  85 28                 STA GRAPHICS.DRAWCHR.CHR
05853  2FCC  AD C3 2D              LDA GRAPHICS.ISACTIVE$
05854  2FCF  C9 01                 CMP #$01
05855  2FD1  F0 01                 BEQ @OKTODRAWCHR
05856  2FD3                        ;LDA GRAPHICS.DRAWCHR.CHR
05857  2FD3  60                    RTS
05858  2FD4             @OKTODRAWCHR 
05859  2FD4             
05860  2FD4                        ; SET THE CHARACTER COLOR
05861  2FD4                        ; ADDRESS = CONSOLE.CURRENTADDRESS + $4000 (2ND BANK)
05862  2FD4  AD EE 12              LDA CONSOLE.CURRENTADDRESS
05863  2FD7  85 80                 STA MATH.ADD16.ADDEND1$
05864  2FD9  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
05865  2FDC  85 81                 STA MATH.ADD16.ADDEND1$+1
05866  2FDE  A9 00                 LDA #$00
05867  2FE0  85 82                 STA MATH.ADD16.ADDEND2$
05868  2FE2  A9 40                 LDA #$40
05869  2FE4  85 83                 STA MATH.ADD16.ADDEND2$+1
05870  2FE6  20 00 28              JSR MATH.ADD16$
05871  2FE9  A5 84                 LDA MATH.ADD16.SUM$
05872  2FEB  85 20                 STA GRAPHICS.DRAWCHR.CHRADDRESS
05873  2FED  A5 85                 LDA MATH.ADD16.SUM$+1
05874  2FEF  85 21                 STA GRAPHICS.DRAWCHR.CHRADDRESS+1
05875  2FF1  A0 00                 LDY #$00
05876  2FF3  AD F4 12              LDA CONSOLE.CHARACTERCOLOR
05877  2FF6  C9 80                 CMP #$80
05878  2FF8  2A                    ROL
05879  2FF9  C9 80                 CMP #$80
05880  2FFB  2A                    ROL
05881  2FFC  C9 80                 CMP #$80
05882  2FFE  2A                    ROL
05883  2FFF  C9 80                 CMP #$80
05884  3001  2A                    ROL
05885  3002  91 20                 STA (GRAPHICS.DRAWCHR.CHRADDRESS),Y
05886  3004             
05887  3004             TODO       CREATE TABLE TO LOOK UP THE CHARACTERMAP ADDRESS BY CONSOLE.WRITECHR.CHAR$
05888  3004                        ; GET THE MEMORY ADDRESS OF THE CHARACTER
05889  3004                        ; ADDRESS = FONT.MEMORYADDRESS + (CHR * 8)
05890  3004  A5 28                 LDA GRAPHICS.DRAWCHR.CHR
05891  3006  85 80                 STA MATH.MULTIPLY16.FACTOR1$
05892  3008  A9 08                 LDA #$08
05893  300A  85 82                 STA MATH.MULTIPLY16.FACTOR2$
05894  300C  A9 00                 LDA #$00
05895  300E  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
05896  3010  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
05897  3012  20 67 29              JSR MATH.MULTIPLY16$
05898  3015             
05899  3015  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
05900  3017  85 82                 STA MATH.ADD16.ADDEND2$
05901  3019  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
05902  301B  85 83                 STA MATH.ADD16.ADDEND2$+1
05903  301D  A9 00                 LDA #<FONT.MEMORYADDRESS
05904  301F  85 80                 STA MATH.ADD16.ADDEND1$
05905  3021  A9 20                 LDA #>FONT.MEMORYADDRESS
05906  3023  85 81                 STA MATH.ADD16.ADDEND1$+1
05907  3025  20 00 28              JSR MATH.ADD16$
05908  3028             
05909  3028  A5 84                 LDA MATH.ADD16.SUM$
05910  302A  85 20                 STA GRAPHICS.DRAWCHR.CHRADDRESS
05911  302C  A5 85                 LDA MATH.ADD16.SUM$+1
05912  302E  85 21                 STA GRAPHICS.DRAWCHR.CHRADDRESS+1
05913  3030             
05914  3030                        ; GET THE MEMORY ADDRESS OF THE SCREEN
05915  3030                        ; ADDRESS = GRAPHICS.MEMORYADDRESS + (COL * 8) + (ROW * 320)
05916  3030             
05917  3030                        ; COL_OFFSET = CURRENTCOLUMN * 8
05918  3030  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
05919  3033  85 80                 STA MATH.MULTIPLY16.FACTOR1$
05920  3035  A9 08                 LDA #$08
05921  3037  85 82                 STA MATH.MULTIPLY16.FACTOR2$
05922  3039  A9 00                 LDA #$00
05923  303B  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
05924  303D  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
05925  303F  20 67 29              JSR MATH.MULTIPLY16$
05926  3042  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
05927  3044  85 24                 STA GRAPHICS.DRAWCHR.COL_OFFSET
05928  3046  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
05929  3048  85 25                 STA GRAPHICS.DRAWCHR.COL_OFFSET+1
05930  304A             
05931  304A                        ; ROW_OFFSET = CURRENTROW * 320
05932  304A  AD F1 12              LDA CONSOLE.CURRENTROW
05933  304D  85 80                 STA MATH.MULTIPLY16.FACTOR1$
05934  304F  A9 00                 LDA #$00
05935  3051  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
05936  3053  A9 40                 LDA #$40
05937  3055  85 82                 STA MATH.MULTIPLY16.FACTOR2$
05938  3057  A9 01                 LDA #$01
05939  3059  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
05940  305B  20 67 29              JSR MATH.MULTIPLY16$
05941  305E  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
05942  3060  85 26                 STA GRAPHICS.DRAWCHR.ROW_OFFSET
05943  3062  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
05944  3064  85 27                 STA GRAPHICS.DRAWCHR.ROW_OFFSET+1
05945  3066                        
05946  3066                        ; SUM = ROW_OFFSET + COL_OFFSET
05947  3066  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
05948  3068  85 82                 STA MATH.ADD16.ADDEND2$
05949  306A  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
05950  306C  85 83                 STA MATH.ADD16.ADDEND2$+1
05951  306E  A5 24                 LDA GRAPHICS.DRAWCHR.COL_OFFSET
05952  3070  85 80                 STA MATH.ADD16.ADDEND1$
05953  3072  A5 25                 LDA GRAPHICS.DRAWCHR.COL_OFFSET+1
05954  3074  85 81                 STA MATH.ADD16.ADDEND1$+1
05955  3076  20 00 28              JSR MATH.ADD16$
05956  3079             
05957  3079                        ; BMPADDRESS = SUM + GRAPHICS.MEMORYADDRESS
05958  3079  A5 84                 LDA MATH.ADD16.SUM$
05959  307B  85 82                 STA MATH.ADD16.ADDEND2$
05960  307D  A5 85                 LDA MATH.ADD16.SUM$+1
05961  307F  85 83                 STA MATH.ADD16.ADDEND2$+1
05962  3081  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS
05963  3083  85 80                 STA MATH.ADD16.ADDEND1$
05964  3085  A9 60                 LDA #>GRAPHICS.MEMORYADDRESS
05965  3087  85 81                 STA MATH.ADD16.ADDEND1$+1
05966  3089  20 00 28              JSR MATH.ADD16$
05967  308C             
05968  308C  A5 84                 LDA MATH.ADD16.SUM$
05969  308E  85 22                 STA GRAPHICS.DRAWCHR.BMPADDRESS
05970  3090  A5 85                 LDA MATH.ADD16.SUM$+1
05971  3092  85 23                 STA GRAPHICS.DRAWCHR.BMPADDRESS+1
05972  3094             
05973  3094                        ; COPY THE CHARACTER TO THE SCREEN
05974  3094  A5 20                 LDA GRAPHICS.DRAWCHR.CHRADDRESS
05975  3096  85 73                 STA MEMORY.COPY.SOURCE$
05976  3098  A5 21                 LDA GRAPHICS.DRAWCHR.CHRADDRESS+1
05977  309A  85 74                 STA MEMORY.COPY.SOURCE$+1
05978  309C  A5 22                 LDA GRAPHICS.DRAWCHR.BMPADDRESS
05979  309E  85 75                 STA MEMORY.COPY.DESTINATION$
05980  30A0  A5 23                 LDA GRAPHICS.DRAWCHR.BMPADDRESS+1
05981  30A2  85 76                 STA MEMORY.COPY.DESTINATION$+1
05982  30A4  A9 08                 LDA #$08
05983  30A6  85 77                 STA MEMORY.COPY.LENGTH$
05984  30A8  20 8A 0F              JSR MEMORY.COPY$
05985  30AB             
05986  30AB                        ;LDA GRAPHICS.DRAWCHR.CHR
05987  30AB             
05988  30AB  60                    RTS
05989  30AC             
05990  30AC             GRAPHICS.SCROLLUP 
05991  30AC             
05992  30AC  85 28                 STA GRAPHICS.DRAWCHR.CHR
05993  30AE  AD C3 2D              LDA GRAPHICS.ISACTIVE$
05994  30B1  C9 01                 CMP #$01
05995  30B3  F0 01                 BEQ @OKTOSCROLLUP
05996  30B5  60                    RTS
05997  30B6             @OKTOSCROLLUP 
05998  30B6             
05999  30B6                        ; COPY THE CHARACTERS FROM THE 2ND ROW AND OVERRIDE THE FIRST ROW.
06000  30B6                        ; CLEAR OUT THE TEXT ON THE LAST ROW.
06001  30B6  A9 40                 LDA #<GRAPHICS.MEMORYADDRESS_2R
06002  30B8  85 73                 STA MEMORY.COPY16.SOURCE$
06003  30BA  A9 61                 LDA #>GRAPHICS.MEMORYADDRESS_2R
06004  30BC  85 74                 STA MEMORY.COPY16.SOURCE$+1
06005  30BE  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS
06006  30C0  85 75                 STA MEMORY.COPY16.DESTINATION$
06007  30C2  A9 60                 LDA #>GRAPHICS.MEMORYADDRESS
06008  30C4  85 76                 STA MEMORY.COPY16.DESTINATION$+1
06009  30C6  A9 00                 LDA #$00
06010  30C8  85 78                 STA MEMORY.COPY16.LENGTH$
06011  30CA  A9 1E                 LDA #$1E
06012  30CC  85 79                 STA MEMORY.COPY16.LENGTH$+1
06013  30CE  20 9C 0F              JSR MEMORY.COPY16$
06014  30D1             
06015  30D1                        ; NEED TO "SCROLL" UP THE CHARACTER COLORS AS WELL
06016  30D1  A9 28                 LDA #<GRAPHICS.COLORADDRESS+$28
06017  30D3  85 73                 STA MEMORY.COPY16.SOURCE$
06018  30D5  A9 44                 LDA #>GRAPHICS.COLORADDRESS
06019  30D7  85 74                 STA MEMORY.COPY16.SOURCE$+1
06020  30D9  A9 00                 LDA #<GRAPHICS.COLORADDRESS
06021  30DB  85 75                 STA MEMORY.COPY16.DESTINATION$
06022  30DD  A9 44                 LDA #>GRAPHICS.COLORADDRESS
06023  30DF  85 76                 STA MEMORY.COPY16.DESTINATION$+1
06024  30E1  A9 C0                 LDA #$C0
06025  30E3  85 78                 STA MEMORY.COPY16.LENGTH$
06026  30E5  A9 03                 LDA #$03
06027  30E7  85 79                 STA MEMORY.COPY16.LENGTH$+1
06028  30E9  20 9C 0F              JSR MEMORY.COPY16$
06029  30EC             
06030  30EC                        ; CLEAR THE LAST LINE
06031  30EC  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS_LR
06032  30EE  85 73                 STA MEMORY.FILL16.ADDRESS$
06033  30F0  A9 7E                 LDA #>GRAPHICS.MEMORYADDRESS_LR
06034  30F2  85 74                 STA MEMORY.FILL16.ADDRESS$+1
06035  30F4  A9 00                 LDA #$00
06036  30F6  85 75                 STA MEMORY.FILL16.VALUE$
06037  30F8  A9 40                 LDA #$40
06038  30FA  85 77                 STA MEMORY.FILL16.LENGTH$
06039  30FC  A9 01                 LDA #$01
06040  30FE  85 78                 STA MEMORY.FILL16.LENGTH$+1
06041  3100  20 15 10              JSR MEMORY.FILL16$
06042  3103  20 15 10              JSR MEMORY.FILL16$
06043  3106             
06044  3106  60                    RTS
06045  3107             
06046  3107             ;GRAPHICS.SCROLLUPCHRS
06047  3107             ;        LDX #$00
06048  3107             ;@LOOP1 ; DO PROCESS 4 TIMES (6*4 = 24)
06049  3107             ;        LDY #$00
06050  3107             ;@LOOP2 ; MOVE UP 6 LINES
06051  3107             ;        LDA ($FD),Y
06052  3107             ;        STA ($FB),Y
06053  3107             ;        INY
06054  3107             ;        CPY #240 ; (40*6)
06055  3107             ;        BNE @LOOP2
06056  3107             
06057  3107             ;        INX
06058  3107             ;        CPX #4
06059  3107             ;        BNE @INCR
06060  3107             ;        JMP @DONE
06061  3107             
06062  3107             ;@INCR
06063  3107             ;        ; NEED TO INCREASE THE VALUE OF THE ADDRESS THAT $FB AND $FD ARE POINTING TO.
06064  3107             ;        LDA $FB
06065  3107             ;        STA MATH.ADD16.ADDEND1$
06066  3107             ;        LDA $FC
06067  3107             ;        STA MATH.ADD16.ADDEND1$+1
06068  3107             
06069  3107             ;        LDA #240
06070  3107             ;        STA MATH.ADD16.ADDEND2$
06071  3107             ;        LDA #0
06072  3107             ;        STA MATH.ADD16.ADDEND2$+1
06073  3107             
06074  3107             ;        JSR MATH.ADD16$ ; ($FB+$FC) = ($FB+$FC) + $28
06075  3107             
06076  3107             ;        LDA MATH.ADD16.SUM$
06077  3107             ;        STA $FB
06078  3107             ;        LDA MATH.ADD16.SUM$+1
06079  3107             ;        STA $FC
06080  3107             
06081  3107             ;        LDA $FD
06082  3107             ;        STA MATH.ADD16.ADDEND1$
06083  3107             ;        LDA $FE
06084  3107             ;        STA MATH.ADD16.ADDEND1$+1
06085  3107             
06086  3107             ;        LDA #240
06087  3107             ;        STA MATH.ADD16.ADDEND2$
06088  3107             ;        LDA #0
06089  3107             ;        STA MATH.ADD16.ADDEND2$+1
06090  3107             
06091  3107             ;        JSR MATH.ADD16$ ; ($FD+$FE) = ($FD+$FE) + $28
06092  3107             
06093  3107             ;        LDA MATH.ADD16.SUM$
06094  3107             ;        STA $FD
06095  3107             ;        LDA MATH.ADD16.SUM$+1
06096  3107             ;        STA $FE
06097  3107             
06098  3107             ;        JMP @LOOP1
06099  3107             ;@DONE
06100  3107             
06101  3107             ;        RTS
06102  3107             
06103  3107             
06104  3107             ;ALIGN $100
06105  3107             
06106  3107             GRAPHICS.SETPIXEL.X$ = $20 ; 2 BYTES
06107  3107             GRAPHICS.SETPIXEL.Y$ = $22 ; 2 BYTES
06108  3107             GRAPHICS.SETPIXEL.COLOR$ = $24 ; 1 BYTE
06109  3107             GRAPHICS.SETPIXEL$ 
06110  3107  A6 20                 LDX GRAPHICS.SETPIXEL.X$
06111  3109  A4 22                 LDY GRAPHICS.SETPIXEL.Y$
06112  310B  A5 21                 LDA GRAPHICS.SETPIXEL.X$+1
06113  310D             ;        CMP #$01
06114  310D             ;        BNE @PLOT
06115  310D             ;        SEC
06116  310D             
06117  310D             ;@PLOT
06118  310D             ;        LDA GRAPHICS.Y_TABLE_HI,Y
06119  310D             ;        BCC @SKIP
06120  310D             ;        ADC #$00      ; ADDS 1 (256 PIXELS) TO HIBYTE
06121  310D             ;@SKIP
06122  310D             ;        STA $FC
06123  310D  18                    CLC
06124  310E  B9 00 0B              LDA GRAPHICS.Y_TABLE_HI,Y
06125  3111  65 21                 ADC GRAPHICS.SETPIXEL.X$+1
06126  3113  85 FC                 STA $FC
06127  3115             
06128  3115  B9 00 0A              LDA GRAPHICS.Y_TABLE_LO,Y
06129  3118  85 FB                 STA $FB
06130  311A  BC 00 0C              LDY GRAPHICS.X_TABLE,X
06131  311D             
06132  311D  A5 24                 LDA GRAPHICS.SETPIXEL.COLOR$
06133  311F  C9 01                 CMP #$01
06134  3121  F0 0A                 BEQ @SET
06135  3123             
06136  3123                        ;LDA #$FF
06137  3123                        ;SEC
06138  3123                        ;SBC GRAPHICS.BITMASK,X
06139  3123  BD 00 0D              LDA GRAPHICS.BITMASK,X
06140  3126  49 FF                 EOR #$FF
06141  3128  31 FB                 AND ($FB),Y
06142  312A  91 FB                 STA ($FB),Y
06143  312C             
06144  312C  60                    RTS
06145  312D             
06146  312D             @SET
06147  312D  BD 00 0D              LDA GRAPHICS.BITMASK,X
06148  3130  11 FB                 ORA ($FB),Y
06149  3132  91 FB                 STA ($FB),Y
06150  3134             
06151  3134  60                    RTS
06152  3135             
06153  3135             
06154  3135             GRAPHICS.DRAWFILL.COLOR$ = $24 ; 1 BYTE
06155  3135             GRAPHICS.DRAWFILL.X1$ = $25 ; 2 BYTES
06156  3135             GRAPHICS.DRAWFILL.Y1$ = $27 ; 2 BYTES
06157  3135             GRAPHICS.DRAWFILL.X2$ = $29 ; 2 BYTES
06158  3135             GRAPHICS.DRAWFILL.Y2$ = $2B ; 2 BYTES
06159  3135             GRAPHICS.DRAWFILL.Y = $2D ; 2 BYTES
06160  3135             GRAPHICS.DRAWFILL$ 
06161  3135                        ; DRAW LINES WHICH FILLS A BOX
06162  3135             
06163  3135                        ; INITILIZE Y = Y1
06164  3135  A5 27                 LDA GRAPHICS.DRAWFILL.Y1$
06165  3137  85 2D                 STA GRAPHICS.DRAWFILL.Y
06166  3139  A5 28                 LDA GRAPHICS.DRAWFILL.Y1$+1
06167  313B  85 2E                 STA GRAPHICS.DRAWFILL.Y+1
06168  313D             
06169  313D             @DRAWLINE
06170  313D                        ; DRAW LINE
06171  313D  A5 25                 LDA GRAPHICS.DRAWFILL.X1$
06172  313F  85 D0                 STA GRAPHICS.DRAWLINE.X1$
06173  3141  A5 26                 LDA GRAPHICS.DRAWFILL.X1$+1
06174  3143  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
06175  3145  A5 2D                 LDA GRAPHICS.DRAWFILL.Y
06176  3147  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
06177  3149  A5 2E                 LDA GRAPHICS.DRAWFILL.Y+1
06178  314B  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
06179  314D  A5 29                 LDA GRAPHICS.DRAWFILL.X2$
06180  314F  85 D4                 STA GRAPHICS.DRAWLINE.X2$
06181  3151  A5 2A                 LDA GRAPHICS.DRAWFILL.X2$+1
06182  3153  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
06183  3155  A5 2D                 LDA GRAPHICS.DRAWFILL.Y
06184  3157  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
06185  3159  A5 2E                 LDA GRAPHICS.DRAWFILL.Y+1
06186  315B  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
06187  315D  20 84 31              JSR GRAPHICS.DRAWLINE$
06188  3160             
06189  3160  A5 2D                 LDA GRAPHICS.DRAWFILL.Y
06190  3162  85 80                 STA MATH.CMP16.NUM1$
06191  3164  A5 2E                 LDA GRAPHICS.DRAWFILL.Y+1
06192  3166  85 81                 STA MATH.CMP16.NUM1$+1
06193  3168  A5 2B                 LDA GRAPHICS.DRAWFILL.Y2$
06194  316A  85 82                 STA MATH.CMP16.NUM2$
06195  316C  A5 2C                 LDA GRAPHICS.DRAWFILL.Y2$+1
06196  316E  85 83                 STA MATH.CMP16.NUM2$+1
06197  3170  20 E4 28              JSR MATH.CMP16$
06198  3173  D0 01                 BNE @INCY ; IF Y <> Y2 THEN @INCY
06199  3175  60                    RTS
06200  3176             @INCY
06201  3176                        ; INCREMENT Y
06202  3176  A9 2D                 LDA #<GRAPHICS.DRAWFILL.Y
06203  3178  85 86                 STA MATH.INC16.ADDRESS$
06204  317A  A9 00                 LDA #>GRAPHICS.DRAWFILL.Y
06205  317C  85 87                 STA MATH.INC16.ADDRESS$+1
06206  317E  20 3C 28              JSR MATH.INC16$ ; Y = Y + 1
06207  3181                        
06208  3181  4C 3D 31              JMP @DRAWLINE
06209  3184                        ;RTS
06210  3184             
06211  3184             ;ALIGN $100
06212  3184             
06213  3184             GRAPHICS.DRAWLINE.X = $E0 ; 2 BYTES
06214  3184             GRAPHICS.DRAWLINE.Y = $E2 ; 2 BYTES
06215  3184             GRAPHICS.DRAWLINE.COLOR$ = $24 ; 1 BYTE
06216  3184             GRAPHICS.DRAWLINE.X1$ = $D0 ; 2 BYTES
06217  3184             GRAPHICS.DRAWLINE.Y1$ = $D2 ; 2 BYTES
06218  3184             GRAPHICS.DRAWLINE.X2$ = $D4 ; 2 BYTES
06219  3184             GRAPHICS.DRAWLINE.Y2$ = $D6 ; 2 BYTES
06220  3184             GRAPHICS.DRAWLINE.DX = $D8 ; 2 BYTES
06221  3184             GRAPHICS.DRAWLINE.DY = $DA ; 2 BYTES
06222  3184             GRAPHICS.DRAWLINE.STEEP = $DC ; 1 BYTES
06223  3184             GRAPHICS.DRAWLINE.X1_X2 = $E4 ; 2 BYTES
06224  3184             GRAPHICS.DRAWLINE.Y1_Y2 = $E6 ; 2 BYTES
06225  3184             GRAPHICS.DRAWLINE.DERROR2 = $E8 ; 2 BYTES
06226  3184             GRAPHICS.DRAWLINE.ERROR2 = $EA ; 2 BYTES
06227  3184             GRAPHICS.DRAWLINE.Y_OFFSET = $EC ; 2 BYTES
06228  3184             GRAPHICS.DRAWLINE.DX_2 = $EE ; 2 BYTES
06229  3184             GRAPHICS.DRAWLINE$ 
06230  3184             ; D:\TEST\LINE1\LINE1.VBP
06231  3184             
06232  3184             ;    STEEP = FALSE
06233  3184  A9 00                 LDA #$00
06234  3186  85 DC                 STA GRAPHICS.DRAWLINE.STEEP
06235  3188             
06236  3188             ;    IF (ABS(X1 - X2) < ABS(Y1 - Y2)) THEN
06237  3188  A5 D0                 LDA GRAPHICS.DRAWLINE.X1$
06238  318A  85 80                 STA MATH.SUBTRACT16.MENUEND$
06239  318C  A5 D1                 LDA GRAPHICS.DRAWLINE.X1$+1
06240  318E  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06241  3190  A5 D4                 LDA GRAPHICS.DRAWLINE.X2$
06242  3192  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06243  3194  A5 D5                 LDA GRAPHICS.DRAWLINE.X2$+1
06244  3196  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06245  3198  20 96 28              JSR MATH.SUBTRACT16$ ; DIFFERENCE = X1 - X2
06246  319B             
06247  319B  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06248  319D  85 80                 STA MATH.ABS16.INTEGER$
06249  319F  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06250  31A1  85 81                 STA MATH.ABS16.INTEGER$+1
06251  31A3  20 73 2A              JSR MATH.ABS16$ ; X1_X2 = ABS(DIFFERENCE)
06252  31A6                        
06253  31A6  A5 84                 LDA MATH.ABS16.VALUE$
06254  31A8  85 E4                 STA GRAPHICS.DRAWLINE.X1_X2
06255  31AA  A5 85                 LDA MATH.ABS16.VALUE$+1
06256  31AC  85 E5                 STA GRAPHICS.DRAWLINE.X1_X2+1
06257  31AE             
06258  31AE  A5 D2                 LDA GRAPHICS.DRAWLINE.Y1$
06259  31B0  85 80                 STA MATH.SUBTRACT16.MENUEND$
06260  31B2  A5 D3                 LDA GRAPHICS.DRAWLINE.Y1$+1
06261  31B4  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06262  31B6  A5 D6                 LDA GRAPHICS.DRAWLINE.Y2$
06263  31B8  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06264  31BA  A5 D7                 LDA GRAPHICS.DRAWLINE.Y2$+1
06265  31BC  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06266  31BE  20 96 28              JSR MATH.SUBTRACT16$ ; DIFFERENCE = Y1 - Y2
06267  31C1             
06268  31C1  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06269  31C3  85 80                 STA MATH.ABS16.INTEGER$
06270  31C5  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06271  31C7  85 81                 STA MATH.ABS16.INTEGER$+1
06272  31C9  20 73 2A              JSR MATH.ABS16$ ; Y1_Y2 = ABS(DIFFERENCE)
06273  31CC                        
06274  31CC  A5 84                 LDA MATH.ABS16.VALUE$
06275  31CE  85 E6                 STA GRAPHICS.DRAWLINE.Y1_Y2
06276  31D0  A5 85                 LDA MATH.ABS16.VALUE$+1
06277  31D2  85 E7                 STA GRAPHICS.DRAWLINE.Y1_Y2+1
06278  31D4             
06279  31D4  A5 E4                 LDA GRAPHICS.DRAWLINE.X1_X2
06280  31D6  85 80                 STA MATH.CMP16.NUM1$
06281  31D8  A5 E5                 LDA GRAPHICS.DRAWLINE.X1_X2+1
06282  31DA  85 81                 STA MATH.CMP16.NUM1$+1
06283  31DC  A5 E6                 LDA GRAPHICS.DRAWLINE.Y1_Y2
06284  31DE  85 82                 STA MATH.CMP16.NUM2$
06285  31E0  A5 E7                 LDA GRAPHICS.DRAWLINE.Y1_Y2+1
06286  31E2  85 83                 STA MATH.CMP16.NUM2$+1
06287  31E4  20 E4 28              JSR MATH.CMP16$
06288  31E7  90 03                 BCC @SWAPX1Y1_X2Y2 ; IF X1_X2 < Y1_Y2 THEN @SWAPX1Y1_X2Y2
06289  31E9  4C 1E 32              JMP @SKIPSWAPX1Y1_X2Y2
06290  31EC             @SWAPX1Y1_X2Y2 
06291  31EC             
06292  31EC             ;        CALL SWAP(X1, Y1)
06293  31EC  A9 D0                 LDA #<GRAPHICS.DRAWLINE.X1$
06294  31EE  85 73                 STA MEMORY.SWAP.ADDRESS1$
06295  31F0  A9 00                 LDA #>GRAPHICS.DRAWLINE.X1$
06296  31F2  85 74                 STA MEMORY.SWAP.ADDRESS1$+1
06297  31F4  A9 D2                 LDA #<GRAPHICS.DRAWLINE.Y1$
06298  31F6  85 75                 STA MEMORY.SWAP.ADDRESS2$
06299  31F8  A9 00                 LDA #>GRAPHICS.DRAWLINE.Y1$
06300  31FA  85 76                 STA MEMORY.SWAP.ADDRESS2$+1
06301  31FC  A9 02                 LDA #$02
06302  31FE  85 77                 STA MEMORY.SWAP.LENGTH$
06303  3200  20 C0 0F              JSR MEMORY.SWAP$
06304  3203             
06305  3203             ;        CALL SWAP(X2, Y2)
06306  3203  A9 D4                 LDA #<GRAPHICS.DRAWLINE.X2$
06307  3205  85 73                 STA MEMORY.SWAP.ADDRESS1$
06308  3207  A9 00                 LDA #>GRAPHICS.DRAWLINE.X2$
06309  3209  85 74                 STA MEMORY.SWAP.ADDRESS1$+1
06310  320B  A9 D6                 LDA #<GRAPHICS.DRAWLINE.Y2$
06311  320D  85 75                 STA MEMORY.SWAP.ADDRESS2$
06312  320F  A9 00                 LDA #>GRAPHICS.DRAWLINE.Y2$
06313  3211  85 76                 STA MEMORY.SWAP.ADDRESS2$+1
06314  3213  A9 02                 LDA #$02
06315  3215  85 77                 STA MEMORY.SWAP.LENGTH$
06316  3217  20 C0 0F              JSR MEMORY.SWAP$
06317  321A             
06318  321A             ;        STEEP = TRUE
06319  321A  A9 01                 LDA #$01
06320  321C  85 DC                 STA GRAPHICS.DRAWLINE.STEEP
06321  321E             
06322  321E             ;    END IF
06323  321E             @SKIPSWAPX1Y1_X2Y2 
06324  321E             
06325  321E             ;    IF (X1 > X2) THEN
06326  321E  A5 D4                 LDA GRAPHICS.DRAWLINE.X2$
06327  3220  85 80                 STA MATH.CMP16.NUM1$
06328  3222  A5 D5                 LDA GRAPHICS.DRAWLINE.X2$+1
06329  3224  85 81                 STA MATH.CMP16.NUM1$+1
06330  3226  A5 D0                 LDA GRAPHICS.DRAWLINE.X1$
06331  3228  85 82                 STA MATH.CMP16.NUM2$
06332  322A  A5 D1                 LDA GRAPHICS.DRAWLINE.X1$+1
06333  322C  85 83                 STA MATH.CMP16.NUM2$+1
06334  322E  20 E4 28              JSR MATH.CMP16$ ; IF X2 < X1 THEN @SKIPSWAPX1X2_Y1Y2
06335  3231  90 03                 BCC @SWAPX1X2_Y1Y2
06336  3233  4C 64 32              JMP @SKIPSWAPX1X2_Y1Y2
06337  3236             
06338  3236             @SWAPX1X2_Y1Y2 
06339  3236             ;        CALL SWAP(X1, X2)
06340  3236  A9 D0                 LDA #<GRAPHICS.DRAWLINE.X1$
06341  3238  85 73                 STA MEMORY.SWAP.ADDRESS1$
06342  323A  A9 00                 LDA #>GRAPHICS.DRAWLINE.X1$
06343  323C  85 74                 STA MEMORY.SWAP.ADDRESS1$+1
06344  323E  A9 D4                 LDA #<GRAPHICS.DRAWLINE.X2$
06345  3240  85 75                 STA MEMORY.SWAP.ADDRESS2$
06346  3242  A9 00                 LDA #>GRAPHICS.DRAWLINE.X2$
06347  3244  85 76                 STA MEMORY.SWAP.ADDRESS2$+1
06348  3246  A9 02                 LDA #$02
06349  3248  85 77                 STA MEMORY.SWAP.LENGTH$
06350  324A  20 C0 0F              JSR MEMORY.SWAP$
06351  324D             
06352  324D             ;        CALL SWAP(Y1, Y2)
06353  324D  A9 D2                 LDA #<GRAPHICS.DRAWLINE.Y1$
06354  324F  85 73                 STA MEMORY.SWAP.ADDRESS1$
06355  3251  A9 00                 LDA #>GRAPHICS.DRAWLINE.Y1$
06356  3253  85 74                 STA MEMORY.SWAP.ADDRESS1$+1
06357  3255  A9 D6                 LDA #<GRAPHICS.DRAWLINE.Y2$
06358  3257  85 75                 STA MEMORY.SWAP.ADDRESS2$
06359  3259  A9 00                 LDA #>GRAPHICS.DRAWLINE.Y2$
06360  325B  85 76                 STA MEMORY.SWAP.ADDRESS2$+1
06361  325D  A9 02                 LDA #$02
06362  325F  85 77                 STA MEMORY.SWAP.LENGTH$
06363  3261  20 C0 0F              JSR MEMORY.SWAP$
06364  3264             
06365  3264             ;    END IF
06366  3264             @SKIPSWAPX1X2_Y1Y2 
06367  3264             
06368  3264             ;    DX = X2 - X1
06369  3264  A5 D4                 LDA GRAPHICS.DRAWLINE.X2$
06370  3266  85 80                 STA MATH.SUBTRACT16.MENUEND$
06371  3268  A5 D5                 LDA GRAPHICS.DRAWLINE.X2$+1
06372  326A  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06373  326C  A5 D0                 LDA GRAPHICS.DRAWLINE.X1$
06374  326E  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06375  3270  A5 D1                 LDA GRAPHICS.DRAWLINE.X1$+1
06376  3272  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06377  3274  20 96 28              JSR MATH.SUBTRACT16$ ; DX = X2 - X1
06378  3277  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06379  3279  85 D8                 STA GRAPHICS.DRAWLINE.DX
06380  327B  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06381  327D  85 D9                 STA GRAPHICS.DRAWLINE.DX+1
06382  327F             
06383  327F             ;    DY = Y2 - Y1
06384  327F  A5 D6                 LDA GRAPHICS.DRAWLINE.Y2$
06385  3281  85 80                 STA MATH.SUBTRACT16.MENUEND$
06386  3283  A5 D7                 LDA GRAPHICS.DRAWLINE.Y2$+1
06387  3285  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06388  3287  A5 D2                 LDA GRAPHICS.DRAWLINE.Y1$
06389  3289  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06390  328B  A5 D3                 LDA GRAPHICS.DRAWLINE.Y1$+1
06391  328D  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06392  328F  20 96 28              JSR MATH.SUBTRACT16$ ; DY = Y2 - Y1
06393  3292  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06394  3294  85 DA                 STA GRAPHICS.DRAWLINE.DY
06395  3296  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06396  3298  85 DB                 STA GRAPHICS.DRAWLINE.DY+1
06397  329A             
06398  329A             ;    DERROR2 = ABS(DY) * 2
06399  329A  A5 DA                 LDA GRAPHICS.DRAWLINE.DY
06400  329C  85 80                 STA MATH.ABS16.INTEGER$
06401  329E  A5 DB                 LDA GRAPHICS.DRAWLINE.DY+1
06402  32A0  85 81                 STA MATH.ABS16.INTEGER$+1
06403  32A2  20 73 2A              JSR MATH.ABS16$ ; VALUE = ABS(DY)
06404  32A5             
06405  32A5  A5 84                 LDA MATH.ABS16.VALUE$
06406  32A7  85 80                 STA MATH.MULTIPLY16.FACTOR1$
06407  32A9  A5 85                 LDA MATH.ABS16.VALUE$+1
06408  32AB  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
06409  32AD  A9 02                 LDA #$02
06410  32AF  85 82                 STA MATH.MULTIPLY16.FACTOR2$
06411  32B1  A9 00                 LDA #$00
06412  32B3  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
06413  32B5  20 67 29              JSR MATH.MULTIPLY16$ ; DERROR2 = VALUE * 2
06414  32B8                        
06415  32B8  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06416  32BA  85 E8                 STA GRAPHICS.DRAWLINE.DERROR2
06417  32BC  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06418  32BE  85 E9                 STA GRAPHICS.DRAWLINE.DERROR2+1
06419  32C0             
06420  32C0             ;    ERROR2 = 0
06421  32C0  A9 00                 LDA #$00
06422  32C2  85 EA                 STA GRAPHICS.DRAWLINE.ERROR2
06423  32C4  85 EB                 STA GRAPHICS.DRAWLINE.ERROR2+1
06424  32C6             
06425  32C6             ;    Y = Y1
06426  32C6  A5 D2                 LDA GRAPHICS.DRAWLINE.Y1$
06427  32C8  85 E2                 STA GRAPHICS.DRAWLINE.Y
06428  32CA  A5 D3                 LDA GRAPHICS.DRAWLINE.Y1$+1
06429  32CC  85 E3                 STA GRAPHICS.DRAWLINE.Y+1
06430  32CE             
06431  32CE                        ; Y_OFFSET = IIF(Y2 > Y1, 1, -1)
06432  32CE  A5 D2                 LDA GRAPHICS.DRAWLINE.Y1$
06433  32D0  85 80                 STA MATH.CMP16.NUM1$
06434  32D2  A5 D3                 LDA GRAPHICS.DRAWLINE.Y1$+1
06435  32D4  85 81                 STA MATH.CMP16.NUM1$+1
06436  32D6  A5 D6                 LDA GRAPHICS.DRAWLINE.Y2$
06437  32D8  85 82                 STA MATH.CMP16.NUM2$
06438  32DA  A5 D7                 LDA GRAPHICS.DRAWLINE.Y2$+1
06439  32DC  85 83                 STA MATH.CMP16.NUM2$+1
06440  32DE  20 E4 28              JSR MATH.CMP16$ ; IF Y1 < Y2 THEN @SETY_OFFSET1
06441  32E1  90 0B                 BCC @SETY_OFFSET1
06442  32E3  A9 FF                 LDA #$FF ; -1
06443  32E5  85 EC                 STA GRAPHICS.DRAWLINE.Y_OFFSET
06444  32E7  A9 FF                 LDA #$FF ; -1
06445  32E9  85 ED                 STA GRAPHICS.DRAWLINE.Y_OFFSET+1
06446  32EB  4C F6 32              JMP @SKIPSETY_OFFSET
06447  32EE             @SETY_OFFSET1 
06448  32EE  A9 01                 LDA #$01
06449  32F0  85 EC                 STA GRAPHICS.DRAWLINE.Y_OFFSET
06450  32F2  A9 00                 LDA #$00
06451  32F4  85 ED                 STA GRAPHICS.DRAWLINE.Y_OFFSET+1
06452  32F6             @SKIPSETY_OFFSET 
06453  32F6                        
06454  32F6                        ; DX_2 = (DX * 2)
06455  32F6  A5 D8                 LDA GRAPHICS.DRAWLINE.DX
06456  32F8  85 80                 STA MATH.MULTIPLY16.FACTOR1$
06457  32FA  A5 D9                 LDA GRAPHICS.DRAWLINE.DX+1
06458  32FC  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
06459  32FE  A9 02                 LDA #$02
06460  3300  85 82                 STA MATH.MULTIPLY16.FACTOR2$
06461  3302  A9 00                 LDA #$00
06462  3304  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
06463  3306  20 67 29              JSR MATH.MULTIPLY16$
06464  3309  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06465  330B  85 EE                 STA GRAPHICS.DRAWLINE.DX_2
06466  330D  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06467  330F  85 EF                 STA GRAPHICS.DRAWLINE.DX_2+1
06468  3311             
06469  3311             ;    FOR X = X1 TO X2
06470  3311  A5 D0                 LDA GRAPHICS.DRAWLINE.X1$
06471  3313  85 E0                 STA GRAPHICS.DRAWLINE.X
06472  3315  A5 D1                 LDA GRAPHICS.DRAWLINE.X1$+1
06473  3317  85 E1                 STA GRAPHICS.DRAWLINE.X+1
06474  3319                        
06475  3319             @LOOP
06476  3319  A5 D4                 LDA GRAPHICS.DRAWLINE.X2$
06477  331B  85 80                 STA MATH.CMP16.NUM1$
06478  331D  A5 D5                 LDA GRAPHICS.DRAWLINE.X2$+1
06479  331F  85 81                 STA MATH.CMP16.NUM1$+1
06480  3321  A5 E0                 LDA GRAPHICS.DRAWLINE.X
06481  3323  85 82                 STA MATH.CMP16.NUM2$
06482  3325  A5 E1                 LDA GRAPHICS.DRAWLINE.X+1
06483  3327  85 83                 STA MATH.CMP16.NUM2$+1
06484  3329  20 E4 28              JSR MATH.CMP16$ ; IF X2 >= X THEN @PROCESSLOOP
06485  332C  B0 03                 BCS @PROCESSLOOP
06486  332E  4C F5 33              JMP @SKIPPROCESSLOOP
06487  3331             @PROCESSLOOP 
06488  3331             
06489  3331             ;        IF (STEEP = TRUE) THEN
06490  3331  A5 DC                 LDA GRAPHICS.DRAWLINE.STEEP
06491  3333  C9 01                 CMP #$01
06492  3335  F0 03                 BEQ @DRAWPIXELYX ; IF STEEP = $01 THEN @DRAWPIXELYX
06493  3337  4C 54 33              JMP @DRAWPIXELXY
06494  333A             @DRAWPIXELYX 
06495  333A             ;            PICTUREBOX.PSET (Y, X), COLOR
06496  333A  A5 E2                 LDA GRAPHICS.DRAWLINE.Y
06497  333C  85 20                 STA GRAPHICS.SETPIXEL.X$
06498  333E  A5 E3                 LDA GRAPHICS.DRAWLINE.Y+1
06499  3340  85 21                 STA GRAPHICS.SETPIXEL.X$+1
06500  3342  A5 E0                 LDA GRAPHICS.DRAWLINE.X
06501  3344  85 22                 STA GRAPHICS.SETPIXEL.Y$
06502  3346  A5 E1                 LDA GRAPHICS.DRAWLINE.X+1
06503  3348  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
06504  334A  A5 24                 LDA GRAPHICS.DRAWLINE.COLOR$
06505  334C  85 24                 STA GRAPHICS.SETPIXEL.COLOR$
06506  334E  20 07 31              JSR GRAPHICS.SETPIXEL$
06507  3351             
06508  3351  4C 6B 33              JMP @SKIPDRAWPIXEL
06509  3354             ;        ELSE
06510  3354             @DRAWPIXELXY 
06511  3354             ;            PICTUREBOX.PSET (X, Y), COLOR
06512  3354  A5 E0                 LDA GRAPHICS.DRAWLINE.X
06513  3356  85 20                 STA GRAPHICS.SETPIXEL.X$
06514  3358  A5 E1                 LDA GRAPHICS.DRAWLINE.X+1
06515  335A  85 21                 STA GRAPHICS.SETPIXEL.X$+1
06516  335C  A5 E2                 LDA GRAPHICS.DRAWLINE.Y
06517  335E  85 22                 STA GRAPHICS.SETPIXEL.Y$
06518  3360  A5 E3                 LDA GRAPHICS.DRAWLINE.Y+1
06519  3362  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
06520  3364  A5 24                 LDA GRAPHICS.DRAWLINE.COLOR$
06521  3366  85 24                 STA GRAPHICS.SETPIXEL.COLOR$
06522  3368  20 07 31              JSR GRAPHICS.SETPIXEL$
06523  336B             
06524  336B             ;        END IF
06525  336B             @SKIPDRAWPIXEL 
06526  336B             
06527  336B             ;        ERROR2 = ERROR2 + DERROR2
06528  336B  A5 EA                 LDA GRAPHICS.DRAWLINE.ERROR2
06529  336D  85 80                 STA MATH.ADD16.ADDEND1$
06530  336F  A5 EB                 LDA GRAPHICS.DRAWLINE.ERROR2+1
06531  3371  85 81                 STA MATH.ADD16.ADDEND1$+1
06532  3373  A5 E8                 LDA GRAPHICS.DRAWLINE.DERROR2
06533  3375  85 82                 STA MATH.ADD16.ADDEND2$
06534  3377  A5 E9                 LDA GRAPHICS.DRAWLINE.DERROR2+1
06535  3379  85 83                 STA MATH.ADD16.ADDEND2$+1
06536  337B  20 00 28              JSR MATH.ADD16$
06537  337E  A5 84                 LDA MATH.ADD16.SUM$
06538  3380  85 EA                 STA GRAPHICS.DRAWLINE.ERROR2
06539  3382  A5 85                 LDA MATH.ADD16.SUM$+1
06540  3384  85 EB                 STA GRAPHICS.DRAWLINE.ERROR2+1
06541  3386                        
06542  3386             ;;        IF (ERROR2 > DX) THEN
06543  3386             ;        LDA GRAPHICS.DRAWLINE.DX
06544  3386             ;        STA MATH.CMP16.NUM1$
06545  3386             ;        LDA GRAPHICS.DRAWLINE.DX+1
06546  3386             ;        STA MATH.CMP16.NUM1$+1
06547  3386             ;        LDA GRAPHICS.DRAWLINE.ERROR2
06548  3386             ;        STA MATH.CMP16.NUM2$
06549  3386             ;        LDA GRAPHICS.DRAWLINE.ERROR2+1
06550  3386             ;        STA MATH.CMP16.NUM2$+1
06551  3386             ;        JSR MATH.CMP16$ ; IF DX < ERROR2 THEN @PROCESSYERROR2
06552  3386             ;        BCC @PROCESSYERROR2
06553  3386             
06554  3386             ;        IF (ERROR2 > DX) THEN [SIGNED INTEGER CHECK!]
06555  3386             
06556  3386  A5 EA                 LDA GRAPHICS.DRAWLINE.ERROR2
06557  3388  85 80                 STA MATH.SUBTRACT16.MENUEND$
06558  338A  A5 EB                 LDA GRAPHICS.DRAWLINE.ERROR2+1
06559  338C  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06560  338E  A5 D8                 LDA GRAPHICS.DRAWLINE.DX
06561  3390  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06562  3392  A5 D9                 LDA GRAPHICS.DRAWLINE.DX+1
06563  3394  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06564  3396  20 96 28              JSR MATH.SUBTRACT16$
06565  3399  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06566  339B  C9 80                 CMP #$80
06567  339D  90 03                 BCC @PROCESSYERROR2_1
06568  339F  4C E7 33              JMP @SKIPPROCESSYERROR2
06569  33A2             @PROCESSYERROR2_1 
06570  33A2  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06571  33A4  C9 00                 CMP #$00
06572  33A6  D0 09                 BNE @PROCESSYERROR2
06573  33A8  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06574  33AA  C9 00                 CMP #$00
06575  33AC  D0 03                 BNE @PROCESSYERROR2
06576  33AE                        ;BEQ @SKIPPROCESSYERROR2_1
06577  33AE                        ;BPL @PROCESSYERROR2
06578  33AE                        ;BMI @PROCESSYERROR2
06579  33AE             ;@SKIPPROCESSYERROR2_1
06580  33AE  4C E7 33              JMP @SKIPPROCESSYERROR2
06581  33B1             @PROCESSYERROR2 
06582  33B1             
06583  33B1             ;        Y = Y + IIF(Y2 > Y1, 1, -1)
06584  33B1  A5 E2                 LDA GRAPHICS.DRAWLINE.Y
06585  33B3  85 80                 STA MATH.ADD16.ADDEND1$
06586  33B5  A5 E3                 LDA GRAPHICS.DRAWLINE.Y+1
06587  33B7  85 81                 STA MATH.ADD16.ADDEND1$+1
06588  33B9  A5 EC                 LDA GRAPHICS.DRAWLINE.Y_OFFSET
06589  33BB  85 82                 STA MATH.ADD16.ADDEND2$
06590  33BD  A5 ED                 LDA GRAPHICS.DRAWLINE.Y_OFFSET+1
06591  33BF  85 83                 STA MATH.ADD16.ADDEND2$+1
06592  33C1  20 00 28              JSR MATH.ADD16$ ; Y = Y + Y_OFFSET
06593  33C4  A5 84                 LDA MATH.ADD16.SUM$
06594  33C6  85 E2                 STA GRAPHICS.DRAWLINE.Y
06595  33C8  A5 85                 LDA MATH.ADD16.SUM$+1
06596  33CA  85 E3                 STA GRAPHICS.DRAWLINE.Y+1
06597  33CC             
06598  33CC             ;        LDA GRAPHICS.DRAWLINE.Y_OFFSET
06599  33CC             ;        CMP #$01
06600  33CC             ;        BEQ @INCY
06601  33CC             ;        JMP @DECY
06602  33CC             ;@INCY
06603  33CC             ;        LDA #<GRAPHICS.DRAWLINE.Y
06604  33CC             ;        STA MATH.INC16.ADDRESS$
06605  33CC             ;        LDA #>GRAPHICS.DRAWLINE.Y
06606  33CC             ;        STA MATH.INC16.ADDRESS$+1
06607  33CC             ;        JSR MATH.INC16$
06608  33CC             ;        JMP @SKPINCDECY
06609  33CC             ;@DECY
06610  33CC             ;        LDA #<GRAPHICS.DRAWLINE.Y
06611  33CC             ;        STA MATH.DEC16.ADDRESS$
06612  33CC             ;        LDA #>GRAPHICS.DRAWLINE.Y
06613  33CC             ;        STA MATH.DEC16.ADDRESS$+1
06614  33CC             ;        JSR MATH.DEC16$
06615  33CC             ;        JMP @SKPINCDECY
06616  33CC             ;@SKPINCDECY
06617  33CC             
06618  33CC             ;            ERROR2 = ERROR2 - (DX * 2)
06619  33CC  A5 EA                 LDA GRAPHICS.DRAWLINE.ERROR2
06620  33CE  85 80                 STA MATH.SUBTRACT16.MENUEND$
06621  33D0  A5 EB                 LDA GRAPHICS.DRAWLINE.ERROR2+1
06622  33D2  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06623  33D4  A5 EE                 LDA GRAPHICS.DRAWLINE.DX_2
06624  33D6  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06625  33D8  A5 EF                 LDA GRAPHICS.DRAWLINE.DX_2+1
06626  33DA  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06627  33DC  20 96 28              JSR MATH.SUBTRACT16$ ; ERROR2 = ERROR2 - DX_2
06628  33DF  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06629  33E1  85 EA                 STA GRAPHICS.DRAWLINE.ERROR2
06630  33E3  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06631  33E5  85 EB                 STA GRAPHICS.DRAWLINE.ERROR2+1
06632  33E7             
06633  33E7             ;        END IF
06634  33E7             @SKIPPROCESSYERROR2 
06635  33E7             
06636  33E7             ;    NEXT X
06637  33E7  A9 E0                 LDA #<GRAPHICS.DRAWLINE.X
06638  33E9  85 86                 STA MATH.INC16.ADDRESS$
06639  33EB  A9 00                 LDA #>GRAPHICS.DRAWLINE.X
06640  33ED  85 87                 STA MATH.INC16.ADDRESS$+1
06641  33EF  20 3C 28              JSR MATH.INC16$ ; X = X + 1
06642  33F2             
06643  33F2  4C 19 33              JMP @LOOP
06644  33F5             
06645  33F5             @SKIPPROCESSLOOP 
06646  33F5             
06647  33F5  60                    RTS
06648  33F6             
06649  33F6             GRAPHICS.DRAWBOX.COLOR$ = $24 ; 1 BYTE
06650  33F6             GRAPHICS.DRAWBOX.X1$ = $25 ; 2 BYTES
06651  33F6             GRAPHICS.DRAWBOX.Y1$ = $27 ; 2 BYTES
06652  33F6             GRAPHICS.DRAWBOX.X2$ = $29 ; 2 BYTES
06653  33F6             GRAPHICS.DRAWBOX.Y2$ = $2B ; 2 BYTES
06654  33F6             GRAPHICS.DRAWBOX$ 
06655  33F6                        ; DRAW 4 LINES
06656  33F6             
06657  33F6                        ; TOP
06658  33F6  A5 25                 LDA GRAPHICS.DRAWBOX.X1$
06659  33F8  85 D0                 STA GRAPHICS.DRAWLINE.X1$
06660  33FA  A5 26                 LDA GRAPHICS.DRAWBOX.X1$+1
06661  33FC  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
06662  33FE  A5 27                 LDA GRAPHICS.DRAWBOX.Y1$
06663  3400  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
06664  3402  A5 28                 LDA GRAPHICS.DRAWBOX.Y1$+1
06665  3404  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
06666  3406  A5 29                 LDA GRAPHICS.DRAWBOX.X2$
06667  3408  85 D4                 STA GRAPHICS.DRAWLINE.X2$
06668  340A  A5 2A                 LDA GRAPHICS.DRAWBOX.X2$+1
06669  340C  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
06670  340E  A5 27                 LDA GRAPHICS.DRAWBOX.Y1$
06671  3410  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
06672  3412  A5 28                 LDA GRAPHICS.DRAWBOX.Y1$+1
06673  3414  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
06674  3416  20 84 31              JSR GRAPHICS.DRAWLINE$
06675  3419             
06676  3419                        ; RIGHT
06677  3419  A5 29                 LDA GRAPHICS.DRAWBOX.X2$
06678  341B  85 D0                 STA GRAPHICS.DRAWLINE.X1$
06679  341D  A5 2A                 LDA GRAPHICS.DRAWBOX.X2$+1
06680  341F  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
06681  3421  A5 27                 LDA GRAPHICS.DRAWBOX.Y1$
06682  3423  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
06683  3425  A5 28                 LDA GRAPHICS.DRAWBOX.Y1$+1
06684  3427  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
06685  3429  A5 29                 LDA GRAPHICS.DRAWBOX.X2$
06686  342B  85 D4                 STA GRAPHICS.DRAWLINE.X2$
06687  342D  A5 2A                 LDA GRAPHICS.DRAWBOX.X2$+1
06688  342F  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
06689  3431  A5 2B                 LDA GRAPHICS.DRAWBOX.Y2$
06690  3433  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
06691  3435  A5 2C                 LDA GRAPHICS.DRAWBOX.Y2$+1
06692  3437  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
06693  3439  20 84 31              JSR GRAPHICS.DRAWLINE$
06694  343C             
06695  343C                        ; BOTTOM
06696  343C  A5 29                 LDA GRAPHICS.DRAWBOX.X2$
06697  343E  85 D0                 STA GRAPHICS.DRAWLINE.X1$
06698  3440  A5 2A                 LDA GRAPHICS.DRAWBOX.X2$+1
06699  3442  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
06700  3444  A5 2B                 LDA GRAPHICS.DRAWBOX.Y2$
06701  3446  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
06702  3448  A5 2C                 LDA GRAPHICS.DRAWBOX.Y2$+1
06703  344A  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
06704  344C  A5 25                 LDA GRAPHICS.DRAWBOX.X1$
06705  344E  85 D4                 STA GRAPHICS.DRAWLINE.X2$
06706  3450  A5 26                 LDA GRAPHICS.DRAWBOX.X1$+1
06707  3452  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
06708  3454  A5 2B                 LDA GRAPHICS.DRAWBOX.Y2$
06709  3456  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
06710  3458  A5 2C                 LDA GRAPHICS.DRAWBOX.Y2$+1
06711  345A  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
06712  345C  20 84 31              JSR GRAPHICS.DRAWLINE$
06713  345F             
06714  345F                        ; LEFT
06715  345F  A5 25                 LDA GRAPHICS.DRAWBOX.X1$
06716  3461  85 D0                 STA GRAPHICS.DRAWLINE.X1$
06717  3463  A5 26                 LDA GRAPHICS.DRAWBOX.X1$+1
06718  3465  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
06719  3467  A5 2B                 LDA GRAPHICS.DRAWBOX.Y2$
06720  3469  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
06721  346B  A5 2C                 LDA GRAPHICS.DRAWBOX.Y2$+1
06722  346D  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
06723  346F  A5 25                 LDA GRAPHICS.DRAWBOX.X1$
06724  3471  85 D4                 STA GRAPHICS.DRAWLINE.X2$
06725  3473  A5 26                 LDA GRAPHICS.DRAWBOX.X1$+1
06726  3475  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
06727  3477  A5 27                 LDA GRAPHICS.DRAWBOX.Y1$
06728  3479  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
06729  347B  A5 28                 LDA GRAPHICS.DRAWBOX.Y1$+1
06730  347D  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
06731  347F  20 84 31              JSR GRAPHICS.DRAWLINE$
06732  3482             
06733  3482  60                    RTS
06734  3483             
06735  3483             GRAPHICS.DRAWCIRCLE.COLOR$ = $24 ; 1 BYTE
06736  3483             GRAPHICS.DRAWCIRCLE.RADIUS$ = $25 ; 1 BYTE
06737  3483             GRAPHICS.DRAWCIRCLE.XCENTER$ = $26 ; 2 BYTES
06738  3483             GRAPHICS.DRAWCIRCLE.YCENTER$ = $28 ; 2 BYTES
06739  3483             GRAPHICS.DRAWCIRCLE.X = $2A ; 2 BYTES
06740  3483             GRAPHICS.DRAWCIRCLE.Y = $2C ; 2 BYTES
06741  3483             GRAPHICS.DRAWCIRCLE.D = $2E ; 2 BYTES
06742  3483             GRAPHICS.DRAWCIRCLE$ 
06743  3483             ; SEE: HTTPS://WWW.GEEKSFORGEEKS.ORG/BRESENHAMS-CIRCLE-DRAWING-ALGORITHM/
06744  3483             
06745  3483                        ; X = 0
06746  3483                        ; Y = R
06747  3483  A9 00                 LDA #$00
06748  3485  85 2A                 STA GRAPHICS.DRAWCIRCLE.X
06749  3487  85 2B                 STA GRAPHICS.DRAWCIRCLE.X+1
06750  3489  85 2D                 STA GRAPHICS.DRAWCIRCLE.Y+1
06751  348B  A5 25                 LDA GRAPHICS.DRAWCIRCLE.RADIUS$
06752  348D  85 2C                 STA GRAPHICS.DRAWCIRCLE.Y
06753  348F             
06754  348F             ;        ; D = 3 - (2 * R)
06755  348F             ;        LDA GRAPHICS.DRAWCIRCLE.RADIUS$
06756  348F             ;        STA MATH.MULTIPLY16.FACTOR1$
06757  348F             ;        LDA #$02
06758  348F             ;        STA MATH.MULTIPLY16.FACTOR2$
06759  348F             ;        LDA #$00
06760  348F             ;        STA MATH.MULTIPLY16.FACTOR1$+1
06761  348F             ;        STA MATH.MULTIPLY16.FACTOR2$+1
06762  348F             ;        JSR MATH.MULTIPLY16$ ; PRODUCT = 2 * RADIUS
06763  348F             ;        LDA MATH.MULTIPLY16.PRODUCT$
06764  348F             ;        STA MATH.SUBTRACT16.SUBTRAHEND$
06765  348F             ;        LDA MATH.MULTIPLY16.PRODUCT$+1
06766  348F             ;        STA MATH.SUBTRACT16.SUBTRAHEND$+1
06767  348F             ;        LDA #$03
06768  348F             ;        STA MATH.SUBTRACT16.MENUEND$
06769  348F             ;        LDA #$00
06770  348F             ;        STA MATH.SUBTRACT16.MENUEND$+1
06771  348F             ;        JSR MATH.SUBTRACT16$ ; D = 3 - PRODUCT
06772  348F             ;        LDA MATH.SUBTRACT16.DIFFERENCE$
06773  348F             ;        STA GRAPHICS.DRAWCIRCLE.D
06774  348F             ;        LDA MATH.SUBTRACT16.DIFFERENCE$+1
06775  348F             ;        STA GRAPHICS.DRAWCIRCLE.D+1
06776  348F             
06777  348F                        ; D = 0 - (2 * R)
06778  348F  A5 25                 LDA GRAPHICS.DRAWCIRCLE.RADIUS$
06779  3491  85 80                 STA MATH.MULTIPLY16.FACTOR1$
06780  3493  A9 02                 LDA #$02
06781  3495  85 82                 STA MATH.MULTIPLY16.FACTOR2$
06782  3497  A9 00                 LDA #$00
06783  3499  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
06784  349B  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
06785  349D  20 67 29              JSR MATH.MULTIPLY16$ ; PRODUCT = 2 * RADIUS
06786  34A0  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06787  34A2  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06788  34A4  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06789  34A6  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06790  34A8  A9 00                 LDA #$00
06791  34AA  85 80                 STA MATH.SUBTRACT16.MENUEND$
06792  34AC  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06793  34AE  20 96 28              JSR MATH.SUBTRACT16$ ; D = 0 - PRODUCT
06794  34B1  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06795  34B3  85 2E                 STA GRAPHICS.DRAWCIRCLE.D
06796  34B5  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06797  34B7  85 2F                 STA GRAPHICS.DRAWCIRCLE.D+1
06798  34B9             
06799  34B9                        ; CALL DRAWCIRCLE(XC, YC, X, Y, COLOR)
06800  34B9  20 9C 35              JSR GRAPHICS.PLOTCIRCLE
06801  34BC             
06802  34BC                        ; WHILE (Y >= X)
06803  34BC             @CHECK_Y_X 
06804  34BC  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
06805  34BE  85 80                 STA MATH.CMP16.NUM1$
06806  34C0  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
06807  34C2  85 81                 STA MATH.CMP16.NUM1$+1
06808  34C4  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
06809  34C6  85 82                 STA MATH.CMP16.NUM2$
06810  34C8  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
06811  34CA  85 83                 STA MATH.CMP16.NUM2$+1
06812  34CC  20 E4 28              JSR MATH.CMP16$
06813  34CF  B0 01                 BCS @CONTINUE ; IF Y >= X THEN @CONTINUE
06814  34D1  60                    RTS
06815  34D2             @CONTINUE
06816  34D2             
06817  34D2                        ; FOR EACH PIXEL WE WILL DRAW ALL EIGHT PIXELS
06818  34D2                        ; X = X + 1
06819  34D2  A9 2A                 LDA #<GRAPHICS.DRAWCIRCLE.X
06820  34D4  85 86                 STA MATH.INC16.ADDRESS$
06821  34D6  A9 00                 LDA #>GRAPHICS.DRAWCIRCLE.X
06822  34D8  85 87                 STA MATH.INC16.ADDRESS$+1
06823  34DA  20 3C 28              JSR MATH.INC16$
06824  34DD             
06825  34DD                        ; CHECK FOR DECISION PARAMETER AND CORRESPONDINGLY UPDATE D, X, Y
06826  34DD                        ; IF D > 0 THEN
06827  34DD  A5 2F                 LDA GRAPHICS.DRAWCIRCLE.D+1
06828  34DF  C9 80                 CMP #$80
06829  34E1  90 03                 BCC @D_NOT_NEG ; IF D(HI) < $80 THEN @D_NOT_NEG
06830  34E3  4C 55 35              JMP @D_NEG
06831  34E6             @D_NOT_NEG 
06832  34E6  C9 00                 CMP #$00
06833  34E8  D0 09                 BNE @D_POS ; IF D(HI) != $00 THEN @D_POS
06834  34EA  A5 2E                 LDA GRAPHICS.DRAWCIRCLE.D
06835  34EC  C9 00                 CMP #$00
06836  34EE  D0 03                 BNE @D_POS ; IF D(LO) != $00 THEN @D_POS
06837  34F0  4C 55 35              JMP @D_NEG
06838  34F3             @D_POS
06839  34F3             
06840  34F3                        ; Y = Y - 1
06841  34F3  A9 2C                 LDA #<GRAPHICS.DRAWCIRCLE.Y
06842  34F5  85 86                 STA MATH.DEC16.ADDRESS$
06843  34F7  A9 00                 LDA #>GRAPHICS.DRAWCIRCLE.Y
06844  34F9  85 87                 STA MATH.DEC16.ADDRESS$+1
06845  34FB  20 BE 28              JSR MATH.DEC16$
06846  34FE             
06847  34FE                        ; D = D + 10 + (4 * (X - Y))
06848  34FE  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
06849  3500  85 80                 STA MATH.SUBTRACT16.MENUEND$
06850  3502  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
06851  3504  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06852  3506  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
06853  3508  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06854  350A  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
06855  350C  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06856  350E  20 96 28              JSR MATH.SUBTRACT16$ ; DIFFERENCE = X - Y
06857  3511                        
06858  3511  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06859  3513  85 80                 STA MATH.MULTIPLY16.FACTOR1$
06860  3515  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06861  3517  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
06862  3519  A9 04                 LDA #$04
06863  351B  85 82                 STA MATH.MULTIPLY16.FACTOR2$
06864  351D  A9 00                 LDA #$00
06865  351F  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
06866  3521  20 67 29              JSR MATH.MULTIPLY16$ ; PRODUCT = 4 * DIFFERENCE
06867  3524             
06868  3524  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06869  3526  85 80                 STA MATH.ADD16.ADDEND1$
06870  3528  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06871  352A  85 81                 STA MATH.ADD16.ADDEND1$+1
06872  352C  A9 0A                 LDA #$0A
06873  352E  85 82                 STA MATH.ADD16.ADDEND2$
06874  3530  A9 00                 LDA #$00
06875  3532  85 83                 STA MATH.ADD16.ADDEND2$+1
06876  3534  20 00 28              JSR MATH.ADD16$ ; SUM = 10 + PRODUCT
06877  3537             
06878  3537  A5 84                 LDA MATH.ADD16.SUM$
06879  3539  85 80                 STA MATH.ADD16.ADDEND1$
06880  353B  A5 85                 LDA MATH.ADD16.SUM$+1
06881  353D  85 81                 STA MATH.ADD16.ADDEND1$+1
06882  353F  A5 2E                 LDA GRAPHICS.DRAWCIRCLE.D
06883  3541  85 82                 STA MATH.ADD16.ADDEND2$
06884  3543  A5 2F                 LDA GRAPHICS.DRAWCIRCLE.D+1
06885  3545  85 83                 STA MATH.ADD16.ADDEND2$+1
06886  3547  20 00 28              JSR MATH.ADD16$ ; D = D + SUM
06887  354A             
06888  354A  A5 84                 LDA MATH.ADD16.SUM$
06889  354C  85 2E                 STA GRAPHICS.DRAWCIRCLE.D
06890  354E  A5 85                 LDA MATH.ADD16.SUM$+1
06891  3550  85 2F                 STA GRAPHICS.DRAWCIRCLE.D+1
06892  3552             
06893  3552  4C 96 35              JMP @SKIP_CHECK_D
06894  3555             
06895  3555             @D_NEG
06896  3555                        ; D = D + 6 + (4 * X)
06897  3555  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
06898  3557  85 80                 STA MATH.MULTIPLY16.FACTOR1$
06899  3559  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
06900  355B  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
06901  355D  A9 04                 LDA #$04
06902  355F  85 82                 STA MATH.MULTIPLY16.FACTOR2$
06903  3561  A9 00                 LDA #$00
06904  3563  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
06905  3565  20 67 29              JSR MATH.MULTIPLY16$ ; PRODUCT = 4 * X
06906  3568             
06907  3568  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06908  356A  85 80                 STA MATH.ADD16.ADDEND1$
06909  356C  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06910  356E  85 81                 STA MATH.ADD16.ADDEND1$+1
06911  3570  A9 06                 LDA #$06
06912  3572  85 82                 STA MATH.ADD16.ADDEND2$
06913  3574  A9 00                 LDA #$00
06914  3576  85 83                 STA MATH.ADD16.ADDEND2$+1
06915  3578  20 00 28              JSR MATH.ADD16$ ; SUM = 6 + PRODUCT
06916  357B             
06917  357B  A5 84                 LDA MATH.ADD16.SUM$
06918  357D  85 80                 STA MATH.ADD16.ADDEND1$
06919  357F  A5 85                 LDA MATH.ADD16.SUM$+1
06920  3581  85 81                 STA MATH.ADD16.ADDEND1$+1
06921  3583  A5 2E                 LDA GRAPHICS.DRAWCIRCLE.D
06922  3585  85 82                 STA MATH.ADD16.ADDEND2$
06923  3587  A5 2F                 LDA GRAPHICS.DRAWCIRCLE.D+1
06924  3589  85 83                 STA MATH.ADD16.ADDEND2$+1
06925  358B  20 00 28              JSR MATH.ADD16$ ; D = D + SUM
06926  358E             
06927  358E  A5 84                 LDA MATH.ADD16.SUM$
06928  3590  85 2E                 STA GRAPHICS.DRAWCIRCLE.D
06929  3592  A5 85                 LDA MATH.ADD16.SUM$+1
06930  3594  85 2F                 STA GRAPHICS.DRAWCIRCLE.D+1
06931  3596             @SKIP_CHECK_D 
06932  3596             
06933  3596  20 9C 35              JSR GRAPHICS.PLOTCIRCLE
06934  3599             
06935  3599  4C BC 34              JMP @CHECK_Y_X
06936  359C             
06937  359C             GRAPHICS.PLOTCIRCLE 
06938  359C                        ; FUNCTION TO PUT PIXELS AT SUBSEQUENCE POINTS
06939  359C             
06940  359C                        ; PSET (XC + X, YC + Y), COLOR
06941  359C  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
06942  359E  85 80                 STA MATH.ADD16.ADDEND1$
06943  35A0  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
06944  35A2  85 81                 STA MATH.ADD16.ADDEND1$+1
06945  35A4  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
06946  35A6  85 82                 STA MATH.ADD16.ADDEND2$
06947  35A8  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
06948  35AA  85 83                 STA MATH.ADD16.ADDEND2$+1
06949  35AC  20 00 28              JSR MATH.ADD16$ ; (XC + X)
06950  35AF  A5 84                 LDA MATH.ADD16.SUM$
06951  35B1  85 20                 STA GRAPHICS.SETPIXEL.X$
06952  35B3  A5 85                 LDA MATH.ADD16.SUM$+1
06953  35B5  85 21                 STA GRAPHICS.SETPIXEL.X$+1
06954  35B7             
06955  35B7  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
06956  35B9  85 80                 STA MATH.ADD16.ADDEND1$
06957  35BB  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
06958  35BD  85 81                 STA MATH.ADD16.ADDEND1$+1
06959  35BF  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
06960  35C1  85 82                 STA MATH.ADD16.ADDEND2$
06961  35C3  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
06962  35C5  85 83                 STA MATH.ADD16.ADDEND2$+1
06963  35C7  20 00 28              JSR MATH.ADD16$ ; (YC + Y)
06964  35CA  A5 84                 LDA MATH.ADD16.SUM$
06965  35CC  85 22                 STA GRAPHICS.SETPIXEL.Y$
06966  35CE  A5 85                 LDA MATH.ADD16.SUM$+1
06967  35D0  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
06968  35D2             
06969  35D2  20 07 31              JSR GRAPHICS.SETPIXEL$
06970  35D5             
06971  35D5                        ; PSET (XC - X, YC + Y), COLOR
06972  35D5  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
06973  35D7  85 80                 STA MATH.SUBTRACT16.MENUEND$
06974  35D9  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
06975  35DB  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06976  35DD  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
06977  35DF  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06978  35E1  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
06979  35E3  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06980  35E5  20 96 28              JSR MATH.SUBTRACT16$ ; (XC - X)
06981  35E8  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06982  35EA  85 20                 STA GRAPHICS.SETPIXEL.X$
06983  35EC  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06984  35EE  85 21                 STA GRAPHICS.SETPIXEL.X$+1
06985  35F0             
06986  35F0  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
06987  35F2  85 80                 STA MATH.ADD16.ADDEND1$
06988  35F4  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
06989  35F6  85 81                 STA MATH.ADD16.ADDEND1$+1
06990  35F8  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
06991  35FA  85 82                 STA MATH.ADD16.ADDEND2$
06992  35FC  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
06993  35FE  85 83                 STA MATH.ADD16.ADDEND2$+1
06994  3600  20 00 28              JSR MATH.ADD16$ ; (YC + Y)
06995  3603  A5 84                 LDA MATH.ADD16.SUM$
06996  3605  85 22                 STA GRAPHICS.SETPIXEL.Y$
06997  3607  A5 85                 LDA MATH.ADD16.SUM$+1
06998  3609  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
06999  360B             
07000  360B  20 07 31              JSR GRAPHICS.SETPIXEL$
07001  360E             
07002  360E                        ; PSET (XC + X, YC - Y), COLOR
07003  360E  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07004  3610  85 80                 STA MATH.ADD16.ADDEND1$
07005  3612  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07006  3614  85 81                 STA MATH.ADD16.ADDEND1$+1
07007  3616  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07008  3618  85 82                 STA MATH.ADD16.ADDEND2$
07009  361A  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07010  361C  85 83                 STA MATH.ADD16.ADDEND2$+1
07011  361E  20 00 28              JSR MATH.ADD16$ ; (XC + X)
07012  3621  A5 84                 LDA MATH.ADD16.SUM$
07013  3623  85 20                 STA GRAPHICS.SETPIXEL.X$
07014  3625  A5 85                 LDA MATH.ADD16.SUM$+1
07015  3627  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07016  3629             
07017  3629  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07018  362B  85 80                 STA MATH.SUBTRACT16.MENUEND$
07019  362D  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07020  362F  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07021  3631  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07022  3633  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07023  3635  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07024  3637  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07025  3639  20 96 28              JSR MATH.SUBTRACT16$ ; (YC - Y)
07026  363C  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07027  363E  85 22                 STA GRAPHICS.SETPIXEL.Y$
07028  3640  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07029  3642  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07030  3644             
07031  3644  20 07 31              JSR GRAPHICS.SETPIXEL$
07032  3647             
07033  3647                        ; PSET (XC - X, YC - Y), COLOR
07034  3647  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07035  3649  85 80                 STA MATH.SUBTRACT16.MENUEND$
07036  364B  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07037  364D  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07038  364F  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07039  3651  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07040  3653  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07041  3655  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07042  3657  20 96 28              JSR MATH.SUBTRACT16$ ; (XC - X)
07043  365A  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07044  365C  85 20                 STA GRAPHICS.SETPIXEL.X$
07045  365E  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07046  3660  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07047  3662             
07048  3662  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07049  3664  85 80                 STA MATH.SUBTRACT16.MENUEND$
07050  3666  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07051  3668  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07052  366A  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07053  366C  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07054  366E  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07055  3670  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07056  3672  20 96 28              JSR MATH.SUBTRACT16$ ; (YC - Y)
07057  3675  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07058  3677  85 22                 STA GRAPHICS.SETPIXEL.Y$
07059  3679  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07060  367B  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07061  367D             
07062  367D  20 07 31              JSR GRAPHICS.SETPIXEL$
07063  3680             
07064  3680                        ; PSET (XC + Y, YC + X), COLOR
07065  3680  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07066  3682  85 80                 STA MATH.ADD16.ADDEND1$
07067  3684  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07068  3686  85 81                 STA MATH.ADD16.ADDEND1$+1
07069  3688  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07070  368A  85 82                 STA MATH.ADD16.ADDEND2$
07071  368C  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07072  368E  85 83                 STA MATH.ADD16.ADDEND2$+1
07073  3690  20 00 28              JSR MATH.ADD16$ ; (XC + Y)
07074  3693  A5 84                 LDA MATH.ADD16.SUM$
07075  3695  85 20                 STA GRAPHICS.SETPIXEL.X$
07076  3697  A5 85                 LDA MATH.ADD16.SUM$+1
07077  3699  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07078  369B             
07079  369B  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07080  369D  85 80                 STA MATH.ADD16.ADDEND1$
07081  369F  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07082  36A1  85 81                 STA MATH.ADD16.ADDEND1$+1
07083  36A3  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07084  36A5  85 82                 STA MATH.ADD16.ADDEND2$
07085  36A7  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07086  36A9  85 83                 STA MATH.ADD16.ADDEND2$+1
07087  36AB  20 00 28              JSR MATH.ADD16$ ; (YC + X)
07088  36AE  A5 84                 LDA MATH.ADD16.SUM$
07089  36B0  85 22                 STA GRAPHICS.SETPIXEL.Y$
07090  36B2  A5 85                 LDA MATH.ADD16.SUM$+1
07091  36B4  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07092  36B6             
07093  36B6  20 07 31              JSR GRAPHICS.SETPIXEL$
07094  36B9             
07095  36B9                        ; PSET (XC - Y, YC + X), COLOR
07096  36B9  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07097  36BB  85 80                 STA MATH.SUBTRACT16.MENUEND$
07098  36BD  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07099  36BF  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07100  36C1  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07101  36C3  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07102  36C5  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07103  36C7  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07104  36C9  20 96 28              JSR MATH.SUBTRACT16$ ; (XC - Y)
07105  36CC  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07106  36CE  85 20                 STA GRAPHICS.SETPIXEL.X$
07107  36D0  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07108  36D2  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07109  36D4             
07110  36D4  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07111  36D6  85 80                 STA MATH.ADD16.ADDEND1$
07112  36D8  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07113  36DA  85 81                 STA MATH.ADD16.ADDEND1$+1
07114  36DC  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07115  36DE  85 82                 STA MATH.ADD16.ADDEND2$
07116  36E0  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07117  36E2  85 83                 STA MATH.ADD16.ADDEND2$+1
07118  36E4  20 00 28              JSR MATH.ADD16$ ; (YC + X)
07119  36E7  A5 84                 LDA MATH.ADD16.SUM$
07120  36E9  85 22                 STA GRAPHICS.SETPIXEL.Y$
07121  36EB  A5 85                 LDA MATH.ADD16.SUM$+1
07122  36ED  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07123  36EF             
07124  36EF  20 07 31              JSR GRAPHICS.SETPIXEL$
07125  36F2             
07126  36F2                        ; PSET (XC + Y, YC - X), COLOR
07127  36F2  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07128  36F4  85 80                 STA MATH.ADD16.ADDEND1$
07129  36F6  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07130  36F8  85 81                 STA MATH.ADD16.ADDEND1$+1
07131  36FA  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07132  36FC  85 82                 STA MATH.ADD16.ADDEND2$
07133  36FE  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07134  3700  85 83                 STA MATH.ADD16.ADDEND2$+1
07135  3702  20 00 28              JSR MATH.ADD16$ ; (XC + Y)
07136  3705  A5 84                 LDA MATH.ADD16.SUM$
07137  3707  85 20                 STA GRAPHICS.SETPIXEL.X$
07138  3709  A5 85                 LDA MATH.ADD16.SUM$+1
07139  370B  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07140  370D             
07141  370D  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07142  370F  85 80                 STA MATH.SUBTRACT16.MENUEND$
07143  3711  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07144  3713  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07145  3715  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07146  3717  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07147  3719  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07148  371B  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07149  371D  20 96 28              JSR MATH.SUBTRACT16$ ; (YC - X)
07150  3720  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07151  3722  85 22                 STA GRAPHICS.SETPIXEL.Y$
07152  3724  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07153  3726  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07154  3728             
07155  3728  20 07 31              JSR GRAPHICS.SETPIXEL$
07156  372B             
07157  372B                        ; PSET (XC - Y, YC - X), COLOR
07158  372B  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07159  372D  85 80                 STA MATH.SUBTRACT16.MENUEND$
07160  372F  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07161  3731  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07162  3733  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07163  3735  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07164  3737  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07165  3739  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07166  373B  20 96 28              JSR MATH.SUBTRACT16$ ; (XC - Y)
07167  373E  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07168  3740  85 20                 STA GRAPHICS.SETPIXEL.X$
07169  3742  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07170  3744  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07171  3746             
07172  3746  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07173  3748  85 80                 STA MATH.SUBTRACT16.MENUEND$
07174  374A  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07175  374C  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07176  374E  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07177  3750  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07178  3752  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07179  3754  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07180  3756  20 96 28              JSR MATH.SUBTRACT16$ ; (YC - X)
07181  3759  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07182  375B  85 22                 STA GRAPHICS.SETPIXEL.Y$
07183  375D  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07184  375F  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07185  3761             
07186  3761  20 07 31              JSR GRAPHICS.SETPIXEL$
07187  3764             
07188  3764             
07189  3764  60                    RTS
07190  3765             
07191  3765             ; NOTE: SPRITES TAKE ATMOST 512 BYTES OF MEMORY.
07192  3765             
07193  3765             GRAPHICS.SPRITE1$ = #1
07194  3765             GRAPHICS.SPRITE2$ = #2
07195  3765             GRAPHICS.SPRITE3$ = #3
07196  3765             GRAPHICS.SPRITE4$ = #4
07197  3765             GRAPHICS.SPRITE5$ = #5
07198  3765             GRAPHICS.SPRITE6$ = #6
07199  3765             GRAPHICS.SPRITE7$ = #7
07200  3765             GRAPHICS.SPRITE8$ = #8
07201  3765             
07202  3765             GRAPHICS.SPRITE1ADDRESS$ = $4200
07203  3765             GRAPHICS.SPRITE2ADDRESS$ = $4240
07204  3765             GRAPHICS.SPRITE3ADDRESS$ = $4280
07205  3765             GRAPHICS.SPRITE4ADDRESS$ = $42C0
07206  3765             GRAPHICS.SPRITE5ADDRESS$ = $4300
07207  3765             GRAPHICS.SPRITE6ADDRESS$ = $4340
07208  3765             GRAPHICS.SPRITE7ADDRESS$ = $4380
07209  3765             GRAPHICS.SPRITE8ADDRESS$ = $43C0
07210  3765             
07211  3765             GRAPHICS.SPRITEMULTICOLOR1ADDRESS$ = $D025
07212  3765             GRAPHICS.SPRITEMULTICOLOR2ADDRESS$ = $D026
07213  3765             
07214  3765             GRAPHICS.GETSPRITEORMASK.NUMBER = $73
07215  3765             GRAPHICS.GETSPRITEORMASK 
07216  3765                        ; NUMBER = 2^(NUMBER - 1)
07217  3765  A5 73                 LDA GRAPHICS.GETSPRITEORMASK.NUMBER
07218  3767  38                    SEC
07219  3768  E9 01                 SBC #$01
07220  376A  85 8B                 STA MATH.EXPONENT8.POWER$
07221  376C  A9 02                 LDA #$02
07222  376E  85 8A                 STA MATH.EXPONENT8.BASE$
07223  3770  20 90 2A              JSR MATH.EXPONENT8$
07224  3773  A5 8C                 LDA MATH.EXPONENT8.VALUE$
07225  3775  85 73                 STA GRAPHICS.GETSPRITEORMASK.NUMBER
07226  3777  60                    RTS
07227  3778             
07228  3778             GRAPHICS.GETSPRITEANDMASK.NUMBER = $73
07229  3778             GRAPHICS.GETSPRITEANDMASK 
07230  3778                        ; NUMBER = 255 - NUMBER (2'S COMP.)
07231  3778  38                    SEC
07232  3779                        ;SBC #$FF
07233  3779  A9 FF                 LDA #$FF
07234  377B  E5 73                 SBC GRAPHICS.GETSPRITEANDMASK.NUMBER
07235  377D  85 73                 STA GRAPHICS.GETSPRITEANDMASK.NUMBER
07236  377F  60                    RTS
07237  3780             
07238  3780             GRAPHICS.SHOWSPRITE.NUMBER$ = $73 ; 1 BYTE
07239  3780             GRAPHICS.SHOWSPRITE$ 
07240  3780  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07241  3783             
07242  3783                        ; ENABLE THE SPECIFIC SPRITE
07243  3783  AD 15 D0              LDA $D015
07244  3786  05 73                 ORA GRAPHICS.SHOWSPRITE.NUMBER$
07245  3788  8D 15 D0              STA $D015
07246  378B             
07247  378B  60                    RTS
07248  378C             
07249  378C             GRAPHICS.HIDESPRITE.NUMBER$ = $73 ; 1 BYTE
07250  378C             GRAPHICS.HIDESPRITE$ 
07251  378C  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07252  378F  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07253  3792             
07254  3792                        ; ENABLE THE SPECIFIC SPRITE
07255  3792  AD 15 D0              LDA $D015
07256  3795  25 73                 AND GRAPHICS.HIDESPRITE.NUMBER$
07257  3797  8D 15 D0              STA $D015
07258  379A             
07259  379A  60                    RTS
07260  379B             
07261  379B             GRAPHICS.SETSPRITEMULTICOLOR.NUMBER$ = $73 ; 1 BYTE
07262  379B             GRAPHICS.SETSPRITEMULTICOLOR$ 
07263  379B  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07264  379E             
07265  379E                        ; ENABLE THE SPECIFIC SPRITE
07266  379E  AD 1C D0              LDA $D01C
07267  37A1  05 73                 ORA GRAPHICS.SETSPRITEMULTICOLOR.NUMBER$
07268  37A3  8D 1C D0              STA $D01C
07269  37A6             
07270  37A6  60                    RTS
07271  37A7             
07272  37A7             GRAPHICS.SETSPRITEHIRES.NUMBER$ = $73 ; 1 BYTE
07273  37A7             GRAPHICS.SETSPRITEHIRES$ 
07274  37A7  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07275  37AA  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07276  37AD             
07277  37AD                        ; ENABLE THE SPECIFIC SPRITE
07278  37AD  AD 1C D0              LDA $D01C
07279  37B0  25 73                 AND GRAPHICS.SETSPRITEHIRES.NUMBER$
07280  37B2  8D 1C D0              STA $D01C
07281  37B5             
07282  37B5  60                    RTS
07283  37B6             
07284  37B6             GRAPHICS.STRETCHSPRITEHORIZONTALLY.NUMBER$ = $73 ; 1 BYTE
07285  37B6             GRAPHICS.STRETCHSPRITEHORIZONTALLY$ 
07286  37B6  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07287  37B9             
07288  37B9                        ; ENABLE THE SPECIFIC SPRITE
07289  37B9  AD 1D D0              LDA $D01D
07290  37BC  05 73                 ORA GRAPHICS.STRETCHSPRITEHORIZONTALLY.NUMBER$
07291  37BE  8D 1D D0              STA $D01D
07292  37C1             
07293  37C1  60                    RTS
07294  37C2             
07295  37C2             GRAPHICS.UNSTRETCHSPRITEHORIZONTALLY.NUMBER$ = $73 ; 1 BYTE
07296  37C2             GRAPHICS.UNSTRETCHSPRITEHORIZONTALLY$ 
07297  37C2  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07298  37C5  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07299  37C8             
07300  37C8                        ; ENABLE THE SPECIFIC SPRITE
07301  37C8  AD 1D D0              LDA $D01D
07302  37CB  25 73                 AND GRAPHICS.UNSTRETCHSPRITEHORIZONTALLY.NUMBER$
07303  37CD  8D 1D D0              STA $D01D
07304  37D0             
07305  37D0  60                    RTS
07306  37D1             
07307  37D1             GRAPHICS.STRETCHSPRITEVERTICALLY.NUMBER$ = $73 ; 1 BYTE
07308  37D1             GRAPHICS.STRETCHSPRITEVERTICALLY$ 
07309  37D1  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07310  37D4             
07311  37D4                        ; ENABLE THE SPECIFIC SPRITE
07312  37D4  AD 17 D0              LDA $D017
07313  37D7  05 73                 ORA GRAPHICS.STRETCHSPRITEVERTICALLY.NUMBER$
07314  37D9  8D 17 D0              STA $D017
07315  37DC             
07316  37DC  60                    RTS
07317  37DD             
07318  37DD             GRAPHICS.UNSTRETCHSPRITEVERTICALLY.NUMBER$ = $73 ; 1 BYTE
07319  37DD             GRAPHICS.UNSTRETCHSPRITEVERTICALLY$ 
07320  37DD  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07321  37E0  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07322  37E3             
07323  37E3                        ; ENABLE THE SPECIFIC SPRITE
07324  37E3  AD 17 D0              LDA $D017
07325  37E6  25 73                 AND GRAPHICS.UNSTRETCHSPRITEVERTICALLY.NUMBER$
07326  37E8  8D 17 D0              STA $D017
07327  37EB             
07328  37EB  60                    RTS
07329  37EC             
07330  37EC             GRAPHICS.SETSPRITECOLOR.NUMBER$ = $73 ; 1 BYTE
07331  37EC             GRAPHICS.SETSPRITECOLOR.COLOR$ = $74 ; 1 BYTE
07332  37EC             GRAPHICS.SETSPRITECOLOR.ADDRESS = $75 ; 2 BYTES
07333  37EC             GRAPHICS.SETSPRITECOLOR$ 
07334  37EC             
07335  37EC                        ; THE SPRITE COLORS ARE LOCATED AT $D027-$D02E
07336  37EC  A9 27                 LDA #$27
07337  37EE  85 75                 STA GRAPHICS.SETSPRITECOLOR.ADDRESS
07338  37F0  A9 D0                 LDA #$D0
07339  37F2  85 76                 STA GRAPHICS.SETSPRITECOLOR.ADDRESS+1
07340  37F4             
07341  37F4                        ; SET THE COLOR AT $D027+(NUMBER-1)
07342  37F4  A4 73                 LDY GRAPHICS.SETSPRITECOLOR.NUMBER$
07343  37F6  88                    DEY
07344  37F7  A5 74                 LDA GRAPHICS.SETSPRITECOLOR.COLOR$
07345  37F9  91 75                 STA (GRAPHICS.SETSPRITECOLOR.ADDRESS),Y
07346  37FB             
07347  37FB  60                    RTS
07348  37FC             
07349  37FC             GRAPHICS.GETSPRITECOLOR.NUMBER$ = $73 ; 1 BYTE
07350  37FC             GRAPHICS.GETSPRITECOLOR.COLOR$ = $74 ; 1 BYTE
07351  37FC             GRAPHICS.GETSPRITECOLOR.ADDRESS = $75 ; 2 BYTES
07352  37FC             GRAPHICS.GETSPRITECOLOR$ 
07353  37FC             
07354  37FC                        ; THE SPRITE COLORS ARE LOCATED AT $D027-$D02E
07355  37FC  A9 27                 LDA #$27
07356  37FE  85 75                 STA GRAPHICS.GETSPRITECOLOR.ADDRESS
07357  3800  A9 D0                 LDA #$D0
07358  3802  85 76                 STA GRAPHICS.GETSPRITECOLOR.ADDRESS+1
07359  3804             
07360  3804                        ; GET THE COLOR AT $D027+(NUMBER-1)
07361  3804  A4 73                 LDY GRAPHICS.GETSPRITECOLOR.NUMBER$
07362  3806  88                    DEY
07363  3807  B1 75                 LDA (GRAPHICS.GETSPRITECOLOR.ADDRESS),Y
07364  3809  29 0F                 AND #%00001111
07365  380B  85 74                 STA GRAPHICS.GETSPRITECOLOR.COLOR$
07366  380D             
07367  380D  60                    RTS
07368  380E             
07369  380E             GRAPHICS.SETSPRITELOCATION.NUMBER$ = $73 ; 1 BYTE
07370  380E             GRAPHICS.SETSPRITELOCATION.X$ = $74 ; 2 BYTES
07371  380E             GRAPHICS.SETSPRITELOCATION.Y$ = $76 ; 2 BYTES
07372  380E             GRAPHICS.SETSPRITELOCATION.ADDRESS = $78 ; 2 BYTES
07373  380E             GRAPHICS.SETSPRITELOCATION$ 
07374  380E             
07375  380E                        ; THE SPRITE LOCATIONS ARE LOCATED AT $D000-$D00F
07376  380E  A9 00                 LDA #$00
07377  3810  85 78                 STA GRAPHICS.SETSPRITELOCATION.ADDRESS
07378  3812  A9 D0                 LDA #$D0
07379  3814  85 79                 STA GRAPHICS.SETSPRITELOCATION.ADDRESS+1
07380  3816             
07381  3816                        ; NUMBER = (NUMBER-1)*2
07382  3816  A4 73                 LDY GRAPHICS.SETSPRITELOCATION.NUMBER$
07383  3818  88                    DEY
07384  3819  98                    TYA
07385  381A  0A                    ASL ; A=A*2
07386  381B  A8                    TAY
07387  381C             
07388  381C  A5 74                 LDA GRAPHICS.SETSPRITELOCATION.X$ ; WE ONLY CARE ABOUT THE LO BYTE
07389  381E  91 78                 STA (GRAPHICS.SETSPRITELOCATION.ADDRESS),Y
07390  3820             
07391  3820  C8                    INY
07392  3821  A5 76                 LDA GRAPHICS.SETSPRITELOCATION.Y$ ; WE ONLY CARE ABOUT THE LO BYTE
07393  3823  91 78                 STA (GRAPHICS.SETSPRITELOCATION.ADDRESS),Y
07394  3825             
07395  3825                        ; DETERMINE IF WE NEED TO SET/CLEAR THE 9TH BIT FOR X'S HI BYTE
07396  3825  A5 75                 LDA GRAPHICS.SETSPRITELOCATION.X$+1
07397  3827  F0 0E                 BEQ @CLEARXHI
07398  3829             @SETXHI
07399  3829  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07400  382C  AD 10 D0              LDA $D010
07401  382F  05 73                 ORA GRAPHICS.SETSPRITELOCATION.NUMBER$
07402  3831  8D 10 D0              STA $D010
07403  3834  4C 45 38              JMP @DONE
07404  3837             @CLEARXHI
07405  3837  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07406  383A  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07407  383D  AD 10 D0              LDA $D010
07408  3840  25 73                 AND GRAPHICS.SETSPRITELOCATION.NUMBER$
07409  3842  8D 10 D0              STA $D010
07410  3845             @DONE
07411  3845  60                    RTS
07412  3846             
07413  3846             GRAPHICS.GETSPRITELOCATION.NUMBER$ = $73 ; 1 BYTE
07414  3846             GRAPHICS.GETSPRITELOCATION.X$ = $74 ; 2 BYTES
07415  3846             GRAPHICS.GETSPRITELOCATION.Y$ = $76 ; 2 BYTES
07416  3846             GRAPHICS.GETSPRITELOCATION.ADDRESS = $78 ; 2 BYTES
07417  3846             GRAPHICS.GETSPRITELOCATION$ 
07418  3846             
07419  3846                        ; THE SPRITE LOCATIONS ARE LOCATED AT $D000-$D00F
07420  3846  A9 00                 LDA #$00
07421  3848  85 78                 STA GRAPHICS.GETSPRITELOCATION.ADDRESS
07422  384A  A9 D0                 LDA #$D0
07423  384C  85 79                 STA GRAPHICS.GETSPRITELOCATION.ADDRESS+1
07424  384E             
07425  384E                        ; NUMBER = (NUMBER-1)*2
07426  384E  A4 73                 LDY GRAPHICS.GETSPRITELOCATION.NUMBER$
07427  3850  88                    DEY
07428  3851  98                    TYA
07429  3852  0A                    ASL ; A=A*2
07430  3853  A8                    TAY
07431  3854             
07432  3854  B1 78                 LDA (GRAPHICS.GETSPRITELOCATION.ADDRESS),Y
07433  3856  85 74                 STA GRAPHICS.GETSPRITELOCATION.X$ ; WE ONLY CARE ABOUT THE LO BYTE
07434  3858             
07435  3858  C8                    INY
07436  3859  B1 78                 LDA (GRAPHICS.GETSPRITELOCATION.ADDRESS),Y
07437  385B  85 76                 STA GRAPHICS.GETSPRITELOCATION.Y$ ; WE ONLY CARE ABOUT THE LO BYTE
07438  385D  A9 00                 LDA #$00
07439  385F  85 77                 STA GRAPHICS.GETSPRITELOCATION.Y$+1
07440  3861             
07441  3861                        ; FIND THE 9TH BIT FOR X'S HI BYTE
07442  3861  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07443  3864  AD 10 D0              LDA $D010
07444  3867  25 73                 AND GRAPHICS.GETSPRITELOCATION.NUMBER$
07445  3869  F0 07                 BEQ @CLEARXHI
07446  386B                        ;JMP @DONE
07447  386B             @SETXHI
07448  386B  A9 01                 LDA #$01
07449  386D  85 75                 STA GRAPHICS.GETSPRITELOCATION.X$+1
07450  386F  4C 76 38              JMP @DONE
07451  3872             @CLEARXHI
07452  3872  A9 00                 LDA #$00
07453  3874  85 75                 STA GRAPHICS.GETSPRITELOCATION.X$+1
07454  3876             @DONE
07455  3876  60                    RTS
07456  3877             
07457  3877             
07458  3877             
07459  3877             
07460  3877             
07461  3877             
07462  3877             AUDIO.VOICE1$ = #01
07463  3877             AUDIO.VOICE2$ = #02
07464  3877             AUDIO.VOICE3$ = #03
07465  3877             
07466  3877             AUDIO.VOLUMEADDRESS = $D418
07467  3877             
07468  3877             AUDIO.TRIANGLEON$ = $11
07469  3877             AUDIO.TRIANGLEOFF$ = $10
07470  3877             AUDIO.SAWTOOTHON$ = $21
07471  3877             AUDIO.SAWTOOTHOFF$ = $20
07472  3877             AUDIO.PULSEON$ = $41
07473  3877             AUDIO.PULSEOFF$ = $40
07474  3877             AUDIO.NOISEON$ = $81
07475  3877             AUDIO.NOISEOFF$ = $80
07476  3877             
07477  3877             AUDIO.ATTACKHIGH$ = $80
07478  3877             AUDIO.ATTACKMEDIUM$ = $40
07479  3877             AUDIO.ATTACKLOW$ = $20
07480  3877             AUDIO.ATTACKLOWEST$ = $10
07481  3877             AUDIO.DECAYHIGH$ = $08
07482  3877             AUDIO.DECAYMEDIUM$ = $04
07483  3877             AUDIO.DECAYLOW$ = $02
07484  3877             AUDIO.DECAYLOWEST$ = $01
07485  3877             
07486  3877             AUDIO.SUSTAINHIGH$ = $80
07487  3877             AUDIO.SUSTAINMEDIUM$ = $40
07488  3877             AUDIO.SUSTAINLOW$ = $20
07489  3877             AUDIO.SUSTAINLOWEST$ = $10
07490  3877             AUDIO.RELEASEHIGH$ = $08
07491  3877             AUDIO.RELEASEMEDIUM$ = $04
07492  3877             AUDIO.RELEASELOW$ = $02
07493  3877             AUDIO.RELEASELOWEST$ = $01
07494  3877             
07495  3877             AUDIO.SETVOLUME.VALUE$ = $73 ; 1 BYTE
07496  3877             AUDIO.SETVOLUME$ 
07497  3877                        ; 0 = OFF, 15 = MAX
07498  3877  A5 73                 LDA AUDIO.SETVOLUME.VALUE$
07499  3879  8D 18 D4              STA AUDIO.VOLUMEADDRESS
07500  387C  60                    RTS
07501  387D             
07502  387D             AUDIO.GETVOICEADDRESS.VOICE = $73 ; 1 BYTE
07503  387D             AUDIO.GETVOICEADDRESS.ADDRESS = $74 ; 1 BYTE
07504  387D             AUDIO.GETVOICEADDRESS 
07505  387D             
07506  387D                        ; PRODUCT = (VOICE-1)*7
07507  387D  A6 73                 LDX AUDIO.GETVOICEADDRESS.VOICE
07508  387F  CA                    DEX
07509  3880  86 80                 STX MATH.MULTIPLY8.FACTOR1$
07510  3882  A9 07                 LDA #$07
07511  3884  85 82                 STA MATH.MULTIPLY8.FACTOR2$
07512  3886  20 48 29              JSR MATH.MULTIPLY8$
07513  3889             
07514  3889                        ; VOICE(LO) = PRODUCT + ADDRESS
07515  3889  A5 83                 LDA MATH.MULTIPLY8.PRODUCT$
07516  388B  18                    CLC
07517  388C  65 74                 ADC AUDIO.GETVOICEADDRESS.ADDRESS
07518  388E  85 73                 STA AUDIO.GETVOICEADDRESS.VOICE
07519  3890             
07520  3890                        ; VOICE(HI) = $D4
07521  3890  A9 D4                 LDA #$D4
07522  3892  85 74                 STA AUDIO.GETVOICEADDRESS.VOICE+1
07523  3894             
07524  3894  60                    RTS
07525  3895             
07526  3895             AUDIO.SETWAVEFORM.VOICE$ = $73 ; 1 BYTE
07527  3895             AUDIO.SETWAVEFORM.VALUE$ = $75 ; 1 BYTE
07528  3895             AUDIO.SETWAVEFORM$ 
07529  3895  A9 04                 LDA #$04
07530  3897  85 74                 STA AUDIO.GETVOICEADDRESS.ADDRESS
07531  3899  20 7D 38              JSR AUDIO.GETVOICEADDRESS
07532  389C             
07533  389C  A0 00                 LDY #$00
07534  389E  A5 75                 LDA AUDIO.SETWAVEFORM.VALUE$
07535  38A0  91 73                 STA (AUDIO.SETWAVEFORM.VOICE$),Y
07536  38A2  60                    RTS
07537  38A3             
07538  38A3             
07539  38A3             AUDIO.SETATTACKDECAY.VOICE$ = $73 ; 1 BYTE
07540  38A3             AUDIO.SETATTACKDECAY.VALUE$ = $75 ; 1 BYTE
07541  38A3             AUDIO.SETATTACKDECAY$ 
07542  38A3  A9 05                 LDA #$05
07543  38A5  85 74                 STA AUDIO.GETVOICEADDRESS.ADDRESS
07544  38A7  20 7D 38              JSR AUDIO.GETVOICEADDRESS
07545  38AA             
07546  38AA  A0 00                 LDY #$00
07547  38AC  A5 75                 LDA AUDIO.SETATTACKDECAY.VALUE$
07548  38AE  91 73                 STA (AUDIO.SETATTACKDECAY.VOICE$),Y
07549  38B0  60                    RTS
07550  38B1             
07551  38B1             AUDIO.SETSUSTAINRELEASE.VOICE$ = $73 ; 2 BYTES
07552  38B1             AUDIO.SETSUSTAINRELEASE.VALUE$ = $75 ; 1 BYTE
07553  38B1             AUDIO.SETSUSTAINRELEASE$ 
07554  38B1  A9 06                 LDA #$06
07555  38B3  85 74                 STA AUDIO.GETVOICEADDRESS.ADDRESS
07556  38B5  20 7D 38              JSR AUDIO.GETVOICEADDRESS
07557  38B8             
07558  38B8  A0 00                 LDY #$00
07559  38BA  A5 75                 LDA AUDIO.SETSUSTAINRELEASE.VALUE$
07560  38BC  91 73                 STA (AUDIO.SETSUSTAINRELEASE.VOICE$),Y
07561  38BE  60                    RTS
07562  38BF             
07563  38BF             AUDIO.SETFREQUENCY.VOICE$ = $73 ; 1 BYTE
07564  38BF             AUDIO.SETFREQUENCY.FREQUENCY$ = $75 ; 2 BYTES
07565  38BF             AUDIO.SETFREQUENCY$ 
07566  38BF  A9 00                 LDA #$00
07567  38C1  85 74                 STA AUDIO.GETVOICEADDRESS.ADDRESS
07568  38C3  20 7D 38              JSR AUDIO.GETVOICEADDRESS
07569  38C6             
07570  38C6  A0 00                 LDY #$00
07571  38C8  A5 75                 LDA AUDIO.SETFREQUENCY.FREQUENCY$
07572  38CA  91 73                 STA (AUDIO.SETFREQUENCY.VOICE$),Y
07573  38CC  C8                    INY
07574  38CD  A5 76                 LDA AUDIO.SETFREQUENCY.FREQUENCY$+1
07575  38CF  91 73                 STA (AUDIO.SETFREQUENCY.VOICE$),Y
07576  38D1             
07577  38D1  60                    RTS
07578  38D2             
07579  38D2             AUDIO.BEEP$ 
07580  38D2             
07581  38D2                        ; SET THE VOLUME
07582  38D2  A9 0F                 LDA #$0F
07583  38D4  8D 18 D4              STA AUDIO.VOLUMEADDRESS
07584  38D7             
07585  38D7                        ; SET ATTACK/DECAY
07586  38D7  A9 00                 LDA #$0
07587  38D9  8D 05 D4              STA $D405
07588  38DC             
07589  38DC                        ; SET SUSTAIN/RELEASE
07590  38DC  A9 F8                 LDA #$F8
07591  38DE  8D 06 D4              STA $D406
07592  38E1             
07593  38E1                        ; SET FREQUENCY
07594  38E1  A9 4A                 LDA #$4A
07595  38E3  8D 00 D4              STA $D400 ; LO
07596  38E6  A9 22                 LDA #$22
07597  38E8  8D 01 D4              STA $D401 ; HI
07598  38EB             
07599  38EB                        ; SET WAVEFORM
07600  38EB  A9 11                 LDA #$11
07601  38ED  8D 04 D4              STA $D404
07602  38F0             
07603  38F0                        ; WAIT
07604  38F0  20 A5 1E              JSR TIME.HALT$
07605  38F3  20 A5 1E              JSR TIME.HALT$
07606  38F6             
07607  38F6                        ; DISABLE WAVEFORM
07608  38F6  A9 10                 LDA #$10
07609  38F8  8D 04 D4              STA $D404
07610  38FB             
07611  38FB  60                    RTS
07612  38FC             
07613  38FC             ; HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:SIMPLE_IRQ_MUSIC_PLAYER
07614  38FC  00 A0      AUDIO.SIDINITADDRESS$ WORD $A000 ;$A048
07615  38FE  06 A0      AUDIO.SIDPLAYADDRESS$ WORD $A006 ;$A021
07616  3900             ;AUDIO.SIDLOADADDRESS$   WORD $A000
07617  3900  00         AUDIO.SIDFINISHED$ BYTE $00
07618  3901  00 50      AUDIO.SIDTIMER$ WORD $5000
07619  3903             
07620  3903             ;;AUDIO.CIA1
07621  3903             ;;INCASM "BUFFER256.ASM"
07622  3903             
07623  3903             ;AUDIO.SIDSTART$
07624  3903             ;        SEI
07625  3903             
07626  3903             ;;;        LDA #$10
07627  3903             ;;;        STA MEMORY.COPY16.SOURCE$
07628  3903             ;;;        LDA #$DC
07629  3903             ;;;        STA MEMORY.COPY16.SOURCE$+1
07630  3903             ;;;        LDA #<AUDIO.CIA1
07631  3903             ;;;        STA MEMORY.COPY16.DESTINATION$
07632  3903             ;;;        LDA #>AUDIO.CIA1
07633  3903             ;;;        STA MEMORY.COPY16.DESTINATION$+1
07634  3903             ;;;        LDA #$F0
07635  3903             ;;;        STA MEMORY.COPY16.LENGTH$
07636  3903             ;;;        LDA #$00
07637  3903             ;;;        STA MEMORY.COPY16.LENGTH$+1
07638  3903             ;;;        JSR MEMORY.COPY16$
07639  3903             ;;        LDA #$00
07640  3903             ;;        STA MEMORY.COPY16.SOURCE$
07641  3903             ;;        LDA #$DC
07642  3903             ;;        STA MEMORY.COPY16.SOURCE$+1
07643  3903             ;;        LDA #<AUDIO.CIA1
07644  3903             ;;        STA MEMORY.COPY16.DESTINATION$
07645  3903             ;;        LDA #>AUDIO.CIA1
07646  3903             ;;        STA MEMORY.COPY16.DESTINATION$+1
07647  3903             ;;        LDA #$00
07648  3903             ;;        STA MEMORY.COPY16.LENGTH$
07649  3903             ;;        LDA #$01
07650  3903             ;;        STA MEMORY.COPY16.LENGTH$+1
07651  3903             ;;        JSR MEMORY.COPY16$
07652  3903             ;;;        LDA #$00
07653  3903             ;;;        STA MEMORY.COPY16.SOURCE$
07654  3903             ;;;        LDA #$DC
07655  3903             ;;;        STA MEMORY.COPY16.SOURCE$+1
07656  3903             ;;;        LDA #<AUDIO.CIA1
07657  3903             ;;;        STA MEMORY.COPY16.DESTINATION$
07658  3903             ;;;        LDA #>AUDIO.CIA1
07659  3903             ;;;        STA MEMORY.COPY16.DESTINATION$+1
07660  3903             ;;;        LDA #$10
07661  3903             ;;;        STA MEMORY.COPY16.LENGTH$
07662  3903             ;;;        LDA #$00
07663  3903             ;;;        STA MEMORY.COPY16.LENGTH$+1
07664  3903             ;;;        JSR MEMORY.COPY16$
07665  3903             
07666  3903             ;        LDA #<AUDIO.SIDIRQ
07667  3903             ;        LDX #>AUDIO.SIDIRQ
07668  3903             ;        STA $0314
07669  3903             ;        STX $0315
07670  3903             ;        LDA #$1B
07671  3903             ;        LDX #$00
07672  3903             ;        LDY #$7F
07673  3903             ;        STA $D011
07674  3903             ;        STX $D012
07675  3903             ;        STY $DC0D; CIA #1
07676  3903             ;        ;STY $DD0D; CIA #2
07677  3903             
07678  3903             ;          ;LDA $DC0D  ;BY READING THIS TWO REGISTERS WE NEGATE ANY PENDING CIA IRQS.
07679  3903             ;          ;LDA $DD0D  ;IF WE DON'T DO THIS, A PENDING CIA IRQ MIGHT OCCUR AFTER WE FINISH SETTING UP OUR IRQ.
07680  3903             ;                       ;WE DON'T WANT THAT TO HAPPEN.
07681  3903             
07682  3903             ;        LDA #$01
07683  3903             ;        STA $D01A
07684  3903             ;        STA $D019 ; ACK ANY RASTER IRQS
07685  3903             ;        LDA #$00
07686  3903             ;
07687  3903             ;        ; CHANGE TOD TO 50 HZ
07688  3903             ;        LDA $DD0E
07689  3903             ;        ORA #%10000000
07690  3903             ;        STA $DD0E
07691  3903             ;        LDA $DC0E
07692  3903             ;        ORA #%10000000
07693  3903             ;        STA $DC0E
07694  3903             
07695  3903             ;        ;JSR $A000
07696  3903             ;        ;;JSR $A048
07697  3903             ;        LDA #>AUDIO.SIDAFTERINIJMP
07698  3903             ;        PHA
07699  3903             ;        LDA #<AUDIO.SIDAFTERINIJMP
07700  3903             ;        PHA
07701  3903             ;        LDA #$00 ; !!!
07702  3903             ;        JMP (AUDIO.SIDINITADDRESS$) ;INITIALIZE RICHARD'S MUSIC
07703  3903             ;AUDIO.SIDAFTERINIJMP=*-1
07704  3903             
07705  3903             ;;        LDA AUDIO.SIDINITADDRESS$
07706  3903             ;;        STA AUDIO.SIDINITJSR+1
07707  3903             ;;        LDA AUDIO.SIDINITADDRESS$+1
07708  3903             ;;        STA AUDIO.SIDINITJSR+2
07709  3903             ;;        LDA #$00
07710  3903             ;;AUDIO.SIDINITJSR
07711  3903             ;;        JSR $1234
07712  3903             
07713  3903             ;        CLI
07714  3903             ;        RTS
07715  3903             
07716  3903             
07717  3903             ;AUDIO.SIDIRQ
07718  3903             
07719  3903             ;           PHA        ;STORE REGISTER A IN STACK
07720  3903             ;           TXA
07721  3903             ;           PHA        ;STORE REGISTER X IN STACK
07722  3903             ;           TYA
07723  3903             ;           PHA        ;STORE REGISTER Y IN STACK
07724  3903             
07725  3903             
07726  3903             ;        LDA AUDIO.SIDFINISHED$
07727  3903             ;        CMP #$01
07728  3903             ;        BNE @CONT
07729  3903             ;        JMP @DONE
07730  3903             ;@CONT
07731  3903             
07732  3903             
07733  3903             ;        LDA #$01
07734  3903             ;        STA $D019 ; ACK ANY RASTER IRQS
07735  3903             
07736  3903             ;        ;JSR $A006
07737  3903             ;        ;JSR $A021 ;PLAY THE MUSIC
07738  3903             ;        LDA #>AUDIO.SIDAFTERPLAYJMP
07739  3903             ;        PHA
07740  3903             ;        LDA #<AUDIO.SIDAFTERPLAYJMP
07741  3903             ;        PHA
07742  3903             ;        JMP (AUDIO.SIDPLAYADDRESS$) ;PLAY THE MUSIC
07743  3903             ;AUDIO.SIDAFTERPLAYJMP=*-1
07744  3903             
07745  3903             ;@DONE
07746  3903             ;           PLA
07747  3903             ;           TAY        ;RESTORE REGISTER Y FROM STACK (REMEMBER STACK IS FIFO: FIRST IN FIRST OUT)
07748  3903             ;           PLA
07749  3903             ;           TAX        ;RESTORE REGISTER X FROM STACK
07750  3903             ;           PLA        ;RESTORE REGISTER A FROM STACK
07751  3903             
07752  3903             ;           ;JMP $EA81
07753  3903             ;           JMP $EA31   ; CALL ROUTINE TO MOVE/FLASH CURSOR, READ KEYBOARD, ETC. (2)
07754  3903             ;           ;RTI         ;(3)
07755  3903             
07756  3903             
07757  3903             ;AUDIO.SIDEND$
07758  3903             
07759  3903             ;        LDA #$01
07760  3903             ;        STA AUDIO.SIDFINISHED$
07761  3903             
07762  3903             ;        SEI
07763  3903             
07764  3903             ;        LDA #$31
07765  3903             ;        ;LDA #$81
07766  3903             ;        LDX #$EA
07767  3903             ;        STA $0314
07768  3903             ;        STX $0315
07769  3903             
07770  3903             ;;;        LDA #$10
07771  3903             ;;;        STA MEMORY.COPY16.DESTINATION$
07772  3903             ;;;        LDA #$DC
07773  3903             ;;;        STA MEMORY.COPY16.DESTINATION$+1
07774  3903             ;;;        LDA #<AUDIO.CIA1
07775  3903             ;;;        STA MEMORY.COPY16.SOURCE$
07776  3903             ;;;        LDA #>AUDIO.CIA1
07777  3903             ;;;        STA MEMORY.COPY16.SOURCE$+1
07778  3903             ;;;        LDA #$F0
07779  3903             ;;;        STA MEMORY.COPY16.LENGTH$
07780  3903             ;;;        LDA #$00
07781  3903             ;;;        STA MEMORY.COPY16.LENGTH$+1
07782  3903             ;;;        JSR MEMORY.COPY16$
07783  3903             ;;        LDA #$00
07784  3903             ;;        STA MEMORY.COPY16.DESTINATION$
07785  3903             ;;        LDA #$DC
07786  3903             ;;        STA MEMORY.COPY16.DESTINATION$+1
07787  3903             ;;        LDA #<AUDIO.CIA1
07788  3903             ;;        STA MEMORY.COPY16.SOURCE$
07789  3903             ;;        LDA #>AUDIO.CIA1
07790  3903             ;;        STA MEMORY.COPY16.SOURCE$+1
07791  3903             ;;        LDA #$00
07792  3903             ;;        STA MEMORY.COPY16.LENGTH$
07793  3903             ;;        LDA #$01
07794  3903             ;;        STA MEMORY.COPY16.LENGTH$+1
07795  3903             ;;        JSR MEMORY.COPY16$
07796  3903             ;;;;        LDA #$00
07797  3903             ;;;;        STA MEMORY.COPY16.DESTINATION$
07798  3903             ;;;;        LDA #$DC
07799  3903             ;;;;        STA MEMORY.COPY16.DESTINATION$+1
07800  3903             ;;;;        LDA #<AUDIO.CIA1
07801  3903             ;;;;        STA MEMORY.COPY16.SOURCE$
07802  3903             ;;;;        LDA #>AUDIO.CIA1
07803  3903             ;;;;        STA MEMORY.COPY16.SOURCE$+1
07804  3903             ;;;;        LDA #$10
07805  3903             ;;;;        STA MEMORY.COPY16.LENGTH$
07806  3903             ;;;;        LDA #$00
07807  3903             ;;;;        STA MEMORY.COPY16.LENGTH$+1
07808  3903             ;;;;        JSR MEMORY.COPY16$
07809  3903             
07810  3903             ;        LDA #$1B
07811  3903             ;        ;LDA #$9B
07812  3903             ;        STA $D011
07813  3903             
07814  3903             ;        LDX #$00
07815  3903             ;        ;LDX #$0C
07816  3903             ;        STX $D012
07817  3903             
07818  3903             
07819  3903             ;         LDA #0
07820  3903             ;   STA $DC0E      ;SET TOD CLOCK FREQUENCY TO 60HZ
07821  3903             ;   STA $DC0F      ;ENABLE SET-TOD-CLOCK
07822  3903             ;   STA $DC0B      ;SET TOD-CLOCK TO 0 (HOURS)
07823  3903             ;   STA $DC0A      ;- (MINUTES)
07824  3903             ;   STA $DC09      ;- (SECONDS)
07825  3903             ;   STA $DC08      ;- (DECISECONDS)
07826  3903             ;        BIT $DC0E
07827  3903             ;        BIT $DC0F
07828  3903             ;        BIT $DC0D
07829  3903             ;                LDA #0
07830  3903             ;                STA $DC0E
07831  3903             
07832  3903             ;        ;LDY #$00
07833  3903             ;        ;LDY #$81 ; CIA #1: HTTP://UNUSEDINO.DE/EC64/TECHNICAL/AAY/C64/CIA113.HTM
07834  3903             ;        LDY #$7F
07835  3903             ;        STY $DC0D
07836  3903             ;        LDY #$81
07837  3903             ;        STY $DC0D
07838  3903             
07839  3903             ;        LDY #$7F ; CIA #2: HTTP://UNUSEDINO.DE/EC64/TECHNICAL/AAY/C64/CIA213.HTM
07840  3903             ;        STY $DD0D
07841  3903             
07842  3903             ;        LDA #$01
07843  3903             ;        STA $DC0E
07844  3903             ;;        LDA #$08
07845  3903             ;;        STA $DC0F
07846  3903             
07847  3903             ;;        ;LDA #$7F
07848  3903             ;;;        STA $D01A ; TURN OFF RASTER INTERRUPTS
07849  3903             ;;;        LDA #$01
07850  3903             ;;;        STA $DC0D ; TURN ON CIA INTERRUPTS
07851  3903             
07852  3903             ;        LDX #$00
07853  3903             ;        ;LDX #$F0
07854  3903             ;        ;LDY #$01
07855  3903             ;        STX $D01A
07856  3903             ;        ;STY $D019 ; ACK ANY RASTER IRQS
07857  3903             
07858  3903             ;        LDA #$FF
07859  3903             ;        ;LDA #$00
07860  3903             ;        STA $D019 ; ACK ANY PENDING INTERRUPT
07861  3903             
07862  3903             ;        CLI
07863  3903             
07864  3903             ;;        JSR $FFEA ; CALL UDTIM
07865  3903             
07866  3903             ;        LDA #AUDIO.VOICE1$
07867  3903             ;        STA AUDIO.SETFREQUENCY.VOICE$
07868  3903             ;        LDA #$00
07869  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$
07870  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$+1
07871  3903             ;        JSR AUDIO.SETFREQUENCY$
07872  3903             
07873  3903             ;        LDA #AUDIO.VOICE2$
07874  3903             ;        STA AUDIO.SETFREQUENCY.VOICE$
07875  3903             ;        LDA #$00
07876  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$
07877  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$+1
07878  3903             ;        JSR AUDIO.SETFREQUENCY$
07879  3903             
07880  3903             ;        LDA #AUDIO.VOICE3$
07881  3903             ;        STA AUDIO.SETFREQUENCY.VOICE$
07882  3903             ;        LDA #$00
07883  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$
07884  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$+1
07885  3903             ;        JSR AUDIO.SETFREQUENCY$
07886  3903             
07887  3903             ;        RTS
07888  3903             
07889  3903             AUDIO.SIDSTART$ 
07890  3903  78                    SEI
07891  3904  A9 35                 LDA #$35; DISABLE KERNAL AND BASIC ROMS
07892  3906  85 01                 STA $01
07893  3908             
07894  3908  20 1D 39              JSR AUDIO.SID_INIT
07895  390B             
07896  390B  20 91 39              JSR AUDIO.SID_PLAY
07897  390E             
07898  390E  60                    RTS
07899  390F             
07900  390F             
07901  390F             AUDIO.SIDEND$ 
07902  390F  A9 01                 LDA #$01
07903  3911  8D 00 39              STA AUDIO.SIDFINISHED$
07904  3914                        
07905  3914  20 4B 39              JSR AUDIO.SID_OFF
07906  3917                        
07907  3917  A9 36                 LDA #$36 ; ENABLE KERNAL BUT KEEP BASIC DISABLED
07908  3919  85 01                 STA $01
07909  391B  58                    CLI
07910  391C             
07911  391C  60                    RTS
07912  391D             
07913  391D             AUDIO.SID_INIT 
07914  391D  20 4B 39              JSR AUDIO.SID_OFF
07915  3920             
07916  3920                        ;LDA #$00
07917  3920                        ;JSR $A000 ;INITIALIZE RICHARD'S MUSIC
07918  3920             
07919  3920  A9 39                 LDA #>AUDIO.SIDAFTERINIJMP
07920  3922  48                    PHA
07921  3923  A9 2A                 LDA #<AUDIO.SIDAFTERINIJMP
07922  3925  48                    PHA
07923  3926  A9 00                 LDA #$00 ; !!!
07924  3928  6C FC 38              JMP (AUDIO.SIDINITADDRESS$) ;INITIALIZE RICHARD'S MUSIC
07925  392B             AUDIO.SIDAFTERINIJMP=*-1 
07926  392B             
07927  392B                        ;CLI
07928  392B             
07929  392B  60                    RTS
07930  392C             
07931  392C             AUDIO.SID_ON 
07932  392C                        ; TURN ON VOLUME
07933  392C  A9 0F                 LDA #$0F
07934  392E  85 73                 STA AUDIO.SETVOLUME.VALUE$
07935  3930  20 77 38              JSR AUDIO.SETVOLUME$
07936  3933             
07937  3933  A9 39                 LDA #>AUDIO.SIDON
07938  3935  8D FB FF              STA $FFFB
07939  3938  A9 A4                 LDA #<AUDIO.SIDON
07940  393A  8D FA FF              STA $FFFA
07941  393D             
07942  393D  A9 81                 LDA #%10000001    ; ENABLE CIA-2 TIMER A NMI
07943  393F  8D 0D DD              STA $DD0D
07944  3942  AD 0D DD              LDA $DD0D
07945  3945  A9 01                 LDA #%00000001    ; TIMER A START
07946  3947  8D 0E DD              STA $DD0E
07947  394A  60                    RTS
07948  394B             
07949  394B             AUDIO.SID_OFF 
07950  394B  A9 00                 LDA #%00000000
07951  394D  8D 0E DD              STA $DD0E         ; TIMER A STOP
07952  3950  A9 4F                 LDA #%01001111    ; DISABLE ALL CIA-2 NMI'S
07953  3952  8D 0D DD              STA $DD0D
07954  3955  AD 0D DD              LDA $DD0D
07955  3958             
07956  3958  A9 39                 LDA #>AUDIO.SIDOFF
07957  395A  8D FB FF              STA $FFFB
07958  395D  A9 D2                 LDA #<AUDIO.SIDOFF
07959  395F  8D FA FF              STA $FFFA
07960  3962             
07961  3962                        ; TURN OFF VOLUME
07962  3962  A9 00                 LDA #$00
07963  3964  85 73                 STA AUDIO.SETVOLUME.VALUE$
07964  3966  20 77 38              JSR AUDIO.SETVOLUME$
07965  3969             
07966  3969  A9 01                 LDA #AUDIO.VOICE1$
07967  396B  85 73                 STA AUDIO.SETFREQUENCY.VOICE$
07968  396D  A9 00                 LDA #$00
07969  396F  85 75                 STA AUDIO.SETFREQUENCY.FREQUENCY$
07970  3971  85 76                 STA AUDIO.SETFREQUENCY.FREQUENCY$+1
07971  3973  20 BF 38              JSR AUDIO.SETFREQUENCY$
07972  3976             
07973  3976  A9 02                 LDA #AUDIO.VOICE2$
07974  3978  85 73                 STA AUDIO.SETFREQUENCY.VOICE$
07975  397A  A9 00                 LDA #$00
07976  397C  85 75                 STA AUDIO.SETFREQUENCY.FREQUENCY$
07977  397E  85 76                 STA AUDIO.SETFREQUENCY.FREQUENCY$+1
07978  3980  20 BF 38              JSR AUDIO.SETFREQUENCY$
07979  3983             
07980  3983  A9 03                 LDA #AUDIO.VOICE3$
07981  3985  85 73                 STA AUDIO.SETFREQUENCY.VOICE$
07982  3987  A9 00                 LDA #$00
07983  3989  85 75                 STA AUDIO.SETFREQUENCY.FREQUENCY$
07984  398B  85 76                 STA AUDIO.SETFREQUENCY.FREQUENCY$+1
07985  398D  20 BF 38              JSR AUDIO.SETFREQUENCY$
07986  3990             
07987  3990  60                    RTS
07988  3991             
07989  3991             AUDIO.SID_PLAY 
07990  3991             
07991  3991  20 4B 39              JSR AUDIO.SID_OFF
07992  3994             
07993  3994             ;        ; TIMER VALUE OF 19656 ($4CC8)
07994  3994             ;        LDA #$00
07995  3994             ;        STA $DD04
07996  3994             ;        LDA #$50
07997  3994             ;        STA $DD05
07998  3994  AD 01 39              LDA AUDIO.SIDTIMER$
07999  3997  8D 04 DD              STA $DD04
08000  399A  AD 02 39              LDA AUDIO.SIDTIMER$+1
08001  399D  8D 05 DD              STA $DD05
08002  39A0             
08003  39A0  20 2C 39              JSR AUDIO.SID_ON
08004  39A3             
08005  39A3  60                    RTS
08006  39A4             
08007  39A4             AUDIO.SIDON 
08008  39A4             
08009  39A4                        ; THIS WILL STORE THE VALUES OF A,X,Y AT THE MEMORY LOCATION WHERE THEY
08010  39A4                        ; ARE LOADED BACK NEAR THE END OF THIS INTERRUPT HANDLER
08011  39A4  8D CD 39              STA AUDIO.SIDABUFF
08012  39A7  8C CF 39              STY AUDIO.SIDYBUFF
08013  39AA  8E D1 39              STX AUDIO.SIDXBUFF
08014  39AD             
08015  39AD                        ;JSR $A006
08016  39AD             
08017  39AD  A9 39                 LDA #>AUDIO.SIDAFTERPLAYJMP
08018  39AF  48                    PHA
08019  39B0  A9 B5                 LDA #<AUDIO.SIDAFTERPLAYJMP
08020  39B2  48                    PHA
08021  39B3  6C FE 38              JMP (AUDIO.SIDPLAYADDRESS$) ;PLAY THE MUSIC
08022  39B6             AUDIO.SIDAFTERPLAYJMP=*-1 
08023  39B6             
08024  39B6                        ; MANUALLY UPDATE THE TOD VARIABLES
08025  39B6  18                    CLC                             ; CLEAR CARRY
08026  39B7  A5 A2                 LDA $A2
08027  39B9  69 01                 ADC #$01
08028  39BB  85 A2                 STA $A2
08029  39BD  A5 A1                 LDA $A1
08030  39BF  69 00                 ADC #$00
08031  39C1  85 A1                 STA $A1
08032  39C3  A5 A0                 LDA $A0
08033  39C5  69 00                 ADC #$00
08034  39C7  85 A0                 STA $A0
08035  39C9             
08036  39C9  AD 0D DD              LDA $DD0D
08037  39CC             
08038  39CC             AUDIO.SIDABUFF=*+1 
08039  39CC  A9 00                 LDA #$00
08040  39CE             AUDIO.SIDYBUFF=*+1 
08041  39CE  A0 00                 LDY #$00
08042  39D0             AUDIO.SIDXBUFF=*+1 
08043  39D0  A2 00                 LDX #$00
08044  39D2             
08045  39D2             AUDIO.SIDOFF 
08046  39D2  40                    RTI
08047  39D3             
08048  39D3             
08049  39D3             ;-------------------------------------------------------------------------
08050  39D3             ;ALIGN $100
08051  39D3             
08052  39D3             ; HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:NMI_SAMPLE_PLAYER
08053  39D3             AUDIO.DIGITABLE=* 
08054  39D3  00 A0      AUDIO.DIGISTARTADDRESS$ WORD $A000 ; DIGI START ADDRESS
08055  39D5  FF BF      AUDIO.DIGIENDADDRESS$ WORD $BFFF ; DIGI ENDI ADDRESS
08056  39D7  00 01      AUDIO.DIGISAMPLERATE$ WORD $0100 ; SAMPLE RATE: 256 FOR 8 BIT MONO 8 KHZ
08057  39D9  00         AUDIO.DIGIFINISHED$ BYTE $00 ; IS SET TO 1 ONCE THE AUDIO HAS FINISHED PLAYING
08058  39DA             
08059  39DA             AUDIO.DIGISOUNDPTR = $30 ; 2 BYTES
08060  39DA             AUDIO.DIGIPOINT = $32 ; 2 BYTES
08061  39DA             AUDIO.SIDADDRESS = $D400
08062  39DA             AUDIO.DIGIDB = 0
08063  39DA             
08064  39DA             WITHSIDPLAYER = 0
08068  39DA             
08069  39DA             ;0: HIGH NIBBLE FIRST 1: LOW NIBBLE FIRST
08070  39DA             ;FIRSTNIBBLE=1
08071  39DA             FIRSTNIBBLE=0 
08072  39DA             ;1: NO NIBBLES
08073  39DA             ;NONIBBLES=1
08074  39DA             NONIBBLES=0 
08075  39DA             
08076  39DA             AUDIO.DIGISTART$ 
08077  39DA             
08078  39DA  78                    SEI
08079  39DB  A9 35                 LDA #$35; DISABLE KERNAL AND BASIC ROMS
08080  39DD  85 01                 STA $01
08081  39DF             
08082  39DF  A9 00                 LDA #$00
08083  39E1  8D D9 39              STA AUDIO.DIGIFINISHED$
08084  39E4             
08085  39E4  20 F8 39              JSR AUDIO.DIGIINIT$
08086  39E7  A0 D3                 LDY #<AUDIO.DIGITABLE
08087  39E9  A2 39                 LDX #>AUDIO.DIGITABLE
08088  39EB  20 84 3A              JSR AUDIO.DIGIPLAY$
08089  39EE             
08090  39EE             ;        LDA #$36 ; ENABLE KERNAL BUT KEEP BASIC DISABLED
08091  39EE             ;        STA $01
08092  39EE             ;        CLI
08093  39EE             
08094  39EE  60                    RTS
08095  39EF             
08096  39EF             AUDIO.DIGIEND$ 
08097  39EF             
08098  39EF  20 5B 3A              JSR AUDIO.DIGIOFF$
08099  39F2             
08100  39F2  A9 36                 LDA #$36 ; ENABLE KERNAL BUT KEEP BASIC DISABLED
08101  39F4  85 01                 STA $01
08102  39F6  58                    CLI
08103  39F7             
08104  39F7  60                    RTS
08105  39F8             
08106  39F8             AUDIO.DIGIINIT$ 
08107  39F8  20 5B 3A              JSR AUDIO.DIGIOFF$
08108  39FB             
08109  39FB  A9 00                 LDA #$00
08110  39FD  A2 00                 LDX #$00
08111  39FF  EA                    NOP
08112  3A00             @L
08113  3A00  9D 00 D4              STA AUDIO.SIDADDRESS,X
08114  3A03  E8                    INX
08115  3A04  D0 FA                 BNE @L
08116  3A06             
08117  3A06  A9 00                 LDA #$00
08118  3A08  8D 05 D4              STA AUDIO.SIDADDRESS+$05   ; VOICE 1 AD
08119  3A0B  A9 F0                 LDA #$F0
08120  3A0D  8D 06 D4              STA AUDIO.SIDADDRESS+$06   ;         SR
08121  3A10  A9 01                 LDA #$01
08122  3A12  8D 04 D4              STA AUDIO.SIDADDRESS+$04   ;         CTRL
08123  3A15  A9 00                 LDA #$00
08124  3A17  8D 0C D4              STA AUDIO.SIDADDRESS+$0C   ; VOICE 2 AD
08125  3A1A  A9 F0                 LDA #$F0
08126  3A1C  8D 0D D4              STA AUDIO.SIDADDRESS+$0D   ;         SR
08127  3A1F  A9 01                 LDA #$01
08128  3A21  8D 0B D4              STA AUDIO.SIDADDRESS+$0B   ;         CTRL
08129  3A24  A9 00                 LDA #$00
08130  3A26  8D 13 D4              STA AUDIO.SIDADDRESS+$13   ; VOICE 3 AD
08131  3A29  A9 F0                 LDA #$F0
08132  3A2B  8D 14 D4              STA AUDIO.SIDADDRESS+$14   ;         SR
08133  3A2E  A9 01                 LDA #$01
08134  3A30  8D 12 D4              STA AUDIO.SIDADDRESS+$12   ;         CTRL
08135  3A33  A9 00                 LDA #$00
08136  3A35  8D 15 D4              STA AUDIO.SIDADDRESS+$15   ; FILTER LO
08137  3A38  A9 10                 LDA #$10
08138  3A3A  8D 16 D4              STA AUDIO.SIDADDRESS+$16   ; FILTER HI
08139  3A3D  A9 F7                 LDA #%11110111
08140  3A3F  8D 17 D4              STA AUDIO.SIDADDRESS+$17   ; FILTER VOICES+RESO
08141  3A42             
08142  3A42  60                    RTS
08143  3A43             
08144  3A43             AUDIO.DIGION$ 
08145  3A43  A9 3A                 LDA #>AUDIO._DIGION
08146  3A45  8D FB FF              STA $FFFB
08147  3A48  A9 B7                 LDA #<AUDIO._DIGION
08148  3A4A  8D FA FF              STA $FFFA
08149  3A4D             
08150  3A4D  A9 81                 LDA #%10000001    ; ENABLE CIA-2 TIMER A NMI
08151  3A4F  8D 0D DD              STA $DD0D
08152  3A52  AD 0D DD              LDA $DD0D
08153  3A55  A9 01                 LDA #%00000001    ; TIMER A START
08154  3A57  8D 0E DD              STA $DD0E
08155  3A5A  60                    RTS
08156  3A5B             AUDIO.DIGIOFF$ 
08157  3A5B  A9 00                 LDA #%00000000
08158  3A5D  8D 0E DD              STA $DD0E         ; TIMER A STOP
08159  3A60  A9 4F                 LDA #%01001111    ; DISABLE ALL CIA-2 NMI'S
08160  3A62  8D 0D DD              STA $DD0D
08161  3A65  AD 0D DD              LDA $DD0D
08162  3A68             
08163  3A68  A9 3B                 LDA #>AUDIO._DIGIOFF
08164  3A6A  8D FB FF              STA $FFFB
08165  3A6D  A9 09                 LDA #<AUDIO._DIGIOFF
08166  3A6F  8D FA FF              STA $FFFA
08167  3A72             
08168  3A72  A9 00                 LDA #$00
08169  3A74  85 32                 STA AUDIO.DIGIPOINT
08170  3A76  85 33                 STA AUDIO.DIGIPOINT+1
08171  3A78  8D CD 3A              STA AUDIO.DIGISTOPLO+1
08172  3A7B  8D C7 3A              STA AUDIO.DIGISTOPHI+1
08173  3A7E             
08174  3A7E  A9 00                 LDA #%00000000
08175  3A80  8D 17 D4              STA AUDIO.SIDADDRESS+$17   ; FILTER VOICES+RESO
08176  3A83             
08177  3A83  60                    RTS
08178  3A84             
08179  3A84             
08180  3A84             AUDIO.DIGIPLAY$ 
08181  3A84             
08182  3A84  20 5B 3A              JSR AUDIO.DIGIOFF$
08183  3A87             
08184  3A87  86 31                 STX AUDIO.DIGISOUNDPTR+1
08185  3A89  84 30                 STY AUDIO.DIGISOUNDPTR
08186  3A8B             
08187  3A8B  A0 00                 LDY #$00
08188  3A8D  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08189  3A8F  85 32                 STA AUDIO.DIGIPOINT
08190  3A91  C8                    INY
08191  3A92  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08192  3A94  85 33                 STA AUDIO.DIGIPOINT+1
08193  3A96  C8                    INY
08194  3A97  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08195  3A99  8D CD 3A              STA AUDIO.DIGISTOPLO+1
08196  3A9C  C8                    INY
08197  3A9D  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08198  3A9F  8D C7 3A              STA AUDIO.DIGISTOPHI+1
08199  3AA2  C8                    INY
08200  3AA3  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08201  3AA5  8D 04 DD              STA $DD04
08202  3AA8  C8                    INY
08203  3AA9  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08204  3AAB  8D 05 DD              STA $DD05
08205  3AAE             
08206  3AAE             
08208  3AAE  A9 00                 LDA #$00
08209  3AB0  8D E4 3A              STA AUDIO.DIGI_NIB+1
08211  3AB3             
08212  3AB3  20 43 3A              JSR AUDIO.DIGION$
08213  3AB6             
08214  3AB6  60                    RTS
08215  3AB7             
08216  3AB7             ;-------------------------------------------
08217  3AB7             ;ALIGN $100
08218  3AB7             
08219  3AB7             AUDIO._DIGION 
08220  3AB7  8D 06 3B              STA AUDIO._DIGIABUFFER
08221  3ABA  8C 08 3B              STY AUDIO._DIGIYBUFFER
08222  3ABD             
08227  3ABD  A9 10                 LDA #$10
08229  3ABF             
08230  3ABF  09 00      AUDIO.DIGID418NMI ORA #$00
08231  3AC1  8D 18 D4              STA AUDIO.SIDADDRESS+$18          ; VOLUME REG
08232  3AC4             
08236  3AC4             
08240  3AC4             
08241  3AC4  A5 33                 LDA AUDIO.DIGIPOINT+1
08242  3AC6  C9 12      AUDIO.DIGISTOPHI CMP #$12                ;ENDHIGH
08243  3AC8  D0 17                 BNE AUDIO.DIGI_SK1
08244  3ACA             
08245  3ACA  A5 32                 LDA AUDIO.DIGIPOINT
08246  3ACC  C9 00      AUDIO.DIGISTOPLO CMP #$00                ;ENDLOW
08247  3ACE  D0 11                 BNE AUDIO.DIGI_SK1
08248  3AD0             
08252  3AD0  A9 00                 LDA #$00
08254  3AD2             
08255  3AD2  8D C0 3A              STA AUDIO.DIGID418NMI+1
08256  3AD5             
08257  3AD5  A9 01                 LDA #$01
08258  3AD7  8D D9 39              STA AUDIO.DIGIFINISHED$
08259  3ADA             
08260  3ADA  20 5B 3A              JSR AUDIO.DIGIOFF$
08261  3ADD             
08262  3ADD  AD 06 3B              LDA AUDIO._DIGIABUFFER
08263  3AE0             
08264  3AE0  40                    RTI
08265  3AE1             
08266  3AE1             AUDIO.DIGI_SK1 
08267  3AE1             
08268  3AE1  A0 00                 LDY #$00
08269  3AE3             
08271  3AE3             AUDIO.DIGI_NIB 
08272  3AE3  A9 00                 LDA #$00
08273  3AE5  29 01                 AND #$01
08274  3AE7  D0 09                 BNE AUDIO.DIGI_S1
08276  3AE9             
08277  3AE9  B1 32                 LDA (AUDIO.DIGIPOINT),Y
08278  3AEB             
08281  3AEB  4A                    LSR A
08282  3AEC  4A                    LSR A
08283  3AED  4A                    LSR A
08284  3AEE  4A                    LSR A
08288  3AEF             
08289  3AEF  4C FC 3A              JMP AUDIO.DIGI_S2
08290  3AF2             AUDIO.DIGI_S1 
08291  3AF2  B1 32                 LDA (AUDIO.DIGIPOINT),Y
08298  3AF4  29 0F                 AND #$0F
08301  3AF6             
08302  3AF6  E6 32                 INC AUDIO.DIGIPOINT
08303  3AF8  D0 02                 BNE @SK
08304  3AFA  E6 33                 INC AUDIO.DIGIPOINT+1
08305  3AFC             @SK
08306  3AFC             AUDIO.DIGI_S2 
08307  3AFC  8D C0 3A              STA AUDIO.DIGID418NMI+1
08308  3AFF             
08310  3AFF  EE E4 3A              INC AUDIO.DIGI_NIB+1
08312  3B02             
08313  3B02  AD 0D DD              LDA $DD0D ; ACK
08314  3B05             
08315  3B05             AUDIO._DIGIABUFFER=*+1 
08316  3B05  A9 00                 LDA #$00
08317  3B07             AUDIO._DIGIYBUFFER=*+1 
08318  3B07  A0 00                 LDY #$00
08319  3B09             
08320  3B09             AUDIO._DIGIOFF 
08321  3B09  40                    RTI
08322  3B0A             
08323  3B0A             
08324  3B0A             
08325  3B0A             
08326  3B0A             
08327  3B0A             JOYSTICK.PORT1$ = #01
08328  3B0A             JOYSTICK.PORT2$ = #02
08329  3B0A             
08330  3B0A             JOYSTICK.GETSTATE.PORT$ = $7A ; 1 BYTE
08331  3B0A             JOYSTICK.GETSTATE.FIRE$ = $7B ; 1 BYTE
08332  3B0A             JOYSTICK.GETSTATE.DELTAX$ = $7C ; 1 BYTE
08333  3B0A             JOYSTICK.GETSTATE.DELTAY$ = $7D ; 1 BYTE
08334  3B0A             JOYSTICK.GETSTATE$ 
08335  3B0A                        ;HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:JOYSTICK_INPUT_HANDLING
08336  3B0A             
08337  3B0A  A5 7A                 LDA JOYSTICK.GETSTATE.PORT$
08338  3B0C  C9 01                 CMP #JOYSTICK.PORT1$
08339  3B0E  F0 03                 BEQ @PORT1
08340  3B10  4C 19 3B              JMP @PORT2
08341  3B13             @PORT1
08342  3B13  AD 01 DC              LDA $DC01 ; PORT 1
08343  3B16  4C 1C 3B              JMP @GETSTATE
08344  3B19             @PORT2
08345  3B19  AD 00 DC              LDA $DC00 ; PORT 2
08346  3B1C             @GETSTATE
08347  3B1C             
08348  3B1C  A0 00      DJRRB      LDY #0        ; THIS ROUTINE READS AND DECODES THE
08349  3B1E  A2 00                 LDX #0        ; JOYSTICK/FIREBUTTON INPUT DATA IN
08350  3B20  4A                    LSR           ; THE ACCUMULATOR. THIS LEAST SIGNIFICANT
08351  3B21  B0 01                 BCS DJR0      ; 5 BITS CONTAIN THE SWITCH CLOSURE
08352  3B23  88                    DEY           ; INFORMATION. IF A SWITCH IS CLOSED THEN IT
08353  3B24  4A         DJR0       LSR           ; PRODUCES A ZERO BIT. IF A SWITCH IS OPEN THEN
08354  3B25  B0 01                 BCS DJR1      ; IT PRODUCES A ONE BIT. THE JOYSTICK DIR-
08355  3B27  C8                    INY           ; ECTIONS ARE RIGHT, LEFT, FORWARD, BACKWARD
08356  3B28  4A         DJR1       LSR           ; BIT3=RIGHT, BIT2=LEFT, BIT1=BACKWARD,
08357  3B29  B0 01                 BCS DJR2      ; BIT0=FORWARD AND BIT4=FIRE BUTTON.
08358  3B2B  CA                    DEX           ; AT RTS TIME DX AND DY CONTAIN 2'S COMPLIMENT
08359  3B2C  4A         DJR2       LSR           ; DIRECTION NUMBERS I.E. $FF=-1, $00=0, $01=1.
08360  3B2D  B0 01                 BCS DJR3      ; DX=1 (MOVE RIGHT), DX=-1 (MOVE LEFT),
08361  3B2F  E8                    INX           ; DX=0 (NO X CHANGE). DY=-1 (MOVE UP SCREEN),
08362  3B30  4A         DJR3       LSR           ; DY=0 (MOVE DOWN SCREEN), DY=0 (NO Y CHANGE).
08363  3B31  86 7C                 STX JOYSTICK.GETSTATE.DELTAX$        ; THE FORWARD JOYSTICK POSITION CORRESPONDS
08364  3B33  84 7D                 STY JOYSTICK.GETSTATE.DELTAY$        ; TO MOVE UP THE SCREEN AND THE BACKWARD
08365  3B35                        ; POSITION TO MOVE DOWN SCREEN.
08366  3B35  A9 00                 LDA #$00
08367  3B37  90 03                 BCC @FIRE
08368  3B39  4C 3E 3B              JMP @SETFIRE
08369  3B3C             @FIRE      ; AT RTS TIME THE CARRY FLAG CONTAINS THE FIRE
08370  3B3C  A9 01                 LDA #$01      ; BUTTON STATE. IF C=1 THEN BUTTON NOT PRESSED.
08371  3B3E             @SETFIRE   ; IF C=0 THEN PRESSED.
08372  3B3E  85 7B                 STA JOYSTICK.GETSTATE.FIRE$
08373  3B40             
08374  3B40  60                    RTS
08375  3B41             
08376  3B41             
08377  3B41             
08378  3B41             
08379  3B41             
08380  3B41             ;ALIGN $100
08381  3B41             
08382  3B41             ; HTTP://WWW.UNUSEDINO.DE/EC64/TECHNICAL/MISC/C64/ROMLISTING.HTML
08383  3B41  00         DISK.ERROR$ BYTE $00
08384  3B42             ;DISKERR.RUN_STOP$                = $00 ; THIS COULD HAPPEN IF THE USER PRESSES RUN/STOP DURING LOAD
08385  3B42             ;DISKERR.TOO_MANY_FILES$          = $01
08386  3B42             ;DISKERR.FILE_OPEN$               = $02
08387  3B42             ;DISKERR.FILE_NOT_OPEN$           = $03
08388  3B42             ;DISKERR.FILE_NOT_FOUND$          = $04
08389  3B42             ;DISKERR.DEVICE_NOT_PRESENT$      = $05
08390  3B42             ;DISKERR.NOT_INPUT_FILE$          = $06
08391  3B42             ;DISKERR.NOT_OUTPUT_FILE$         = $07
08392  3B42             ;DISKERR.MISSING_FILE_NAME$       = $08
08393  3B42             ;DISKERR.ILLEGAL_DEVICE_NUMBER$   = $09
08394  3B42             ;DISKERR.OUT_OF_DATA$             = $0D
08395  3B42             ;DISKERR.OUT_OF_MEMORY$           = $10
08396  3B42             ;DISKERR.STRING_TOO_LONG$         = $17
08397  3B42             ;DISKERR.FILE_DATA$               = $18
08398  3B42             ;DISKERR.VERIFY$                  = $1C
08399  3B42             ;DISKERR.LOAD$                    = $1D
08400  3B42             ;DISKERR.BREAK$                   = $1E
08401  3B42             DISKERROR.OK$ = 00
08402  3B42             DISKERROR.FILE_SCRATCHED$ = 01
08403  3B42             DISKERROR.FILE_OPEN$ = 02
08404  3B42             ;DISKERROR.FILE_NOT_OPEN$           = 03
08405  3B42             ;DISKERROR.FILE_NOT_FOUND$          = 04
08406  3B42             DISKERROR.DEVICE_NOT_PRESENT$ = 05
08407  3B42             DISKERROR.NOT_INPUT_FILE$ = 06
08408  3B42             DISKERROR.NOT_OUTPUT_FILE$ = 07
08409  3B42             DISKERROR.MISSING_FILE_NAME$ = 08
08410  3B42             DISKERROR.ILLEGAL_DEVICE_NUMBER$ = 09
08411  3B42             DISKERROR.OUT_OF_DATA$ = 13
08412  3B42             DISKERROR.OUT_OF_MEMORY$ = 16
08413  3B42             DISKERROR.BLOCK_HEADER_NOT_FOUND$ = 20
08414  3B42             DISKERROR.SYNC_CHAR_NOT_FOUND$ = 21
08415  3B42             DISKERROR.DATA_BLOCK_NOT_PRESENT$ = 22
08416  3B42             DISKERROR.CHECKSUM_ERROR$ = 23
08417  3B42             DISKERROR.BYTE_DECODE_ERROR$ = 24
08418  3B42             DISKERROR.WRITE_VERIFY_ERROR$ = 25
08419  3B42             DISKERROR.WRITE_PROTECT_ON$ = 26
08420  3B42             DISKERROR.CHECKSUM_ERROR_HEADER$ = 27
08421  3B42             DISKERROR.DATA_EXTENDS_BLOCK$ = 28
08422  3B42             DISKERROR.DISK_ID_MISMATCH$ = 29
08423  3B42             DISKERROR.GENERAL_SYNTAX_ERROR$ = 30
08424  3B42             DISKERROR.INVALID_COMMAND$ = 31
08425  3B42             DISKERROR.LONG_LINE$ = 32
08426  3B42             DISKERROR.INVALID_FILENAME$ = 33
08427  3B42             DISKERROR.NO_FILE_GIVEN$ = 34
08428  3B42             DISKERROR.CMD_FILE_NOT_FOUND$ = 39
08429  3B42             DISKERROR.RCD_NOT_PRESENT$ = 50
08430  3B42             DISKERROR.OVERFLOW_IN_RCD$ = 51
08431  3B42             DISKERROR.FILE_TOO_LARGE$ = 52
08432  3B42             DISKERROR.FILE_OPEN_FOR_WRITE$ = 60
08433  3B42             DISKERROR.FILE_NOT_OPEN$ = 61
08434  3B42             DISKERROR.FILE_NOT_FOUND$ = 62
08435  3B42             DISKERROR.FILE_EXISTS$ = 63
08436  3B42             DISKERROR.FILE_TYPE_MISMATCH$ = 64
08437  3B42             DISKERROR.NO_BLOCK$ = 65
08438  3B42             DISKERROR.ILLEGAL_TRACK_SECTOR$ = 66
08439  3B42             DISKERROR.ILLEGAL_SYS_TRACK_SECTOR$ = 67
08440  3B42             DISKERROR.NO_CHANNELS$ = 70
08441  3B42             DISKERROR.DIRECTORY_ERROR$ = 71
08442  3B42             DISKERROR.DISK_DIRECTORY_FULL$ = 72
08443  3B42             DISKERROR.POWER_UP$ = 73
08444  3B42             DISKERROR.DRIVE_NOT_READY$ = 74
08445  3B42             
08446  3B42             
08447  3B42             
08448  3B42             DISK.SETNAM.FILENAME$ = $20 ; 2 BYTES
08449  3B42             DISK.SETNAM 
08450  3B42             
08451  3B42  A9 00                 LDA #$00
08452  3B44  20 90 FF              JSR $FF90 ; DISABLE KERNAL MESSAGES (SEARCHING/LOADING)
08453  3B47             
08454  3B47                        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
08455  3B47                        ;LDA #$02      ; FILENUMBER 2
08456  3B47                        ;JSR $FFC3     ; CALL CLOSE
08457  3B47             
08458  3B47  A9 00                 LDA #DISKERROR.OK$
08459  3B49  8D 41 3B              STA DISK.ERROR$
08460  3B4C             
08461  3B4C  A5 20                 LDA DISK.SETNAM.FILENAME$
08462  3B4E  85 7A                 STA STRING.GETLENGTH.ADDRESS$
08463  3B50  A5 21                 LDA DISK.SETNAM.FILENAME$+1
08464  3B52  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
08465  3B54  20 72 2B              JSR STRING.GETLENGTH$
08466  3B57             
08467  3B57  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
08468  3B59  A6 20                 LDX DISK.SETNAM.FILENAME$
08469  3B5B  A4 21                 LDY DISK.SETNAM.FILENAME$+1
08470  3B5D  20 BD FF              JSR $FFBD     ; CALL SETNAM
08471  3B60  A9 01                 LDA #$01
08472  3B62  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
08473  3B64  D0 02                 BNE @SKIP
08474  3B66  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
08475  3B68             @SKIP      
08476  3B68                        ;LDY #$01      ; NOT $01 MEANS: LOAD TO ADDRESS STORED IN FILE
08477  3B68  A0 00                 LDY #$00        ; SECONDARY ADDRESS OVERRIDDEN BELOW IN CALL TO $FFD5
08478  3B6A  20 BA FF              JSR $FFBA     ; CALL SETLFS
08479  3B6D             
08480  3B6D  60                    RTS
08481  3B6E             
08482  3B6E             DISK.READFILE.FILENAME$ = $20 ; 2 BYTES
08483  3B6E             DISK.READFILE.ADDRESS$ = $22 ; 2 BYTES
08484  3B6E             DISK.READFILE.LENGTH$ = $24 ; 2 BYTES
08485  3B6E             DISK.READFILE$ 
08486  3B6E             
08487  3B6E  A9 00                 LDA #$00
08488  3B70  85 24                 STA DISK.READFILE.LENGTH$
08489  3B72  85 25                 STA DISK.READFILE.LENGTH$+1
08490  3B74             
08491  3B74  20 42 3B              JSR DISK.SETNAM
08492  3B77             
08493  3B77  A9 00                 LDA #$00      ; $00 MEANS: LOAD TO MEMORY (NOT VERIFY)
08494  3B79  A6 22                 LDX DISK.READFILE.ADDRESS$ ; MEMORY ADDRESS TO LOAD
08495  3B7B  A4 23                 LDY DISK.READFILE.ADDRESS$+1
08496  3B7D  20 D5 FF              JSR $FFD5     ; CALL LOAD
08497  3B80  90 07                 BCC @OK    ; IF CARRY SET, A LOAD ERROR HAS HAPPENED
08498  3B82             @ERROR
08499  3B82                        ; ACCUMULATOR CONTAINS BASIC ERROR CODE
08500  3B82             
08501  3B82                        ; MOST LIKELY ERRORS:
08502  3B82                        ; A = $05 (DEVICE NOT PRESENT)
08503  3B82                        ; A = $04 (FILE NOT FOUND)
08504  3B82                        ; A = $1D (LOAD ERROR)
08505  3B82                        ; A = $00 (BREAK, RUN/STOP HAS BEEN PRESSED DURING LOADING)
08506  3B82             
08507  3B82                        ;... ERROR HANDLING ...
08508  3B82             
08509  3B82                        ;STA DISK.ERROR$
08510  3B82                        ;RTS
08511  3B82             
08512  3B82                        ; FOR SOME REASON THE MACHINE HAS ENCOUNTERED A BREAK.
08513  3B82                        ; TRY LOADING THE FILE AGAIN.
08514  3B82  C9 00                 CMP #$00
08515  3B84  F0 E8                 BEQ DISK.READFILE$
08516  3B86             
08517  3B86  4C 2F 3C              JMP DISK.READERRORCHANNEL
08518  3B89             
08519  3B89             @OK
08520  3B89             
08521  3B89                        ;  X/Y = ADDRESS OF LAST BYTE LOADED/VERIFIED (IF CARRY = 0)
08522  3B89  86 80                 STX MATH.SUBTRACT16.MENUEND$
08523  3B8B                        ;STY MATH.SUBTRACT32.MENUEND$+1
08524  3B8B  84 81                 STY MATH.SUBTRACT16.MENUEND$+1
08525  3B8D  A5 22                 LDA DISK.READFILE.ADDRESS$
08526  3B8F  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
08527  3B91  A5 23                 LDA DISK.READFILE.ADDRESS$+1
08528  3B93  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
08529  3B95  20 96 28              JSR MATH.SUBTRACT16$
08530  3B98  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
08531  3B9A  85 24                 STA DISK.READFILE.LENGTH$
08532  3B9C  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
08533  3B9E  85 25                 STA DISK.READFILE.LENGTH$+1
08534  3BA0             
08535  3BA0  60                    RTS
08536  3BA1             
08537  3BA1             DISK.READFILE.FILENAME$ = $20 ; 2 BYTES
08538  3BA1             DISK.READFILE.ADDRESS$ = $22 ; 2 BYTES
08539  3BA1             DISK.READFILE.LENGTH$ = $24 ; 2 BYTES
08540  3BA1             DISK.READFILE 
08541  3BA1             
08542  3BA1                        ; DEFAULTS
08543  3BA1             
08544  3BA1                        ;JSR CONSOLE.RESETBUFADDRESS
08545  3BA1             
08546  3BA1                        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
08547  3BA1  A9 02                 LDA #$02      ; FILENUMBER 2
08548  3BA3  20 C3 FF              JSR $FFC3     ; CALL CLOSE
08549  3BA6             
08550  3BA6  A9 00                 LDA #DISKERROR.OK$
08551  3BA8  8D 41 3B              STA DISK.ERROR$
08552  3BAB             
08553  3BAB  A9 00                 LDA #$00
08554  3BAD  85 24                 STA DISK.READFILE.LENGTH$
08555  3BAF  85 25                 STA DISK.READFILE.LENGTH$+1
08556  3BB1             
08557  3BB1  A5 20                 LDA DISK.READFILE.FILENAME$
08558  3BB3  85 7A                 STA STRING.GETLENGTH.ADDRESS$
08559  3BB5  A5 21                 LDA DISK.READFILE.FILENAME$+1
08560  3BB7  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
08561  3BB9  20 72 2B              JSR STRING.GETLENGTH$
08562  3BBC             
08563  3BBC  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
08564  3BBE  A6 20                 LDX DISK.READFILE.FILENAME$
08565  3BC0  A4 21                 LDY DISK.READFILE.FILENAME$+1
08566  3BC2  20 BD FF              JSR $FFBD     ; CALL SETNAM
08567  3BC5             
08568  3BC5  A9 02                 LDA #$02      ; FILE NUMBER 2
08569  3BC7  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
08570  3BC9  D0 02                 BNE @SKIP
08571  3BCB  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
08572  3BCD             @SKIP      
08573  3BCD  A0 02                 LDY #$02      ; SECONDARY ADDRESS 2
08574  3BCF  A0 00                 LDY #$00
08575  3BD1  20 BA FF              JSR $FFBA     ; CALL SETLFS
08576  3BD4             
08577  3BD4  20 C0 FF              JSR $FFC0     ; CALL OPEN
08578  3BD7                        ;BCS ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
08579  3BD7  90 06                 BCC @OK
08580  3BD9                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
08581  3BD9             
08582  3BD9                        ; MOST LIKELY ERRORS:
08583  3BD9                        ; A = $05 (DEVICE NOT PRESENT)
08584  3BD9  8D 41 3B              STA DISK.ERROR$
08585  3BDC                        ;NOP
08586  3BDC                        ;NOP
08587  3BDC                        ;NOP
08588  3BDC             
08589  3BDC                        ;... ERROR HANDLING FOR OPEN ERRORS ...
08590  3BDC  4C 24 3C              JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
08591  3BDF                        ;NOP
08592  3BDF                        ;NOP
08593  3BDF                        ;NOP
08594  3BDF             @OK
08595  3BDF             
08596  3BDF                        ;; CHECK DRIVE ERROR CHANNEL HERE TO TEST FOR
08597  3BDF                        ;; FILE NOT FOUND ERROR ETC.
08598  3BDF                        ;JSR DISK.READERRORCHANNEL
08599  3BDF                        ;LDA #DISKERROR.OK$
08600  3BDF                        ;CMP DISK.ERROR$
08601  3BDF                        ;BEQ @OK2
08602  3BDF                        ;JMP @CLOSE
08603  3BDF             
08604  3BDF             @OK2
08605  3BDF  A2 02                 LDX #$02      ; FILENUMBER 2
08606  3BE1  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 2 NOW USED AS INPUT)
08607  3BE4             
08608  3BE4  A5 22                 LDA DISK.READFILE.ADDRESS$
08609  3BE6  85 AE                 STA $AE
08610  3BE8  A5 23                 LDA DISK.READFILE.ADDRESS$+1
08611  3BEA  85 AF                 STA $AF
08612  3BEC             
08613  3BEC  A0 00                 LDY #$00
08614  3BEE             @LOOP
08615  3BEE  20 B7 FF              JSR $FFB7     ; CALL READST (READ STATUS BYTE)
08616  3BF1                        ;BNE @EOF      ; EITHER EOF OR READ ERROR
08617  3BF1                        ;BEQ @CONT
08618  3BF1  D0 03                 BNE @NO_CONT
08619  3BF3  4C 0B 3C              JMP @CONT
08620  3BF6             @NO_CONT
08621  3BF6  4C FE 3B              JMP @EOF
08622  3BF9             
08623  3BF9  EA                    NOP
08624  3BFA  EA                    NOP
08625  3BFB  EA                    NOP
08626  3BFC  EA                    NOP
08627  3BFD  EA                    NOP
08628  3BFE             
08629  3BFE             @EOF
08630  3BFE  29 40                 AND #$40      ; END OF FILE?
08631  3C00                        ;BEQ READERROR
08632  3C00  D0 03                 BNE @READERROR
08633  3C02  4C 24 3C              JMP @CLOSE
08634  3C05                        
08635  3C05             @READERROR 
08636  3C05                        ; FOR FURTHER INFORMATION, THE DRIVE ERROR CHANNEL HAS TO BE READ
08637  3C05  20 2F 3C              JSR DISK.READERRORCHANNEL
08638  3C08             
08639  3C08  4C 24 3C              JMP @CLOSE
08640  3C0B                        
08641  3C0B             @CONT
08642  3C0B                        ;INC $D020
08643  3C0B  20 CF FF              JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
08644  3C0E  91 AE                 STA ($AE),Y   ; WRITE BYTE TO MEMORY
08645  3C10             
08646  3C10                        ; INCREMENT THE LENGTH
08647  3C10  A2 24                 LDX #<DISK.READFILE.LENGTH$
08648  3C12  86 86                 STX MATH.INC16.ADDRESS$
08649  3C14  A2 00                 LDX #>DISK.READFILE.LENGTH$
08650  3C16  86 87                 STX MATH.INC16.ADDRESS$+1
08651  3C18  20 3C 28              JSR MATH.INC16$
08652  3C1B             
08653  3C1B  E6 AE                 INC $AE
08654  3C1D  D0 02                 BNE @SKIP2
08655  3C1F  E6 AF                 INC $AF
08656  3C21             @SKIP2     
08657  3C21  4C EE 3B              JMP @LOOP     ; NEXT BYTE
08658  3C24             
08659  3C24             @CLOSE
08660  3C24  A9 02                 LDA #$02      ; FILENUMBER 2
08661  3C26  20 C3 FF              JSR $FFC3     ; CALL CLOSE
08662  3C29             
08663  3C29  20 CC FF              JSR $FFCC     ; CALL CLRCHN
08664  3C2C  60                    RTS
08665  3C2D             
08666  3C2D  00 00      DISK.READERRORCHANNEL.ERRORDEC WORD $0000
08667  3C2F             DISK.READERRORCHANNEL 
08668  3C2F             ; HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:READING_THE_ERROR_CHANNEL_OF_A_DISK_DRIVE
08669  3C2F  A9 00                 LDA #$00      ; NO FILENAME
08670  3C31  A2 00                 LDX #$00
08671  3C33  A0 00                 LDY #$00
08672  3C35  20 BD FF              JSR $FFBD     ; CALL SETNAM
08673  3C38             
08674  3C38  A9 0F                 LDA #$0F      ; FILE NUMBER 15
08675  3C3A  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
08676  3C3C  D0 02                 BNE @SKIP
08677  3C3E  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
08678  3C40             @SKIP      
08679  3C40  A0 0F                 LDY #$0F      ; SECONDARY ADDRESS 15 (ERROR CHANNEL)
08680  3C42  20 BA FF              JSR $FFBA     ; CALL SETLFS
08681  3C45             
08682  3C45  20 C0 FF              JSR $FFC0     ; CALL OPEN
08683  3C48                        ;BCS @ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
08684  3C48  90 03                 BCC @OK
08685  3C4A  4C 7C 3C              JMP @ERROR
08686  3C4D             @OK
08687  3C4D             
08688  3C4D  A2 0F                 LDX #$0F      ; FILENUMBER 15
08689  3C4F  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 15 NOW USED AS INPUT)
08690  3C52             
08691  3C52                        ; SET THE LENGTH TO BE CONVERTED FROM PETSCII TO INTEGER TO BE 2 CHARACTERS
08692  3C52  A9 02                 LDA #$02
08693  3C54  85 2A                 STA CONVERT.DEC2HEX8.LEN
08694  3C56             
08695  3C56                        ; READ THE FIRST TWO CHARACTER FROM THE DRIVE (THIS WILL BE THE ERROR NUMBER)
08696  3C56  A0 00                 LDY #$00
08697  3C58             @LOOP
08698  3C58  20 B7 FF              JSR $FFB7     ; CALL READST (READ STATUS BYTE)
08699  3C5B                        ;BNE @EOF      ; EITHER EOF OR READ ERROR
08700  3C5B  F0 03                 BEQ @NOTEOF
08701  3C5D  4C 73 3C              JMP @EOF
08702  3C60             @NOTEOF
08703  3C60  20 CF FF              JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
08704  3C63  99 E4 00              STA CONVERT.DEC2HEX8.VALUE,Y
08705  3C66  C8                    INY
08706  3C67  C4 2A                 CPY CONVERT.DEC2HEX8.LEN
08707  3C69  D0 ED                 BNE @LOOP
08708  3C6B             
08709  3C6B                        ; CONVERT THE ERROR NUMBER CHARACTERS TO INTEGER
08710  3C6B  20 65 1C              JSR CONVERT.DEC2HEX8
08711  3C6E  A5 E0                 LDA CONVERT.DEC2HEX8.RESULT
08712  3C70  8D 41 3B              STA DISK.ERROR$
08713  3C73             
08714  3C73             @EOF
08715  3C73             @CLOSE
08716  3C73  A9 0F                 LDA #$0F      ; FILENUMBER 15
08717  3C75  20 C3 FF              JSR $FFC3     ; CALL CLOSE
08718  3C78             
08719  3C78  20 CC FF              JSR $FFCC     ; CALL CLRCHN
08720  3C7B  60                    RTS
08721  3C7C             @ERROR
08722  3C7C                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
08723  3C7C             
08724  3C7C                        ; MOST LIKELY ERROR:
08725  3C7C                        ; A = $05 (DEVICE NOT PRESENT)
08726  3C7C             
08727  3C7C                        ;... ERROR HANDLING FOR OPEN ERRORS ...
08728  3C7C  4C 73 3C              JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
08729  3C7F             
08730  3C7F  24 3A FF   DISK.GETDISKINFO.FILENAME TEXT '$:', CONSOLE.NULL$
08731  3C82  FF FF FF   DISK.GETDISKINFO.LABEL$ TEXT $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, CONSOLE.NULL$
08732  3C93             ;DISK.GETDISKINFO.ID$ TEXT $FF, $FF, CONSOLE.NULL$
08733  3C93             ;DISK.GETDISKINFO.TYPE$   BYTE $00
08734  3C93  00 00      DISK.GETDISKINFO.BLOCKSFREE$ WORD $0000
08735  3C95             DISK.GETDISKINFO$ 
08736  3C95             
08737  3C95  20 EF 19              JSR CONSOLE.RESETBUFADDRESS
08738  3C98             
08739  3C98                        ; LOAD THE FILE INTO MEMORY
08740  3C98  A9 7F                 LDA #<DISK.GETDISKINFO.FILENAME
08741  3C9A  85 20                 STA DISK.READFILE.FILENAME$
08742  3C9C  A9 3C                 LDA #>DISK.GETDISKINFO.FILENAME
08743  3C9E  85 21                 STA DISK.READFILE.FILENAME$+1
08744  3CA0  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
08745  3CA2  85 22                 STA DISK.READFILE.ADDRESS$
08746  3CA4  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
08747  3CA6  85 23                 STA DISK.READFILE.ADDRESS$+1
08748  3CA8  20 A1 3B              JSR DISK.READFILE
08749  3CAB             
08750  3CAB                        ; CLEAR THE LABEL
08751  3CAB  A9 82                 LDA #<DISK.GETDISKINFO.LABEL$
08752  3CAD  85 73                 STA MEMORY.FILL.ADDRESS$
08753  3CAF  A9 3C                 LDA #>DISK.GETDISKINFO.LABEL$
08754  3CB1  85 74                 STA MEMORY.FILL.ADDRESS$+1
08755  3CB3  A9 FF                 LDA #$FF
08756  3CB5  85 75                 STA MEMORY.FILL.VALUE$
08757  3CB7  A9 10                 LDA #16
08758  3CB9  85 76                 STA MEMORY.FILL.LENGTH$
08759  3CBB  20 03 10              JSR MEMORY.FILL$
08760  3CBE             
08761  3CBE                        ; FIGURE OUT THE OFFSET OF THE LABEL
08762  3CBE  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
08763  3CC0  85 80                 STA MATH.ADD16.ADDEND1$
08764  3CC2  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
08765  3CC4  85 81                 STA MATH.ADD16.ADDEND1$+1
08766  3CC6  A9 08                 LDA #8
08767  3CC8  85 82                 STA MATH.ADD16.ADDEND2$
08768  3CCA  A9 00                 LDA #0
08769  3CCC  85 83                 STA MATH.ADD16.ADDEND2$+1
08770  3CCE  20 00 28              JSR MATH.ADD16$
08771  3CD1             
08772  3CD1                        ; DISK LABEL TEXT IS FROM 8 THRU 23
08773  3CD1  A5 84                 LDA MATH.ADD16.SUM$
08774  3CD3  85 73                 STA MEMORY.COPY.SOURCE$
08775  3CD5  A5 85                 LDA MATH.ADD16.SUM$+1
08776  3CD7  85 74                 STA MEMORY.COPY.SOURCE$+1
08777  3CD9  A9 82                 LDA #<DISK.GETDISKINFO.LABEL$
08778  3CDB  85 75                 STA MEMORY.COPY.DESTINATION$
08779  3CDD  A9 3C                 LDA #>DISK.GETDISKINFO.LABEL$
08780  3CDF  85 76                 STA MEMORY.COPY.DESTINATION$+1
08781  3CE1  A9 10                 LDA #16
08782  3CE3  85 77                 STA MEMORY.COPY.LENGTH$
08783  3CE5  20 8A 0F              JSR MEMORY.COPY$
08784  3CE8             
08785  3CE8                        ; CLEAR BLOCKS FREE
08786  3CE8  A9 00                 LDA #$00
08787  3CEA  8D 93 3C              STA DISK.GETDISKINFO.BLOCKSFREE$
08788  3CED  A9 00                 LDA #$00
08789  3CEF  8D 94 3C              STA DISK.GETDISKINFO.BLOCKSFREE$+1
08790  3CF2             
08791  3CF2                        ; FIGURE OUT THE OFFSET OF THE BLOCKS FREE
08792  3CF2  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
08793  3CF4  85 80                 STA MATH.ADD16.ADDEND1$
08794  3CF6  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
08795  3CF8  85 81                 STA MATH.ADD16.ADDEND1$+1
08796  3CFA  A9 22                 LDA #34
08797  3CFC  85 82                 STA MATH.ADD16.ADDEND2$
08798  3CFE  A9 00                 LDA #0
08799  3D00  85 83                 STA MATH.ADD16.ADDEND2$+1
08800  3D02  20 00 28              JSR MATH.ADD16$
08801  3D05             
08802  3D05                        ; DISK BLOCKS FREE HEXADECIMAL IS FROM 34 THRU 35
08803  3D05  A5 84                 LDA MATH.ADD16.SUM$
08804  3D07  85 73                 STA MEMORY.COPY.SOURCE$
08805  3D09  A5 85                 LDA MATH.ADD16.SUM$+1
08806  3D0B  85 74                 STA MEMORY.COPY.SOURCE$+1
08807  3D0D  A9 93                 LDA #<DISK.GETDISKINFO.BLOCKSFREE$
08808  3D0F  85 75                 STA MEMORY.COPY.DESTINATION$
08809  3D11  A9 3C                 LDA #>DISK.GETDISKINFO.BLOCKSFREE$
08810  3D13  85 76                 STA MEMORY.COPY.DESTINATION$+1
08811  3D15  A9 02                 LDA #2
08812  3D17  85 77                 STA MEMORY.COPY.LENGTH$
08813  3D19  20 8A 0F              JSR MEMORY.COPY$
08814  3D1C             
08815  3D1C  60                    RTS
08816  3D1D             
08817  3D1D             ;ALIGN $100
08818  3D1D             
08819  3D1D             DISK.FILEEXISTS.FILENAME$ = $20 ; 2 BYTES
08820  3D1D             DISK.FILEEXISTS.EXISTS$ = $26 ; 1 BYTE
08821  3D1D             DISK.FILEEXISTS$ 
08822  3D1D                        ; FOR REASONS UNCLEAR, AFTER SEARCHING FOR THE FILE USING THE
08823  3D1D                        ; LOAD"$:FILENAME",8 COMMAND, YOU GET A "?DEVICE NOT READY" ERROR
08824  3D1D                        ; WHICH IS ONLY RESOLVED BY USING LOAD"$",8
08825  3D1D                        ; THIS ADDS EXTRA OVERHEAD WHICH USED WITH A 1541 DRIVE
08826  3D1D                        ; NOT SO MUCH WHEN USED WITH A IEC DEVICE
08827  3D1D             
08828  3D1D                        ; FIND THE FILE USING THE LOAD"$:FILENAME",8 COMMAND
08829  3D1D  20 CE 3D              JSR DISK.GETFILEINFO$
08830  3D20  20 4D 3D              JSR DISK.GETFILEINFOCLOSE$
08831  3D23             
08832  3D23                        ; CHECK FOR ERRORS
08833  3D23  AD 41 3B              LDA DISK.ERROR$
08834  3D26  C9 00                 CMP #DISKERROR.OK$
08835  3D28  F0 01                 BEQ @FILEEXISTOK
08836  3D2A  60                    RTS
08837  3D2B             @FILEEXISTOK 
08838  3D2B             
08839  3D2B                        ; IF TYPE != UNKNOWN THEN WE HAVE FOUND THE FILE
08840  3D2B  AD C8 3D              LDA DISK.GETFILEINFO.TYPE$
08841  3D2E  F0 02                 BEQ @DONE
08842  3D30  A9 01                 LDA #$01
08843  3D32             @DONE
08844  3D32  85 26                 STA DISK.FILEEXISTS.EXISTS$
08845  3D34             
08846  3D34                        ; THE FOLLOWING CODE IS THE FIX FOR THE "?DEVICE NOT READY" ERROR
08847  3D34  A9 24                 LDA #'$'
08848  3D36  8D AD 3D              STA DISK.GETFILEINFO.FILENAME
08849  3D39  20 3C 3E              JSR DISK.GETDISKINFO.RESET
08850  3D3C                        
08851  3D3C             @LOOP
08852  3D3C  AD C8 3D              LDA DISK.GETFILEINFO.TYPE$
08853  3D3F  F0 06                 BEQ @DONE2
08854  3D41  20 7D 3E              JSR DISK.GETNEXTFILEINFO$
08855  3D44  4C 3C 3D              JMP @LOOP
08856  3D47             
08857  3D47             @DONE2
08858  3D47  20 4D 3D              JSR DISK.GETFILEINFOCLOSE$
08859  3D4A             
08860  3D4A  A5 26                 LDA DISK.FILEEXISTS.EXISTS$
08861  3D4C             
08862  3D4C  60                    RTS
08863  3D4D             
08864  3D4D             ;DISK.FILEEXISTS.FILENAME$      = $20 ; 2 BYTES
08865  3D4D             ;DISK.FILEEXISTS.EXISTS$        = $26 ; 1 BYTE
08866  3D4D             ;DISK.FILEEXISTS$
08867  3D4D             ;        LDA #$00
08868  3D4D             ;        STA DISK.FILEEXISTS.EXISTS$
08869  3D4D             
08870  3D4D             ;        LDA #'$'
08871  3D4D             ;        STA DISK.GETFILEINFO.FILENAME
08872  3D4D             ;        JSR DISK.GETDISKINFO.RESET
08873  3D4D             ;
08874  3D4D             ;@LOOP
08875  3D4D             ;        LDA DISK.GETFILEINFO.FILENAME$
08876  3D4D             ;        STA STRING.ISEQUAL.ADDRESS1$
08877  3D4D             ;        LDA DISK.GETFILEINFO.FILENAME$+1
08878  3D4D             ;        STA STRING.ISEQUAL.ADDRESS1$+1
08879  3D4D             ;        LDA #<DISK.GETFILEINFO.NAME$
08880  3D4D             ;        STA STRING.ISEQUAL.ADDRESS2$
08881  3D4D             ;        LDA #>DISK.GETFILEINFO.NAME$
08882  3D4D             ;        STA STRING.ISEQUAL.ADDRESS2$+1
08883  3D4D             ;        JSR STRING.ISEQUAL$
08884  3D4D             ;        LDA STRING.ISEQUAL.VALUE$
08885  3D4D             ;        BNE @FOUNDFILE
08886  3D4D             ;        JMP @CHECKFILETYPE
08887  3D4D             ;@FOUNDFILE
08888  3D4D             ;        LDA #$01
08889  3D4D             ;        STA DISK.FILEEXISTS.EXISTS$
08890  3D4D             
08891  3D4D             ;@CHECKFILETYPE
08892  3D4D             ;        LDA DISK.GETFILEINFO.TYPE$
08893  3D4D             ;        BEQ @DONE2
08894  3D4D             ;        JSR DISK.GETNEXTFILEINFO$
08895  3D4D             ;        JMP @LOOP
08896  3D4D             
08897  3D4D             ;@DONE2
08898  3D4D             ;        JSR DISK.GETFILEINFOCLOSE$
08899  3D4D             
08900  3D4D             ;        LDA DISK.FILEEXISTS.EXISTS$
08901  3D4D             
08902  3D4D             ;        RTS
08903  3D4D             
08904  3D4D             DISK.GETFILEINFOCLOSE$ 
08905  3D4D             ;@CLOSE
08906  3D4D  A9 03                 LDA #$03      ; FILENUMBER 3
08907  3D4F  20 C3 FF              JSR $FFC3     ; CALL CLOSE
08908  3D52             
08909  3D52  20 CC FF              JSR $FFCC     ; CALL CLRCHN
08910  3D55  60                    RTS
08911  3D56             
08912  3D56             ;;DISK.WRITEFILE.FILENAME TEXT "@0:"
08913  3D56             ;DISK.WRITEFILE.FILENAME
08914  3D56             ;DISK.WRITEFILE.NAME TEXT '1234567890123456'
08915  3D56             ;DISK.WRITEFILE.EXT TEXT ",P,W"
08916  3D56             ;DISK.WRITEFILE.FILENAME$ = $20 ; 2 BYTES
08917  3D56             ;DISK.WRITEFILE.ADDRESS$ = $22 ; 2 BYTES
08918  3D56             ;DISK.WRITEFILE.LENGTH$ = $24 ; 2 BYTES
08919  3D56             ;DISK.WRITEFILE.LEN = $26 ; 2 BYTES
08920  3D56             ;DISK.WRITEFILE$
08921  3D56             
08922  3D56             ;        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
08923  3D56             ;        LDA #$02      ; FILENUMBER 2
08924  3D56             ;        JSR $FFC3     ; CALL CLOSE
08925  3D56             
08926  3D56             ;        ; DUE TO A BUG FOR THE REPLACE COMMAND WE NEED TO SCRATCH THE FILE PRIOR TO SAVING IT
08927  3D56             ;        ; HTTPS://WWW.C64-WIKI.COM/WIKI/COMMODORE_1541#DISK_DRIVE_COMMANDS
08928  3D56             ;        JSR DISK.SCRATCHFILE
08929  3D56             ;        LDA DISK.ERROR$
08930  3D56             ;        ;NOP
08931  3D56             ;        ;NOP
08932  3D56             ;        CMP #DISKERROR.OK$
08933  3D56             ;        BEQ @SCRATCHOK
08934  3D56             ;        CMP #DISKERROR.FILE_NOT_FOUND$
08935  3D56             ;        BEQ @SCRATCHOK
08936  3D56             ;        RTS
08937  3D56             ;@SCRATCHOK
08938  3D56             
08939  3D56             ;        ; SET DEFAULT VALUES
08940  3D56             ;        LDA #DISKERROR.OK$
08941  3D56             ;        STA DISK.ERROR$
08942  3D56             
08943  3D56             ;        ; CHECK FOR 0 LENGTH$
08944  3D56             ;        LDA #$00
08945  3D56             ;        STA MATH.CMP16.NUM1$
08946  3D56             ;        STA MATH.CMP16.NUM1$+1
08947  3D56             ;        LDA DISK.WRITEFILE.LENGTH$
08948  3D56             ;        STA MATH.CMP16.NUM2$
08949  3D56             ;        LDA DISK.WRITEFILE.LENGTH$+1
08950  3D56             ;        STA MATH.CMP16.NUM2$+1
08951  3D56             ;        JSR MATH.CMP16$
08952  3D56             ;        BNE @LENOK
08953  3D56             ;        RTS
08954  3D56             ;@LENOK
08955  3D56             
08956  3D56             ;;        ; CHECK DRIVE ERROR CHANNEL
08957  3D56             ;;        JSR DISK.READERRORCHANNEL
08958  3D56             ;;        LDA DISK.ERROR$
08959  3D56             ;;        CMP #DISKERROR.OK$
08960  3D56             ;;        BEQ @OK0
08961  3D56             ;;        JMP @CLOSE
08962  3D56             ;;@OK0
08963  3D56             
08964  3D56             ;        ; GET THE LENGTH OF FILENAME$
08965  3D56             ;        LDA DISK.WRITEFILE.FILENAME$
08966  3D56             ;        STA STRING.GETLENGTH.ADDRESS$
08967  3D56             ;        LDA DISK.WRITEFILE.FILENAME$+1
08968  3D56             ;        STA STRING.GETLENGTH.ADDRESS$+1
08969  3D56             ;        JSR STRING.GETLENGTH$
08970  3D56             ;        LDA STRING.GETLENGTH.LENGTH$
08971  3D56             ;        STA DISK.WRITEFILE.LEN
08972  3D56             
08973  3D56             ;        ; COPY FILENAME$ INTO FILENAME AT POSITION 3
08974  3D56             ;        LDA DISK.WRITEFILE.FILENAME$
08975  3D56             ;        STA MEMORY.COPY.SOURCE$
08976  3D56             ;        LDA DISK.WRITEFILE.FILENAME$+1
08977  3D56             ;        STA MEMORY.COPY.SOURCE$+1
08978  3D56             ;        LDA #<DISK.WRITEFILE.NAME
08979  3D56             ;        STA MEMORY.COPY.DESTINATION$
08980  3D56             ;        LDA #>DISK.WRITEFILE.NAME
08981  3D56             ;        STA MEMORY.COPY.DESTINATION$+1
08982  3D56             ;        LDA DISK.WRITEFILE.LEN
08983  3D56             ;        STA MEMORY.COPY.LENGTH$
08984  3D56             ;        JSR MEMORY.COPY$
08985  3D56             ;
08986  3D56             ;        ; APPEND ',P,W'
08987  3D56             ;        LDX #$00
08988  3D56             ;        LDY DISK.WRITEFILE.LEN
08989  3D56             ;@EXTCOPY_LOOP
08990  3D56             ;        LDA DISK.WRITEFILE.EXT,X
08991  3D56             ;        STA DISK.WRITEFILE.NAME,Y
08992  3D56             ;        INX
08993  3D56             ;        INY
08994  3D56             ;        CPX #4
08995  3D56             ;        BNE @EXTCOPY_LOOP
08996  3D56             
08997  3D56             ;        ; CALCULATE THE LENGTH (LENGTH OF FILENAME$ + 7)
08998  3D56             ;        LDA DISK.WRITEFILE.LEN
08999  3D56             ;        CLC
09000  3D56             ;        ;ADC #7
09001  3D56             ;        ADC #4
09002  3D56             
09003  3D56             ;        ; WRITE LENGTH$ NUMBER OF BYTES FROM ADDRESS$ TO DISK
09004  3D56             ;        LDX #<DISK.WRITEFILE.FILENAME
09005  3D56             ;        LDY #>DISK.WRITEFILE.FILENAME
09006  3D56             ;        JSR $FFBD     ; CALL SETNAM
09007  3D56             
09008  3D56             ;        LDA #$02      ; FILE NUMBER 2
09009  3D56             ;        LDX $BA       ; LAST USED DEVICE NUMBER
09010  3D56             ;        BNE @SKIP
09011  3D56             ;        LDX #$08      ; DEFAULT TO DEVICE 8
09012  3D56             ;@SKIP
09013  3D56             ;        LDY #$02      ; SECONDARY ADDRESS 2
09014  3D56             ;        ;LDY #$00
09015  3D56             ;        JSR $FFBA     ; CALL SETLFS
09016  3D56             
09017  3D56             ;        JSR $FFC0     ; CALL OPEN
09018  3D56             ;        ;BCS ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
09019  3D56             ;        BCC @OK
09020  3D56             ;        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
09021  3D56             
09022  3D56             ;        ;LDA #$01 ; RED
09023  3D56             ;        ;STA $D020
09024  3D56             
09025  3D56             ;        ; MOST LIKELY ERRORS:
09026  3D56             ;        ; A = $05 (DEVICE NOT PRESENT)
09027  3D56             ;        STA DISK.ERROR$
09028  3D56             
09029  3D56             ;        ;... ERROR HANDLING FOR OPEN ERRORS ...
09030  3D56             ;        JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
09031  3D56             ;@OK
09032  3D56             ;        ;; CHECK DRIVE ERROR CHANNEL HERE TO TEST FOR
09033  3D56             ;        ;; FILE NOT FOUND ERROR ETC.
09034  3D56             ;        ;JSR DISK.READERRORCHANNEL
09035  3D56             ;        ;LDA DISK.ERROR$
09036  3D56             ;        ;CMP #DISKERROR.OK$
09037  3D56             ;        ;BEQ @OK2
09038  3D56             ;        ;JMP @CLOSE
09039  3D56             
09040  3D56             ;@OK2
09041  3D56             
09042  3D56             ;        ;LDA #$04 ; PURPLE
09043  3D56             ;        ;STA $D020
09044  3D56             
09045  3D56             ;;        ; CHECK FOR 0 LENGTH$
09046  3D56             ;;        LDA #$00
09047  3D56             ;;        STA MATH.CMP16.NUM1$
09048  3D56             ;;        STA MATH.CMP16.NUM1$+1
09049  3D56             ;;        LDA DISK.WRITEFILE.LENGTH$
09050  3D56             ;;        STA MATH.CMP16.NUM2$
09051  3D56             ;;        LDA DISK.WRITEFILE.LENGTH$+1
09052  3D56             ;;        STA MATH.CMP16.NUM2$+1
09053  3D56             ;;        JSR MATH.CMP16$
09054  3D56             ;;        BNE @OK3
09055  3D56             ;;        JMP @CLOSE
09056  3D56             ;@OK3
09057  3D56             
09058  3D56             ;        LDX #$02      ; FILENUMBER 2
09059  3D56             ;        JSR $FFC9     ; CALL CHKOUT (FILE 2 NOW USED AS OUTPUT)
09060  3D56             
09061  3D56             ;        ; SET THE MEMORY ADDRESS
09062  3D56             ;        LDA DISK.WRITEFILE.ADDRESS$
09063  3D56             ;        STA $AE
09064  3D56             ;        LDA DISK.WRITEFILE.ADDRESS$+1
09065  3D56             ;        STA $AF
09066  3D56             
09067  3D56             ;        LDY #$00
09068  3D56             
09069  3D56             ;        ; RESET THE COUNTER
09070  3D56             ;        LDA #$00
09071  3D56             ;        STA DISK.WRITEFILE.LEN
09072  3D56             ;        STA DISK.WRITEFILE.LEN+1
09073  3D56             
09074  3D56             ;@LOOP
09075  3D56             ;        LDY #$00
09076  3D56             ;        LDX #$08
09077  3D56             ;        JSR $FFB7     ; CALL READST (READ STATUS BYTE)
09078  3D56             ;        ;BNE @EOF      ; EITHER EOF OR READ ERROR
09079  3D56             ;        BEQ @CONT
09080  3D56             
09081  3D56             ;@WRITEERROR
09082  3D56             
09083  3D56             ;        ;LDA #$02 ; RED
09084  3D56             ;        ;STA $D020
09085  3D56             
09086  3D56             ;        ; FOR FURTHER INFORMATION, THE DRIVE ERROR CHANNEL HAS TO BE READ
09087  3D56             ;        JSR DISK.READERRORCHANNEL
09088  3D56             
09089  3D56             ;        JMP @CLOSE
09090  3D56             ;
09091  3D56             ;@CONT
09092  3D56             ;        ;LDA #$03 ; CYAN
09093  3D56             ;        ;STA $D020
09094  3D56             
09095  3D56             ;        LDA ($AE),Y   ; GET BYTE FROM MEMORY
09096  3D56             ;        JSR $FFD2     ; CALL CHROUT (WRITE BYTE TO FILE)
09097  3D56             
09098  3D56             ;        ; INCREMENT THE COUNTER
09099  3D56             ;        LDA #<DISK.WRITEFILE.LEN
09100  3D56             ;        STA MATH.INC16.ADDRESS$
09101  3D56             ;        LDA #>DISK.WRITEFILE.LEN
09102  3D56             ;        STA MATH.INC16.ADDRESS$+1
09103  3D56             ;        JSR MATH.INC16$
09104  3D56             
09105  3D56             ;        ; CHECK HOW MANY BYTES HAVE BEEN WRITTEN TO DISK
09106  3D56             ;        LDA DISK.WRITEFILE.LEN
09107  3D56             ;        STA MATH.CMP16.NUM1$
09108  3D56             ;        LDA DISK.WRITEFILE.LEN+1
09109  3D56             ;        STA MATH.CMP16.NUM1$+1
09110  3D56             ;        LDA DISK.WRITEFILE.LENGTH$
09111  3D56             ;        STA MATH.CMP16.NUM2$
09112  3D56             ;        LDA DISK.WRITEFILE.LENGTH$+1
09113  3D56             ;        STA MATH.CMP16.NUM2$+1
09114  3D56             ;        JSR MATH.CMP16$
09115  3D56             ;        BNE @INC_MEM
09116  3D56             ;        JMP @CLOSE
09117  3D56             
09118  3D56             ;@INC_MEM
09119  3D56             ;        ; INCREMENT MEMORY ADDRESS
09120  3D56             ;        INC $AE
09121  3D56             ;        BNE @SKIP2
09122  3D56             ;        INC $AF
09123  3D56             ;@SKIP2
09124  3D56             
09125  3D56             ;        JMP @LOOP     ; NEXT BYTE
09126  3D56             
09127  3D56             ;@CLOSE
09128  3D56             ;        LDA #$02      ; FILENUMBER 2
09129  3D56             ;        JSR $FFC3     ; CALL CLOSE
09130  3D56             
09131  3D56             ;        JSR $FFCC     ; CALL CLRCHN
09132  3D56             
09133  3D56             ;        JSR DISK.READERRORCHANNEL
09134  3D56             
09135  3D56             ;        RTS
09136  3D56             
09137  3D56             DISK.WRITEFILE.FILENAME$ = $20 ; 2 BYTES
09138  3D56             DISK.WRITEFILE.ADDRESS$ = $22 ; 2 BYTES
09139  3D56             DISK.WRITEFILE.LENGTH$ = $24 ; 2 BYTES
09140  3D56             ;DISK.WRITEFILE.LEN = $26 ; 2 BYTES
09141  3D56             DISK.WRITEFILE$ 
09142  3D56             
09143  3D56  20 CF 3F              JSR DISK.SCRATCHFILE
09144  3D59  AD 41 3B              LDA DISK.ERROR$
09145  3D5C  C9 00                 CMP #DISKERROR.OK$
09146  3D5E  F0 05                 BEQ @SCRATCHOK
09147  3D60  C9 3E                 CMP #DISKERROR.FILE_NOT_FOUND$
09148  3D62  F0 01                 BEQ @SCRATCHOK
09149  3D64  60                    RTS
09150  3D65             @SCRATCHOK 
09151  3D65             
09152  3D65                        ; SET DEFAULT VALUES
09153  3D65  A9 00                 LDA #DISKERROR.OK$
09154  3D67  8D 41 3B              STA DISK.ERROR$
09155  3D6A             
09156  3D6A                        ; CHECK FOR 0 LENGTH$
09157  3D6A  A9 00                 LDA #$00
09158  3D6C  85 80                 STA MATH.CMP16.NUM1$
09159  3D6E  85 81                 STA MATH.CMP16.NUM1$+1
09160  3D70  A5 24                 LDA DISK.WRITEFILE.LENGTH$
09161  3D72  85 82                 STA MATH.CMP16.NUM2$
09162  3D74  A5 25                 LDA DISK.WRITEFILE.LENGTH$+1
09163  3D76  85 83                 STA MATH.CMP16.NUM2$+1
09164  3D78  20 E4 28              JSR MATH.CMP16$
09165  3D7B  D0 01                 BNE @LENOK
09166  3D7D  60                    RTS
09167  3D7E             @LENOK
09168  3D7E             
09169  3D7E  20 42 3B              JSR DISK.SETNAM
09170  3D81             
09171  3D81                        ; CALCULATE THE ENDING ADDRESS
09172  3D81  A5 22                 LDA DISK.WRITEFILE.ADDRESS$
09173  3D83  85 80                 STA MATH.ADD16.ADDEND1$
09174  3D85  A5 23                 LDA DISK.WRITEFILE.ADDRESS$+1
09175  3D87  85 81                 STA MATH.ADD16.ADDEND1$+1
09176  3D89  A5 24                 LDA DISK.WRITEFILE.LENGTH$
09177  3D8B  85 82                 STA MATH.ADD16.ADDEND2$
09178  3D8D  A5 25                 LDA DISK.WRITEFILE.LENGTH$+1
09179  3D8F  85 83                 STA MATH.ADD16.ADDEND2$+1
09180  3D91  20 00 28              JSR MATH.ADD16$
09181  3D94             
09182  3D94  A9 22                 LDA #DISK.WRITEFILE.ADDRESS$ ; THE ZP ADDRESS OF THE STARTING ADDRESS
09183  3D96  A6 84                 LDX MATH.ADD16.SUM$
09184  3D98  A4 85                 LDY MATH.ADD16.SUM$+1
09185  3D9A  20 D8 FF              JSR $FFD8     ; CALL SAVE
09186  3D9D  90 03                 BCC @OK       ; IF CARRY SET, A LOAD ERROR HAS HAPPENED
09187  3D9F             @ERROR
09188  3D9F                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
09189  3D9F             
09190  3D9F                        ; ... ERROR HANDLING ...
09191  3D9F             
09192  3D9F                        ;STA DISK.ERROR$
09193  3D9F                        ;RTS
09194  3D9F             
09195  3D9F  4C 2F 3C              JMP DISK.READERRORCHANNEL
09196  3DA2             
09197  3DA2             @OK
09198  3DA2  60                    RTS
09199  3DA3             
09200  3DA3             DISKFILETYPES.NONE$ = 0
09201  3DA3             DISKFILETYPES.PRG$ = 1
09202  3DA3             DISKFILETYPES.SEQ$ = 2
09203  3DA3             DISKFILETYPES.USR$ = 3
09204  3DA3             DISKFILETYPES.REL$ = 4
09205  3DA3             DISKFILETYPES.DEL$ = 5
09206  3DA3             
09207  3DA3             DISK.GETFILEINFO.FILENAME$ = $20 ; 2 BYTES
09208  3DA3  00         DISK.GETFILEINFO.LEN BYTE $00
09209  3DA4  00         DISK.GETFILEINFO.OFFSET BYTE $00
09210  3DA5  00 00      DISK.GETFILEINFO.CBM WORD $0000 ; 2
09211  3DA7  00 00      DISK.GETFILEINFO.CBM2 WORD $0000 ; 2
09212  3DA9  00         DISK.GETFILEINFO.BLOCKS$ BYTE $00 ; 1 (1 BLOCK => 254 BYTES)
09213  3DAA  20 20 20   DISK.GETFILEINFO.BUF1 TEXT '   ' ; 3
09214  3DAD  24 3A      DISK.GETFILEINFO.FILENAME TEXT '$:' ; 2
09215  3DAF  FF FF FF   DISK.GETFILEINFO.NAME$ TEXT $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF ; 16
09216  3DBF  20 20      DISK.GETFILEINFO.BUF2 TEXT '  ' ; 2
09217  3DC1  20 20 20   DISK.GETFILEINFO.EXTENSION TEXT  '   ' ; 3
09218  3DC4  20 20 20   DISK.GETFILEINFO.BUF3 TEXT '    ' ; 5
09219  3DC8  00         DISK.GETFILEINFO.TYPE$ BYTE $00
09220  3DC9  50 53 55   DISK.GETFILEINFO.TYPEMAP TEXT 'PSURD'
09221  3DCE             
09222  3DCE             DISK.GETFILEINFO$ 
09223  3DCE             
09224  3DCE                        ; SET DEFAULT VALUES
09225  3DCE  A9 00                 LDA #DISKERROR.OK$
09226  3DD0  8D 41 3B              STA DISK.ERROR$
09227  3DD3             
09228  3DD3  A9 00                 LDA #$00
09229  3DD5  8D A4 3D              STA DISK.GETFILEINFO.OFFSET
09230  3DD8             
09231  3DD8  A9 24                 LDA #'$'
09232  3DDA  8D AD 3D              STA DISK.GETFILEINFO.FILENAME
09233  3DDD  A9 3A                 LDA #':'
09234  3DDF  8D AE 3D              STA DISK.GETFILEINFO.FILENAME+1
09235  3DE2             
09236  3DE2  A9 AF                 LDA #<DISK.GETFILEINFO.NAME$
09237  3DE4  85 73                 STA MEMORY.FILL.ADDRESS$
09238  3DE6  A9 3D                 LDA #>DISK.GETFILEINFO.NAME$
09239  3DE8  85 74                 STA MEMORY.FILL.ADDRESS$+1
09240  3DEA  A9 FF                 LDA #$FF
09241  3DEC  85 75                 STA MEMORY.FILL.VALUE$
09242  3DEE  A9 10                 LDA #16
09243  3DF0  85 76                 STA MEMORY.FILL.LENGTH$
09244  3DF2  20 03 10              JSR MEMORY.FILL$
09245  3DF5             
09246  3DF5                        ; CHECK TO SEE IF FILENAME$ IS ZERO
09247  3DF5  A5 20                 LDA DISK.GETFILEINFO.FILENAME$
09248  3DF7  85 80                 STA MATH.CMP16.NUM1$
09249  3DF9  A5 21                 LDA DISK.GETFILEINFO.FILENAME$+1
09250  3DFB  85 81                 STA MATH.CMP16.NUM1$+1
09251  3DFD  A9 00                 LDA #$00
09252  3DFF  85 82                 STA MATH.CMP16.NUM2$
09253  3E01  85 83                 STA MATH.CMP16.NUM2$+1
09254  3E03  20 E4 28              JSR MATH.CMP16$
09255  3E06  D0 03                 BNE @SETNAM_SPECIFIC
09256  3E08  4C 3C 3E              JMP DISK.GETDISKINFO._SETNAM_ALL
09257  3E0B             
09258  3E0B             @SETNAM_SPECIFIC ; SET FILENAME = "$:" + FILENAME$
09259  3E0B             
09260  3E0B                        ; GET THE LENGTH OF THE STRING
09261  3E0B  A5 20                 LDA DISK.GETFILEINFO.FILENAME$
09262  3E0D  85 7A                 STA STRING.GETLENGTH.ADDRESS$
09263  3E0F  A5 21                 LDA DISK.GETFILEINFO.FILENAME$+1
09264  3E11  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
09265  3E13  20 72 2B              JSR STRING.GETLENGTH$
09266  3E16  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
09267  3E18  8D A3 3D              STA DISK.GETFILEINFO.LEN
09268  3E1B             
09269  3E1B                        ; COPY THE STRING TO DISK.GETFILEINFO.NAME$
09270  3E1B  A5 20                 LDA DISK.GETFILEINFO.FILENAME$
09271  3E1D  85 73                 STA MEMORY.COPY.SOURCE$
09272  3E1F  A5 21                 LDA DISK.GETFILEINFO.FILENAME$+1
09273  3E21  85 74                 STA MEMORY.COPY.SOURCE$+1
09274  3E23  A9 AF                 LDA #<DISK.GETFILEINFO.NAME$
09275  3E25  85 75                 STA MEMORY.COPY.DESTINATION$
09276  3E27  A9 3D                 LDA #>DISK.GETFILEINFO.NAME$
09277  3E29  85 76                 STA MEMORY.COPY.DESTINATION$+1
09278  3E2B  AD A3 3D              LDA DISK.GETFILEINFO.LEN
09279  3E2E  85 77                 STA MEMORY.COPY.LENGTH$
09280  3E30  20 8A 0F              JSR MEMORY.COPY$
09281  3E33             
09282  3E33                        ; CALCULATE THE LENGTH (LEN OF FILENAME$ + 2)
09283  3E33  AD A3 3D              LDA DISK.GETFILEINFO.LEN
09284  3E36  18                    CLC
09285  3E37  69 02                 ADC #2
09286  3E39             
09287  3E39  4C 3E 3E              JMP DISK.GETDISKINFO._SETNAM
09288  3E3C             
09289  3E3C             DISK.GETDISKINFO.RESET 
09290  3E3C             
09291  3E3C             DISK.GETDISKINFO._SETNAM_ALL ; SET FILENAME = "$"
09292  3E3C  A9 01                 LDA #01
09293  3E3E                        ;JMP @SETNAM
09294  3E3E             
09295  3E3E             DISK.GETDISKINFO._SETNAM 
09296  3E3E  A2 AD                 LDX #<DISK.GETFILEINFO.FILENAME
09297  3E40  A0 3D                 LDY #>DISK.GETFILEINFO.FILENAME
09298  3E42  20 BD FF              JSR $FFBD     ; CALL SETNAM
09299  3E45             
09300  3E45  A9 03                 LDA #$03      ; FILE NUMBER 3
09301  3E47  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
09302  3E49  D0 02                 BNE @SKIP
09303  3E4B  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
09304  3E4D             @SKIP      
09305  3E4D  A0 02                 LDY #$02      ; SECONDARY ADDRESS 2
09306  3E4F  A0 00                 LDY #$00
09307  3E51  20 BA FF              JSR $FFBA     ; CALL SETLFS
09308  3E54             
09309  3E54  20 C0 FF              JSR $FFC0     ; CALL OPEN
09310  3E57  90 06                 BCC @OK
09311  3E59                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
09312  3E59             
09313  3E59  8D 41 3B              STA DISK.ERROR$
09314  3E5C             
09315  3E5C  4C 4D 3D              JMP DISK.GETFILEINFOCLOSE$    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
09316  3E5F             @OK
09317  3E5F             @OK2
09318  3E5F  A2 03                 LDX #$03      ; FILENUMBER 3
09319  3E61  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 3 NOW USED AS INPUT)
09320  3E64             
09321  3E64                        ;; SKIP THE FIRST 2 BYTES
09322  3E64                        ;LDA #2
09323  3E64                        ;STA DISK.GETFILEINFO.LEN
09324  3E64                        ;JSR DISK.GETNEXTFILEINFO$
09325  3E64             
09326  3E64                        ; SKIP THE DISK LABEL
09327  3E64                        ;LDA #28
09328  3E64  A9 1E                 LDA #30
09329  3E66  8D A3 3D              STA DISK.GETFILEINFO.LEN
09330  3E69  20 7D 3E              JSR DISK.GETNEXTFILEINFO$
09331  3E6C             
09332  3E6C  AD 41 3B              LDA DISK.ERROR$
09333  3E6F                        ;NOP
09334  3E6F  F0 03                 BEQ @GET_FIRST_FILE
09335  3E71  4C 4D 3D              JMP DISK.GETFILEINFOCLOSE$
09336  3E74                        ;JMP @DONE
09337  3E74                        ;;CMP #DISKERROR.OK$
09338  3E74                        ;;BNE @DONE
09339  3E74             
09340  3E74             @GET_FIRST_FILE 
09341  3E74                        ; GET THE FIRST FILE
09342  3E74  A9 20                 LDA #32
09343  3E76  8D A3 3D              STA DISK.GETFILEINFO.LEN
09344  3E79  20 7D 3E              JSR DISK.GETNEXTFILEINFO$
09345  3E7C  60                    RTS
09346  3E7D             ;@DONE
09347  3E7D             ;        RTS
09348  3E7D             
09349  3E7D             DISK.GETNEXTFILEINFO$ 
09350  3E7D             
09351  3E7D                        ; SET DEFAULTS
09352  3E7D  A9 00                 LDA #$00
09353  3E7F  8D A4 3D              STA DISK.GETFILEINFO.OFFSET
09354  3E82             
09355  3E82  A9 00                 LDA #DISKFILETYPES.NONE$
09356  3E84  8D C8 3D              STA DISK.GETFILEINFO.TYPE$
09357  3E87             
09358  3E87  A9 A5                 LDA #<DISK.GETFILEINFO.CBM
09359  3E89  85 AE                 STA $AE
09360  3E8B  A9 3D                 LDA #>DISK.GETFILEINFO.CBM
09361  3E8D  85 AF                 STA $AF
09362  3E8F             
09363  3E8F  A0 00                 LDY #$00
09364  3E91             @LOOP
09365  3E91  20 B7 FF              JSR $FFB7     ; CALL READST (READ STATUS BYTE)
09366  3E94  F0 0D                 BEQ @CONT
09367  3E96             
09368  3E96             @EOF
09369  3E96  29 40                 AND #$40      ; END OF FILE?
09370  3E98  D0 03                 BNE @READERROR
09371  3E9A  4C 4D 3D              JMP DISK.GETFILEINFOCLOSE$
09372  3E9D                        
09373  3E9D             @READERROR 
09374  3E9D                        ; FOR FURTHER INFORMATION, THE DRIVE ERROR CHANNEL HAS TO BE READ
09375  3E9D  20 2F 3C              JSR DISK.READERRORCHANNEL
09376  3EA0             
09377  3EA0  4C 4D 3D              JMP DISK.GETFILEINFOCLOSE$
09378  3EA3                        
09379  3EA3             @CONT
09380  3EA3  20 CF FF              JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
09381  3EA6                        ; DO NOT OVERRIDE A!
09382  3EA6             
09383  3EA6                        ; CHECK TO SEE IF WE HAVE READ THE MAX NUMBER OF BYTES THAT WE WANT
09384  3EA6  EE A4 3D              INC DISK.GETFILEINFO.OFFSET
09385  3EA9  AE A4 3D              LDX DISK.GETFILEINFO.OFFSET
09386  3EAC  EC A3 3D              CPX DISK.GETFILEINFO.LEN
09387  3EAF                        ;BEQ @DONE
09388  3EAF                        ;NOP
09389  3EAF  D0 03                 BNE @CONT2
09390  3EB1  4C DC 3E              JMP @DONE
09391  3EB4             @CONT2
09392  3EB4             
09393  3EB4                        ; NEED TO CHECK THE BLOCK SIZE (SEE BELOW)
09394  3EB4  E0 06                 CPX #6
09395  3EB6  D0 03                 BNE @WRITE_MEM
09396  3EB8  4C C6 3E              JMP @CHECK_BLOCKS
09397  3EBB             @WRITE_MEM 
09398  3EBB             
09399  3EBB  91 AE                 STA ($AE),Y   ; WRITE BYTE TO MEMORY
09400  3EBD  E6 AE                 INC $AE
09401  3EBF  D0 02                 BNE @SKIP2
09402  3EC1  E6 AF                 INC $AF
09403  3EC3             
09404  3EC3             @SKIP2     
09405  3EC3  4C 91 3E              JMP @LOOP     ; NEXT BYTE
09406  3EC6             
09407  3EC6             @CHECK_BLOCKS 
09408  3EC6             
09409  3EC6                        ; BECAUSE THE 1541 DIRECTORY LISTING ADDS SPACES BETWEEN THE BLOCK
09410  3EC6                        ; SIZE AND THE FILE NAME, WE NEED TO ADJUST Y BY THE NUMBER OF BLOCKS.
09411  3EC6  AE A9 3D              LDX DISK.GETFILEINFO.BLOCKS$
09412  3EC9                        ;CPX #00 ; IF LESS THAN 0 GET MUST BE 128-255
09413  3EC9                        ;BMI @INC_Y2
09414  3EC9  E0 0A                 CPX #10 ; CHECK IF LESS THAN 10
09415  3ECB             ;        NOP
09416  3ECB             ;        NOP
09417  3ECB             ;        NOP
09418  3ECB             ;        NOP
09419  3ECB             ;        NOP
09420  3ECB                        ;BCC @WRITE_MEM
09421  3ECB  B0 03                 BCS @WRITE_MEM_OK1
09422  3ECD  4C BB 3E              JMP @WRITE_MEM
09423  3ED0             @WRITE_MEM_OK1 
09424  3ED0  C8                    INY
09425  3ED1  E0 64                 CPX #100 ; CHECK IF LESS THAN 100
09426  3ED3                        ;BCC @WRITE_MEM
09427  3ED3  B0 03                 BCS @WRITE_MEM_OK2
09428  3ED5  4C BB 3E              JMP @WRITE_MEM
09429  3ED8             @WRITE_MEM_OK2 
09430  3ED8  C8                    INY
09431  3ED9  4C BB 3E              JMP @WRITE_MEM
09432  3EDC             
09433  3EDC             ;@INC_Y2
09434  3EDC             ;        INY
09435  3EDC             ;        INY
09436  3EDC             ;        JMP @WRITE_MEM
09437  3EDC             
09438  3EDC             @DONE
09439  3EDC             
09440  3EDC                        ; REPLACE THE " CHARACTER IN THE NAME$ WITH A NULL$
09441  3EDC  A9 AF                 LDA #<DISK.GETFILEINFO.NAME$
09442  3EDE  85 AE                 STA $AE
09443  3EE0  A9 3D                 LDA #>DISK.GETFILEINFO.NAME$
09444  3EE2  85 AF                 STA $AF
09445  3EE4  A0 FF                 LDY #$FF
09446  3EE6             @FNAME_LOOP 
09447  3EE6  C8                    INY
09448  3EE7  C0 11                 CPY #17
09449  3EE9  F0 0D                 BEQ @FNAME_DONE
09450  3EEB             @FNAME_CONT 
09451  3EEB  B1 AE                 LDA ($AE),Y
09452  3EED  C9 22                 CMP #$22 ; DOUBLE-QUOTES
09453  3EEF                        ;BNE @FNAME_LOOP
09454  3EEF  F0 03                 BEQ @FNAME_LOOP2
09455  3EF1  4C E6 3E              JMP @FNAME_LOOP
09456  3EF4             @FNAME_LOOP2 
09457  3EF4  A9 FF                 LDA #$FF
09458  3EF6  91 AE                 STA ($AE),Y
09459  3EF8             @FNAME_DONE 
09460  3EF8             
09461  3EF8  A9 C9                 LDA #<DISK.GETFILEINFO.TYPEMAP
09462  3EFA  85 AE                 STA $AE
09463  3EFC  A9 3D                 LDA #>DISK.GETFILEINFO.TYPEMAP
09464  3EFE  85 AF                 STA $AF
09465  3F00  A0 FF                 LDY #$FF
09466  3F02             @FTYPE_LOOP 
09467  3F02  C8                    INY
09468  3F03  C0 05                 CPY #5
09469  3F05                        ;BEQ @FTYPE_DONE
09470  3F05  D0 03                 BNE @FTYPE_CONT
09471  3F07  4C 18 3F              JMP @FTYPE_DONE
09472  3F0A             @FTYPE_CONT 
09473  3F0A  B1 AE                 LDA ($AE),Y
09474  3F0C  CD C1 3D              CMP DISK.GETFILEINFO.EXTENSION
09475  3F0F                        ;BNE @FTYPE_LOOP
09476  3F0F  F0 03                 BEQ @FTYPE_CONT2
09477  3F11  4C 02 3F              JMP @FTYPE_LOOP
09478  3F14             @FTYPE_CONT2 
09479  3F14  C8                    INY
09480  3F15  8C C8 3D              STY DISK.GETFILEINFO.TYPE$
09481  3F18             @FTYPE_DONE 
09482  3F18             
09483  3F18  A9 20                 LDA #32
09484  3F1A  8D A3 3D              STA DISK.GETFILEINFO.LEN
09485  3F1D             
09486  3F1D  60                    RTS
09487  3F1E             
09488  3F1E  58 30 3A   DISK.EXECMD.FILENAME TEXT "X0:"
09489  3F21  31 32 33   DISK.EXECMD.NAME TEXT '1234567890123456789012345678901234567890'
09490  3F49  00         DISK.EXECMD.LEN BYTE $00
09491  3F4A             DISK.EXECMD 
09492  3F4A             
09493  3F4A                        ; SET DEFAULT VALUE
09494  3F4A  A9 00                 LDA #DISKERROR.OK$
09495  3F4C  8D 41 3B              STA DISK.ERROR$
09496  3F4F             
09497  3F4F  AD 49 3F              LDA DISK.EXECMD.LEN
09498  3F52  A2 1E                 LDX #<DISK.EXECMD.FILENAME
09499  3F54  A0 3F                 LDY #>DISK.EXECMD.FILENAME
09500  3F56  20 BD FF              JSR $FFBD     ; CALL SETNAM
09501  3F59             
09502  3F59  A9 04                 LDA #$04      ; FILE NUMBER 4
09503  3F5B  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
09504  3F5D  D0 02                 BNE @SKIP
09505  3F5F  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
09506  3F61             @SKIP      
09507  3F61  A0 0F                 LDY #$0F      ; SECONDARY ADDRESS 15
09508  3F63  20 BA FF              JSR $FFBA     ; CALL SETLFS
09509  3F66             
09510  3F66  20 C0 FF              JSR $FFC0     ; CALL OPEN
09511  3F69  EA                    NOP
09512  3F6A                        ;BCS ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
09513  3F6A  90 03                 BCC @CLOSE
09514  3F6C                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
09515  3F6C             
09516  3F6C                        ; MOST LIKELY ERRORS:
09517  3F6C                        ; A = $05 (DEVICE NOT PRESENT)
09518  3F6C  8D 41 3B              STA DISK.ERROR$
09519  3F6F             
09520  3F6F                        ;... ERROR HANDLING FOR OPEN ERRORS ...
09521  3F6F                        ;JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
09522  3F6F             
09523  3F6F             @CLOSE
09524  3F6F  A9 04                 LDA #$04      ; FILENUMBER 4
09525  3F71  20 C3 FF              JSR $FFC3     ; CALL CLOSE
09526  3F74             
09527  3F74  20 CC FF              JSR $FFCC     ; CALL CLRCHN
09528  3F77             
09529  3F77  20 2F 3C              JSR DISK.READERRORCHANNEL
09530  3F7A             
09531  3F7A  20 8A 1F              JSR DISK.CHECKERROR
09532  3F7D             
09533  3F7D  60                    RTS
09534  3F7E             
09535  3F7E             DISK.EXECMD1.FILENAME = $20 ; 2 BYTES
09536  3F7E             DISK.EXECMD1 
09537  3F7E             
09538  3F7E                        ; GET THE LENGTH OF FILENAME$
09539  3F7E  A5 20                 LDA DISK.EXECMD1.FILENAME
09540  3F80  85 7A                 STA STRING.GETLENGTH.ADDRESS$
09541  3F82  A5 21                 LDA DISK.EXECMD1.FILENAME+1
09542  3F84  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
09543  3F86  20 72 2B              JSR STRING.GETLENGTH$
09544  3F89  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
09545  3F8B  8D 49 3F              STA DISK.EXECMD.LEN
09546  3F8E             
09547  3F8E                        ; COPY FILENAME$ INTO FILENAME
09548  3F8E  A5 20                 LDA DISK.EXECMD1.FILENAME
09549  3F90  85 73                 STA MEMORY.COPY.SOURCE$
09550  3F92  A5 21                 LDA DISK.EXECMD1.FILENAME+1
09551  3F94  85 74                 STA MEMORY.COPY.SOURCE$+1
09552  3F96  A9 21                 LDA #<DISK.EXECMD.NAME
09553  3F98  85 75                 STA MEMORY.COPY.DESTINATION$
09554  3F9A  A9 3F                 LDA #>DISK.EXECMD.NAME
09555  3F9C  85 76                 STA MEMORY.COPY.DESTINATION$+1
09556  3F9E  AD 49 3F              LDA DISK.EXECMD.LEN
09557  3FA1  85 77                 STA MEMORY.COPY.LENGTH$
09558  3FA3  20 8A 0F              JSR MEMORY.COPY$
09559  3FA6             
09560  3FA6                        ; ADD 3 TO LEN
09561  3FA6  AD 49 3F              LDA DISK.EXECMD.LEN
09562  3FA9  18                    CLC
09563  3FAA  69 03                 ADC #3
09564  3FAC  8D 49 3F              STA DISK.EXECMD.LEN
09565  3FAF             
09566  3FAF                        ; EXECUTE THE COMMAND
09567  3FAF  4C 4A 3F              JMP DISK.EXECMD
09568  3FB2             
09569  3FB2             DISK.FORMAT.LABELNAME$ = $20 ; 2 BYTES
09570  3FB2             DISK.FORMAT$ 
09571  3FB2             
09572  3FB2                        ; SET THE PREFIX COMMAND "N"
09573  3FB2  A9 4E                 LDA #"N"
09574  3FB4  8D 1E 3F              STA DISK.EXECMD.FILENAME
09575  3FB7             
09576  3FB7                        ; EXECUTE THE COMMAND
09577  3FB7  4C 7E 3F              JMP DISK.EXECMD1
09578  3FBA             
09579  3FBA             
09580  3FBA             DISK.SCRATCHFILE.FILENAME$ = $20 ; 2 BYTES
09581  3FBA             DISK.SCRATCHFILE$ 
09582  3FBA             
09583  3FBA                        ; NOTE: THE 1541 DOES NOT REPORT AN ERROR IF THE FILE DOESN'T EXIST!
09584  3FBA             
09585  3FBA                        ; CONFIRM THAT FILENAME1 EXISTS
09586  3FBA  20 1D 3D              JSR DISK.FILEEXISTS$
09587  3FBD  AD 41 3B              LDA DISK.ERROR$
09588  3FC0  C9 00                 CMP #DISKERROR.OK$
09589  3FC2  F0 01                 BEQ @FILEEXISTOK
09590  3FC4  60                    RTS
09591  3FC5             @FILEEXISTOK 
09592  3FC5  A5 26                 LDA DISK.FILEEXISTS.EXISTS$
09593  3FC7  D0 06                 BNE @FILEEXISTS
09594  3FC9             ;        BEQ @FILENOEXISTS
09595  3FC9             ;        JMP @FILEEXISTS
09596  3FC9             ;@FILENOEXISTS
09597  3FC9  A9 3E                 LDA #DISKERROR.FILE_NOT_FOUND$
09598  3FCB  8D 41 3B              STA DISK.ERROR$
09599  3FCE  60                    RTS
09600  3FCF             @FILEEXISTS 
09601  3FCF             
09602  3FCF             DISK.SCRATCHFILE 
09603  3FCF             
09604  3FCF                        ; SET THE PREFIX COMMAND "S"
09605  3FCF  A9 53                 LDA #"S"
09606  3FD1  8D 1E 3F              STA DISK.EXECMD.FILENAME
09607  3FD4             
09608  3FD4                        ;; GET THE LENGTH OF FILENAME$
09609  3FD4             ;        LDA DISK.SCRATCHFILE.FILENAME$
09610  3FD4             ;        STA STRING.GETLENGTH.ADDRESS$
09611  3FD4             ;        LDA DISK.SCRATCHFILE.FILENAME$+1
09612  3FD4             ;        STA STRING.GETLENGTH.ADDRESS$+1
09613  3FD4             ;        JSR STRING.GETLENGTH$
09614  3FD4             ;        LDA STRING.GETLENGTH.LENGTH$
09615  3FD4             ;        STA DISK.EXECMD.LEN
09616  3FD4             
09617  3FD4             ;        ; COPY FILENAME$ INTO FILENAME
09618  3FD4             ;        LDA DISK.SCRATCHFILE.FILENAME$
09619  3FD4             ;        STA MEMORY.COPY.SOURCE$
09620  3FD4             ;        LDA DISK.SCRATCHFILE.FILENAME$+1
09621  3FD4             ;        STA MEMORY.COPY.SOURCE$+1
09622  3FD4             ;        LDA #<DISK.EXECMD.NAME
09623  3FD4             ;        STA MEMORY.COPY.DESTINATION$
09624  3FD4             ;        LDA #>DISK.EXECMD.NAME
09625  3FD4             ;        STA MEMORY.COPY.DESTINATION$+1
09626  3FD4             ;        LDA DISK.EXECMD.LEN
09627  3FD4             ;        STA MEMORY.COPY.LENGTH$
09628  3FD4             ;        JSR MEMORY.COPY$
09629  3FD4             
09630  3FD4             ;        ; ADD 3 TO LEN
09631  3FD4             ;        LDA DISK.EXECMD.LEN
09632  3FD4             ;        CLC
09633  3FD4             ;        ADC #3
09634  3FD4             ;        STA DISK.EXECMD.LEN
09635  3FD4             
09636  3FD4                        ; EXECUTE THE COMMAND
09637  3FD4  4C 7E 3F              JMP DISK.EXECMD1
09638  3FD7             
09639  3FD7             
09640  3FD7             DISK.COPYFILE.SRCFILENAME$ = $20 ; 2 BYTES
09641  3FD7             DISK.COPYFILE.DSTFILENAME$ = $22 ; 2 BYTES
09642  3FD7             ;DISK.COPYFILE.SRCLEN = $24 ; 1 BYTE
09643  3FD7             ;DISK.COPYFILE.DSTLEN = $25 ; 1 BYTE
09644  3FD7             DISK.COPYFILE$ 
09645  3FD7             
09646  3FD7                        ; SET THE PREFIX COMMAND "C"
09647  3FD7  A9 43                 LDA #"C"
09648  3FD9  8D 1E 3F              STA DISK.EXECMD.FILENAME
09649  3FDC             
09650  3FDC             ;        ; COPY CHARACTERS FROM DSTFILENAME$ TO FILENAME
09651  3FDC             ;        LDA DISK.COPYFILE.DSTFILENAME$
09652  3FDC             ;        STA $AE
09653  3FDC             ;        LDA DISK.COPYFILE.DSTFILENAME$+1
09654  3FDC             ;        STA $AF
09655  3FDC             ;        LDY #$00
09656  3FDC             ;        LDX #$00
09657  3FDC             ;@DSTLOOP
09658  3FDC             ;        LDA ($AE),Y
09659  3FDC             ;        CMP #CONSOLE.NULL$
09660  3FDC             ;        BEQ @DSTDONE
09661  3FDC             ;        STA DISK.EXECMD.NAME,X
09662  3FDC             ;        INY
09663  3FDC             ;        INX
09664  3FDC             ;        JMP @DSTLOOP
09665  3FDC             ;@DSTDONE
09666  3FDC             ;        STY DISK.COPYFILE.DSTLEN
09667  3FDC             
09668  3FDC             ;        ; APPEND "="
09669  3FDC             ;        LDA #61
09670  3FDC             ;        STA DISK.EXECMD.NAME,X
09671  3FDC             ;        INX
09672  3FDC             
09673  3FDC             ;        ; COPY CHARACTERS FROM SRCFILENAME$ TO FILENAME
09674  3FDC             ;        LDA DISK.COPYFILE.SRCFILENAME$
09675  3FDC             ;        STA $AE
09676  3FDC             ;        LDA DISK.COPYFILE.SRCFILENAME$+1
09677  3FDC             ;        STA $AF
09678  3FDC             ;        LDY #$00
09679  3FDC             ;@SRCLOOP
09680  3FDC             ;        LDA ($AE),Y
09681  3FDC             ;        CMP #CONSOLE.NULL$
09682  3FDC             ;        BEQ @SRCDONE
09683  3FDC             ;        STA DISK.EXECMD.NAME,X
09684  3FDC             ;        INY
09685  3FDC             ;        INX
09686  3FDC             ;        JMP @SRCLOOP
09687  3FDC             ;@SRCDONE
09688  3FDC             ;        STY DISK.COPYFILE.SRCLEN
09689  3FDC             
09690  3FDC             ;        ; LEN = DSTLEN + SRCLEN + 3(C0:) + 1(=)
09691  3FDC             ;        LDA #4
09692  3FDC             ;        CLC
09693  3FDC             ;        ADC DISK.COPYFILE.DSTLEN
09694  3FDC             ;        ADC DISK.COPYFILE.SRCLEN
09695  3FDC             ;        STA DISK.EXECMD.LEN
09696  3FDC             
09697  3FDC                        ; EXECUTE THE COMMAND
09698  3FDC  4C E7 3F              JMP DISK.EXECMD2
09699  3FDF             
09700  3FDF             DISK.RENAMEFILE.OLDFILENAME$ = $20 ; 2 BYTES
09701  3FDF             DISK.RENAMEFILE.NEWFILENAME$ = $22 ; 2 BYTES
09702  3FDF             DISK.RENAMEFILE$ 
09703  3FDF             
09704  3FDF                        ; SET THE PREFIX COMMAND "R"
09705  3FDF  A9 52                 LDA #"R"
09706  3FE1  8D 1E 3F              STA DISK.EXECMD.FILENAME
09707  3FE4             
09708  3FE4                        ; EXECUTE THE COMMAND
09709  3FE4  4C E7 3F              JMP DISK.EXECMD2
09710  3FE7             
09711  3FE7             
09712  3FE7             DISK.EXECMD2.FILENAME1 = $20 ; 2 BYTES
09713  3FE7             DISK.EXECMD2.FILENAME2 = $22 ; 2 BYTES
09714  3FE7             DISK.EXECMD2.LEN1 = $24 ; 1 BYTE
09715  3FE7             DISK.EXECMD2.LEN2 = $25 ; 1 BYTE
09716  3FE7             DISK.EXECMD2 
09717  3FE7             
09718  3FE7                        ; CONFIRM THAT FILENAME1 EXISTS
09719  3FE7             ;        JSR DISK.FILEEXISTS$
09720  3FE7             ;        BNE @FILEEXISTS
09721  3FE7             ;        LDA #DISKERROR.FILE_NOT_FOUND$
09722  3FE7             ;        STA DISK.ERROR$
09723  3FE7             ;        RTS
09724  3FE7             ;@FILEEXISTS
09725  3FE7                        ; CONFIRM THAT FILENAME1 EXISTS
09726  3FE7  20 1D 3D              JSR DISK.FILEEXISTS$
09727  3FEA  AD 41 3B              LDA DISK.ERROR$
09728  3FED  C9 00                 CMP #DISKERROR.OK$
09729  3FEF  F0 01                 BEQ @FILEEXISTOK
09730  3FF1  60                    RTS
09731  3FF2             @FILEEXISTOK 
09732  3FF2  A5 26                 LDA DISK.FILEEXISTS.EXISTS$
09733  3FF4  D0 06                 BNE @FILEEXISTS
09734  3FF6             ;        BEQ @FILENOEXISTS
09735  3FF6             ;        JMP @FILEEXISTS
09736  3FF6             ;@FILENOEXISTS
09737  3FF6  A9 3E                 LDA #DISKERROR.FILE_NOT_FOUND$
09738  3FF8  8D 41 3B              STA DISK.ERROR$
09739  3FFB  60                    RTS
09740  3FFC             @FILEEXISTS 
09741  3FFC             
09742  3FFC                        ; COPY CHARACTERS FROM DSTFILENAME$ TO FILENAME
09743  3FFC  A5 22                 LDA DISK.EXECMD2.FILENAME2
09744  3FFE  85 AE                 STA $AE
09745  4000  A5 23                 LDA DISK.EXECMD2.FILENAME2+1
09746  4002  85 AF                 STA $AF
09747  4004  A0 00                 LDY #$00
09748  4006  A2 00                 LDX #$00
09749  4008             @DSTLOOP
09750  4008  B1 AE                 LDA ($AE),Y
09751  400A  C9 FF                 CMP #CONSOLE.NULL$
09752  400C  EA                    NOP
09753  400D  EA                    NOP
09754  400E  EA                    NOP
09755  400F                        ;BEQ @DSTDONE
09756  400F  D0 03                 BNE @DSTCONT
09757  4011  4C 1C 40              JMP @DSTDONE
09758  4014             @DSTCONT
09759  4014  9D 21 3F              STA DISK.EXECMD.NAME,X
09760  4017  C8                    INY
09761  4018  E8                    INX
09762  4019  4C 08 40              JMP @DSTLOOP
09763  401C             @DSTDONE
09764  401C  84 25                 STY DISK.EXECMD2.LEN2
09765  401E             
09766  401E                        ; APPEND "="
09767  401E  A9 3D                 LDA #61
09768  4020  9D 21 3F              STA DISK.EXECMD.NAME,X
09769  4023  E8                    INX
09770  4024             
09771  4024                        ; COPY CHARACTERS FROM SRCFILENAME$ TO FILENAME
09772  4024  A5 20                 LDA DISK.EXECMD2.FILENAME1
09773  4026  85 AE                 STA $AE
09774  4028  A5 21                 LDA DISK.EXECMD2.FILENAME1+1
09775  402A  85 AF                 STA $AF
09776  402C  A0 00                 LDY #$00
09777  402E             @SRCLOOP
09778  402E  B1 AE                 LDA ($AE),Y
09779  4030  C9 FF                 CMP #CONSOLE.NULL$
09780  4032  F0 08                 BEQ @SRCDONE
09781  4034  9D 21 3F              STA DISK.EXECMD.NAME,X
09782  4037  C8                    INY
09783  4038  E8                    INX
09784  4039  4C 2E 40              JMP @SRCLOOP
09785  403C             @SRCDONE
09786  403C  84 24                 STY DISK.EXECMD2.LEN1
09787  403E             
09788  403E                        ; LEN = DSTLEN + SRCLEN + 3(C0:) + 1(=)
09789  403E  A9 04                 LDA #4
09790  4040  18                    CLC
09791  4041  65 25                 ADC DISK.EXECMD2.LEN2
09792  4043  65 24                 ADC DISK.EXECMD2.LEN1
09793  4045  8D 49 3F              STA DISK.EXECMD.LEN
09794  4048             
09795  4048                        ; EXECUTE THE COMMAND
09796  4048  4C 4A 3F              JMP DISK.EXECMD
09797  404B             
09798  404B             DISK.LOADFILE.FILENAME$ = $20 ; 2 BYTES
09799  404B             DISK.LOADFILE$ 
09800  404B             
09801  404B                        ;LDA #$FE
09802  404B                        ;STA DISK.READFILE.ADDRESS$
09803  404B                        ;LDA #$BF
09804  404B                        ;STA DISK.READFILE.ADDRESS$+1
09805  404B  A9 00                 LDA #$00
09806  404D  85 22                 STA DISK.READFILE.ADDRESS$
09807  404F  A9 C0                 LDA #$C0
09808  4051  85 23                 STA DISK.READFILE.ADDRESS$+1
09809  4053  20 6E 3B              JSR DISK.READFILE$
09810  4056             
09811  4056  AD 41 3B              LDA DISK.ERROR$
09812  4059  F0 03                 BEQ @OK
09813  405B  4C 66 40              JMP @ERROR
09814  405E             
09815  405E             @OK
09816  405E                        ;JMP $C000
09817  405E  20 34 0F              JSR KERNEL.END
09818  4061  68                    PLA
09819  4062  68                    PLA
09820  4063  4C 10 0F              JMP KERNEL.BEGIN
09821  4066             
09822  4066             @ERROR
09823  4066  60                    RTS
09824  4067             
09825  4067             
09826  4067             
09827  4067             
09828  4067             
09829  4067  00         PRINTER.PREV_DEVCICE BYTE $00
09830  4068             
09831  4068  00         PRINTER.ERROR$ BYTE $00
09832  4069             PRINTERERROR.OK$ = 00
09833  4069             PRINTERERROR.OPEN_ERROR$ = 01
09834  4069             PRINTERERROR.PRINT_ERROR$ = 02
09835  4069             
09836  4069             PRINTER.CARRIAGE_RETURN$ = $0D
09837  4069             PRINTER.LINE_FEED$ = $0A
09838  4069             PRINTER.NULL$ = $FF
09839  4069             PRINTER.LOWER_CASE$ = 17
09840  4069             PRINTER.UPPER_CASE$ = 145
09841  4069             
09842  4069             PRINTER.PRINTSTR.ADDRESS$ = $20 ; 2 BYTES
09843  4069             PRINTER.PRINTSTR$ 
09844  4069             
09845  4069  A5 BA                 LDA $BA
09846  406B  8D 67 40              STA PRINTER.PREV_DEVCICE
09847  406E             
09848  406E                        ; SET DEFAULT VALUES
09849  406E  A9 00                 LDA #PRINTERERROR.OK$
09850  4070  8D 68 40              STA PRINTER.ERROR$
09851  4073             
09852  4073  A9 04                 LDA #$04      ; FILE NUMBER 4
09853  4075  A2 04                 LDX #$04      ; DEFAULT TO DEVICE 4
09854  4077  A0 04                 LDY #$04      ; SECONDARY ADDRESS 4
09855  4079  20 BA FF              JSR $FFBA     ; CALL SETLFS
09856  407C             
09857  407C  20 C0 FF              JSR $FFC0     ; CALL OPEN
09858  407F  90 08                 BCC @OK
09859  4081             
09860  4081  A9 01                 LDA #PRINTERERROR.OPEN_ERROR$
09861  4083  8D 68 40              STA PRINTER.ERROR$
09862  4086             
09863  4086  4C BD 40              JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
09864  4089             @OK
09865  4089             
09866  4089  A2 04                 LDX #$04      ; FILENUMBER 4
09867  408B  20 C9 FF              JSR $FFC9     ; CALL CHKOUT (FILE 4 NOW USED AS OUTPUT)
09868  408E             
09869  408E                        ; SET THE MEMORY ADDRESS
09870  408E  A5 20                 LDA PRINTER.PRINTSTR.ADDRESS$
09871  4090  85 AE                 STA $AE
09872  4092  A5 21                 LDA PRINTER.PRINTSTR.ADDRESS$+1
09873  4094  85 AF                 STA $AF
09874  4096             
09875  4096             @LOOP
09876  4096  A0 00                 LDY #$00
09877  4098  A2 08                 LDX #$08
09878  409A  20 B7 FF              JSR $FFB7     ; CALL READST (READ STATUS BYTE)
09879  409D                        ;;BNE @EOF      ; EITHER EOF OR READ ERROR
09880  409D                        ;BEQ @CONT
09881  409D  4C A8 40              JMP @CONT
09882  40A0             @WRITEERROR 
09883  40A0             
09884  40A0  A9 02                 LDA #PRINTERERROR.PRINT_ERROR$
09885  40A2  8D 68 40              STA PRINTER.ERROR$
09886  40A5             
09887  40A5  4C BD 40              JMP @CLOSE
09888  40A8                        
09889  40A8             @CONT
09890  40A8  B1 AE                 LDA ($AE),Y   ; GET BYTE FROM MEMORY
09891  40AA  C9 FF                 CMP #PRINTER.NULL$
09892  40AC  D0 03                 BNE @CHROUT
09893  40AE  4C BD 40              JMP @CLOSE
09894  40B1             
09895  40B1             @CHROUT
09896  40B1  20 D2 FF              JSR $FFD2     ; CALL CHROUT (WRITE BYTE TO FILE)
09897  40B4             
09898  40B4                        ;NOP
09899  40B4                        ;NOP
09900  40B4             @INC_MEM
09901  40B4                        ; INCREMENT MEMORY ADDRESS
09902  40B4  E6 AE                 INC $AE
09903  40B6  D0 02                 BNE @SKIP2
09904  40B8  E6 AF                 INC $AF
09905  40BA             @SKIP2     
09906  40BA             
09907  40BA  4C 96 40              JMP @LOOP     ; NEXT BYTE
09908  40BD             
09909  40BD             @CLOSE
09910  40BD  A9 04                 LDA #$04      ; FILENUMBER 4
09911  40BF  20 C3 FF              JSR $FFC3     ; CALL CLOSE
09912  40C2             
09913  40C2  20 CC FF              JSR $FFCC     ; CALL CLRCHN
09914  40C5             
09915  40C5  AD 67 40              LDA PRINTER.PREV_DEVCICE
09916  40C8  85 BA                 STA $BA
09917  40CA             
09918  40CA  60                    RTS
09919  40CB             
09920  40CB             
09921  40CB             
09922  40CB             
09923  40CB             
09924  40CB             
09925  40CB  00         MOUSE.OLDX BYTE $00
09926  40CC  00         MOUSE.OLDY BYTE $00
09927  40CD             
09928  40CD             MOUSE.GETSTATE.LEFTBUTTON$ = $7A ; 1 BYTE
09929  40CD             MOUSE.GETSTATE.RIGHTBUTTON$ = $7B ; 1 BYTE
09930  40CD             MOUSE.GETSTATE.DELTAX$ = $7C ; 1 BYTE
09931  40CD             MOUSE.GETSTATE.DELTAY$ = $7D ; 1 BYTE
09932  40CD             MOUSE.GETSTATE$ 
09933  40CD                        ;HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:C_1351_STANDARD_MOUSE_ROUTINE
09934  40CD             
09935  40CD  A9 10                 LDA #%00010000
09936  40CF  20 FD 40              JSR MOUSE.BUTTONCHECK
09937  40D2  85 7A                 STA MOUSE.GETSTATE.LEFTBUTTON$
09938  40D4             
09939  40D4  A9 01                 LDA #%00000001
09940  40D6  20 FD 40              JSR MOUSE.BUTTONCHECK
09941  40D9  85 7B                 STA MOUSE.GETSTATE.RIGHTBUTTON$
09942  40DB             
09943  40DB  AD 19 D4              LDA $D419
09944  40DE                        ;LSR  //CCS64 FIX (REMOVE FOR OTHER EMUS/REAL HW)
09945  40DE  AC CB 40              LDY MOUSE.OLDX
09946  40E1  20 0E 41              JSR MOUSE.MOVECHECK
09947  40E4  8C CB 40              STY MOUSE.OLDX
09948  40E7  85 7C                 STA MOUSE.GETSTATE.DELTAX$
09949  40E9             
09950  40E9  AD 1A D4              LDA $D41A
09951  40EC                        ;LSR  //CCS64 FIX (REMOVE FOR OTHER EMUS/REAL HW)
09952  40EC  AC CC 40              LDY MOUSE.OLDY
09953  40EF  20 0E 41              JSR MOUSE.MOVECHECK
09954  40F2  8C CC 40              STY MOUSE.OLDY
09955  40F5  38                    SEC  ; MODIFY Y POSITION ( DECREASE Y FOR INCREASE IN POT )
09956  40F6  49 FF                 EOR #$FF
09957  40F8  69 00                 ADC #$00
09958  40FA  85 7D                 STA MOUSE.GETSTATE.DELTAY$
09959  40FC             
09960  40FC  60                    RTS
09961  40FD             
09962  40FD             MOUSE.BUTTONCHECK.BUTTONMASK = $7E ; 1 BYTE
09963  40FD             MOUSE.BUTTONCHECK 
09964  40FD  85 7E                 STA MOUSE.BUTTONCHECK.BUTTONMASK
09965  40FF             
09966  40FF  AD 01 DC              LDA $DC01 ; PORT 1
09967  4102  25 7E                 AND MOUSE.BUTTONCHECK.BUTTONMASK
09968  4104  C5 7E                 CMP MOUSE.BUTTONCHECK.BUTTONMASK
09969  4106                        
09970  4106  D0 03                 BNE @SETBTN
09971  4108  A9 00                 LDA #$00
09972  410A  60                    RTS
09973  410B             
09974  410B             @SETBTN
09975  410B  A9 01                 LDA #$01
09976  410D  60                    RTS
09977  410E             
09978  410E             MOUSE.MOVECHECK.OLDDELTA = $7E ; 1 BYTE
09979  410E             MOUSE.MOVECHECK.NEWDELTA = $7F ; 1 BYTE
09980  410E             MOUSE.MOVECHECK 
09981  410E  84 7E                 STY MOUSE.MOVECHECK.OLDDELTA
09982  4110  85 7F                 STA MOUSE.MOVECHECK.NEWDELTA
09983  4112  A2 00                 LDX #0
09984  4114             
09985  4114  38                    SEC
09986  4115  E5 7E                 SBC MOUSE.MOVECHECK.OLDDELTA
09987  4117  29 7F                 AND #%01111111
09988  4119  C9 40                 CMP #%01000000
09989  411B  B0 06                 BCS @MOVCHK1
09990  411D  4A                    LSR
09991  411E  F0 10                 BEQ @MOVCHK2
09992  4120  A4 7F                 LDY MOUSE.MOVECHECK.NEWDELTA
09993  4122  60                    RTS
09994  4123             
09995  4123             @MOVCHK1
09996  4123  09 C0                 ORA #%11000000
09997  4125  C9 FF                 CMP #$FF
09998  4127  F0 07                 BEQ @MOVCHK2
09999  4129  38                    SEC
10000  412A  6A                    ROR
10001  412B  A2 FF                 LDX #$FF
10002  412D  A4 7F                 LDY MOUSE.MOVECHECK.NEWDELTA
10003  412F  60                    RTS
10004  4130             @MOVCHK2
10005  4130  A9 00                 LDA #0
10006  4132  60                    RTS
10007  4133             
10008  4133             
10009  4133             
10010  4133             
10011  4133             
10012  4133  00         SERIAL.PREV_DEVICE BYTE $00
10013  4134  00         SERIAL.DISCARD_BYTE$ BYTE $00 ; SET TO ONE TO HAVE THE FIRST FIRST OF EACH SEND/RECV CALL TO BE DISCARDED
10014  4135  00         SERIAL.RECV_EOT$ BYTE $00 ; SET TO ONE TO HAVE THE RECV ROUTINE WAIT FOR THE EOT BYTE - CHR$(13)
10015  4136  00         SERIAL.SEND_EOT$ BYTE $00 ; SET TO ONE TO HAVE THE SEND ROUTINE TO SEND THE EOT BYTE - CHR$(13)
10016  4137             
10017  4137             SERIAL.EOT$ = $FF
10018  4137             SERIAL.SKIP = $FE
10019  4137             ;SERIAL.EOT2    = $7F
10020  4137             ;SERIAL.SKIP2   = $7E
10021  4137             ;SERIAL.ARGS    TEXT 08, 00 ; 1200 BAUDRATE, NO PARITY, 8 DATABITS, 1 STOPBIT, DTR NOT ENABLED, RTS NOT ENABLED, NO HANDSHAKE
10022  4137             ;SERIAL.ARGS    TEXT 08
10023  4137  08         SERIAL.BAUD$ BYTE $08 ; 1200
10024  4138                        ; SEE HTTPS://WWW.COMMODORE.CA/MANUALS/C64_PROGRAMMERS_REFERENCE/C64-PROGRAMMERS_REFERENCE_GUIDE-06-INPUT_OUTPUT_GUIDE.PDF (PAGE 349)
10025  4138             ;        0 0 0 1 50 BAUD
10026  4138             ;        0 0 1 0 75
10027  4138             ;        0 0 1 1 110
10028  4138             ;        0 1 0 0 134.5
10029  4138             ;        0 1 0 1 150
10030  4138             ;        0 1 1 0 300 (6)
10031  4138             ;        0 1 1 1 600
10032  4138             ;        1 0 0 0 1200 (8)
10033  4138             ;        1 0 0 1 (1800) 2400 (9)
10034  4138             ;        1 0 1 0 2400 (10)
10035  4138             ;        1 0 1 1 3600 [NI]
10036  4138             ;        1 1 0 0 4800 [NI]
10037  4138             ;        1 1 0 1 7200 [NI)
10038  4138             ;        1 1 1 0 9600 [NI] (14)
10039  4138             ;        1 1 1 1 19200 [NI]
10040  4138             
10041  4138             ;SERIAL.OPEN$
10042  4138             
10043  4138             ;        JSR SERIAL.SET_BAUD
10044  4138             
10045  4138             ;        LDA $BA
10046  4138             ;        STA SERIAL.PREV_DEVICE
10047  4138             
10048  4138             ;        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
10049  4138             ;        LDA #$05      ; FILENUMBER 5
10050  4138             ;        ;NOP
10051  4138             ;        ;NOP
10052  4138             ;        JSR $FFC3     ; CALL CLOSE
10053  4138             ;        ;NOP
10054  4138             ;        ;NOP
10055  4138             ;        ;NOP
10056  4138             
10057  4138             ;        ;LDA #2
10058  4138             ;        LDA #1
10059  4138             ;        LDX #<SERIAL.BAUD$
10060  4138             ;        LDY #>SERIAL.BAUD$
10061  4138             ;        JSR $FFBD     ; CALL SETNAM
10062  4138             
10063  4138             ;        LDA #$05      ; FILE NUMBER 5
10064  4138             ;        LDX #$02      ; DEFAULT TO DEVICE 2
10065  4138             ;        LDY #$00      ; SECONDARY ADDRESS 0
10066  4138             ;        JSR $FFBA     ; CALL SETLFS
10067  4138             
10068  4138             ;        JSR $FFC0     ; CALL OPEN
10069  4138             
10070  4138             ;        ; SET THE RS232 INPUT TIMER
10071  4138             ;        ;POKE665,73-(PEEK(678)*30)
10072  4138             ;        LDA 678 ; 0=NTSC, 1=PAL
10073  4138             ;        BEQ @POKE_665_73
10074  4138             ;        LDA #43
10075  4138             ;        JMP @STA_665
10076  4138             ;@POKE_665_73
10077  4138             ;        LDA #73
10078  4138             ;@STA_665
10079  4138             ;        STA 665
10080  4138             
10081  4138             ;        RTS
10082  4138             
10083  4138             ;SERIAL.CLOSE$
10084  4138             ;        LDA #$05      ; FILENUMBER 5
10085  4138             ;        JSR $FFC3     ; CALL CLOSE
10086  4138             
10087  4138             ;        JSR $FFCC     ; CALL CLRCHN
10088  4138             
10089  4138             ;        LDA SERIAL.PREV_DEVICE
10090  4138             ;        STA $BA
10091  4138             
10092  4138             ;        RTS
10093  4138             
10094  4138             SERIAL.CLOSE$ 
10095  4138  A9 05                 LDA #$05      ; FILENUMBER 5
10096  413A  20 C3 FF              JSR $FFC3     ; CALL CLOSE
10097  413D             
10098  413D  20 CC FF              JSR $FFCC     ; CALL CLRCHN
10099  4140             
10100  4140  AD 33 41              LDA SERIAL.PREV_DEVICE
10101  4143  85 BA                 STA $BA
10102  4145             
10103  4145  60                    RTS
10104  4146             
10105  4146             SERIAL.SET_BAUD 
10106  4146  AD 37 41              LDA SERIAL.BAUD$
10107  4149                        
10108  4149             ;        CMP #14 ; 14 = 9600
10109  4149             ;        BNE @SET_BAUD
10110  4149             ;        JSR UP9600.INIT
10111  4149             ;@SET_BAUD
10112  4149             
10113  4149  8D 93 02              STA $0293
10114  414C  60                    RTS
10115  414D             
10116  414D             
10117  414D             SERIAL.SEND.ADDRESS$ = $22 ; 2 BYTES
10118  414D             SERIAL.SEND$ 
10119  414D             
10120  414D  A5 22                 LDA SERIAL.SEND.ADDRESS$       ; SET BUFFER ADDRESS
10121  414F  85 AE                 STA $AE
10122  4151  A5 23                 LDA SERIAL.SEND.ADDRESS$+1
10123  4153  85 AF                 STA $AF
10124  4155             
10125  4155  A2 05                 LDX #$05      ; FILENUMBER 5
10126  4157  20 C9 FF              JSR $FFC9     ; CALL CHKOUT (FILE 5 NOW USED AS OUTPUT)
10127  415A             
10128  415A             @SEND
10129  415A             
10130  415A  AD 34 41              LDA SERIAL.DISCARD_BYTE$
10131  415D  F0 05                 BEQ @NO_DISCARD
10132  415F  A9 FE                 LDA #SERIAL.SKIP
10133  4161  20 D2 FF              JSR $FFD2     ; THROW AWAY FIRST BYTE
10134  4164             @NO_DISCARD 
10135  4164             
10136  4164  A0 00                 LDY #$00
10137  4166             @WLOOP     
10138  4166  B1 AE                 LDA ($AE),Y   ; GET BYTE FROM MEMORY
10139  4168             
10140  4168  C9 FF                 CMP #SERIAL.EOT$
10141  416A  D0 0D                 BNE @WJSR
10142  416C  AD 36 41              LDA SERIAL.SEND_EOT$
10143  416F  F0 11                 BEQ @WEND
10144  4171  A9 0D                 LDA #13
10145  4173  20 D2 FF              JSR $FFD2
10146  4176  4C 82 41              JMP @WEND
10147  4179             @WJSR
10148  4179  20 D2 FF              JSR $FFD2     ; CALL CHROUT (WRITE BYTE TO FILE)
10149  417C                        
10150  417C                        ;CMP #SERIAL.EOT$
10151  417C                        ;BEQ @WEND
10152  417C             
10153  417C                        ;LDA SERIAL.CHECK_FOR_EOT$
10154  417C                        ;BEQ @WEND
10155  417C             
10156  417C  C8                    INY
10157  417D  F0 03                 BEQ @WEND
10158  417F  4C 66 41              JMP @WLOOP
10159  4182             @WEND
10160  4182             
10161  4182  A2 03                 LDX #$03      ; FILENUMBER 3 (SCREEN OUTPUT)
10162  4184  20 C9 FF              JSR $FFC9     ; CALL CHKOUT (FILE 3 NOW USED AS OUTPUT)
10163  4187             
10164  4187  60                    RTS
10165  4188             
10166  4188             SERIAL.RECV.ADDRESS$ = $22 ; 2 BYTES
10167  4188  00         SERIAL.RECV.FIRST_BYTE BYTE $00
10168  4189             SERIAL.RECV$ 
10169  4189             
10170  4189  A5 22                 LDA SERIAL.RECV.ADDRESS$       ; SET BUFFER ADDRESS
10171  418B  85 AE                 STA $AE
10172  418D  A5 23                 LDA SERIAL.RECV.ADDRESS$+1
10173  418F  85 AF                 STA $AF
10174  4191             
10175  4191  A9 00                 LDA #$00
10176  4193  8D 88 41              STA SERIAL.RECV.FIRST_BYTE
10177  4196                        
10178  4196  A2 05                 LDX #$05      ; FILENUMBER 5
10179  4198  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 5 NOW USED AS INPUT)
10180  419B                        
10181  419B                        ;LDA $0297 ; IS THE RS-232 INPUT BUFFER EMPTY OR STOP BIT PRESENT
10182  419B                        ;AND #%00001010
10183  419B                        ;BEQ @BUFFER_OK
10184  419B                        ;JMP @DONE
10185  419B             
10186  419B             @BUFFER_OK 
10187  419B             
10188  419B  AD 34 41              LDA SERIAL.DISCARD_BYTE$
10189  419E  F0 03                 BEQ @NO_DISCARD
10190  41A0  20 CF FF              JSR $FFCF     ; THROW AWAY FIRST BYTE
10191  41A3             @NO_DISCARD 
10192  41A3             
10193  41A3  A0 00                 LDY #$00
10194  41A5             @RLOOP     
10195  41A5             
10196  41A5  AD 88 41              LDA SERIAL.RECV.FIRST_BYTE
10197  41A8  D0 03                 BNE @CHRIN_WAIT
10198  41AA  4C B6 41              JMP @CHRIN_NO_WAIT
10199  41AD             
10200  41AD             @CHRIN_WAIT 
10201  41AD  20 CF FF              JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
10202  41B0  EE 88 41              INC SERIAL.RECV.FIRST_BYTE
10203  41B3  4C CA 41              JMP @CHIN_DONE
10204  41B6             
10205  41B6             @CHRIN_NO_WAIT 
10206  41B6                        ;JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
10207  41B6  20 4E F1              JSR $F14E
10208  41B9             
10209  41B9  AA                    TAX
10210  41BA  AD 97 02              LDA $0297
10211  41BD                        ;AND #%00001010 ; IS THE RS-232 INPUT BUFFER EMPTY OR STOP BIT PRESENT
10212  41BD  29 08                 AND #%00001000 ; IS THE RS-232 INPUT BUFFER EMPTY
10213  41BF  F0 08                 BEQ @BUFFER_OK2
10214  41C1             
10215  41C1  AD 35 41              LDA SERIAL.RECV_EOT$
10216  41C4  D0 F0                 BNE @CHRIN_NO_WAIT
10217  41C6             
10218  41C6  4C DF 41              JMP @DONE
10219  41C9             @BUFFER_OK2 
10220  41C9             
10221  41C9                        ;LDA #$01
10222  41C9                        ;STA SERIAL.RECV.FIRST_BYTE
10223  41C9  8A                    TXA
10224  41CA             
10225  41CA             @CHIN_DONE 
10226  41CA             
10227  41CA             ;        CMP #13
10228  41CA             ;        BNE @RJSR
10229  41CA             ;        LDA #SERIAL.EOT$
10230  41CA             ;@RJSR
10231  41CA             
10232  41CA                        ;BEQ @REND    ; NO DATA
10233  41CA             
10234  41CA  91 AE                 STA ($AE),Y   ; WRITE BYTE TO MEMORY
10235  41CC             
10236  41CC  C9 0A                 CMP #10
10237  41CE  D0 05                 BNE @RINC
10238  41D0  AD 35 41              LDA SERIAL.RECV_EOT$
10239  41D3  D0 06                 BNE @REND
10240  41D5                        ;CMP #SERIAL.EOT2
10241  41D5                        ;BEQ @REND
10242  41D5             
10243  41D5                        ;LDA SERIAL.WAIT_FOR_EOT$
10244  41D5                        ;BEQ @DONE
10245  41D5             
10246  41D5             @RINC
10247  41D5  C8                    INY
10248  41D6  F0 07                 BEQ @DONE
10249  41D8  4C A5 41              JMP @RLOOP     ; NEXT BYTE
10250  41DB             @REND
10251  41DB  A9 FF                 LDA #SERIAL.EOT$
10252  41DD  91 AE                 STA ($AE),Y
10253  41DF             
10254  41DF             @DONE
10255  41DF  A2 03                 LDX #$03      ; FILENUMBER 3
10256  41E1  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 3 NOW USED AS INPUT)
10257  41E4             
10258  41E4  60                    RTS
10259  41E5             
10260  41E5             
10261  41E5             
10262  41E5             
10263  41E5             *=$5000
10264  5000             
10265  5000             CONVERT.STR2ASCII.STR$ = $E0 ; 2 BYTES
10266  5000             CONVERT.STR2ASCII$ 
10267  5000             
10268  5000  A5 E0                 LDA CONVERT.STR2ASCII.STR$
10269  5002  85 AE                 STA $AE
10270  5004  A5 E1                 LDA CONVERT.STR2ASCII.STR$+1
10271  5006  85 AF                 STA $AF
10272  5008             
10273  5008             @SKIP
10274  5008             
10275  5008  A0 00                 LDY #$00
10276  500A             @LOOP
10277  500A  B1 AE                 LDA ($AE),Y
10278  500C             
10279  500C  C9 FF                 CMP #CONSOLE.NULL$
10280  500E  F0 03                 BEQ @NULL_YES
10281  5010  4C 16 50              JMP @NULL_NO
10282  5013             @NULL_YES
10283  5013  4C 50 50              JMP @DONE
10284  5016             @NULL_NO
10285  5016             
10286  5016  C9 FE                 CMP #CONSOLE.NEWLINE$
10287  5018  F0 03                 BEQ @NEWLINE_YES
10288  501A  4C 22 50              JMP @NEWLINE_NO
10289  501D             @NEWLINE_YES 
10290  501D  A9 0D                 LDA #13
10291  501F  4C 42 50              JMP @NEXTCHAR
10292  5022             @NEWLINE_NO 
10293  5022             
10294  5022  C9 FD                 CMP #CONSOLE.BACKSPACE$
10295  5024  F0 03                 BEQ @BACKSPACE_YES
10296  5026  4C 2E 50              JMP @BACKSPACE_NO
10297  5029             @BACKSPACE_YES 
10298  5029             
10299  5029  A9 14                 LDA #20
10300  502B             
10301  502B  4C 42 50              JMP @NEXTCHAR
10302  502E             @BACKSPACE_NO 
10303  502E             
10304  502E  C9 01                 CMP #$01
10305  5030  B0 03                 BCS @ALPHA1 ; A >= $01
10306  5032  4C 42 50              JMP @NOTALPHA1
10307  5035             @ALPHA1
10308  5035  C9 1B                 CMP #$1B
10309  5037  90 03                 BCC @ALPHA2 ; A < $1B
10310  5039  4C 42 50              JMP @NOTALPHA2
10311  503C             @ALPHA2
10312  503C  18                    CLC
10313  503D                        ;ADC #$40
10314  503D  69 60                 ADC #$60
10315  503F  4C 42 50              JMP @NEXTCHAR
10316  5042             @NOTALPHA1 
10317  5042             @NOTALPHA2 
10318  5042             
10319  5042             ;        CMP #$41
10320  5042             ;        BCS @ALPHA12 ; A >= $41
10321  5042             ;        JMP @NOTALPHA12
10322  5042             ;@ALPHA12
10323  5042             ;        CMP #$5B
10324  5042             ;        BCC @ALPHA22 ; A < $5B
10325  5042             ;        JMP @NOTALPHA22
10326  5042             ;@ALPHA22
10327  5042             ;        CLC
10328  5042             ;        ADC #$20
10329  5042             ;        JMP @NEXTCHAR
10330  5042             ;@NOTALPHA12
10331  5042             ;@NOTALPHA22
10332  5042             
10333  5042             @NEXTCHAR
10334  5042  91 AE                 STA ($AE),Y
10335  5044             
10336  5044  E6 AE                 INC $AE
10337  5046  F0 03                 BEQ @INC_AF
10338  5048  4C 0A 50              JMP @LOOP
10339  504B             @INC_AF
10340  504B  E6 AF                 INC $AF
10341  504D  4C 0A 50              JMP @LOOP
10342  5050             
10343  5050             @DONE
10344  5050             
10345  5050  A9 FF                 LDA #$FF
10346  5052  91 AE                 STA ($AE),Y
10347  5054             
10348  5054  60                    RTS
10349  5055             
10350  5055             CONVERT.ASCII2STR.ASCII$ = $E0 ; 2 BYTES
10351  5055             CONVERT.ASCII2STR$ 
10352  5055             
10353  5055  A5 E0                 LDA CONVERT.ASCII2STR.ASCII$
10354  5057  85 AE                 STA $AE
10355  5059  A5 E1                 LDA CONVERT.ASCII2STR.ASCII$+1
10356  505B  85 AF                 STA $AF
10357  505D             
10358  505D             @SKIP
10359  505D             
10360  505D  A0 00                 LDY #$00
10361  505F             @LOOP
10362  505F  B1 AE                 LDA ($AE),Y
10363  5061             
10364  5061  C9 FF                 CMP #$FF
10365  5063  F0 03                 BEQ @NULL_YES
10366  5065  4C 6B 50              JMP @NULL_NO
10367  5068             @NULL_YES
10368  5068  4C B1 50              JMP @DONE
10369  506B             @NULL_NO
10370  506B             
10371  506B  C9 0A                 CMP #10
10372  506D  F0 03                 BEQ @SKIP_YES
10373  506F  4C 77 50              JMP @SKIP_NO
10374  5072             @SKIP_YES
10375  5072  A5 00                 LDA '-'
10376  5074  4C A3 50              JMP @NEXTCHAR
10377  5077             @SKIP_NO
10378  5077             
10379  5077  C9 0D                 CMP #13
10380  5079  F0 03                 BEQ @NEWLINE_YES
10381  507B  4C 83 50              JMP @NEWLINE_NO
10382  507E             @NEWLINE_YES 
10383  507E  A9 FE                 LDA #CONSOLE.NEWLINE$
10384  5080  4C A3 50              JMP @NEXTCHAR
10385  5083             @NEWLINE_NO 
10386  5083             
10387  5083  C9 14                 CMP #20
10388  5085  F0 03                 BEQ @BACKSPACE_YES
10389  5087  4C 8F 50              JMP @BACKSPACE_NO
10390  508A             @BACKSPACE_YES 
10391  508A             
10392  508A             ;        LDA #CONSOLE.BACKSPACE$
10393  508A             ;        STA CONSOLE.WRITECHR.CHAR$
10394  508A             ;        JSR CONSOLE.WRITECHR$
10395  508A             
10396  508A             ;        LDA #' '
10397  508A             ;        STA CONSOLE.WRITECHR.CHAR$
10398  508A             ;        JSR CONSOLE.WRITECHR$
10399  508A             
10400  508A  A9 FD                 LDA #CONSOLE.BACKSPACE$
10401  508C             
10402  508C  4C A3 50              JMP @NEXTCHAR
10403  508F             @BACKSPACE_NO 
10404  508F             
10405  508F             ;        CMP #$41
10406  508F             ;        BCS @ALPHA1 ; A >= $41
10407  508F             ;        JMP @NOTALPHA1
10408  508F             ;@ALPHA1
10409  508F             ;        CMP #$5B
10410  508F             ;        BCC @ALPHA2 ; A < $5B
10411  508F             ;        JMP @NOTALPHA2
10412  508F             ;@ALPHA2
10413  508F             ;        SEC
10414  508F             ;        SBC #$40
10415  508F             ;        JMP @NEXTCHAR
10416  508F             ;@NOTALPHA1
10417  508F             ;@NOTALPHA2
10418  508F             
10419  508F  C9 61                 CMP #$61
10420  5091  B0 03                 BCS @ALPHA12 ; A >= $61
10421  5093  4C A3 50              JMP @NOTALPHA12
10422  5096             @ALPHA12
10423  5096  C9 7B                 CMP #$7B
10424  5098  90 03                 BCC @ALPHA22 ; A < $7B
10425  509A  4C A3 50              JMP @NOTALPHA22
10426  509D             @ALPHA22
10427  509D  38                    SEC
10428  509E                        ;SBC #$20
10429  509E  E9 60                 SBC #$60
10430  50A0  4C A3 50              JMP @NEXTCHAR
10431  50A3             @NOTALPHA12 
10432  50A3             @NOTALPHA22 
10433  50A3             
10434  50A3             @NEXTCHAR
10435  50A3  91 AE                 STA ($AE),Y
10436  50A5             
10437  50A5  E6 AE                 INC $AE
10438  50A7  F0 03                 BEQ @INC_AF
10439  50A9  4C 5F 50              JMP @LOOP
10440  50AC             @INC_AF
10441  50AC  E6 AF                 INC $AF
10442  50AE  4C 5F 50              JMP @LOOP
10443  50B1             
10444  50B1             @DONE
10445  50B1             
10446  50B1  A9 FF                 LDA #CONSOLE.NULL$
10447  50B3  91 AE                 STA ($AE),Y
10448  50B5             
10449  50B5  60                    RTS
10450  50B6             
10451  50B6             
10452  50B6             ;ALIGN $100 ; ALIGN THE MAIN ENTRY POINT
10453  50B6             *=$C000
10454  C000             
10455  C000                        
10456  C000             

******* 300 Label(s) *******
audio._digioff = $3B09 
audio._digion = $3AB7 
audio.beep$ = $38D2 
audio.digi_nib = $3AE3 
audio.digi_s1 = $3AF2 
audio.digi_s2 = $3AFC 
audio.digi_SK1 = $3AE1 
audio.digid418nmi = $3ABF 
audio.digiend$ = $39EF 
audio.digiendaddress$ = $39D5 
audio.digifinished$ = $39D9 
audio.digiinit$ = $39F8 
audio.digioff$ = $3A5B 
audio.digion$ = $3A43 
audio.digiplay$ = $3A84 
audio.digisamplerate$ = $39D7 
audio.digistart$ = $39DA 
audio.digistartaddress$ = $39D3 
audio.digistophi = $3AC6 
audio.digistoplo = $3ACC 
audio.getvoiceaddress = $387D 
audio.setattackdecay$ = $38A3 
audio.setfrequency$ = $38BF 
audio.setsustainrelease$ = $38B1 
audio.setvolume$ = $3877 
audio.setwaveform$ = $3895 
audio.sid_init = $391D 
audio.sid_off = $394B 
audio.sid_on = $392C 
audio.sid_play = $3991 
audio.sidend$ = $390F 
audio.sidfinished$ = $3900 
audio.sidinitaddress$ = $38FC 
audio.sidoff = $39D2 
audio.sidon = $39A4 
audio.sidplayaddress$ = $38FE 
audio.sidstart$ = $3903 
audio.sidtimer$ = $3901 
console.calc_currentaddress = $13C4 
console.caretchar$ = $1872 
console.caretstartaddress = $1873 
console.charactercolor = $12F4 
console.charactersinverted = $12F5 
console.clear$ = $1376 
console.currentaddress = $12EE 
console.currentcoloraddr = $12F2 
console.currentcolumn = $12F0 
console.currentrow = $12F1 
console.dec_memaddress = $1626 
console.dec_memaddress.dec_currentcolumn = $1690 
console.dec_memaddress.dec_currentrow = $168D 
console.dec_memaddress.end = $1693 
console.dec_memaddress.reset_lr = $166F 
console.end = $1335 
console.getcolumn$ = $13B5 
console.getkey = $1A6A 
console.getkey.Buffer = $1803 
console.getkey.BufferEmpty = $1B9D 
console.getkey.BufferOld = $1800 
console.getkey.BufferQuantity = $1807 
console.getkey.ControlPort = $1A66 
console.getkey.Exist = $1B80 
console.getkey.KeyFound = $1A3C 
console.getkey.KeyInRow = $1A04 
console.getkey.KeyTable = $1BC0 
console.getkey.KeyTableShift$ = $1809 
console.getkey.loop1 = $1A86 
console.getkey.loop2 = $1B5E 
console.getkey.NoActivityDetected = $1A54 
console.getkey.OverFlow = $1A4C 
console.getkey.Return = $1B9F 
console.getkey.SimultaneousAlphanumericKeysFlag = $1808 
console.getkey.TooManyNewKeys = $1BB4 
console.getrow$ = $13A6 
console.inc_memaddress = $15A5 
console.inc_memaddress.end = $1622 
console.inc_memaddress.inc_currentcolumn = $161F 
console.inc_memaddress.inc_currentrow = $161C 
console.inc_memaddress.inc_currentrow_skip = $1600 
console.inc_memaddress.reset_lr = $15F1 
console.readchr = $1882 
console.readchr$ = $1876 
console.readchr.caret = $16CE 
console.readchr.prev_chr = $1875 
console.readgen = $1969 
console.readgen.SkipAllowChr = $19BF 
console.readint.allowedchrs = $1752 
console.readint.copymem = $17BC 
console.readint16$ = $1778 
console.readint32$ = $1796 
console.readint8$ = $175E 
console.readkey$ = $1849 
console.readstr$ = $1923 
console.resetbufaddress = $19EF 
console.scrollup$ = $142D 
console.scrollupchrs = $1463 
console.setbackgroundcolor$ = $1697 
console.setbordercolor$ = $169D 
console.setcharactercolor$ = $16B7 
console.setcharacterinverted$ = $16BD 
console.setcolumn$ = $13BB 
console.setforegroundcolor$ = $16A3 
console.setrow$ = $13AC 
console.start = $12F6 
console.writechr$ = $1519 
console.writechr.offset = $1517 
console.writeint = $1500 
console.writeint16$ = $14D7 
console.writeint32$ = $14DF 
console.writeint8$ = $14CF 
console.writeln$ = $14AF 
console.writestr$ = $14B7 
convert.ascii2str$ = $5055 
convert.dec2hex16 = $1CB9 
convert.dec2hex32 = $1D2D 
convert.dec2hex8 = $1C65 
convert.hex2dec16 = $1C1F 
convert.hex2dec32 = $1C40 
convert.hex2dec8 = $1C00 
convert.str2ascii$ = $5000 
disk.checkerror = $1F8A 
disk.copyfile$ = $3FD7 
disk.error$ = $3B41 
disk.execmd = $3F4A 
disk.execmd.filename = $3F1E 
disk.execmd.len = $3F49 
disk.execmd.name = $3F21 
disk.execmd1 = $3F7E 
disk.execmd2 = $3FE7 
disk.fileexists$ = $3D1D 
disk.format$ = $3FB2 
disk.getdiskinfo$ = $3C95 
disk.getdiskinfo._setnam = $3E3E 
disk.getdiskinfo._setnam_all = $3E3C 
disk.getdiskinfo.blocksfree$ = $3C93 
disk.getdiskinfo.filename = $3C7F 
disk.getdiskinfo.label$ = $3C82 
disk.getdiskinfo.reset = $3E3C 
disk.getfileinfo$ = $3DCE 
disk.getfileinfo.blocks$ = $3DA9 
disk.getfileinfo.buf1 = $3DAA 
disk.getfileinfo.buf2 = $3DBF 
disk.getfileinfo.buf3 = $3DC4 
disk.getfileinfo.cbm = $3DA5 
disk.getfileinfo.cbm2 = $3DA7 
disk.getfileinfo.extension = $3DC1 
disk.getfileinfo.filename = $3DAD 
disk.getfileinfo.len = $3DA3 
disk.getfileinfo.name$ = $3DAF 
disk.getfileinfo.offset = $3DA4 
disk.getfileinfo.type$ = $3DC8 
disk.getfileinfo.typemap = $3DC9 
disk.getfileinfoclose$ = $3D4D 
disk.getnextfileinfo$ = $3E7D 
disk.loadfile$ = $404B 
disk.readerrorchannel = $3C2F 
disk.readerrorchannel.errordec = $3C2D 
disk.readfile = $3BA1 
disk.readfile$ = $3B6E 
disk.renamefile$ = $3FDF 
disk.reset$ = $1FA9 
disk.reset.string = $1FA7 
disk.scratchfile = $3FCF 
disk.scratchfile$ = $3FBA 
disk.setnam = $3B42 
disk.validate$ = $1F9A 
disk.writefile$ = $3D56 
djr0 = $3B24 
djr1 = $3B28 
djr2 = $3B2C 
djr3 = $3B30 
djrrb = $3B1C 
graphics.clear$ = $2EC7 
graphics.createtable = $2F83 
graphics.currentaddress = $2DBF 
graphics.currentcoloraddr = $2DC1 
graphics.drawbox$ = $33F6 
graphics.drawchr = $2FCA 
graphics.drawcircle$ = $3483 
graphics.drawfill$ = $3135 
graphics.drawline$ = $3184 
graphics.end = $2EA6 
graphics.enter$ = $2DC4 
graphics.getspriteandmask = $3778 
graphics.getspritecolor$ = $37FC 
graphics.getspritelocation$ = $3846 
graphics.getspriteormask = $3765 
graphics.hidesprite$ = $378C 
graphics.isactive$ = $2DC3 
graphics.leave$ = $2DC8 
graphics.plotcircle = $359C 
graphics.scrollup = $30AC 
graphics.setbitmapmode$ = $2DCC 
graphics.setcolor$ = $2EB0 
graphics.sethiresmode$ = $2E0E 
graphics.setmulticolormode$ = $2E37 
graphics.setpixel$ = $3107 
graphics.setspritecolor$ = $37EC 
graphics.setspritehires$ = $37A7 
graphics.setspritelocation$ = $380E 
graphics.setspritemulticolor$ = $379B 
graphics.settextmode$ = $2E7E 
graphics.showsprite$ = $3780 
graphics.start = $2E96 
graphics.stretchspritehorizontally$ = $37B6 
graphics.stretchspritevertically$ = $37D1 
graphics.tablecreated = $2F82 
graphics.unstretchspritehorizontally$ = $37C2 
graphics.unstretchspritevertically$ = $37DD 
joystick.getstate$ = $3B0A 
kernel.begin = $0F10 
kernel.debugmode$ = $0F08 
kernel.end = $0F34 
kernel.halt$ = $0F49 
kernel.reset$ = $1F84 
kernel.start = $0F1A 
math.abs16$ = $2A73 
math.add16$ = $2800 
math.add24$ = $280E 
math.add32$ = $2822 
math.cmp16$ = $28E4 
math.cmp32$ = $2900 
math.dec16$ = $28BE 
math.divide16$ = $2A00 
math.divide32$ = $2A26 
math.divide8$ = $29DA 
math.exponent8$ = $2A90 
math.inc16$ = $283C 
math.inc24$ = $2862 
math.multiply16$ = $2967 
math.multiply32$ = $298D 
math.multiply8$ = $2948 
math.random16$ = $2926 
math.random8$ = $2917 
math.subtract16$ = $2896 
math.subtract32$ = $28A4 
memory.allocate$ = $109D 
memory.allocate.dec_length = $115A 
memory.allocate.find = $1176 
memory.allocate.inc_address = $1244 
memory.allocate.inc_length = $113E 
memory.backupzp = $0F61 
memory.calculate_free = $12CC 
memory.copy$ = $0F8A 
memory.copy16$ = $0F9C 
memory.deallocate$ = $1287 
memory.end = $0F5A 
memory.endheap$ = $1097 
memory.fill$ = $1003 
memory.fill16$ = $1015 
memory.free$ = $1063 
memory.heapadress = $105D 
memory.heapadress_lr = $105F 
memory.heapstarted = $1067 
memory.pullregs$ = $104D 
memory.pullzp$ = $1F31 
memory.pushregs$ = $1037 
memory.pushzp$ = $1F1B 
memory.restorezp = $0F6E 
memory.sizeof$ = $1260 
memory.start = $0F56 
memory.startheap$ = $1068 
memory.swap$ = $0FC0 
memory.swap16$ = $0FD7 
memory.total$ = $1061 
memory.used$ = $1065 
mouse.buttoncheck = $40FD 
mouse.getstate$ = $40CD 
mouse.movecheck = $410E 
mouse.oldx = $40CB 
mouse.oldy = $40CC 
printer.error$ = $4068 
printer.prev_devcice = $4067 
printer.printstr$ = $4069 
serial.baud$ = $4137 
serial.close$ = $4138 
serial.discard_byte$ = $4134 
serial.open$ = $1FC8 
serial.prev_device = $4133 
serial.recv$ = $4189 
serial.recv.first_byte = $4188 
serial.recv_eot$ = $4135 
serial.send$ = $414D 
serial.send_eot$ = $4136 
serial.set_baud = $4146 
string.concat$ = $2D11 
string.contains$ = $2C0D 
string.copy$ = $2BCF 
string.create$ = $2AAD 
string.create.dec_length = $2B1F 
string.create.inc_length = $2B03 
string.getlength$ = $2B72 
string.getlength_GetNullChar = $2B8D 
string.getlength_GetSizeOf = $2BA8 
string.indexof$ = $2C43 
string.isequal$ = $1F46 
string.isheap$ = $2B3B 
time.getticks$ = $1DD5 
time.halt$ = $1EA5 
time.wait$ = $1EB9 

******* 90 Unused label(s) *******
@again
@Alpha1
@Alpha12
@Alpha2
@Alpha22
@AtMax
@BackSpace_No
@BackSpace_No
@BackSpace_Yes
@BackSpace_Yes
@BackSpaced
@backup
@buffer_ok
@buffer_ok2
@CharOk
@CharOK
@check_blocks
@check_counter
@check_mem
@check_size
@check_y_x
@CheckSpecial
@chin_done
@chrin_no_wait
@chrin_wait
@chrout
@clear_lr
@ClearCarret
@ClearValue
@ClearXHi
@ClearXHi
@close
@close
@close
@close
@close
@cont
@cont
@cont
@cont
@cont
@cont2
@continue
@Continue
@copylow
@d_neg
@d_not_neg
@d_pos
@DigitOk
@DigitOk
@DigitOk
@div10_16
@div10_32
@div10_8
@divloop
@do_backspace
@do_newline
@doAdd
@DoCheck
@doEor
@doEor
@done
@done
@done
@done
@done
@done
@done
@done
@done
@Done
@Done
@Done
@Done
@Done
@Done
@Done
@done2
@DrawLine
@DrawPixelXY
@DrawPixelYX
@dstcont
@dstdone
@dstloop
@end
@end
@end
@end
@end
@end
@end
@end
@end
@end
@End
@End
@End
@End
@End
@End
@End
@End
@End
@End
@End2
@enterLoop
@eof
@eof
@eof
@error
@error
@error
@error
@error
@Factor
@Factor
@Factor
@FileExistOk
@FileExistOk
@FileExistOk
@FileExists
@FileExists
@FileScratched
@filllow
@find
@fire
@fname_cont
@fname_done
@fname_loop
@fname_loop2
@found
@FoundStr
@ftype_cont
@ftype_cont2
@ftype_done
@ftype_loop
@get_first_file
@GetSizeOf
@getstate
@Halt
@HideCaret
@inc_af
@inc_af
@inc_counter
@inc_mem
@IncY
@IncY
@init_mem
@InitAddresses
@isequal
@l
@l1
@l2
@l3
@l3
@l3
@l4
@l4
@l4
@LengthOK
@lenok
@LenOk
@LenOk
@LenOk
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@loop_lr
@loop1
@loop1
@Loop1
@loop2
@loop2
@loop2
@Loop2
@Loop3
@lowZero
@movchk1
@movchk2
@NeedToCreate
@NewLine_No
@NewLine_No
@NewLine_Yes
@NewLine_Yes
@next_mem
@NextChar
@NextChar
@NextDigit
@NextDigit
@NextDigit
@no_cont
@no_discard
@no_discard
@noEor
@noEor
@NoFoundStr
@NoMatchChr
@NotAlpha1
@NotAlpha12
@NotAlpha2
@NotAlpha22
@noteof
@NoValidInput
@Null_No
@Null_No
@Null_Yes
@Null_Yes
@nz
@ok
@ok
@ok
@ok
@ok
@ok
@ok
@ok
@ok2
@ok2
@OkToDrawChr
@OkToScrollUp
@OkToStart
@poke_665_73
@port1
@port2
@ProcessLoop
@ProcessYError2
@ProcessYError2_1
@readerror
@readerror
@ReadKey
@ReadKey
@ReadKey_skip
@ReadKeyOk
@rend
@reset_counter
@reset_lr
@restore
@ReturnBackSpace
@ReturnNull
@rinc
@rloop
@rotate_r
@scratchok
@send
@set
@Set
@SetBtn
@setfire
@setnam_specific
@SetValue
@SetXHi
@SetXHi
@SetY_Offset1
@shift_r
@ShiftPressed
@ShowCarret
@SK
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip_check_d
@Skip_No
@Skip_Yes
@skip0
@skip1
@Skip1
@skip2
@skip2
@skip2
@skip2
@Skip2
@SkipChar
@SkipCLI
@SkipDrawPixel
@SkipFactor
@SkipFactor
@SkipFactor
@SkipFillStr
@SkipProcessLoop
@SkipProcessYError2
@SkipSetY_Offset
@SkipSwapX1X2_Y1Y2
@SkipSwapX1Y1_X2Y2
@SkipWriteChr
@SMC1
@srcdone
@srcloop
@sta_665
@swaplow
@SwapX1X2_Y1Y2
@SwapX1Y1_X2Y2
@unset
@wend
@wjsr
@wloop
@write_mem
@write_mem_ok1
@write_mem_ok2
@writeerror
audio.beep$
audio.digi_nib
audio.digid418nmi
audio.digiend$
audio.digiendaddress$
audio.digisamplerate$
audio.digistart$
audio.digistartaddress$
audio.digistophi
audio.digistoplo
audio.setattackdecay$
audio.setsustainrelease$
audio.setwaveform$
audio.sidend$
audio.sidinitaddress$
audio.sidplayaddress$
audio.sidstart$
console.dec_memaddress.reset_lr
console.getcolumn$
console.getrow$
console.inc_memaddress.end
console.readchr$
console.readint16$
console.readint32$
console.readint8$
console.readstr$
console.setcharactercolor$
console.setcolumn$
console.setforegroundcolor$
console.setrow$
console.writeint16$
console.writeint32$
console.writeint8$
console.writeln$
console.writestr$
convert.ascii2str$
convert.str2ascii$
disk.copyfile$
disk.format$
disk.getdiskinfo$
disk.getfileinfo.buf1
disk.getfileinfo.buf2
disk.getfileinfo.buf3
disk.getfileinfo.cbm2
disk.loadfile$
disk.readerrorchannel.errordec
disk.renamefile$
disk.scratchfile$
disk.validate$
disk.writefile$
djrrb
graphics.drawbox$
graphics.drawcircle$
graphics.drawfill$
graphics.enter$
graphics.getspritecolor$
graphics.getspritelocation$
graphics.hidesprite$
graphics.leave$
graphics.setmulticolormode$
graphics.setspritecolor$
graphics.setspritehires$
graphics.setspritelocation$
graphics.setspritemulticolor$
graphics.showsprite$
graphics.stretchspritehorizontally$
graphics.stretchspritevertically$
graphics.unstretchspritehorizontally$
graphics.unstretchspritevertically$
joystick.getstate$
kernel.halt$
kernel.reset$
math.divide16$
math.divide8$
math.inc24$
math.random16$
math.random8$
math.subtract32$
memory.deallocate$
memory.swap16$
mouse.getstate$
printer.printstr$
serial.close$
serial.open$
serial.recv$
serial.send$
string.concat$
string.contains$
string.copy$
string.isequal$

******* 486 Variable(s) *******
audio._digiabuffer  = $3B06
audio._digiybuffer  = $3B08
audio.attackhigh$  = $0080
audio.attacklow$  = $0020
audio.attacklowest$  = $0010
audio.attackmedium$  = $0040
audio.decayhigh$  = $0008
audio.decaylow$  = $0002
audio.decaylowest$  = $0001
audio.decaymedium$  = $0004
audio.digidb  = $0000
audio.digipoint  = $0032
audio.digisoundptr  = $0030
audio.digitable  = $39D3
audio.getvoiceaddress.address  = $0074
audio.getvoiceaddress.voice  = $0073
audio.noiseoff$  = $0080
audio.noiseon$  = $0081
audio.pulseoff$  = $0040
audio.pulseon$  = $0041
audio.releasehigh$  = $0008
audio.releaselow$  = $0002
audio.releaselowest$  = $0001
audio.releasemedium$  = $0004
audio.sawtoothoff$  = $0020
audio.sawtoothon$  = $0021
audio.setattackdecay.value$  = $0075
audio.setattackdecay.voice$  = $0073
audio.setfrequency.frequency$  = $0075
audio.setfrequency.voice$  = $0073
audio.setsustainrelease.value$  = $0075
audio.setsustainrelease.voice$  = $0073
audio.setvolume.value$  = $0073
audio.setwaveform.value$  = $0075
audio.setwaveform.voice$  = $0073
audio.sidabuff  = $39CD
audio.sidaddress  = $D400
audio.sidafterinijmp  = $392A
audio.sidafterplayjmp  = $39B5
audio.sidxbuff  = $39D1
audio.sidybuff  = $39CF
audio.sustainhigh$  = $0080
audio.sustainlow$  = $0020
audio.sustainlowest$  = $0010
audio.sustainmedium$  = $0040
audio.triangleoff$  = $0010
audio.triangleon$  = $0011
audio.voice1$  = $0001
audio.voice2$  = $0002
audio.voice3$  = $0003
audio.volumeaddress  = $D418
color.black$  = $0000
color.blue$  = $0006
color.brown$  = $0009
color.cyan$  = $0003
color.darkgrey$  = $000B
color.green$  = $0005
color.grey$  = $000C
color.lightblue$  = $000E
color.lightgreen$  = $000D
color.lightgrey$  = $000F
color.lightred$  = $000A
color.orange$  = $0008
color.purple$  = $0004
color.red$  = $0002
color.white$  = $0001
color.yellow$  = $0007
console.backspace$  = $00FD
console.calc_currentaddress.sum  = $0074
console.charmapaddress  = $2000
console.coloraddress  = $D800
console.coloraddress_lr  = $DBC0
console.getcolumn.column$  = $0073
console.getkey.BufferNew  = $007B
console.getkey.KeyQuantity  = $007E
console.getkey.MaxKeyRollover  = $0003
console.getkey.NonAlphaFlagX  = $007F
console.getkey.NonAlphaFlagY  = $0080
console.getkey.ScanResult  = $0073
console.getkey.SimultaneousKeys  = $0082
console.getkey.TempZP  = $0081
console.getrow.row$  = $0073
console.memoryaddress  = $0400
console.memoryaddress_lr  = $07C0
console.newline$  = $00FE
console.null$  = $00FF
console.quote$  = $0027
console.readchr.caretaddress  = $00D9
console.readchr.char$  = $00D0
console.readchr.milliseconds  = $00D4
console.readchr.togglecaret  = $00D8
console.readgen.allowedchrs  = $00EB
console.readgen.char  = $00EE
console.readgen.maxlen  = $00EA
console.readgen.skipchr  = $00ED
console.readint16.integer$  = $007A
console.readint32.integer$  = $007A
console.readint8.integer$  = $007A
console.readkey.char$  = $00D0
console.readkey.char.invalid$  = $00FF
console.readkey.processorstate  = $00DB
console.readkey.shift1$  = $00D1
console.readkey.shift1.f1$  = $0010
console.readkey.shift1.f3$  = $0020
console.readkey.shift1.f5$  = $0040
console.readkey.shift1.f7$  = $0008
console.readkey.shift1.insert_delete$  = $0001
console.readkey.shift1.left_right$  = $0004
console.readkey.shift1.return$  = $0002
console.readkey.shift1.up_down$  = $0080
console.readkey.shift2$  = $00D2
console.readkey.shift2.clear_home$  = $0008
console.readkey.shift2.commodore$  = $0020
console.readkey.shift2.control$  = $0004
console.readkey.shift2.left_shift$  = $0040
console.readkey.shift2.right_shift$  = $0010
console.readkey.shift2.run_stop$  = $0080
console.readkey.state$  = $00D3
console.readkey.state.awaiting_no_activity$  = $0005
console.readkey.state.control_port_1$  = $0002
console.readkey.state.multiplekeys$  = $0004
console.readkey.state.no_activity$  = $0001
console.readkey.state.ok$  = $0000
console.readkey.state.shadowing$  = $0003
console.readstr.bufaddress  = $0900
console.readstr.length  = $00FB
console.readstr.straddress$  = $007A
console.setbackgroundcolor.color$  = $0073
console.setbordercolor.color$  = $0073
console.setcharactercolor.color$  = $0073
console.setcharacterinverted.value$  = $0073
console.setcolumn.column$  = $0073
console.setforegroundcolor.color$  = $0073
console.setrow.row$  = $0073
console.writechr.address  = $00FB
console.writechr.char$  = $0002
console.writeint16.integer$  = $00E0
console.writeint32.integer$  = $00E0
console.writeint8.integer$  = $00E0
console.writestr.straddress$  = $00E0
convert.ascii2str.ascii$  = $00E0
convert.dec2hex.len  = $002A
convert.dec2hex.value  = $00E4
convert.dec2hex16.int  = $00FB
convert.dec2hex16.len  = $002A
convert.dec2hex16.offset  = $0052
convert.dec2hex16.result  = $00E0
convert.dec2hex16.value  = $00E4
convert.dec2hex32.int  = $00FB
convert.dec2hex32.len  = $002A
convert.dec2hex32.offset  = $0052
convert.dec2hex32.result  = $00E0
convert.dec2hex32.value  = $00E4
convert.dec2hex8.int  = $00FB
convert.dec2hex8.len  = $002A
convert.dec2hex8.offset  = $0052
convert.dec2hex8.result  = $00E0
convert.dec2hex8.value  = $00E4
convert.hex2dec.result  = $00E4
convert.hex2dec16.result  = $00E4
convert.hex2dec16.value  = $00E0
convert.hex2dec32.result  = $00E4
convert.hex2dec32.value  = $00E0
convert.hex2dec8.result  = $00E4
convert.hex2dec8.value  = $00E0
convert.str2ascii.str$  = $00E0
disk.copyfile.dstfilename$  = $0022
disk.copyfile.srcfilename$  = $0020
disk.execmd1.filename  = $0020
disk.execmd2.filename1  = $0020
disk.execmd2.filename2  = $0022
disk.execmd2.len1  = $0024
disk.execmd2.len2  = $0025
disk.fileexists.exists$  = $0026
disk.fileexists.filename$  = $0020
disk.format.labelname$  = $0020
disk.getfileinfo.filename$  = $0020
disk.loadfile.filename$  = $0020
disk.readfile.address$  = $0022
disk.readfile.filename$  = $0020
disk.readfile.length$  = $0024
disk.renamefile.newfilename$  = $0022
disk.renamefile.oldfilename$  = $0020
disk.scratchfile.filename$  = $0020
disk.setnam.filename$  = $0020
disk.writefile.address$  = $0022
disk.writefile.filename$  = $0020
disk.writefile.length$  = $0024
diskerror.block_header_not_found$  = $0014
diskerror.byte_decode_error$  = $0018
diskerror.checksum_error$  = $0017
diskerror.checksum_error_header$  = $001B
diskerror.cmd_file_not_found$  = $0027
diskerror.data_block_not_present$  = $0016
diskerror.data_extends_block$  = $001C
diskerror.device_not_present$  = $0005
diskerror.directory_error$  = $0047
diskerror.disk_directory_full$  = $0048
diskerror.disk_id_mismatch$  = $001D
diskerror.drive_not_ready$  = $004A
diskerror.file_exists$  = $003F
diskerror.file_not_found$  = $003E
diskerror.file_not_open$  = $003D
diskerror.file_open$  = $0002
diskerror.file_open_for_write$  = $003C
diskerror.file_scratched$  = $0001
diskerror.file_too_large$  = $0034
diskerror.file_type_mismatch$  = $0040
diskerror.general_syntax_error$  = $001E
diskerror.illegal_device_number$  = $0009
diskerror.illegal_sys_track_sector$  = $0043
diskerror.illegal_track_sector$  = $0042
diskerror.invalid_command$  = $001F
diskerror.invalid_filename$  = $0021
diskerror.long_line$  = $0020
diskerror.missing_file_name$  = $0008
diskerror.no_block$  = $0041
diskerror.no_channels$  = $0046
diskerror.no_file_given$  = $0022
diskerror.not_input_file$  = $0006
diskerror.not_output_file$  = $0007
diskerror.ok$  = $0000
diskerror.out_of_data$  = $000D
diskerror.out_of_memory$  = $0010
diskerror.overflow_in_rcd$  = $0033
diskerror.power_up$  = $0049
diskerror.rcd_not_present$  = $0032
diskerror.sync_char_not_found$  = $0015
diskerror.write_protect_on$  = $001A
diskerror.write_verify_error$  = $0019
diskfiletypes.del$  = $0005
diskfiletypes.none$  = $0000
diskfiletypes.prg$  = $0001
diskfiletypes.rel$  = $0004
diskfiletypes.seq$  = $0002
diskfiletypes.usr$  = $0003
firstnibble  = $0000
font.memoryaddress  = $2000
graphics.bitmapcoloraddress  = $7F40
graphics.BitMask  = $0D00
graphics.BitMask_address  = $0D00
graphics.coloraddress  = $4400
graphics.drawbox.color$  = $0024
graphics.drawbox.x1$  = $0025
graphics.drawbox.x2$  = $0029
graphics.drawbox.y1$  = $0027
graphics.drawbox.y2$  = $002B
graphics.drawchr.bmpaddress  = $0022
graphics.drawchr.chr  = $0028
graphics.drawchr.chraddress  = $0020
graphics.drawchr.col_offset  = $0024
graphics.drawchr.row_offset  = $0026
graphics.drawcircle.color$  = $0024
graphics.drawcircle.d  = $002E
graphics.drawcircle.radius$  = $0025
graphics.drawcircle.x  = $002A
graphics.drawcircle.xcenter$  = $0026
graphics.drawcircle.y  = $002C
graphics.drawcircle.ycenter$  = $0028
graphics.drawfill.color$  = $0024
graphics.drawfill.x1$  = $0025
graphics.drawfill.x2$  = $0029
graphics.drawfill.y  = $002D
graphics.drawfill.y1$  = $0027
graphics.drawfill.y2$  = $002B
graphics.drawline.color$  = $0024
graphics.drawline.derror2  = $00E8
graphics.drawline.dx  = $00D8
graphics.drawline.dx_2  = $00EE
graphics.drawline.dy  = $00DA
graphics.drawline.error2  = $00EA
graphics.drawline.steep  = $00DC
graphics.drawline.x  = $00E0
graphics.drawline.x1$  = $00D0
graphics.drawline.x1_x2  = $00E4
graphics.drawline.x2$  = $00D4
graphics.drawline.y  = $00E2
graphics.drawline.y_offset  = $00EC
graphics.drawline.y1$  = $00D2
graphics.drawline.y1_y2  = $00E6
graphics.drawline.y2$  = $00D6
graphics.getspriteandmask.number  = $0073
graphics.getspritecolor.address  = $0075
graphics.getspritecolor.color$  = $0074
graphics.getspritecolor.number$  = $0073
graphics.getspritelocation.address  = $0078
graphics.getspritelocation.number$  = $0073
graphics.getspritelocation.x$  = $0074
graphics.getspritelocation.y$  = $0076
graphics.getspriteormask.number  = $0073
graphics.hidesprite.number$  = $0073
graphics.imageaddress$  = $6000
graphics.memoryaddress  = $6000
graphics.memoryaddress_2r  = $6140
graphics.memoryaddress_lr  = $7E00
graphics.multibgcoloraddress  = $D021
graphics.multibgcolorfile  = $8710
graphics.multicoloraddress  = $D800
graphics.multicolorfile  = $8328
graphics.multivideoaddress  = $4400
graphics.multivideofile  = $7F40
graphics.setpixel.color$  = $0024
graphics.setpixel.x$  = $0020
graphics.setpixel.y$  = $0022
graphics.setspritecolor.address  = $0075
graphics.setspritecolor.color$  = $0074
graphics.setspritecolor.number$  = $0073
graphics.setspritehires.number$  = $0073
graphics.setspritelocation.address  = $0078
graphics.setspritelocation.number$  = $0073
graphics.setspritelocation.x$  = $0074
graphics.setspritelocation.y$  = $0076
graphics.setspritemulticolor.number$  = $0073
graphics.showsprite.number$  = $0073
graphics.sprite1$  = $0001
graphics.sprite1address$  = $4200
graphics.sprite2$  = $0002
graphics.sprite2address$  = $4240
graphics.sprite3$  = $0003
graphics.sprite3address$  = $4280
graphics.sprite4$  = $0004
graphics.sprite4address$  = $42C0
graphics.sprite5$  = $0005
graphics.sprite5address$  = $4300
graphics.sprite6$  = $0006
graphics.sprite6address$  = $4340
graphics.sprite7$  = $0007
graphics.sprite7address$  = $4380
graphics.sprite8$  = $0008
graphics.sprite8address$  = $43C0
graphics.spritemulticolor1address$  = $D025
graphics.spritemulticolor2address$  = $D026
graphics.stretchspritehorizontally.number$  = $0073
graphics.stretchspritevertically.number$  = $0073
graphics.unstretchspritehorizontally.number$  = $0073
graphics.unstretchspritevertically.number$  = $0073
graphics.X_Table  = $0C00
graphics.X_Table_address  = $0C00
graphics.Y_Table_Hi  = $0B00
graphics.Y_Table_Hi_address  = $0B00
graphics.Y_Table_Lo  = $0A00
graphics.Y_Table_Lo_address  = $0A00
joystick.getstate.deltax$  = $007C
joystick.getstate.deltay$  = $007D
joystick.getstate.fire$  = $007B
joystick.getstate.port$  = $007A
joystick.port1$  = $0001
joystick.port2$  = $0002
math.abs16.integer$  = $0080
math.abs16.value$  = $0084
math.add16.addend1$  = $0080
math.add16.addend2$  = $0082
math.add16.sum$  = $0084
math.add24.addend1$  = $0080
math.add24.addend2$  = $0083
math.add24.sum$  = $0086
math.add32.addend1$  = $0080
math.add32.addend2$  = $0084
math.add32.sum$  = $0088
math.cmp16.num1$  = $0080
math.cmp16.num2$  = $0082
math.cmp32.num1$  = $0080
math.cmp32.num2$  = $0084
math.dec16.address$  = $0086
math.divide16.dividend$  = $0082
math.divide16.divisor$  = $0080
math.divide16.quotient$  = $0082
math.divide16.remainder$  = $0084
math.divide32.dividend$  = $0084
math.divide32.divisor$  = $0080
math.divide32.quotient$  = $0084
math.divide32.remainder$  = $008C
math.divide32.temp1  = $00FB
math.divide32.temp2  = $00FE
math.divide8.dividend$  = $0081
math.divide8.divisor$  = $0080
math.divide8.quotient$  = $0081
math.divide8.remainder$  = $0082
math.exponent8.base$  = $008A
math.exponent8.power$  = $008B
math.exponent8.value$  = $008C
math.inc16.address$  = $0086
math.inc24.address$  = $0086
math.multiply16.factor1$  = $0080
math.multiply16.factor2$  = $0082
math.multiply16.product$  = $0084
math.multiply32.factor1$  = $0080
math.multiply32.factor2$  = $0084
math.multiply32.product$  = $0088
math.multiply8.factor1$  = $0080
math.multiply8.factor2$  = $0082
math.multiply8.product$  = $0083
math.random16.result$  = $0080
math.random16.seed$  = $0080
math.random8.result$  = $0080
math.random8.seed$  = $0080
math.subtract16.difference$  = $0084
math.subtract16.menuend$  = $0080
math.subtract16.subtrahend$  = $0082
math.subtract32.difference$  = $0088
math.subtract32.menuend$  = $0080
math.subtract32.subtrahend$  = $0084
memory.allocate.address$  = $007A
memory.allocate.counter  = $0077
memory.allocate.found  = $0079
memory.allocate.length$  = $0075
memory.backupzpaddress  = $0E00
memory.copy.destination$  = $0075
memory.copy.length$  = $0077
memory.copy.source$  = $0073
memory.copy16.destination$  = $0075
memory.copy16.length$  = $0078
memory.copy16.source$  = $0073
memory.deallocate.address$  = $007A
memory.fill.address$  = $0073
memory.fill.length$  = $0076
memory.fill.value$  = $0075
memory.fill16.address$  = $0073
memory.fill16.length$  = $0077
memory.fill16.value$  = $0075
memory.sizeof.address$  = $007A
memory.sizeof.length$  = $007C
memory.swap.address1$  = $0073
memory.swap.address2$  = $0075
memory.swap.length$  = $0077
memory.swap.temp  = $0079
memory.swap16.address1$  = $0073
memory.swap16.address2$  = $0075
memory.swap16.length$  = $0077
memory.swap16.temp  = $0079
mouse.buttoncheck.buttonmask  = $007E
mouse.getstate.deltax$  = $007C
mouse.getstate.deltay$  = $007D
mouse.getstate.leftbutton$  = $007A
mouse.getstate.rightbutton$  = $007B
mouse.movecheck.newdelta  = $007F
mouse.movecheck.olddelta  = $007E
nonibbles  = $0000
printer.carriage_return$  = $000D
printer.line_feed$  = $000A
printer.lower_case$  = $0011
printer.null$  = $00FF
printer.printstr.address$  = $0020
printer.upper_case$  = $0091
printererror.ok$  = $0000
printererror.open_error$  = $0001
printererror.print_error$  = $0002
serial.eot$  = $00FF
serial.recv.address$  = $0022
serial.send.address$  = $0022
serial.skip  = $00FE
string.concat.address  = $00EA
string.concat.dstaddress$  = $007A
string.concat.dstlength  = $00E8
string.concat.srcaddress1$  = $00E0
string.concat.srcaddress2$  = $00E2
string.concat.srclength1  = $00E4
string.concat.srclength2  = $00E6
string.contains.address1$  = $007A
string.contains.address2$  = $007C
string.contains.value$  = $0073
string.copy.dstaddress$  = $007A
string.copy.srcaddress$  = $007E
string.create.address$  = $007A
string.create.address_lr  = $00FD
string.create.character$  = $0002
string.create.length$  = $00FB
string.getlength.address$  = $007A
string.getlength.length$  = $00FB
string.indexof.address1$  = $007A
string.indexof.address1_org  = $00FB
string.indexof.address2$  = $007C
string.indexof.address2_org  = $00FD
string.indexof.chr1  = $0073
string.indexof.chr2  = $0074
string.indexof.index$  = $007E
string.isequal.address1$  = $007A
string.isequal.address2$  = $007C
string.isequal.char  = $007D
string.isequal.value$  = $007E
string.isheap.address$  = $007A
string.isheap.heap$  = $0073
tgt_c64  = $0001
time.getticks.result$  = $0073
time.wait.milliseconds$  = $0077
withsidplayer  = $0000
******* -171 Unused variables(s) *******
audio.attackhigh$
audio.attacklow$
audio.attacklowest$
audio.attackmedium$
audio.decayhigh$
audio.decaylow$
audio.decaylowest$
audio.decaymedium$
audio.digidb
audio.noiseoff$
audio.noiseon$
audio.pulseoff$
audio.pulseon$
audio.releasehigh$
audio.releaselow$
audio.releaselowest$
audio.releasemedium$
audio.sawtoothoff$
audio.sawtoothon$
audio.setattackdecay.voice$
audio.setsustainrelease.voice$
audio.setwaveform.voice$
audio.sidaddress
audio.sustainhigh$
audio.sustainlow$
audio.sustainlowest$
audio.sustainmedium$
audio.triangleoff$
audio.triangleon$
color.blue$
color.brown$
color.cyan$
color.darkgrey$
color.green$
color.grey$
color.lightblue$
color.lightgreen$
color.lightgrey$
color.lightred$
color.orange$
color.purple$
color.red$
color.yellow$
console.getkey.ScanResult
console.quote$
console.readkey.shift1.f1$
console.readkey.shift1.f3$
console.readkey.shift1.f5$
console.readkey.shift1.f7$
console.readkey.shift1.left_right$
console.readkey.shift1.up_down$
console.readkey.shift2.clear_home$
console.readkey.shift2.commodore$
console.readkey.shift2.control$
console.readkey.shift2.run_stop$
console.readkey.state.awaiting_no_activity$
console.readkey.state.control_port_1$
console.readkey.state.multiplekeys$
console.readkey.state.no_activity$
console.readkey.state.shadowing$
console.writeint16.integer$
console.writeint32.integer$
console.writeint8.integer$
console.writestr.straddress$
convert.dec2hex.value
convert.dec2hex16.value
convert.dec2hex32.value
convert.dec2hex8.value
convert.hex2dec.result
convert.hex2dec16.result
convert.hex2dec32.result
convert.hex2dec8.result
disk.copyfile.dstfilename$
disk.copyfile.srcfilename$
disk.fileexists.filename$
disk.format.labelname$
disk.loadfile.filename$
disk.renamefile.newfilename$
disk.renamefile.oldfilename$
disk.scratchfile.filename$
disk.writefile.filename$
diskerror.block_header_not_found$
diskerror.byte_decode_error$
diskerror.checksum_error$
diskerror.checksum_error_header$
diskerror.cmd_file_not_found$
diskerror.data_block_not_present$
diskerror.data_extends_block$
diskerror.device_not_present$
diskerror.directory_error$
diskerror.disk_directory_full$
diskerror.disk_id_mismatch$
diskerror.drive_not_ready$
diskerror.file_exists$
diskerror.file_not_open$
diskerror.file_open$
diskerror.file_open_for_write$
diskerror.file_too_large$
diskerror.file_type_mismatch$
diskerror.general_syntax_error$
diskerror.illegal_device_number$
diskerror.illegal_sys_track_sector$
diskerror.illegal_track_sector$
diskerror.invalid_command$
diskerror.invalid_filename$
diskerror.long_line$
diskerror.missing_file_name$
diskerror.no_block$
diskerror.no_channels$
diskerror.no_file_given$
diskerror.not_input_file$
diskerror.not_output_file$
diskerror.out_of_data$
diskerror.out_of_memory$
diskerror.overflow_in_rcd$
diskerror.power_up$
diskerror.rcd_not_present$
diskerror.sync_char_not_found$
diskerror.write_protect_on$
diskerror.write_verify_error$
diskfiletypes.del$
diskfiletypes.prg$
diskfiletypes.rel$
diskfiletypes.seq$
diskfiletypes.usr$
firstnibble
graphics.bitmapcoloraddress
graphics.BitMask
graphics.BitMask_address
graphics.drawbox.color$
graphics.drawcircle.color$
graphics.drawfill.color$
graphics.imageaddress$
graphics.multicoloraddress
graphics.multicolorfile
graphics.multivideoaddress
graphics.multivideofile
graphics.sprite1$
graphics.sprite1address$
graphics.sprite2$
graphics.sprite2address$
graphics.sprite3$
graphics.sprite3address$
graphics.sprite4$
graphics.sprite4address$
graphics.sprite5$
graphics.sprite5address$
graphics.sprite6$
graphics.sprite6address$
graphics.sprite7$
graphics.sprite7address$
graphics.sprite8$
graphics.sprite8address$
graphics.spritemulticolor1address$
graphics.spritemulticolor2address$
graphics.X_Table
graphics.X_Table_address
graphics.Y_Table_Hi
graphics.Y_Table_Hi_address
graphics.Y_Table_Lo
graphics.Y_Table_Lo_address
joystick.port2$
math.divide8.quotient$
math.inc24.address$
math.random16.result$
memory.backupzpaddress
memory.swap16.address1$
memory.swap16.address2$
nonibbles
printer.carriage_return$
printer.line_feed$
printer.lower_case$
printer.upper_case$
tgt_c64
withsidplayer

