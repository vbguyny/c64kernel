00001  0000             ; KERNEL FOR THE C64
00002  0001             ; ZP ADDRESS THAT ARE SAFE TO USE: $02; $2A; $52; $73-$90; $FB-$FE;
00003  0001             
00004  0001             CHARSET    2 ; UPPER/LOWER CASED CHARACTERS
00005  0001                        
00006  0001             ;; SYS 3840
00007  0001             ;;#REGION BASIC START UP CODE
00008  0001             ;;; ; 10 POKE 2303, 1
00009  0001             ;;; 20 SYS (2304)
00010  0001             ;;; 30 NEW
00011  0001             ;;*=$0801
00012  0001             ;;        ;BYTE    $0E, $08, $0A, $00, $97, $20, $32, $33, $30, $33, $2C, $20, $31, $00 ; 10 POKE 2303, 1
00013  0001             ;;        ;BYTE    $0E, $08, $0A, $00, $9E, $20, $28,  $32, $30, $38, $30, $29, $00 ; 10 SYS (2080)
00014  0001             ;;        BYTE    $0E, $08, $14, $00, $9E, $20, $28,  $32, $33, $30, $34, $29, $00 ; 20 SYS (2304)
00015  0001             ;;        BYTE    $0E, $08, $1E, $00, $A2, $00 ; 30 NEW
00016  0001             ;;#ENDREGION
00017  0001             
00018  0001             
00019  0001             ;; SYS 3856
00020  0001             ;*=$0801
00021  0001             ;        BYTE    $0E, $08, $14, $00, $9E, $20, $28,  $33, $38, $35, $36, $29, $00 ; 20 SYS (3856)
00022  0001             ;        BYTE    $00, $00, $00
00023  0001             ;        ;BYTE    $0E, $08, $1E, $00, $A2, $00, $00, $00 ; 30 NEW
00024  0001             
00025  0001             ; SYS 3849
00026  0001             *=$0801
00027  0801  0E 08 14              BYTE    $0E, $08, $14, $00, $9E, $20, $28,  $33, $38, $34, $39, $29, $00 ; 20 SYS (3849)
00028  080E  00 00 00              BYTE    $00, $00, $00
00029  0811             
00030  0811             
00031  0811             ;*=$1A00
00032  0811             ;CONSOLE.READSTR.BUFADDRESS = *
00033  0811             ;INCASM "BUFFER256.ASM"
00034  0811             CONSOLE.READSTR.BUFADDRESS = $0900
00035  0811             
00036  0811             
00037  0811             
00038  0811             ;*=$1B00
00039  0811             ;GRAPHICS.Y_TABLE_LO_ADDRESS = *
00040  0811             ;INCASM "BUFFER256.ASM"
00041  0811             GRAPHICS.Y_TABLE_LO_ADDRESS = $0A00
00042  0811             ;*=$1C00
00043  0811             ;GRAPHICS.Y_TABLE_HI_ADDRESS = *
00044  0811             ;INCASM "BUFFER256.ASM"
00045  0811             GRAPHICS.Y_TABLE_HI_ADDRESS = $0B00
00046  0811             ;*=$1D00
00047  0811             ;GRAPHICS.X_TABLE_ADDRESS = *
00048  0811             ;INCASM "BUFFER256.ASM"
00049  0811             GRAPHICS.X_TABLE_ADDRESS = $0C00
00050  0811             ;*=$1E00
00051  0811             ;GRAPHICS.BITMASK_ADDRESS = *
00052  0811             ;INCASM "BUFFER256.ASM"
00053  0811             GRAPHICS.BITMASK_ADDRESS = $0D00
00054  0811             
00055  0811             
00056  0811             
00057  0811             ;*=$1F00
00058  0811             ;*=$0D00
00059  0811             ;MEMORY.BACKUPZPADDRESS
00060  0811             ;INCASM "BUFFER256.ASM"
00061  0811             MEMORY.BACKUPZPADDRESS = $0E00
00062  0811             
00063  0811             
00064  0811             
00065  0811             *=$2000
00066  2000             FONT.MEMORYADDRESS = *
00067  2000  38 44 5C              BYTE    $38,$44,$5C,$54,$5C,$40,$38,$00 ; CHARACTER 0
00068  2008  00 00 38              BYTE    $00,$00,$38,$04,$3C,$44,$3C,$00 ; CHARACTER 1
00069  2010  00 40 40              BYTE    $00,$40,$40,$78,$44,$44,$78,$00 ; CHARACTER 2
00070  2018  00 00 3C              BYTE    $00,$00,$3C,$40,$40,$40,$3C,$00 ; CHARACTER 3
00071  2020  00 04 04              BYTE    $00,$04,$04,$3C,$44,$44,$3C,$00 ; CHARACTER 4
00072  2028  00 00 38              BYTE    $00,$00,$38,$44,$7C,$40,$38,$00 ; CHARACTER 5
00073  2030  00 0C 10              BYTE    $00,$0C,$10,$3C,$10,$10,$10,$00 ; CHARACTER 6
00074  2038  00 00 3C              BYTE    $00,$00,$3C,$44,$44,$3C,$04,$78 ; CHARACTER 7
00075  2040  00 40 40              BYTE    $00,$40,$40,$78,$44,$44,$44,$00 ; CHARACTER 8
00076  2048  00 10 00              BYTE    $00,$10,$00,$30,$10,$10,$38,$00 ; CHARACTER 9
00077  2050  00 04 00              BYTE    $00,$04,$00,$04,$04,$04,$04,$38 ; CHARACTER 10
00078  2058  00 40 40              BYTE    $00,$40,$40,$58,$60,$50,$4C,$00 ; CHARACTER 11
00079  2060  00 30 10              BYTE    $00,$30,$10,$10,$10,$10,$38,$00 ; CHARACTER 12
00080  2068  00 00 68              BYTE    $00,$00,$68,$54,$54,$54,$54,$00 ; CHARACTER 13
00081  2070  00 00 78              BYTE    $00,$00,$78,$44,$44,$44,$44,$00 ; CHARACTER 14
00082  2078  00 00 38              BYTE    $00,$00,$38,$44,$44,$44,$38,$00 ; CHARACTER 15
00083  2080  00 00 78              BYTE    $00,$00,$78,$44,$44,$78,$40,$40 ; CHARACTER 16
00084  2088  00 00 3C              BYTE    $00,$00,$3C,$44,$44,$3C,$04,$04 ; CHARACTER 17
00085  2090  00 00 78              BYTE    $00,$00,$78,$44,$40,$40,$40,$00 ; CHARACTER 18
00086  2098  00 00 3C              BYTE    $00,$00,$3C,$40,$38,$04,$78,$00 ; CHARACTER 19
00087  20A0  00 10 7C              BYTE    $00,$10,$7C,$10,$10,$10,$0C,$00 ; CHARACTER 20
00088  20A8  00 00 44              BYTE    $00,$00,$44,$44,$44,$44,$3C,$00 ; CHARACTER 21
00089  20B0  00 00 44              BYTE    $00,$00,$44,$44,$44,$28,$10,$00 ; CHARACTER 22
00090  20B8  00 00 44              BYTE    $00,$00,$44,$54,$54,$54,$28,$00 ; CHARACTER 23
00091  20C0  00 00 44              BYTE    $00,$00,$44,$28,$10,$28,$44,$00 ; CHARACTER 24
00092  20C8  00 00 44              BYTE    $00,$00,$44,$44,$44,$3C,$08,$70 ; CHARACTER 25
00093  20D0  00 00 7C              BYTE    $00,$00,$7C,$08,$10,$20,$7C,$00 ; CHARACTER 26
00094  20D8  38 20 20              BYTE    $38,$20,$20,$20,$20,$20,$38,$00 ; CHARACTER 27
00095  20E0  08 14 10              BYTE    $08,$14,$10,$38,$10,$24,$78,$00 ; CHARACTER 28
00096  20E8  38 08 08              BYTE    $38,$08,$08,$08,$08,$08,$38,$00 ; CHARACTER 29
00097  20F0  00 10 38              BYTE    $00,$10,$38,$7C,$10,$10,$10,$10 ; CHARACTER 30
00098  20F8  00 10 30              BYTE    $00,$10,$30,$7F,$30,$10,$00,$00 ; CHARACTER 31
00099  2100  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00 ; CHARACTER 32
00100  2108  10 10 10              BYTE    $10,$10,$10,$10,$00,$00,$10,$00 ; CHARACTER 33
00101  2110  24 24 24              BYTE    $24,$24,$24,$00,$00,$00,$00,$00 ; CHARACTER 34
00102  2118  28 28 7C              BYTE    $28,$28,$7C,$28,$7C,$28,$28,$00 ; CHARACTER 35
00103  2120  10 3C 40              BYTE    $10,$3C,$40,$38,$04,$78,$10,$00 ; CHARACTER 36
00104  2128  44 44 08              BYTE    $44,$44,$08,$10,$20,$44,$44,$00 ; CHARACTER 37
00105  2130  30 48 30              BYTE    $30,$48,$30,$20,$54,$48,$34,$00 ; CHARACTER 38
00106  2138  04 08 10              BYTE    $04,$08,$10,$00,$00,$00,$00,$00 ; CHARACTER 39
00107  2140  08 10 20              BYTE    $08,$10,$20,$20,$20,$10,$08,$00 ; CHARACTER 40
00108  2148  20 10 08              BYTE    $20,$10,$08,$08,$08,$10,$20,$00 ; CHARACTER 41
00109  2150  00 44 28              BYTE    $00,$44,$28,$7C,$28,$44,$00,$00 ; CHARACTER 42
00110  2158  00 10 10              BYTE    $00,$10,$10,$7C,$10,$10,$00,$00 ; CHARACTER 43
00111  2160  00 00 00              BYTE    $00,$00,$00,$00,$00,$10,$10,$20 ; CHARACTER 44
00112  2168  00 00 00              BYTE    $00,$00,$00,$7C,$00,$00,$00,$00 ; CHARACTER 45
00113  2170  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$10,$00 ; CHARACTER 46
00114  2178  00 02 04              BYTE    $00,$02,$04,$08,$10,$20,$40,$00 ; CHARACTER 47
00115  2180  38 44 4C              BYTE    $38,$44,$4C,$54,$64,$44,$38,$00 ; CHARACTER 48
00116  2188  10 30 10              BYTE    $10,$30,$10,$10,$10,$10,$38,$00 ; CHARACTER 49
00117  2190  38 44 04              BYTE    $38,$44,$04,$18,$20,$40,$7C,$00 ; CHARACTER 50
00118  2198  38 44 04              BYTE    $38,$44,$04,$18,$04,$44,$38,$00 ; CHARACTER 51
00119  21A0  08 18 28              BYTE    $08,$18,$28,$48,$7C,$08,$08,$00 ; CHARACTER 52
00120  21A8  7C 40 78              BYTE    $7C,$40,$78,$04,$04,$44,$38,$00 ; CHARACTER 53
00121  21B0  38 44 40              BYTE    $38,$44,$40,$78,$44,$44,$38,$00 ; CHARACTER 54
00122  21B8  7C 44 08              BYTE    $7C,$44,$08,$10,$10,$10,$10,$00 ; CHARACTER 55
00123  21C0  38 44 44              BYTE    $38,$44,$44,$38,$44,$44,$38,$00 ; CHARACTER 56
00124  21C8  38 44 44              BYTE    $38,$44,$44,$3C,$04,$44,$38,$00 ; CHARACTER 57
00125  21D0  00 00 10              BYTE    $00,$00,$10,$00,$00,$10,$00,$00 ; CHARACTER 58
00126  21D8  00 00 10              BYTE    $00,$00,$10,$00,$00,$10,$10,$20 ; CHARACTER 59
00127  21E0  0C 10 20              BYTE    $0C,$10,$20,$40,$20,$10,$0C,$00 ; CHARACTER 60
00128  21E8  00 00 7C              BYTE    $00,$00,$7C,$00,$7C,$00,$00,$00 ; CHARACTER 61
00129  21F0  60 10 08              BYTE    $60,$10,$08,$04,$08,$10,$60,$00 ; CHARACTER 62
00130  21F8  38 44 04              BYTE    $38,$44,$04,$08,$10,$00,$10,$00 ; CHARACTER 63
00131  2200  00 00 00              BYTE    $00,$00,$00,$FF,$FF,$00,$00,$00 ; CHARACTER 64
00132  2208  10 28 44              BYTE    $10,$28,$44,$7C,$44,$44,$44,$00 ; CHARACTER 65
00133  2210  78 44 44              BYTE    $78,$44,$44,$78,$44,$44,$78,$00 ; CHARACTER 66
00134  2218  38 44 40              BYTE    $38,$44,$40,$40,$40,$44,$38,$00 ; CHARACTER 67
00135  2220  70 48 44              BYTE    $70,$48,$44,$44,$44,$48,$70,$00 ; CHARACTER 68
00136  2228  7C 40 40              BYTE    $7C,$40,$40,$78,$40,$40,$7C,$00 ; CHARACTER 69
00137  2230  7C 40 40              BYTE    $7C,$40,$40,$70,$40,$40,$40,$00 ; CHARACTER 70
00138  2238  38 44 40              BYTE    $38,$44,$40,$4C,$44,$44,$38,$00 ; CHARACTER 71
00139  2240  44 44 44              BYTE    $44,$44,$44,$7C,$44,$44,$44,$00 ; CHARACTER 72
00140  2248  38 10 10              BYTE    $38,$10,$10,$10,$10,$10,$38,$00 ; CHARACTER 73
00141  2250  1C 08 08              BYTE    $1C,$08,$08,$08,$08,$48,$30,$00 ; CHARACTER 74
00142  2258  44 48 50              BYTE    $44,$48,$50,$60,$50,$48,$44,$00 ; CHARACTER 75
00143  2260  40 40 40              BYTE    $40,$40,$40,$40,$40,$40,$7C,$00 ; CHARACTER 76
00144  2268  44 6C 54              BYTE    $44,$6C,$54,$44,$44,$44,$44,$00 ; CHARACTER 77
00145  2270  44 44 64              BYTE    $44,$44,$64,$54,$4C,$44,$44,$00 ; CHARACTER 78
00146  2278  38 44 44              BYTE    $38,$44,$44,$44,$44,$44,$38,$00 ; CHARACTER 79
00147  2280  78 44 44              BYTE    $78,$44,$44,$78,$40,$40,$40,$00 ; CHARACTER 80
00148  2288  38 44 44              BYTE    $38,$44,$44,$44,$44,$38,$0C,$00 ; CHARACTER 81
00149  2290  78 44 44              BYTE    $78,$44,$44,$78,$50,$48,$44,$00 ; CHARACTER 82
00150  2298  38 44 40              BYTE    $38,$44,$40,$38,$04,$44,$38,$00 ; CHARACTER 83
00151  22A0  7C 10 10              BYTE    $7C,$10,$10,$10,$10,$10,$10,$00 ; CHARACTER 84
00152  22A8  44 44 44              BYTE    $44,$44,$44,$44,$44,$44,$38,$00 ; CHARACTER 85
00153  22B0  44 44 44              BYTE    $44,$44,$44,$44,$44,$28,$10,$00 ; CHARACTER 86
00154  22B8  44 44 44              BYTE    $44,$44,$44,$44,$54,$6C,$44,$00 ; CHARACTER 87
00155  22C0  44 44 28              BYTE    $44,$44,$28,$10,$28,$44,$44,$00 ; CHARACTER 88
00156  22C8  44 44 44              BYTE    $44,$44,$44,$28,$10,$10,$10,$00 ; CHARACTER 89
00157  22D0  7C 04 08              BYTE    $7C,$04,$08,$10,$20,$40,$7C,$00 ; CHARACTER 90
00158  22D8  18 18 18              BYTE    $18,$18,$18,$FF,$FF,$18,$18,$18 ; CHARACTER 91
00159  22E0  C0 C0 30              BYTE    $C0,$C0,$30,$30,$C0,$C0,$30,$30 ; CHARACTER 92
00160  22E8  18 18 18              BYTE    $18,$18,$18,$18,$18,$18,$18,$18 ; CHARACTER 93
00161  22F0  33 33 CC              BYTE    $33,$33,$CC,$CC,$33,$33,$CC,$CC ; CHARACTER 94
00162  22F8  33 99 CC              BYTE    $33,$99,$CC,$66,$33,$99,$CC,$66 ; CHARACTER 95
00163  2300  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00 ; CHARACTER 96
00164  2308  F0 F0 F0              BYTE    $F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0 ; CHARACTER 97
00165  2310  00 00 00              BYTE    $00,$00,$00,$00,$FF,$FF,$FF,$FF ; CHARACTER 98
00166  2318  FF 00 00              BYTE    $FF,$00,$00,$00,$00,$00,$00,$00 ; CHARACTER 99
00167  2320  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$FF ; CHARACTER 100
00168  2328  C0 C0 C0              BYTE    $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0 ; CHARACTER 101
00169  2330  CC CC 33              BYTE    $CC,$CC,$33,$33,$CC,$CC,$33,$33 ; CHARACTER 102
00170  2338  03 03 03              BYTE    $03,$03,$03,$03,$03,$03,$03,$03 ; CHARACTER 103
00171  2340  00 00 00              BYTE    $00,$00,$00,$00,$CC,$CC,$33,$33 ; CHARACTER 104
00172  2348  CC 99 33              BYTE    $CC,$99,$33,$66,$CC,$99,$33,$66 ; CHARACTER 105
00173  2350  03 03 03              BYTE    $03,$03,$03,$03,$03,$03,$03,$03 ; CHARACTER 106
00174  2358  18 18 18              BYTE    $18,$18,$18,$1F,$1F,$18,$18,$18 ; CHARACTER 107
00175  2360  00 00 00              BYTE    $00,$00,$00,$00,$0F,$0F,$0F,$0F ; CHARACTER 108
00176  2368  18 18 18              BYTE    $18,$18,$18,$1F,$1F,$00,$00,$00 ; CHARACTER 109
00177  2370  00 00 00              BYTE    $00,$00,$00,$F8,$F8,$18,$18,$18 ; CHARACTER 110
00178  2378  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$FF,$FF ; CHARACTER 111
00179  2380  00 00 00              BYTE    $00,$00,$00,$1F,$1F,$18,$18,$18 ; CHARACTER 112
00180  2388  18 18 18              BYTE    $18,$18,$18,$FF,$FF,$00,$00,$00 ; CHARACTER 113
00181  2390  00 00 00              BYTE    $00,$00,$00,$FF,$FF,$18,$18,$18 ; CHARACTER 114
00182  2398  18 18 18              BYTE    $18,$18,$18,$F8,$F8,$18,$18,$18 ; CHARACTER 115
00183  23A0  C0 C0 C0              BYTE    $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0 ; CHARACTER 116
00184  23A8  E0 E0 E0              BYTE    $E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0 ; CHARACTER 117
00185  23B0  07 07 07              BYTE    $07,$07,$07,$07,$07,$07,$07,$07 ; CHARACTER 118
00186  23B8  FF FF 00              BYTE    $FF,$FF,$00,$00,$00,$00,$00,$00 ; CHARACTER 119
00187  23C0  FF FF FF              BYTE    $FF,$FF,$FF,$00,$00,$00,$00,$00 ; CHARACTER 120
00188  23C8  00 00 00              BYTE    $00,$00,$00,$00,$00,$FF,$FF,$FF ; CHARACTER 121
00189  23D0  00 02 04              BYTE    $00,$02,$04,$48,$50,$60,$40,$00 ; CHARACTER 122
00190  23D8  00 00 00              BYTE    $00,$00,$00,$00,$F0,$F0,$F0,$F0 ; CHARACTER 123
00191  23E0  0F 0F 0F              BYTE    $0F,$0F,$0F,$0F,$00,$00,$00,$00 ; CHARACTER 124
00192  23E8  18 18 18              BYTE    $18,$18,$18,$F8,$F8,$00,$00,$00 ; CHARACTER 125
00193  23F0  F0 F0 F0              BYTE    $F0,$F0,$F0,$F0,$00,$00,$00,$00 ; CHARACTER 126
00194  23F8  F0 F0 F0              BYTE    $F0,$F0,$F0,$F0,$0F,$0F,$0F,$0F ; CHARACTER 127
00195  2400  C6 BA A2              BYTE    $C6,$BA,$A2,$AA,$A2,$BE,$C6,$FE ; CHARACTER 128
00196  2408  FE FE C6              BYTE    $FE,$FE,$C6,$FA,$C2,$BA,$C2,$FE ; CHARACTER 129
00197  2410  FE BE BE              BYTE    $FE,$BE,$BE,$86,$BA,$BA,$86,$FE ; CHARACTER 130
00198  2418  FE FE C2              BYTE    $FE,$FE,$C2,$BE,$BE,$BE,$C2,$FE ; CHARACTER 131
00199  2420  FE FA FA              BYTE    $FE,$FA,$FA,$C2,$BA,$BA,$C2,$FE ; CHARACTER 132
00200  2428  FE FE C6              BYTE    $FE,$FE,$C6,$BA,$82,$BE,$C6,$FE ; CHARACTER 133
00201  2430  FE F2 EE              BYTE    $FE,$F2,$EE,$C2,$EE,$EE,$EE,$FE ; CHARACTER 134
00202  2438  FE FE C2              BYTE    $FE,$FE,$C2,$BA,$BA,$C2,$FA,$86 ; CHARACTER 135
00203  2440  FE BE BE              BYTE    $FE,$BE,$BE,$86,$BA,$BA,$BA,$FE ; CHARACTER 136
00204  2448  FE EE FE              BYTE    $FE,$EE,$FE,$CE,$EE,$EE,$C6,$FE ; CHARACTER 137
00205  2450  FE FA FE              BYTE    $FE,$FA,$FE,$FA,$FA,$FA,$FA,$C6 ; CHARACTER 138
00206  2458  FE BE BE              BYTE    $FE,$BE,$BE,$A6,$9E,$AE,$B2,$FE ; CHARACTER 139
00207  2460  FE CE EE              BYTE    $FE,$CE,$EE,$EE,$EE,$EE,$C6,$FE ; CHARACTER 140
00208  2468  FE FE 96              BYTE    $FE,$FE,$96,$AA,$AA,$AA,$AA,$FE ; CHARACTER 141
00209  2470  FE FE 86              BYTE    $FE,$FE,$86,$BA,$BA,$BA,$BA,$FE ; CHARACTER 142
00210  2478  FE FE C6              BYTE    $FE,$FE,$C6,$BA,$BA,$BA,$C6,$FE ; CHARACTER 143
00211  2480  FE FE 86              BYTE    $FE,$FE,$86,$BA,$BA,$86,$BE,$BE ; CHARACTER 144
00212  2488  FE FE C2              BYTE    $FE,$FE,$C2,$BA,$BA,$C2,$FA,$FA ; CHARACTER 145
00213  2490  FE FE 86              BYTE    $FE,$FE,$86,$BA,$BE,$BE,$BE,$FE ; CHARACTER 146
00214  2498  FE FE C2              BYTE    $FE,$FE,$C2,$BE,$C6,$FA,$86,$FE ; CHARACTER 147
00215  24A0  FE EE 82              BYTE    $FE,$EE,$82,$EE,$EE,$EE,$F2,$FE ; CHARACTER 148
00216  24A8  FE FE BA              BYTE    $FE,$FE,$BA,$BA,$BA,$BA,$C2,$FE ; CHARACTER 149
00217  24B0  FE FE BA              BYTE    $FE,$FE,$BA,$BA,$BA,$D6,$EE,$FE ; CHARACTER 150
00218  24B8  FE FE BA              BYTE    $FE,$FE,$BA,$AA,$AA,$AA,$D6,$FE ; CHARACTER 151
00219  24C0  FE FE BA              BYTE    $FE,$FE,$BA,$D6,$EE,$D6,$BA,$FE ; CHARACTER 152
00220  24C8  FE FE BA              BYTE    $FE,$FE,$BA,$BA,$BA,$C2,$F6,$8E ; CHARACTER 153
00221  24D0  FE FE 82              BYTE    $FE,$FE,$82,$F6,$EE,$DE,$82,$FE ; CHARACTER 154
00222  24D8  C6 DE DE              BYTE    $C6,$DE,$DE,$DE,$DE,$DE,$C6,$FE ; CHARACTER 155
00223  24E0  F6 EA EE              BYTE    $F6,$EA,$EE,$C6,$EE,$DA,$86,$FE ; CHARACTER 156
00224  24E8  C6 F6 F6              BYTE    $C6,$F6,$F6,$F6,$F6,$F6,$C6,$FE ; CHARACTER 157
00225  24F0  FE EE C6              BYTE    $FE,$EE,$C6,$82,$EE,$EE,$EE,$EE ; CHARACTER 158
00226  24F8  FE EE CE              BYTE    $FE,$EE,$CE,$80,$CE,$EE,$FE,$FE ; CHARACTER 159
00227  2500  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 160
00228  2508  EE EE EE              BYTE    $EE,$EE,$EE,$EE,$FE,$FE,$EE,$FE ; CHARACTER 161
00229  2510  DA DA DA              BYTE    $DA,$DA,$DA,$FE,$FE,$FE,$FE,$FE ; CHARACTER 162
00230  2518  D6 D6 82              BYTE    $D6,$D6,$82,$D6,$82,$D6,$D6,$FE ; CHARACTER 163
00231  2520  EE C2 BE              BYTE    $EE,$C2,$BE,$C6,$FA,$86,$EE,$FE ; CHARACTER 164
00232  2528  BA BA F6              BYTE    $BA,$BA,$F6,$EE,$DE,$BA,$BA,$FE ; CHARACTER 165
00233  2530  CE B6 CE              BYTE    $CE,$B6,$CE,$DE,$AA,$B6,$CA,$FE ; CHARACTER 166
00234  2538  FA F6 EE              BYTE    $FA,$F6,$EE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 167
00235  2540  F6 EE DE              BYTE    $F6,$EE,$DE,$DE,$DE,$EE,$F6,$FE ; CHARACTER 168
00236  2548  DE EE F6              BYTE    $DE,$EE,$F6,$F6,$F6,$EE,$DE,$FE ; CHARACTER 169
00237  2550  FE BA D6              BYTE    $FE,$BA,$D6,$82,$D6,$BA,$FE,$FE ; CHARACTER 170
00238  2558  FE EE EE              BYTE    $FE,$EE,$EE,$82,$EE,$EE,$FE,$FE ; CHARACTER 171
00239  2560  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$EE,$EE,$DE ; CHARACTER 172
00240  2568  FE FE FE              BYTE    $FE,$FE,$FE,$82,$FE,$FE,$FE,$FE ; CHARACTER 173
00241  2570  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$E6,$E6,$FE ; CHARACTER 174
00242  2578  FE FC FA              BYTE    $FE,$FC,$FA,$F6,$EE,$DE,$BE,$FE ; CHARACTER 175
00243  2580  C6 BA B2              BYTE    $C6,$BA,$B2,$AA,$9A,$BA,$C6,$FE ; CHARACTER 176
00244  2588  EE CE EE              BYTE    $EE,$CE,$EE,$EE,$EE,$EE,$C6,$FE ; CHARACTER 177
00245  2590  C6 BA FA              BYTE    $C6,$BA,$FA,$E6,$DE,$BE,$82,$FE ; CHARACTER 178
00246  2598  C6 BA FA              BYTE    $C6,$BA,$FA,$E6,$FA,$BA,$C6,$FE ; CHARACTER 179
00247  25A0  F6 E6 D6              BYTE    $F6,$E6,$D6,$B6,$82,$F6,$F6,$FE ; CHARACTER 180
00248  25A8  82 BE 86              BYTE    $82,$BE,$86,$FA,$FA,$BA,$C6,$FE ; CHARACTER 181
00249  25B0  C6 BA BE              BYTE    $C6,$BA,$BE,$86,$BA,$BA,$C6,$FE ; CHARACTER 182
00250  25B8  82 BA F6              BYTE    $82,$BA,$F6,$EE,$EE,$EE,$EE,$FE ; CHARACTER 183
00251  25C0  C6 BA BA              BYTE    $C6,$BA,$BA,$C6,$BA,$BA,$C6,$FE ; CHARACTER 184
00252  25C8  C6 BA BA              BYTE    $C6,$BA,$BA,$C2,$FA,$BA,$C6,$FE ; CHARACTER 185
00253  25D0  FE FE EE              BYTE    $FE,$FE,$EE,$FE,$FE,$EE,$FE,$FE ; CHARACTER 186
00254  25D8  FE FE EE              BYTE    $FE,$FE,$EE,$FE,$FE,$EE,$EE,$DE ; CHARACTER 187
00255  25E0  F2 EE DE              BYTE    $F2,$EE,$DE,$BE,$DE,$EE,$F2,$FE ; CHARACTER 188
00256  25E8  FE FE 82              BYTE    $FE,$FE,$82,$FE,$82,$FE,$FE,$FE ; CHARACTER 189
00257  25F0  9E EE F6              BYTE    $9E,$EE,$F6,$FA,$F6,$EE,$9E,$FE ; CHARACTER 190
00258  25F8  C6 BA FA              BYTE    $C6,$BA,$FA,$F6,$EE,$FE,$EE,$FE ; CHARACTER 191
00259  2600  FE FE FE              BYTE    $FE,$FE,$FE,$00,$00,$FE,$FE,$FE ; CHARACTER 192
00260  2608  EE D6 BA              BYTE    $EE,$D6,$BA,$82,$BA,$BA,$BA,$FE ; CHARACTER 193
00261  2610  86 BA BA              BYTE    $86,$BA,$BA,$86,$BA,$BA,$86,$FE ; CHARACTER 194
00262  2618  C6 BA BE              BYTE    $C6,$BA,$BE,$BE,$BE,$BA,$C6,$FE ; CHARACTER 195
00263  2620  8E B6 BA              BYTE    $8E,$B6,$BA,$BA,$BA,$B6,$8E,$FE ; CHARACTER 196
00264  2628  82 BE BE              BYTE    $82,$BE,$BE,$86,$BE,$BE,$82,$FE ; CHARACTER 197
00265  2630  82 BE BE              BYTE    $82,$BE,$BE,$8E,$BE,$BE,$BE,$FE ; CHARACTER 198
00266  2638  C6 BA BE              BYTE    $C6,$BA,$BE,$B2,$BA,$BA,$C6,$FE ; CHARACTER 199
00267  2640  BA BA BA              BYTE    $BA,$BA,$BA,$82,$BA,$BA,$BA,$FE ; CHARACTER 200
00268  2648  C6 EE EE              BYTE    $C6,$EE,$EE,$EE,$EE,$EE,$C6,$FE ; CHARACTER 201
00269  2650  E2 F6 F6              BYTE    $E2,$F6,$F6,$F6,$F6,$B6,$CE,$FE ; CHARACTER 202
00270  2658  BA B6 AE              BYTE    $BA,$B6,$AE,$9E,$AE,$B6,$BA,$FE ; CHARACTER 203
00271  2660  BE BE BE              BYTE    $BE,$BE,$BE,$BE,$BE,$BE,$82,$FE ; CHARACTER 204
00272  2668  BA 92 AA              BYTE    $BA,$92,$AA,$BA,$BA,$BA,$BA,$FE ; CHARACTER 205
00273  2670  BA BA 9A              BYTE    $BA,$BA,$9A,$AA,$B2,$BA,$BA,$FE ; CHARACTER 206
00274  2678  C6 BA BA              BYTE    $C6,$BA,$BA,$BA,$BA,$BA,$C6,$FE ; CHARACTER 207
00275  2680  86 BA BA              BYTE    $86,$BA,$BA,$86,$BE,$BE,$BE,$FE ; CHARACTER 208
00276  2688  C6 BA BA              BYTE    $C6,$BA,$BA,$BA,$BA,$C6,$F2,$FE ; CHARACTER 209
00277  2690  86 BA BA              BYTE    $86,$BA,$BA,$86,$AE,$B6,$BA,$FE ; CHARACTER 210
00278  2698  C6 BA BE              BYTE    $C6,$BA,$BE,$C6,$FA,$BA,$C6,$FE ; CHARACTER 211
00279  26A0  82 EE EE              BYTE    $82,$EE,$EE,$EE,$EE,$EE,$EE,$FE ; CHARACTER 212
00280  26A8  BA BA BA              BYTE    $BA,$BA,$BA,$BA,$BA,$BA,$C6,$FE ; CHARACTER 213
00281  26B0  BA BA BA              BYTE    $BA,$BA,$BA,$BA,$BA,$D6,$EE,$FE ; CHARACTER 214
00282  26B8  BA BA BA              BYTE    $BA,$BA,$BA,$BA,$AA,$92,$BA,$FE ; CHARACTER 215
00283  26C0  BA BA D6              BYTE    $BA,$BA,$D6,$EE,$D6,$BA,$BA,$FE ; CHARACTER 216
00284  26C8  BA BA BA              BYTE    $BA,$BA,$BA,$D6,$EE,$EE,$EE,$FE ; CHARACTER 217
00285  26D0  82 FA F6              BYTE    $82,$FA,$F6,$EE,$DE,$BE,$82,$FE ; CHARACTER 218
00286  26D8  E6 E6 E6              BYTE    $E6,$E6,$E6,$00,$00,$E6,$E6,$E6 ; CHARACTER 219
00287  26E0  3E 3E CE              BYTE    $3E,$3E,$CE,$CE,$3E,$3E,$CE,$CE ; CHARACTER 220
00288  26E8  E6 E6 E6              BYTE    $E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6 ; CHARACTER 221
00289  26F0  CC CC 32              BYTE    $CC,$CC,$32,$32,$CC,$CC,$32,$32 ; CHARACTER 222
00290  26F8  CC 66 32              BYTE    $CC,$66,$32,$98,$CC,$66,$32,$98 ; CHARACTER 223
00291  2700  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 224
00292  2708  0E 0E 0E              BYTE    $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E ; CHARACTER 225
00293  2710  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$00,$00,$00,$00 ; CHARACTER 226
00294  2718  00 FE FE              BYTE    $00,$FE,$FE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 227
00295  2720  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$FE,$FE,$00 ; CHARACTER 228
00296  2728  3E 3E 3E              BYTE    $3E,$3E,$3E,$3E,$3E,$3E,$3E,$3E ; CHARACTER 229
00297  2730  32 32 CC              BYTE    $32,$32,$CC,$CC,$32,$32,$CC,$CC ; CHARACTER 230
00298  2738  FC FC FC              BYTE    $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC ; CHARACTER 231
00299  2740  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$32,$32,$CC,$CC ; CHARACTER 232
00300  2748  FE 66 CC              BYTE    $FE,$66,$CC,$98,$32,$66,$CC,$98 ; CHARACTER 233
00301  2750  FE FC FC              BYTE    $FE,$FC,$FC,$FC,$FC,$FC,$FC,$FC ; CHARACTER 234
00302  2758  E6 E6 E6              BYTE    $E6,$E6,$E6,$E0,$E0,$E6,$E6,$E6 ; CHARACTER 235
00303  2760  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$F0,$F0,$F0,$F0 ; CHARACTER 236
00304  2768  E6 E6 E6              BYTE    $E6,$E6,$E6,$E0,$E0,$FE,$FE,$FE ; CHARACTER 237
00305  2770  FE FE FE              BYTE    $FE,$FE,$FE,$06,$06,$E6,$E6,$E6 ; CHARACTER 238
00306  2778  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$FE,$00,$00 ; CHARACTER 239
00307  2780  FE FE FE              BYTE    $FE,$FE,$FE,$E0,$E0,$E6,$E6,$E6 ; CHARACTER 240
00308  2788  E6 E6 E6              BYTE    $E6,$E6,$E6,$00,$00,$FE,$FE,$FE ; CHARACTER 241
00309  2790  FE FE FE              BYTE    $FE,$FE,$FE,$00,$00,$E6,$E6,$E6 ; CHARACTER 242
00310  2798  E6 E6 E6              BYTE    $E6,$E6,$E6,$06,$06,$E6,$E6,$E6 ; CHARACTER 243
00311  27A0  3E 3E 3E              BYTE    $3E,$3E,$3E,$3E,$3E,$3E,$3E,$3E ; CHARACTER 244
00312  27A8  1E 1E 1E              BYTE    $1E,$1E,$1E,$1E,$1E,$1E,$1E,$1E ; CHARACTER 245
00313  27B0  F8 F8 F8              BYTE    $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8 ; CHARACTER 246
00314  27B8  00 00 FE              BYTE    $00,$00,$FE,$FE,$FE,$FE,$FE,$FE ; CHARACTER 247
00315  27C0  00 00 00              BYTE    $00,$00,$00,$FE,$FE,$FE,$FE,$FE ; CHARACTER 248
00316  27C8  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$FE,$00,$00,$00 ; CHARACTER 249
00317  27D0  FE FC F8              BYTE    $FE,$FC,$F8,$92,$86,$8E,$9E,$FE ; CHARACTER 250
00318  27D8  FE FE FE              BYTE    $FE,$FE,$FE,$FE,$0E,$0E,$0E,$0E ; CHARACTER 251
00319  27E0  F0 F0 F0              BYTE    $F0,$F0,$F0,$F0,$FE,$FE,$FE,$FE ; CHARACTER 252
00320  27E8  E6 E6 E6              BYTE    $E6,$E6,$E6,$06,$06,$FE,$FE,$FE ; CHARACTER 253
00321  27F0  0E 0E 0E              BYTE    $0E,$0E,$0E,$0E,$FE,$FE,$FE,$FE ; CHARACTER 254
00322  27F8  0E 0E 0E              BYTE    $0E,$0E,$0E,$0E,$F0,$F0,$F0,$F0 ; CHARACTER 255
00323  2800             
00324  2800             
00325  2800             
00326  2800             
00327  2800             ;#REGION RESERVED ADDRESSES
00328  2800             ;*=$0400 ; CHARACTERS
00329  2800             ;        NOP
00330  2800             ;;*=$2000 ; CHARACTERMAP (DECLARED ABOVE)
00331  2800             ;;        NOP
00332  2800             ;*=$4200 ; SPRITE MEMORY
00333  2800             ;*=$4400 ; BITMAP COLOR MEMORY
00334  2800             ;        NOP
00335  2800             ;*=$6000 ; BITMAP DATA MEMORY (-$8FFF)
00336  2800             ;        NOP
00337  2800             ;*=$A000 ; HEAP (-$BFFF)
00338  2800             ;*=$D400 ; SOUND MEMORY
00339  2800             ;*=$C000 ; USER CODE (-$CFFF) *** NEED TO RELOCATE THE ZP BACKUP AND THE GRAPHICS CALC TABLES! ***
00340  2800             ;#ENDREGION
00341  2800             
00342  2800             ;; UP9600
00343  2800             ;*=$4800
00344  2800             ;INCASM "UP9600.ASM"
00345  2800             
00346  2800             ;*=$5E00
00347  2800             ;INCASM "T2400.ASM"
00348  2800             
00349  2800             
00350  2800             ; KERNEL ENTRY POINT
00351  2800             ;*=$2000
00352  2800             
00353  2800             ;*=$08F0
00354  2800             ;*=$0FF0
00355  2800             *=$0F00
00356  0F00                        ;LDA #$01 ; IF DEBUGGING IN CBM PRG STUDIO, UNREMARK THIS LINE
00357  0F00  A9 00                 LDA #$00 ; IF RUNNING FROM DEPACKER, UNREMARK THIS LINE
00358  0F02  8D 0B 0F              STA KERNEL.DEBUGMODE$
00359  0F05                        ;JMP KERNEL.BEGIN
00360  0F05  20 10 0F              JSR KERNEL.BEGIN
00361  0F08  20 84 1F              JSR KERNEL.RESET$
00362  0F0B             
00363  0F0B  00         KERNEL.DEBUGMODE$ BYTE $00
00364  0F0C             
00365  0F0C                        ;LDA #$00
00366  0F0C                        ;STA KERNEL.DEBUGMODE$
00367  0F0C                        ;NOP
00368  0F0C                        ;NOP
00369  0F0C  EA                    NOP
00370  0F0D  EA                    NOP
00371  0F0E  EA                    NOP
00372  0F0F             
00373  0F0F             ;*=$0900
00374  0F0F             *=$0F10
00375  0F10             KERNEL.BEGIN 
00376  0F10  20 1A 0F              JSR KERNEL.START
00377  0F13                        ;JSR MAIN
00378  0F13  20 00 C0              JSR $C000
00379  0F16  20 34 0F              JSR KERNEL.END
00380  0F19  60                    RTS
00381  0F1A                        ;BRK
00382  0F1A             
00383  0F1A             
00384  0F1A             
00385  0F1A             
00386  0F1A             COLOR.BLACK$ = $00
00387  0F1A             COLOR.WHITE$ = $01
00388  0F1A             COLOR.RED$ = $02
00389  0F1A             COLOR.CYAN$ = $03
00390  0F1A             COLOR.PURPLE$ = $04
00391  0F1A             COLOR.GREEN$ = $05
00392  0F1A             COLOR.BLUE$ = $06
00393  0F1A             COLOR.YELLOW$ = $07
00394  0F1A             COLOR.ORANGE$ = $08
00395  0F1A             COLOR.BROWN$ = $09
00396  0F1A             COLOR.LIGHTRED$ = $0A
00397  0F1A             COLOR.DARKGREY$ = $0B
00398  0F1A             COLOR.GREY$ = $0C
00399  0F1A             COLOR.LIGHTGREEN$ = $0D
00400  0F1A             COLOR.LIGHTBLUE$ = $0E
00401  0F1A             COLOR.LIGHTGREY$ = $0F
00402  0F1A             
00403  0F1A             
00404  0F1A             
00405  0F1A             ;*=$C000 ; SYS 49152
00406  0F1A             ;*=$A000 ; SYS 40960
00407  0F1A             
00408  0F1A             ;ALIGN $100
00409  0F1A             
00410  0F1A             KERNEL.START 
00411  0F1A             
00412  0F1A                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:MEMORY_MANAGEMENT
00413  0F1A  A9 36                 LDA #$36 ; BANK SWITCH BASIC ROM INTO RAM
00414  0F1C  85 01                 STA $01
00415  0F1E             
00416  0F1E                        ; DISABLES C= (COMMODORE KEY) + SHIFT WHICH SWITCHES THE CHARACTERS
00417  0F1E                        ; AND MESSES WITH THE CHARACTERS ON THE SCREEN.
00418  0F1E  A9 08                 LDA #$08
00419  0F20  20 D2 FF              JSR $FFD2
00420  0F23             
00421  0F23  20 56 0F              JSR MEMORY.START
00422  0F26             
00423  0F26                        ;$DD00 = %XXXXXX11 -> BANK0: $0000-$3FFF
00424  0F26                        ;$DD00 = %XXXXXX10 -> BANK1: $4000-$7FFF
00425  0F26                        ;$DD00 = %XXXXXX01 -> BANK2: $8000-$BFFF
00426  0F26                        ;$DD00 = %XXXXXX00 -> BANK3: $C000-$FFFF
00427  0F26                        ; DEFAULT: 10010111
00428  0F26  AD 00 DD              LDA $DD00
00429  0F29  29 FC                 AND #%11111100
00430  0F2B                        ;ORA #%00000010 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
00431  0F2B  09 03                 ORA #%00000011 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
00432  0F2D  8D 00 DD              STA $DD00
00433  0F30             
00434  0F30  20 F6 12              JSR CONSOLE.START
00435  0F33             
00436  0F33                        ;; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:MEMORY_MANAGEMENT
00437  0F33             ;        LDA #$36 ; BANK SWITCH BASIC ROM INTO RAM
00438  0F33             ;        STA $01
00439  0F33             
00440  0F33             ;CHARSET 2 ; UPPER/LOWER CASED CHARACTERS
00441  0F33             ;           LDA $D018
00442  0F33             ;           ORA #$0E       ; SET CHARS LOCATION TO $3800 FOR DISPLAYING THE CUSTOM FONT
00443  0F33             ;           STA $D018      ; BITS 1-3 ($400+512BYTES * LOW NIBBLE VALUE) OF $D018 SETS CHAR LOCATION
00444  0F33             ;                          ; $400 + $200*$0E = $3800
00445  0F33             
00446  0F33                        ;JSR MAIN
00447  0F33                        
00448  0F33             
00449  0F33                        ;; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:MEMORY_MANAGEMENT
00450  0F33             ;        LDA #$37 ; BANK SWITCH RAM BACK INTO BASIC ROM
00451  0F33             ;        STA $01
00452  0F33                        
00453  0F33                        ;JSR KERNEL.RESET
00454  0F33             
00455  0F33  60                    RTS
00456  0F34                        ;BRK
00457  0F34             
00458  0F34             KERNEL.END 
00459  0F34  20 35 13              JSR CONSOLE.END
00460  0F37             
00461  0F37                        ;$DD00 = %XXXXXX11 -> BANK0: $0000-$3FFF
00462  0F37                        ;$DD00 = %XXXXXX10 -> BANK1: $4000-$7FFF
00463  0F37                        ;$DD00 = %XXXXXX01 -> BANK2: $8000-$BFFF
00464  0F37                        ;$DD00 = %XXXXXX00 -> BANK3: $C000-$FFFF
00465  0F37  AD 00 DD              LDA $DD00
00466  0F3A  29 FC                 AND #%11111100
00467  0F3C  09 03                 ORA #%00000011 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
00468  0F3E  8D 00 DD              STA $DD00
00469  0F41             
00470  0F41  20 5A 0F              JSR MEMORY.END
00471  0F44             
00472  0F44                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:MEMORY_MANAGEMENT
00473  0F44  A9 37                 LDA #$37 ; BANK SWITCH RAM BACK INTO BASIC ROM
00474  0F46  85 01                 STA $01
00475  0F48             
00476  0F48             ;        ; RESET THE COMPUTER.
00477  0F48             ;        ; IN ORDER TO PREVENT THE DEBUGGER FROM CRASHING JUST RETURN.
00478  0F48             ;        LDA KERNEL.DEBUGMODE$
00479  0F48             ;        CMP #$01
00480  0F48             ;        BNE @RESET
00481  0F48             ;        RTS
00482  0F48             ;@RESET
00483  0F48             ;        JSR KERNEL.RESET$
00484  0F48             
00485  0F48  60                    RTS
00486  0F49             
00487  0F49             ;KERNEL.RESET$
00488  0F49             ;        JMP ($FFFC)
00489  0F49             
00490  0F49             KERNEL.HALT$ 
00491  0F49             ;        JMP KERNEL.HALT$
00492  0F49             
00493  0F49  AD 0B 0F              LDA KERNEL.DEBUGMODE$
00494  0F4C  C9 00                 CMP #$00
00495  0F4E  F0 03                 BEQ @HALT
00496  0F50  4C 00 00              JMP $0000
00497  0F53             
00498  0F53             @HALT
00499  0F53  4C 53 0F              JMP @HALT
00500  0F56             
00501  0F56             
00502  0F56             
00503  0F56             
00504  0F56             ;ALIGN $100
00505  0F56             
00506  0F56             MEMORY.START 
00507  0F56  20 61 0F              JSR MEMORY.BACKUPZP
00508  0F59                        ;JSR MEMORY.STARTHEAP
00509  0F59  60                    RTS
00510  0F5A             
00511  0F5A             MEMORY.END 
00512  0F5A  20 97 10              JSR MEMORY.ENDHEAP$
00513  0F5D  20 6E 0F              JSR MEMORY.RESTOREZP
00514  0F60  60                    RTS
00515  0F61             
00516  0F61             MEMORY.BACKUPZP 
00517  0F61                        ; BACK ZERO PAGE MEMORY
00518  0F61  A2 00                 LDX #$00
00519  0F63             @LOOP
00520  0F63  B5 00                 LDA $00,X
00521  0F65                        ;STA $E3A2,X
00522  0F65                        ;STA $CF00,X
00523  0F65  9D 00 0E              STA MEMORY.BACKUPZPADDRESS,X
00524  0F68  E8                    INX
00525  0F69  E0 FF                 CPX #$FF
00526  0F6B  D0 F6                 BNE @LOOP
00527  0F6D  60                    RTS
00528  0F6E             
00529  0F6E             MEMORY.RESTOREZP 
00530  0F6E                        ; DO NOT RESTORE THE RTC VARIABLES SO THAT THE TICKS DO NOT RESET
00531  0F6E  A5 A0                 LDA $A0
00532  0F70  8D A0 0E              STA MEMORY.BACKUPZPADDRESS+$A0
00533  0F73  A5 A1                 LDA $A1
00534  0F75  8D A1 0E              STA MEMORY.BACKUPZPADDRESS+$A1
00535  0F78  A5 A2                 LDA $A2
00536  0F7A  8D A2 0E              STA MEMORY.BACKUPZPADDRESS+$A2
00537  0F7D             
00538  0F7D                        ; BACK ZERO PAGE MEMORY
00539  0F7D  A2 00                 LDX #$00
00540  0F7F             @LOOP
00541  0F7F                        ;LDA $CF00,X
00542  0F7F  BD 00 0E              LDA MEMORY.BACKUPZPADDRESS,X
00543  0F82  95 00                 STA $00,X
00544  0F84  E8                    INX
00545  0F85  E0 FF                 CPX #$FF
00546  0F87  D0 F6                 BNE @LOOP
00547  0F89  60                    RTS
00548  0F8A             
00549  0F8A             
00550  0F8A             MEMORY.COPY.SOURCE$ = $73 ; 2 BYTES
00551  0F8A             MEMORY.COPY.DESTINATION$ = $75 ; 2 BYTES
00552  0F8A             MEMORY.COPY.LENGTH$ = $77 ; 1 BYTE
00553  0F8A             
00554  0F8A             MEMORY.COPY$ 
00555  0F8A  A5 77                 LDA MEMORY.COPY.LENGTH$
00556  0F8C  C9 00                 CMP #$00
00557  0F8E  F0 0B                 BEQ @END
00558  0F90             
00559  0F90  A0 00                 LDY #$00
00560  0F92             @LOOP
00561  0F92  B1 73                 LDA (MEMORY.COPY.SOURCE$),Y
00562  0F94  91 75                 STA (MEMORY.COPY.DESTINATION$),Y
00563  0F96  C8                    INY
00564  0F97  C4 77                 CPY MEMORY.COPY.LENGTH$
00565  0F99  D0 F7                 BNE @LOOP
00566  0F9B             @END
00567  0F9B  60                    RTS
00568  0F9C             
00569  0F9C             MEMORY.COPY16.SOURCE$ = $73 ; 2 BYTES
00570  0F9C             MEMORY.COPY16.DESTINATION$ = $75 ; 2 BYTES
00571  0F9C             MEMORY.COPY16.LENGTH$ = $78 ; 2 BYTES
00572  0F9C             
00573  0F9C             MEMORY.COPY16$ 
00574  0F9C             @LOOP
00575  0F9C  A5 79                 LDA MEMORY.COPY16.LENGTH$+1
00576  0F9E  C9 00                 CMP #$00
00577  0FA0  F0 16                 BEQ @COPYLOW
00578  0FA2             
00579  0FA2  A9 FF                 LDA #$FF
00580  0FA4  85 77                 STA MEMORY.COPY.LENGTH$
00581  0FA6  20 8A 0F              JSR MEMORY.COPY$
00582  0FA9             
00583  0FA9  A0 FF                 LDY #$FF
00584  0FAB  B1 73                 LDA (MEMORY.COPY16.SOURCE$),Y
00585  0FAD  91 75                 STA (MEMORY.COPY16.DESTINATION$),Y
00586  0FAF             
00587  0FAF  E6 74                 INC MEMORY.COPY16.SOURCE$+1
00588  0FB1  E6 76                 INC MEMORY.COPY16.DESTINATION$+1
00589  0FB3  C6 79                 DEC MEMORY.COPY16.LENGTH$+1
00590  0FB5             
00591  0FB5  4C 9C 0F              JMP @LOOP
00592  0FB8             
00593  0FB8             @COPYLOW
00594  0FB8  A5 78                 LDA MEMORY.COPY16.LENGTH$
00595  0FBA  85 77                 STA MEMORY.COPY.LENGTH$
00596  0FBC  20 8A 0F              JSR MEMORY.COPY$
00597  0FBF             
00598  0FBF  60                    RTS
00599  0FC0             
00600  0FC0             MEMORY.SWAP.ADDRESS1$ = $73 ; 2 BYTES
00601  0FC0             MEMORY.SWAP.ADDRESS2$ = $75 ; 2 BYTES
00602  0FC0             MEMORY.SWAP.LENGTH$ = $77 ; 1 BYTE
00603  0FC0             MEMORY.SWAP.TEMP = $79 ; 1 BYTE
00604  0FC0             MEMORY.SWAP$ 
00605  0FC0  A0 00                 LDY #$00
00606  0FC2             @AGAIN
00607  0FC2  C4 77                 CPY MEMORY.SWAP.LENGTH$
00608  0FC4  D0 01                 BNE @CONT
00609  0FC6  60                    RTS
00610  0FC7             @CONT
00611  0FC7  B1 73                 LDA (MEMORY.SWAP.ADDRESS1$),Y
00612  0FC9  85 79                 STA MEMORY.SWAP.TEMP
00613  0FCB  B1 75                 LDA (MEMORY.SWAP.ADDRESS2$),Y
00614  0FCD  91 73                 STA (MEMORY.SWAP.ADDRESS1$),Y
00615  0FCF  A5 79                 LDA MEMORY.SWAP.TEMP
00616  0FD1  91 75                 STA (MEMORY.SWAP.ADDRESS2$),Y
00617  0FD3  C8                    INY
00618  0FD4  4C C2 0F              JMP @AGAIN
00619  0FD7             
00620  0FD7             MEMORY.SWAP16.ADDRESS1$ = $73 ; 2 BYTES
00621  0FD7             MEMORY.SWAP16.ADDRESS2$ = $75 ; 2 BYTES
00622  0FD7             MEMORY.SWAP16.LENGTH$ = $77 ; 2 BYTES
00623  0FD7             MEMORY.SWAP16.TEMP = $79 ; 1 BYTE
00624  0FD7             MEMORY.SWAP16$ 
00625  0FD7             @LOOP
00626  0FD7  A5 78                 LDA MEMORY.SWAP16.LENGTH$+1
00627  0FD9  C9 00                 CMP #$00
00628  0FDB  F0 1E                 BEQ @SWAPLOW
00629  0FDD             
00630  0FDD  A9 FF                 LDA #$FF
00631  0FDF  85 77                 STA MEMORY.SWAP.LENGTH$
00632  0FE1  20 C0 0F              JSR MEMORY.SWAP$
00633  0FE4             
00634  0FE4  A0 FF                 LDY #$FF
00635  0FE6  B1 73                 LDA (MEMORY.SWAP16.ADDRESS1$),Y
00636  0FE8  85 79                 STA MEMORY.SWAP16.TEMP
00637  0FEA  B1 75                 LDA (MEMORY.SWAP16.ADDRESS2$),Y
00638  0FEC  91 73                 STA (MEMORY.SWAP16.ADDRESS1$),Y
00639  0FEE  A5 79                 LDA MEMORY.SWAP16.TEMP
00640  0FF0  91 75                 STA (MEMORY.SWAP16.ADDRESS2$),Y
00641  0FF2             
00642  0FF2  E6 74                 INC MEMORY.SWAP16.ADDRESS1$+1
00643  0FF4  E6 76                 INC MEMORY.SWAP16.ADDRESS2$+1
00644  0FF6  C6 78                 DEC MEMORY.SWAP16.LENGTH$+1
00645  0FF8             
00646  0FF8  4C D7 0F              JMP @LOOP
00647  0FFB             
00648  0FFB             @SWAPLOW
00649  0FFB  A5 77                 LDA MEMORY.SWAP16.LENGTH$
00650  0FFD  85 77                 STA MEMORY.SWAP.LENGTH$
00651  0FFF  20 C0 0F              JSR MEMORY.SWAP$
00652  1002             
00653  1002  60                    RTS
00654  1003             
00655  1003             ;ALIGN $100
00656  1003             
00657  1003             MEMORY.FILL.ADDRESS$ = $73 ; 2 BYTES
00658  1003             MEMORY.FILL.VALUE$ = $75 ; 1 BYTE
00659  1003             MEMORY.FILL.LENGTH$ = $76 ; 1 BYTE
00660  1003             
00661  1003             MEMORY.FILL$ 
00662  1003  A5 76                 LDA MEMORY.FILL.LENGTH$
00663  1005  C9 00                 CMP #$00
00664  1007  F0 0B                 BEQ @END
00665  1009             
00666  1009  A5 75                 LDA MEMORY.FILL.VALUE$
00667  100B  A0 00                 LDY #$00
00668  100D             @LOOP
00669  100D  91 73                 STA (MEMORY.FILL.ADDRESS$),Y
00670  100F  C8                    INY
00671  1010  C4 76                 CPY MEMORY.FILL.LENGTH$
00672  1012  D0 F9                 BNE @LOOP
00673  1014             @END
00674  1014  60                    RTS
00675  1015             
00676  1015             MEMORY.FILL16.ADDRESS$ = $73 ; 2 BYTES
00677  1015             MEMORY.FILL16.VALUE$ = $75 ; 1 BYTE
00678  1015             MEMORY.FILL16.LENGTH$ = $77 ; 2 BYTES
00679  1015             
00680  1015             MEMORY.FILL16$ 
00681  1015             @LOOP
00682  1015  A5 78                 LDA MEMORY.FILL16.LENGTH$+1
00683  1017  C9 00                 CMP #$00
00684  1019  F0 14                 BEQ @FILLLOW
00685  101B             
00686  101B  A9 FF                 LDA #$FF
00687  101D  85 76                 STA MEMORY.FILL.LENGTH$
00688  101F  20 03 10              JSR MEMORY.FILL$
00689  1022             
00690  1022  A0 FF                 LDY #$FF
00691  1024  A5 75                 LDA MEMORY.FILL16.VALUE$
00692  1026  91 73                 STA (MEMORY.FILL16.ADDRESS$),Y
00693  1028             
00694  1028  E6 74                 INC MEMORY.FILL16.ADDRESS$+1
00695  102A  C6 78                 DEC MEMORY.FILL16.LENGTH$+1
00696  102C             
00697  102C  4C 15 10              JMP @LOOP
00698  102F             
00699  102F             @FILLLOW
00700  102F  A5 77                 LDA MEMORY.FILL16.LENGTH$
00701  1031  85 76                 STA MEMORY.FILL.LENGTH$
00702  1033  20 03 10              JSR MEMORY.FILL$
00703  1036             
00704  1036  60                    RTS
00705  1037             
00706  1037             MEMORY.PUSHREGS$ 
00707  1037  85 FC                 STA $FC ; PUT  THE A REGSITER INTO MEMORY SINCE WE NEED IT TO DO WORK IN THIS ROUTINE.
00708  1039             
00709  1039                        ; THE STACK IS POINTING TO THE RETURN ADDRESS.
00710  1039                        ; GET THE RETURN ADDRESS
00711  1039  68                    PLA
00712  103A  85 FD                 STA $FD
00713  103C  E6 FD                 INC $FD
00714  103E  68                    PLA
00715  103F  85 FE                 STA $FE
00716  1041             
00717  1041                        ; PUSH THE A, X, AND Y REGISTERS ONTO THE STACK.
00718  1041  A5 FC                 LDA $FC
00719  1043  48                    PHA
00720  1044  8A                    TXA
00721  1045  48                    PHA
00722  1046  98                    TYA
00723  1047  48                    PHA
00724  1048                        
00725  1048  A5 FC                 LDA $FC ; RESTORE THE A REGISTER.
00726  104A             
00727  104A                        ; IMPLICIT RETURN.
00728  104A  6C FD 00              JMP ($00FD)
00729  104D             
00730  104D             MEMORY.PULLREGS$ 
00731  104D                        ; THE STACK IS POINTING TO THE RETURN ADDRESS.
00732  104D                        ; GET THE RETURN ADDRESS
00733  104D  68                    PLA
00734  104E  85 FD                 STA $FD
00735  1050  E6 FD                 INC $FD
00736  1052  68                    PLA
00737  1053  85 FE                 STA $FE
00738  1055             
00739  1055                        ; PULL THE A, X, AND Y REGISTERS FROM THE STACK.
00740  1055  68                    PLA
00741  1056  A8                    TAY
00742  1057  68                    PLA
00743  1058  AA                    TAX
00744  1059  68                    PLA
00745  105A                        
00746  105A                        ; IMPLICIT RETURN.
00747  105A  6C FD 00              JMP ($00FD)
00748  105D             
00749  105D             ;ALIGN $100
00750  105D             
00751  105D  00 A0      MEMORY.HEAPADRESS WORD $A000
00752  105F  FF BF      MEMORY.HEAPADRESS_LR WORD $BFFF
00753  1061  00 20      MEMORY.TOTAL$ WORD $2000 ; 8,192 BYTES
00754  1063  00 20      MEMORY.FREE$ WORD $2000 ; 8,192 BYTES
00755  1065  00 00      MEMORY.USED$ WORD $0000 ; 0 BYTES
00756  1067  00         MEMORY.HEAPSTARTED BYTE $00
00757  1068             
00758  1068             MEMORY.STARTHEAP$ 
00759  1068             
00760  1068                        ; CHECK TO SEE IF THE HEAP HAS ALREADY BEEN STARTED
00761  1068  AD 67 10              LDA MEMORY.HEAPSTARTED
00762  106B  C9 01                 CMP #$01
00763  106D  D0 01                 BNE @OKTOSTART
00764  106F  60                    RTS
00765  1070             @OKTOSTART 
00766  1070             
00767  1070  A9 01                 LDA #$01
00768  1072  8D 67 10              STA MEMORY.HEAPSTARTED
00769  1075             
00770  1075  20 1B 1F              JSR MEMORY.PUSHZP$
00771  1078             
00772  1078  AD 5D 10              LDA MEMORY.HEAPADRESS
00773  107B  85 73                 STA MEMORY.FILL16.ADDRESS$
00774  107D  AD 5E 10              LDA MEMORY.HEAPADRESS+1
00775  1080  85 74                 STA MEMORY.FILL16.ADDRESS$+1
00776  1082             
00777  1082  AD 61 10              LDA MEMORY.TOTAL$
00778  1085  85 77                 STA MEMORY.FILL16.LENGTH$
00779  1087  AD 62 10              LDA MEMORY.TOTAL$+1
00780  108A  85 78                 STA MEMORY.FILL16.LENGTH$+1
00781  108C             
00782  108C  A9 FF                 LDA #$FF
00783  108E  85 75                 STA MEMORY.FILL16.VALUE$
00784  1090             
00785  1090  20 15 10              JSR MEMORY.FILL16$
00786  1093             
00787  1093  20 31 1F              JSR MEMORY.PULLZP$
00788  1096             
00789  1096  60                    RTS
00790  1097             
00791  1097             MEMORY.ENDHEAP$ 
00792  1097  A9 00                 LDA #$00
00793  1099  8D 67 10              STA MEMORY.HEAPSTARTED
00794  109C  60                    RTS
00795  109D             
00796  109D             ; NEW METHOD: (N + 2 BYTES)
00797  109D             ;       LOOK FOR 2 NULL$ BYTES AND THEN START COUNTING AS LONG AS THERE ISN'T ANY NON-NULL$ BYTES.  RETURN THE ADDRESS AFTER THE SIZE BYTES.
00798  109D             ;       2 BYTES BEFORE THE ALLOCATED BLOCK IS THE SIZE OF THE BLOCK.
00799  109D             ;       DEALLOCTION WILL INSERT NULL$ BYTES FOR THE SIZE OF THE BLOCK INCLUDING THE 2 BYTES BEFORE THE ADDRESS
00800  109D             
00801  109D             ; OLD METHOD: (N + 1 BYTES) [SEE KERNEL.18.ASM]
00802  109D             ;       EACH BLOCK OF ALLOCATED MEMORY MUST END WITH A NULL$ BYTE.
00803  109D             ;       THE SIZE OF THE BLOCK IS DETERMINE HOW MANY BYTES BEFORE IT REACHES THE NEXT NULL$ BYTE.
00804  109D             ;       DEALLOCATION WILL INSERT NULL$ BYTES UNTIL IT ENCOUNTERS THE NEXT NULL$ BYTE.
00805  109D             
00806  109D             MEMORY.ALLOCATE.ADDRESS$ = $7A ; 2 BYTES
00807  109D             MEMORY.ALLOCATE.LENGTH$ = $75 ; 2 BYTES
00808  109D             MEMORY.ALLOCATE.COUNTER = $77 ; 2 BYTES
00809  109D             MEMORY.ALLOCATE.FOUND = $79 ; 1 BYTE
00810  109D             MEMORY.ALLOCATE$ 
00811  109D             
00812  109D  20 68 10              JSR MEMORY.STARTHEAP$ ; SANITY CHECK
00813  10A0             
00814  10A0                        ; CLEAR ADDRESS ($0000 MEANS NOTHING WAS ALLOCATED)
00815  10A0  A9 00                 LDA #$00
00816  10A2  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
00817  10A4  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
00818  10A6             
00819  10A6  20 3E 11              JSR MEMORY.ALLOCATE.INC_LENGTH ; LENGTH = LENGTH + 2
00820  10A9             
00821  10A9  A5 84                 LDA MATH.ADD16.SUM$
00822  10AB  85 75                 STA MEMORY.ALLOCATE.LENGTH$
00823  10AD  A5 85                 LDA MATH.ADD16.SUM$+1
00824  10AF  85 76                 STA MEMORY.ALLOCATE.LENGTH$+1
00825  10B1             
00826  10B1                        ; ENSURE THAT WE ARE NOT ALLOCATING MORE MEMORY THAN WANT IS FREE
00827  10B1  AD 63 10              LDA MEMORY.FREE$
00828  10B4  85 80                 STA MATH.CMP16.NUM1$
00829  10B6  AD 64 10              LDA MEMORY.FREE$+1
00830  10B9  85 81                 STA MATH.CMP16.NUM1$+1
00831  10BB             
00832  10BB  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
00833  10BD  85 82                 STA MATH.CMP16.NUM2$
00834  10BF  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
00835  10C1  85 83                 STA MATH.CMP16.NUM2$+1
00836  10C3                        
00837  10C3  20 E4 28              JSR MATH.CMP16$ ; IF FREE$ < LENGTH$ (CARRY IS CLEARED) THEN EXIT
00838  10C6                        ;BCC @END
00839  10C6  B0 01                 BCS @FIND
00840  10C8  60                    RTS
00841  10C9             
00842  10C9             @FIND
00843  10C9                        ;JSR MEMORY.ALLOCATE.DEC_LENGTH ; LENGTH = LENGTH - 2
00844  10C9             
00845  10C9  20 76 11              JSR MEMORY.ALLOCATE.FIND ; LOCATE MEMORY THAT CAN BE USED.
00846  10CC             
00847  10CC                        ; CONFIRM THAT WE FOUND A SPOT OF MEMORY THAT CAN BE USED.
00848  10CC  A5 79                 LDA MEMORY.ALLOCATE.FOUND
00849  10CE  C9 01                 CMP #$01
00850  10D0  F0 09                 BEQ @INIT_MEM
00851  10D2             
00852  10D2                        ; IF NOTHING WAS FOUND, RESET THE RETURN VALUE AND EXIT.
00853  10D2  A9 00                 LDA #$00
00854  10D4  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
00855  10D6  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
00856  10D8  4C 3D 11              JMP @END
00857  10DB             
00858  10DB             @INIT_MEM
00859  10DB                        ;JSR MEMORY.ALLOCATE.INC_LENGTH ; LENGTH = LENGTH + 2
00860  10DB             
00861  10DB                        ; NEED TO RECALCULATE THE MEMORY FREE/USED.
00862  10DB  AD 65 10              LDA MEMORY.USED$
00863  10DE  85 80                 STA MATH.ADD16.ADDEND1$
00864  10E0  AD 66 10              LDA MEMORY.USED$+1
00865  10E3  85 81                 STA MATH.ADD16.ADDEND1$+1
00866  10E5             
00867  10E5  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
00868  10E7  85 82                 STA MATH.ADD16.ADDEND2$
00869  10E9  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
00870  10EB  85 83                 STA MATH.ADD16.ADDEND2$+1
00871  10ED             
00872  10ED  20 00 28              JSR MATH.ADD16$ ; MEMORY.USED$ = MEMORY.USED$ + LENGTH
00873  10F0             
00874  10F0  A5 84                 LDA MATH.ADD16.SUM$
00875  10F2  8D 65 10              STA MEMORY.USED$
00876  10F5  A5 85                 LDA MATH.ADD16.SUM$+1
00877  10F7  8D 66 10              STA MEMORY.USED$+1
00878  10FA             
00879  10FA  20 CC 12              JSR MEMORY.CALCULATE_FREE ; MEMORY.FREE$ = MEMORY.TOTAL$ - MEMORY.USED$
00880  10FD             
00881  10FD                        ; STORE THE LENGTH OF THE BLOCK AT ADDRESS - 2
00882  10FD  A0 00                 LDY #$00
00883  10FF  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
00884  1101  91 7A                 STA (MEMORY.ALLOCATE.ADDRESS$),Y
00885  1103  C8                    INY
00886  1104  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
00887  1106  91 7A                 STA (MEMORY.ALLOCATE.ADDRESS$),Y
00888  1108             
00889  1108                        ; ADD 2 TO THE ADDRESS VALUE.
00890  1108  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
00891  110A  85 80                 STA MATH.ADD16.ADDEND1$
00892  110C  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
00893  110E  85 81                 STA MATH.ADD16.ADDEND1$+1
00894  1110                        
00895  1110  A9 02                 LDA #$02
00896  1112  85 82                 STA MATH.ADD16.ADDEND2$
00897  1114  A9 00                 LDA #$00
00898  1116  85 83                 STA MATH.ADD16.ADDEND2$+1
00899  1118                        
00900  1118  20 00 28              JSR MATH.ADD16$ ; ADDRESS = ADDRESS + 2
00901  111B             
00902  111B  A5 84                 LDA MATH.ADD16.SUM$
00903  111D  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
00904  111F  A5 85                 LDA MATH.ADD16.SUM$+1
00905  1121  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
00906  1123             
00907  1123  20 5A 11              JSR MEMORY.ALLOCATE.DEC_LENGTH ; LENGTH = LENGTH - 2
00908  1126             
00909  1126                        ; INITAILIZE THE MEMORY WITH NON-NULL$ CHARACTERS.
00910  1126  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
00911  1128  85 73                 STA MEMORY.FILL16.ADDRESS$
00912  112A  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
00913  112C  85 74                 STA MEMORY.FILL16.ADDRESS$+1
00914  112E             
00915  112E  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
00916  1130  85 77                 STA MEMORY.FILL16.LENGTH$
00917  1132  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
00918  1134  85 78                 STA MEMORY.FILL16.LENGTH$+1
00919  1136             
00920  1136  A9 00                 LDA #$00
00921  1138  85 75                 STA MEMORY.FILL.VALUE$
00922  113A  20 15 10              JSR MEMORY.FILL16$
00923  113D             
00924  113D             @END
00925  113D             
00926  113D  60                    RTS
00927  113E             
00928  113E             MEMORY.ALLOCATE.INC_LENGTH 
00929  113E                        ; ADD 2 TO THE LENGTH OF THE MEMORY
00930  113E  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
00931  1140  85 80                 STA MATH.ADD16.ADDEND1$
00932  1142  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
00933  1144  85 81                 STA MATH.ADD16.ADDEND1$+1
00934  1146             
00935  1146  A9 02                 LDA #$02
00936  1148  85 82                 STA MATH.ADD16.ADDEND2$
00937  114A  A9 00                 LDA #$00
00938  114C  85 83                 STA MATH.ADD16.ADDEND2$+1
00939  114E             
00940  114E  20 00 28              JSR MATH.ADD16$ ; LENGTH = LENGTH + 2
00941  1151             
00942  1151  A5 84                 LDA MATH.ADD16.SUM$
00943  1153  85 75                 STA MEMORY.ALLOCATE.LENGTH$
00944  1155  A5 85                 LDA MATH.ADD16.SUM$+1
00945  1157  85 76                 STA MEMORY.ALLOCATE.LENGTH$+1
00946  1159             
00947  1159  60                    RTS
00948  115A             
00949  115A             MEMORY.ALLOCATE.DEC_LENGTH 
00950  115A                        ; SUBTRACT 2 TO THE LENGTH OF THE MEMORY
00951  115A  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
00952  115C  85 80                 STA MATH.SUBTRACT16.MENUEND$
00953  115E  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
00954  1160  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
00955  1162             
00956  1162  A9 02                 LDA #$02
00957  1164  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
00958  1166  A9 00                 LDA #$00
00959  1168  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
00960  116A             
00961  116A  20 96 28              JSR MATH.SUBTRACT16$ ; LENGTH = LENGTH - 2
00962  116D             
00963  116D  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
00964  116F  85 75                 STA MEMORY.ALLOCATE.LENGTH$
00965  1171  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
00966  1173  85 76                 STA MEMORY.ALLOCATE.LENGTH$+1
00967  1175             
00968  1175  60                    RTS
00969  1176             
00970  1176             
00971  1176             ;ALIGN $100
00972  1176             
00973  1176             MEMORY.ALLOCATE.FIND 
00974  1176                        ; DEFAULT TO THE START OF THE HEAP
00975  1176  AD 5D 10              LDA MEMORY.HEAPADRESS
00976  1179  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
00977  117B  AD 5E 10              LDA MEMORY.HEAPADRESS+1
00978  117E  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
00979  1180             
00980  1180                        ; LOCATE THE FIRST SPOT THAT CONTAINS NULL$
00981  1180  A0 00                 LDY #$00
00982  1182  A2 00                 LDX #$00
00983  1184  86 77                 STX MEMORY.ALLOCATE.COUNTER
00984  1186  86 78                 STX MEMORY.ALLOCATE.COUNTER+1
00985  1188             @LOOP
00986  1188  B1 7A                 LDA (MEMORY.ALLOCATE.ADDRESS$),Y
00987  118A             @CHECK_MEM 
00988  118A  C9 FF                 CMP #$FF
00989  118C                        ;BEQ @INC_COUNTER
00990  118C  D0 03                 BNE @RESET_COUNTER
00991  118E  4C 00 12              JMP @INC_COUNTER
00992  1191             
00993  1191             @RESET_COUNTER 
00994  1191                        ; GET THE SIZE OF THE MEMORY BLOCK
00995  1191  A0 00                 LDY #$00
00996  1193  B1 7A                 LDA (MEMORY.ALLOCATE.ADDRESS$),Y
00997  1195  85 7C                 STA MEMORY.SIZEOF.LENGTH$
00998  1197  C8                    INY
00999  1198  B1 7A                 LDA (MEMORY.ALLOCATE.ADDRESS$),Y
01000  119A  85 7D                 STA MEMORY.SIZEOF.LENGTH$+1
01001  119C             
01002  119C                        ; INC THE ADDRESS BY THE SIZE OF THE MEMORY BLOCK
01003  119C  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
01004  119E  85 80                 STA MATH.ADD16.ADDEND1$
01005  11A0  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01006  11A2  85 81                 STA MATH.ADD16.ADDEND1$+1
01007  11A4             
01008  11A4  A5 7C                 LDA MEMORY.SIZEOF.LENGTH$
01009  11A6  85 82                 STA MATH.ADD16.ADDEND2$
01010  11A8  A5 7D                 LDA MEMORY.SIZEOF.LENGTH$+1
01011  11AA  85 83                 STA MATH.ADD16.ADDEND2$+1
01012  11AC             
01013  11AC  20 00 28              JSR MATH.ADD16$ ; ADDRESS = ADDRESS + LENGTH
01014  11AF             
01015  11AF  A5 84                 LDA MATH.ADD16.SUM$
01016  11B1  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
01017  11B3  A5 85                 LDA MATH.ADD16.SUM$+1
01018  11B5  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
01019  11B7             
01020  11B7  A0 00                 LDY #$00
01021  11B9  A2 00                 LDX #$00
01022  11BB  86 77                 STX MEMORY.ALLOCATE.COUNTER
01023  11BD  86 78                 STX MEMORY.ALLOCATE.COUNTER+1
01024  11BF             
01025  11BF  4C C5 11              JMP @CHECK_SIZE
01026  11C2             
01027  11C2             @NEXT_MEM
01028  11C2                        ; INCREASE THE MEMORY ADDRESS
01029  11C2  20 44 12              JSR MEMORY.ALLOCATE.INC_ADDRESS
01030  11C5             
01031  11C5             @CHECK_SIZE 
01032  11C5                        ; IF THE ADDRESS IS GREATER THAN THE LAST HEAP ADDRESS THEN EXIT
01033  11C5  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
01034  11C7  85 80                 STA MATH.CMP16.NUM1$
01035  11C9  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01036  11CB  85 81                 STA MATH.CMP16.NUM1$+1
01037  11CD             
01038  11CD  AD 5F 10              LDA MEMORY.HEAPADRESS_LR
01039  11D0  85 82                 STA MATH.CMP16.NUM2$
01040  11D2  AD 60 10              LDA MEMORY.HEAPADRESS_LR+1
01041  11D5  85 83                 STA MATH.CMP16.NUM2$+1
01042  11D7             
01043  11D7  20 E4 28              JSR MATH.CMP16$ ; IF THE ADDRESS$ >= HEAPADRESS_LR THEN EXIT
01044  11DA                        ;BCS @END
01045  11DA             
01046  11DA  90 03                 BCC @OK
01047  11DC  4C 43 12              JMP @END
01048  11DF             @OK
01049  11DF             
01050  11DF  A0 00                 LDY #$00
01051  11E1  4C 88 11              JMP @LOOP
01052  11E4             
01053  11E4             ALIGN      $100
01054  1200             
01055  1200             @INC_COUNTER 
01056  1200  E8                    INX
01057  1201  86 77                 STX MEMORY.ALLOCATE.COUNTER
01058  1203  E0 00                 CPX #$00
01059  1205  D0 02                 BNE @CHECK_COUNTER
01060  1207  E6 78                 INC MEMORY.ALLOCATE.COUNTER+1
01061  1209             @CHECK_COUNTER 
01062  1209             
01063  1209                        ; IF THE COUNTER IS EQUAL TO THE LENGTH THEN EXIT
01064  1209  A5 77                 LDA MEMORY.ALLOCATE.COUNTER
01065  120B  85 80                 STA MATH.CMP16.NUM1$
01066  120D  A5 78                 LDA MEMORY.ALLOCATE.COUNTER+1
01067  120F  85 81                 STA MATH.CMP16.NUM1$+1
01068  1211             
01069  1211  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
01070  1213  85 82                 STA MATH.CMP16.NUM2$
01071  1215  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
01072  1217  85 83                 STA MATH.CMP16.NUM2$+1
01073  1219             
01074  1219  20 E4 28              JSR MATH.CMP16$ ; IF COUNTER = LENGTH THEN EXIT
01075  121C             
01076  121C             ;ALIGN $100
01077  121C             
01078  121C                        ;BEQ @FOUND
01079  121C  B0 03                 BCS @FOUND
01080  121E             
01081  121E  4C C2 11              JMP @NEXT_MEM
01082  1221             
01083  1221             @FOUND
01084  1221  20 44 12              JSR MEMORY.ALLOCATE.INC_ADDRESS
01085  1224             
01086  1224                        ; DECREASE BY THE LENGTH TO GET THE STARTING LOCATION
01087  1224  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
01088  1226  85 80                 STA MATH.SUBTRACT16.MENUEND$
01089  1228  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01090  122A  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
01091  122C             
01092  122C  A5 75                 LDA MEMORY.ALLOCATE.LENGTH$
01093  122E  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
01094  1230  A5 76                 LDA MEMORY.ALLOCATE.LENGTH$+1
01095  1232  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
01096  1234             
01097  1234  20 96 28              JSR MATH.SUBTRACT16$ ; ADDRESS = ADDRESS - LENGTH
01098  1237             
01099  1237  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
01100  1239  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
01101  123B  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
01102  123D  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
01103  123F             
01104  123F  A9 01                 LDA #$01
01105  1241  85 79                 STA MEMORY.ALLOCATE.FOUND
01106  1243             
01107  1243             @END
01108  1243  60                    RTS
01109  1244             
01110  1244             MEMORY.ALLOCATE.INC_ADDRESS 
01111  1244             
01112  1244  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
01113  1246  85 80                 STA MATH.ADD16.ADDEND1$
01114  1248  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
01115  124A  85 81                 STA MATH.ADD16.ADDEND1$+1
01116  124C             
01117  124C  A9 01                 LDA #$01
01118  124E  85 82                 STA MATH.ADD16.ADDEND2$
01119  1250  A9 00                 LDA #$00
01120  1252  85 83                 STA MATH.ADD16.ADDEND2$+1
01121  1254                        
01122  1254  20 00 28              JSR MATH.ADD16$ ; ADDRESS = ADDRESS + 1
01123  1257             
01124  1257  A5 84                 LDA MATH.ADD16.SUM$
01125  1259  85 7A                 STA MEMORY.ALLOCATE.ADDRESS$
01126  125B  A5 85                 LDA MATH.ADD16.SUM$+1
01127  125D  85 7B                 STA MEMORY.ALLOCATE.ADDRESS$+1
01128  125F             
01129  125F  60                    RTS
01130  1260             
01131  1260             MEMORY.SIZEOF.ADDRESS$ = $7A ; 2 BYTES
01132  1260             MEMORY.SIZEOF.LENGTH$ = $7C ; 2 BYTES
01133  1260             MEMORY.SIZEOF$ 
01134  1260                        ; THE SIZE OF THE BLOCK OF MEMORY IS STORE IN THE PREVIOUS 2 BYTES.
01135  1260             
01136  1260                        ; SUBTRACT THE 2 BYTES AT THE BEGINNING OF THE ADDRESS.
01137  1260                        
01138  1260  A5 7A                 LDA MEMORY.SIZEOF.ADDRESS$
01139  1262  85 80                 STA MATH.SUBTRACT16.MENUEND$
01140  1264  A5 7B                 LDA MEMORY.SIZEOF.ADDRESS$+1
01141  1266  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
01142  1268             
01143  1268  A9 02                 LDA #$02
01144  126A  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
01145  126C  A9 00                 LDA #$00
01146  126E  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
01147  1270             
01148  1270  20 96 28              JSR MATH.SUBTRACT16$ ; ADDRESS = ADDRESS - 2
01149  1273             
01150  1273  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
01151  1275  85 7A                 STA MEMORY.SIZEOF.ADDRESS$
01152  1277  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
01153  1279  85 7B                 STA MEMORY.SIZEOF.ADDRESS$+1
01154  127B             
01155  127B                        ; GET THE VALUE STORED AT ADDRESS - 2 AND PUT INTO LENGTH
01156  127B  A0 00                 LDY #$00
01157  127D  B1 7A                 LDA (MEMORY.SIZEOF.ADDRESS$),Y
01158  127F  85 7C                 STA MEMORY.SIZEOF.LENGTH$
01159  1281  C8                    INY
01160  1282  B1 7A                 LDA (MEMORY.SIZEOF.ADDRESS$),Y
01161  1284  85 7D                 STA MEMORY.SIZEOF.LENGTH$+1
01162  1286             
01163  1286  60                    RTS
01164  1287             
01165  1287             MEMORY.DEALLOCATE.ADDRESS$ = $7A ; 2 BYTES
01166  1287             MEMORY.DEALLOCATE$ 
01167  1287                        ; FREE UP THE MEMORY.
01168  1287             
01169  1287                        ; GET THE SIZE OF THE MEMORY BLOCK.
01170  1287  A5 7A                 LDA MEMORY.DEALLOCATE.ADDRESS$
01171  1289  85 7A                 STA MEMORY.SIZEOF.ADDRESS$
01172  128B  A5 7B                 LDA MEMORY.DEALLOCATE.ADDRESS$+1
01173  128D  85 7B                 STA MEMORY.SIZEOF.ADDRESS$+1
01174  128F             
01175  128F  20 60 12              JSR MEMORY.SIZEOF$ ; LENGTH = SIZEOF(ADDRESS)
01176  1292             
01177  1292                        ; DECREASE MEMORY.USED$
01178  1292  AD 65 10              LDA MEMORY.USED$
01179  1295  85 80                 STA MATH.SUBTRACT16.MENUEND$
01180  1297  AD 66 10              LDA MEMORY.USED$+1
01181  129A  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
01182  129C             
01183  129C  A5 7C                 LDA MEMORY.SIZEOF.LENGTH$
01184  129E  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
01185  12A0  A5 7D                 LDA MEMORY.SIZEOF.LENGTH$+1
01186  12A2  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
01187  12A4             
01188  12A4  20 96 28              JSR MATH.SUBTRACT16$ ; MEMORY.USED$ = MEMORY.USED$ - LENGTH
01189  12A7             
01190  12A7  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
01191  12A9  8D 65 10              STA MEMORY.USED$
01192  12AC  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
01193  12AE  8D 66 10              STA MEMORY.USED$+1
01194  12B1             
01195  12B1  20 CC 12              JSR MEMORY.CALCULATE_FREE ; MEMORY.FREE$ = MEMORY.TOTAL$ - MEMORY.USED$
01196  12B4             
01197  12B4                        ; SET THE MEMORY FOR RE-USE
01198  12B4  A5 7A                 LDA MEMORY.DEALLOCATE.ADDRESS$
01199  12B6  85 73                 STA MEMORY.FILL16.ADDRESS$
01200  12B8  A5 7B                 LDA MEMORY.DEALLOCATE.ADDRESS$+1
01201  12BA  85 74                 STA MEMORY.FILL16.ADDRESS$+1
01202  12BC             
01203  12BC  A5 7C                 LDA MEMORY.SIZEOF.LENGTH$
01204  12BE  85 77                 STA MEMORY.FILL16.LENGTH$
01205  12C0  A5 7D                 LDA MEMORY.SIZEOF.LENGTH$+1
01206  12C2  85 78                 STA MEMORY.FILL16.LENGTH$+1
01207  12C4             
01208  12C4  A9 FF                 LDA #$FF
01209  12C6  85 75                 STA MEMORY.FILL16.VALUE$
01210  12C8             
01211  12C8  20 15 10              JSR MEMORY.FILL16$
01212  12CB             
01213  12CB  60                    RTS
01214  12CC             
01215  12CC             MEMORY.CALCULATE_FREE 
01216  12CC  AD 61 10              LDA MEMORY.TOTAL$
01217  12CF  85 80                 STA MATH.SUBTRACT16.MENUEND$
01218  12D1  AD 62 10              LDA MEMORY.TOTAL$+1
01219  12D4  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
01220  12D6             
01221  12D6  AD 65 10              LDA MEMORY.USED$
01222  12D9  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
01223  12DB  AD 66 10              LDA MEMORY.USED$+1
01224  12DE  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
01225  12E0             
01226  12E0  20 96 28              JSR MATH.SUBTRACT16$ ; MEMORY.FREE$ = MEMORY.TOTAL$ - MEMORY.USED$
01227  12E3             
01228  12E3  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
01229  12E5  8D 63 10              STA MEMORY.FREE$
01230  12E8  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
01231  12EA  8D 64 10              STA MEMORY.FREE$+1
01232  12ED             
01233  12ED  60                    RTS
01234  12EE             
01235  12EE             ;ALIGN $100
01236  12EE             ;MEMORY.HEAPMANADR = *
01237  12EE             ;INCASM "BUFFER1024.ASM"
01238  12EE             
01239  12EE             ;;ALIGN $100
01240  12EE             
01241  12EE             
01242  12EE             
01243  12EE             
01244  12EE             
01245  12EE             ;ALIGN $100
01246  12EE             
01247  12EE             CONSOLE.CHARMAPADDRESS = $2000
01248  12EE             CONSOLE.MEMORYADDRESS = $0400 ; FIRST POSITION
01249  12EE             CONSOLE.MEMORYADDRESS_LR = $07C0 ; LAST ROW
01250  12EE  00 04      CONSOLE.CURRENTADDRESS WORD CONSOLE.MEMORYADDRESS
01251  12F0  00         CONSOLE.CURRENTCOLUMN BYTE $00 ; 40 COLUMNS
01252  12F1  00         CONSOLE.CURRENTROW BYTE $00 ; 25 ROWS
01253  12F2             CONSOLE.COLORADDRESS = $D800
01254  12F2             CONSOLE.COLORADDRESS_LR = $DBC0 ; LAST ROW
01255  12F2  00 D8      CONSOLE.CURRENTCOLORADDR WORD CONSOLE.COLORADDRESS
01256  12F4  01         CONSOLE.CHARACTERCOLOR BYTE COLOR.WHITE$
01257  12F5  00         CONSOLE.CHARACTERSINVERTED BYTE $00
01258  12F6             
01259  12F6             CONSOLE.START 
01260  12F6                        
01261  12F6  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
01262  12F8  8D EE 12              STA CONSOLE.CURRENTADDRESS
01263  12FB  A9 01                 LDA #<CONSOLE.MEMORYADDRESS+1
01264  12FD  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
01265  1300             
01266  1300  A9 00                 LDA #<CONSOLE.COLORADDRESS
01267  1302  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
01268  1305  A9 01                 LDA #<CONSOLE.COLORADDRESS+1
01269  1307  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
01270  130A             
01271  130A  A9 00                 LDA #$00
01272  130C  8D F0 12              STA CONSOLE.CURRENTCOLUMN
01273  130F  8D F1 12              STA CONSOLE.CURRENTROW
01274  1312             
01275  1312  20 76 13              JSR CONSOLE.CLEAR$
01276  1315             
01277  1315  A9 00                 LDA #COLOR.BLACK$
01278  1317  85 73                 STA CONSOLE.SETBACKGROUNDCOLOR.COLOR$
01279  1319  20 97 16              JSR CONSOLE.SETBACKGROUNDCOLOR$
01280  131C             
01281  131C  A9 00                 LDA #COLOR.BLACK$
01282  131E  85 73                 STA CONSOLE.SETBORDERCOLOR.COLOR$
01283  1320  20 9D 16              JSR CONSOLE.SETBORDERCOLOR$
01284  1323             
01285  1323                        ;LDA #COLOR.WHITE$
01286  1323                        ;STA CONSOLE.SETFOREGROUNDCOLOR.COLOR$
01287  1323                        ;JSR CONSOLE.SETFOREGROUNDCOLOR$
01288  1323                        ;;STA $0286
01289  1323             
01290  1323  A9 00                 LDA #0
01291  1325  85 73                 STA CONSOLE.SETCHARACTERINVERTED.VALUE$
01292  1327  20 BD 16              JSR CONSOLE.SETCHARACTERINVERTED$
01293  132A             
01294  132A             ;        ; COPY THE FONT TO $<CONSOLE.CHARMAPADDRESS
01295  132A             ;        LDA #<FONTADDRESS
01296  132A             ;        STA MEMORY.COPY16.SOURCE$
01297  132A             ;        LDA #>FONTADDRESS
01298  132A             ;        STA MEMORY.COPY16.SOURCE$+1
01299  132A             ;        LDA #<CONSOLE.CHARMAPADDRESS
01300  132A             ;        STA MEMORY.COPY16.DESTINATION$
01301  132A             ;        LDA #>CONSOLE.CHARMAPADDRESS
01302  132A             ;        STA MEMORY.COPY16.DESTINATION$+1
01303  132A             ;        LDA #$00
01304  132A             ;        STA MEMORY.COPY16.LENGTH$
01305  132A             ;        LDA #$08
01306  132A             ;        STA MEMORY.COPY16.LENGTH$+1
01307  132A             ;        JSR MEMORY.COPY16$
01308  132A             
01309  132A                        ; SET TO CUSTOM CHARACTER SET
01310  132A                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:VICII_MEMORY_ORGANIZING
01311  132A                        ;$D018 = %XXXX010X -> CHARMEM IS AT $1000
01312  132A                        ; DEFAULT VALUE = %00010101
01313  132A  AD 18 D0              LDA $D018
01314  132D  29 F1                 AND #%11110001
01315  132F                        ;ORA #%00000000 ; $0000
01316  132F                        ;ORA #%00000010 ; $0800
01317  132F                        ;ORA #%00000100 ; $1000
01318  132F                        ;ORA #%00000110 ; $1800
01319  132F  09 08                 ORA #%00001000 ; $2000
01320  1331                        ;ORA #%00001010 ; $2800
01321  1331                        ;ORA #%00001100 ; $3000
01322  1331                        ;ORA #%00001110 ; $3800
01323  1331  8D 18 D0              STA $D018
01324  1334             
01325  1334  60                    RTS
01326  1335             
01327  1335             CONSOLE.END 
01328  1335             
01329  1335                        ; COPY THE FONT TO $<CONSOLE.CHARMAPADDRESS
01330  1335  A9 00                 LDA #<CONSOLE.CHARMAPADDRESS
01331  1337  85 73                 STA MEMORY.COPY16.SOURCE$
01332  1339  A9 20                 LDA #>CONSOLE.CHARMAPADDRESS
01333  133B  85 74                 STA MEMORY.COPY16.SOURCE$+1
01334  133D  A9 00                 LDA #$00
01335  133F  85 75                 STA MEMORY.COPY16.DESTINATION$
01336  1341  A9 20                 LDA #$20
01337  1343  85 76                 STA MEMORY.COPY16.DESTINATION$+1
01338  1345  A9 00                 LDA #$00
01339  1347  85 78                 STA MEMORY.COPY16.LENGTH$
01340  1349  A9 08                 LDA #$08
01341  134B  85 79                 STA MEMORY.COPY16.LENGTH$+1
01342  134D  20 9C 0F              JSR MEMORY.COPY16$
01343  1350             
01344  1350                        ; COPY THE SCREEN CHARACTERS
01345  1350  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
01346  1352  85 73                 STA MEMORY.COPY16.SOURCE$
01347  1354  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
01348  1356  85 74                 STA MEMORY.COPY16.SOURCE$+1
01349  1358  A9 00                 LDA #$00
01350  135A  85 75                 STA MEMORY.COPY16.DESTINATION$
01351  135C  A9 04                 LDA #$04
01352  135E  85 76                 STA MEMORY.COPY16.DESTINATION$+1
01353  1360  A9 C0                 LDA #$C0
01354  1362  85 78                 STA MEMORY.COPY16.LENGTH$
01355  1364  A9 03                 LDA #$03
01356  1366  85 79                 STA MEMORY.COPY16.LENGTH$+1
01357  1368  20 9C 0F              JSR MEMORY.COPY16$
01358  136B             
01359  136B                        ; SET TO CUSTOM CHARACTER SET
01360  136B                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:VICII_MEMORY_ORGANIZING
01361  136B                        ;$D018 = %XXXX010X -> CHARMEM IS AT $1000
01362  136B                        ; DEFAULT VALUE = %00010101
01363  136B  AD 18 D0              LDA $D018
01364  136E  29 F1                 AND #%11110001
01365  1370                        ;ORA #%00000000 ; $0000
01366  1370                        ;ORA #%00000010 ; $0800
01367  1370                        ;ORA #%00000100 ; $1000
01368  1370                        ;ORA #%00000110 ; $1800
01369  1370  09 08                 ORA #%00001000 ; $2000
01370  1372                        ;ORA #%00001010 ; $2800
01371  1372                        ;ORA #%00001100 ; $3000
01372  1372                        ;ORA #%00001110 ; $3800
01373  1372  8D 18 D0              STA $D018
01374  1375             
01375  1375                        ;JSR CONSOLE.CLEAR$
01376  1375             
01377  1375  60                    RTS
01378  1376             
01379  1376             ;ALIGN $100
01380  1376             
01381  1376             CONSOLE.CLEAR$ 
01382  1376  A2 00                 LDX #$00
01383  1378  A9 20                 LDA #$20
01384  137A             @LOOP
01385  137A  9D 00 04              STA CONSOLE.MEMORYADDRESS,X
01386  137D  9D 00 05              STA CONSOLE.MEMORYADDRESS+$100,X
01387  1380  9D 00 06              STA CONSOLE.MEMORYADDRESS+$200,X
01388  1383  9D 00 07              STA CONSOLE.MEMORYADDRESS+$300,X
01389  1386  CA                    DEX
01390  1387  D0 F1                 BNE @LOOP
01391  1389             
01392  1389  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
01393  138B  8D EE 12              STA CONSOLE.CURRENTADDRESS
01394  138E  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
01395  1390  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
01396  1393             
01397  1393  A9 00                 LDA #<CONSOLE.COLORADDRESS
01398  1395  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
01399  1398  A9 D8                 LDA #>CONSOLE.COLORADDRESS
01400  139A  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
01401  139D             
01402  139D  A9 00                 LDA #$00
01403  139F  8D F1 12              STA CONSOLE.CURRENTROW
01404  13A2  8D F0 12              STA CONSOLE.CURRENTCOLUMN
01405  13A5             
01406  13A5  60                    RTS
01407  13A6             
01408  13A6             CONSOLE.GETROW.ROW$ = $73 ; 1 BYTE
01409  13A6             CONSOLE.GETROW$ 
01410  13A6  AD F1 12              LDA CONSOLE.CURRENTROW
01411  13A9  85 73                 STA CONSOLE.GETROW.ROW$
01412  13AB  60                    RTS
01413  13AC             
01414  13AC             CONSOLE.SETROW.ROW$ = $73 ; 1 BYTE
01415  13AC             CONSOLE.SETROW$ 
01416  13AC  A5 73                 LDA CONSOLE.SETROW.ROW$
01417  13AE  8D F1 12              STA CONSOLE.CURRENTROW
01418  13B1  20 C4 13              JSR CONSOLE.CALC_CURRENTADDRESS
01419  13B4  60                    RTS
01420  13B5             
01421  13B5             CONSOLE.GETCOLUMN.COLUMN$ = $73 ; 1 BYTE
01422  13B5             CONSOLE.GETCOLUMN$ 
01423  13B5  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
01424  13B8  85 73                 STA CONSOLE.GETCOLUMN.COLUMN$
01425  13BA  60                    RTS
01426  13BB             
01427  13BB             CONSOLE.SETCOLUMN.COLUMN$ = $73 ; 1 BYTE
01428  13BB             CONSOLE.SETCOLUMN$ 
01429  13BB  A5 73                 LDA CONSOLE.SETCOLUMN.COLUMN$
01430  13BD  8D F0 12              STA CONSOLE.CURRENTCOLUMN
01431  13C0  20 C4 13              JSR CONSOLE.CALC_CURRENTADDRESS
01432  13C3  60                    RTS
01433  13C4             
01434  13C4             CONSOLE.CALC_CURRENTADDRESS.SUM = $74 ; 2 BYTES
01435  13C4             CONSOLE.CALC_CURRENTADDRESS 
01436  13C4                        ; CACULATE CONSOLE.CURRENTADDRESS BY THE UPDATED ROW AND COLUMN VALUES.
01437  13C4             
01438  13C4                        ; CONSOLE.CURRENTADDRESS = CONSOLE.MEMORYADDRESS + ((COLUMN) + (ROW * 40))
01439  13C4                        ; CONSOLE.CURRENTCOLORADDR = CONSOLE.COLORADDRESS + ((COLUMN) + (ROW * 40))
01440  13C4             
01441  13C4  AD F1 12              LDA CONSOLE.CURRENTROW
01442  13C7  85 80                 STA MATH.MULTIPLY16.FACTOR1$
01443  13C9  A9 28                 LDA #40
01444  13CB  85 82                 STA MATH.MULTIPLY16.FACTOR2$
01445  13CD  A9 00                 LDA #$00
01446  13CF  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
01447  13D1  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
01448  13D3  20 67 29              JSR MATH.MULTIPLY16$ ; PRODUCT = CURRENTROW * 40
01449  13D6                        
01450  13D6  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
01451  13D8  85 80                 STA MATH.ADD16.ADDEND1$
01452  13DA  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
01453  13DC  85 81                 STA MATH.ADD16.ADDEND1$+1
01454  13DE  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
01455  13E1  85 82                 STA MATH.ADD16.ADDEND2$
01456  13E3  A9 00                 LDA #$00
01457  13E5  85 83                 STA MATH.ADD16.ADDEND2$+1
01458  13E7  20 00 28              JSR MATH.ADD16$ ; SUM = COLUMN + PRODUCT
01459  13EA  A5 84                 LDA MATH.ADD16.SUM$
01460  13EC  85 74                 STA CONSOLE.CALC_CURRENTADDRESS.SUM
01461  13EE  A5 85                 LDA MATH.ADD16.SUM$+1
01462  13F0  85 75                 STA CONSOLE.CALC_CURRENTADDRESS.SUM+1
01463  13F2                        
01464  13F2  A5 74                 LDA CONSOLE.CALC_CURRENTADDRESS.SUM
01465  13F4  85 80                 STA MATH.ADD16.ADDEND1$
01466  13F6  A5 75                 LDA CONSOLE.CALC_CURRENTADDRESS.SUM+1
01467  13F8  85 81                 STA MATH.ADD16.ADDEND1$+1
01468  13FA  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
01469  13FC  85 82                 STA MATH.ADD16.ADDEND2$
01470  13FE  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
01471  1400  85 83                 STA MATH.ADD16.ADDEND2$+1
01472  1402  20 00 28              JSR MATH.ADD16$ ; CURRENTADDRESS = MEMORYADDRESS + SUM
01473  1405  A5 84                 LDA MATH.ADD16.SUM$
01474  1407  8D EE 12              STA CONSOLE.CURRENTADDRESS
01475  140A  A5 85                 LDA MATH.ADD16.SUM$+1
01476  140C  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
01477  140F             
01478  140F                        ; CONSOLE.CURRENTCOLORADDR = CONSOLE.COLORADDRESS + SUM
01479  140F  A5 74                 LDA CONSOLE.CALC_CURRENTADDRESS.SUM
01480  1411  85 80                 STA MATH.ADD16.ADDEND1$
01481  1413  A5 75                 LDA CONSOLE.CALC_CURRENTADDRESS.SUM+1
01482  1415  85 81                 STA MATH.ADD16.ADDEND1$+1
01483  1417  A9 00                 LDA #<CONSOLE.COLORADDRESS
01484  1419  85 82                 STA MATH.ADD16.ADDEND2$
01485  141B  A9 D8                 LDA #>CONSOLE.COLORADDRESS
01486  141D  85 83                 STA MATH.ADD16.ADDEND2$+1
01487  141F  20 00 28              JSR MATH.ADD16$ ; CURRENTADDRESS = MEMORYADDRESS + SUM
01488  1422  A5 84                 LDA MATH.ADD16.SUM$
01489  1424  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
01490  1427  A5 85                 LDA MATH.ADD16.SUM$+1
01491  1429  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
01492  142C             
01493  142C  60                    RTS
01494  142D             
01495  142D             ;CONSOLE.SCROLLUP$
01496  142D             ;        ; COPY THE CHARACTERS FROM THE 2ND ROW AND OVERRIDE THE FIRST ROW.
01497  142D             ;        ; CLEAR OUT THE TEXT ON THE LAST ROW.
01498  142D             
01499  142D             ;        ;LDX #$28
01500  142D             ;        LDY #$00
01501  142D             ;@LOOP
01502  142D             ;        LDA $0428,Y
01503  142D             ;        STA $0400,Y
01504  142D             ;        LDA $0518,Y
01505  142D             ;        STA $04F0,Y
01506  142D             ;        INY
01507  142D             ;        ;CPY #215 ;(255-40)
01508  142D             ;        ;CPY #$FF
01509  142D             ;        CPY #240
01510  142D             ;        BNE @LOOP
01511  142D             
01512  142D             ;;        LDA $0500,X
01513  142D             ;;        STA $0500,Y
01514  142D             ;;        LDA $0600,X
01515  142D             ;;        STA $0600,Y
01516  142D             ;;        LDA $0700,X
01517  142D             ;;        STA $0700,Y
01518  142D             
01519  142D             ;        RTS
01520  142D             
01521  142D             ;ALIGN $100
01522  142D             
01523  142D             CONSOLE.SCROLLUP$ 
01524  142D                        ; COPY THE CHARACTERS FROM THE 2ND ROW AND OVERRIDE THE FIRST ROW.
01525  142D                        ; CLEAR OUT THE TEXT ON THE LAST ROW.
01526  142D             
01527  142D             ;        LDA #$00
01528  142D             ;        STA $FB
01529  142D             ;        LDA #$04
01530  142D             ;        STA $FC
01531  142D             ;        LDA #$28
01532  142D             ;        STA $FD
01533  142D             ;        LDA #$04
01534  142D             ;        STA $FE
01535  142D  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
01536  142F  85 FB                 STA $FB
01537  1431  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
01538  1433  85 FC                 STA $FC
01539  1435  A9 28                 LDA #<CONSOLE.MEMORYADDRESS+$28
01540  1437  85 FD                 STA $FD
01541  1439  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
01542  143B  85 FE                 STA $FE
01543  143D  20 63 14              JSR CONSOLE.SCROLLUPCHRS
01544  1440             
01545  1440                        ; NEED TO "SCROLL" UP THE CHARACTER COLORS AS WELL
01546  1440  A9 00                 LDA #<CONSOLE.COLORADDRESS
01547  1442  85 FB                 STA $FB
01548  1444  A9 D8                 LDA #>CONSOLE.COLORADDRESS
01549  1446  85 FC                 STA $FC
01550  1448  A9 28                 LDA #<CONSOLE.COLORADDRESS+$28
01551  144A  85 FD                 STA $FD
01552  144C  A9 D8                 LDA #>CONSOLE.COLORADDRESS
01553  144E  85 FE                 STA $FE
01554  1450  20 63 14              JSR CONSOLE.SCROLLUPCHRS
01555  1453             
01556  1453                        ; CLEAR THE LAST LINE
01557  1453  A9 20                 LDA #$20
01558  1455  A0 00                 LDY #$00
01559  1457             @LOOP_LR
01560  1457  99 C0 07              STA CONSOLE.MEMORYADDRESS_LR,Y
01561  145A  C8                    INY
01562  145B  C0 28                 CPY #$28
01563  145D  D0 F8                 BNE @LOOP_LR
01564  145F             
01565  145F  20 AC 30              JSR GRAPHICS.SCROLLUP
01566  1462             
01567  1462  60                    RTS
01568  1463             
01569  1463             CONSOLE.SCROLLUPCHRS 
01570  1463  A2 00                 LDX #$00
01571  1465             @LOOP1     ; DO PROCESS 4 TIMES (6*4 = 24)
01572  1465  A0 00                 LDY #$00
01573  1467             @LOOP2     ; MOVE UP 6 LINES
01574  1467  B1 FD                 LDA ($FD),Y
01575  1469  91 FB                 STA ($FB),Y
01576  146B  C8                    INY
01577  146C  C0 F0                 CPY #240 ; (40*6)
01578  146E  D0 F7                 BNE @LOOP2
01579  1470             
01580  1470  E8                    INX
01581  1471  E0 04                 CPX #4
01582  1473  F0 39                 BEQ @CLEAR_LR
01583  1475             
01584  1475                        ; NEED TO INCREASE THE VALUE OF THE ADDRESS THAT $FB AND $FD ARE POINTING TO.
01585  1475  A5 FB                 LDA $FB
01586  1477  85 80                 STA MATH.ADD16.ADDEND1$
01587  1479  A5 FC                 LDA $FC
01588  147B  85 81                 STA MATH.ADD16.ADDEND1$+1
01589  147D             
01590  147D  A9 F0                 LDA #240
01591  147F  85 82                 STA MATH.ADD16.ADDEND2$
01592  1481  A9 00                 LDA #0
01593  1483  85 83                 STA MATH.ADD16.ADDEND2$+1
01594  1485             
01595  1485  20 00 28              JSR MATH.ADD16$ ; ($FB+$FC) = ($FB+$FC) + $28
01596  1488             
01597  1488  A5 84                 LDA MATH.ADD16.SUM$
01598  148A  85 FB                 STA $FB
01599  148C  A5 85                 LDA MATH.ADD16.SUM$+1
01600  148E  85 FC                 STA $FC
01601  1490             
01602  1490  A5 FD                 LDA $FD
01603  1492  85 80                 STA MATH.ADD16.ADDEND1$
01604  1494  A5 FE                 LDA $FE
01605  1496  85 81                 STA MATH.ADD16.ADDEND1$+1
01606  1498             
01607  1498  A9 F0                 LDA #240
01608  149A  85 82                 STA MATH.ADD16.ADDEND2$
01609  149C  A9 00                 LDA #0
01610  149E  85 83                 STA MATH.ADD16.ADDEND2$+1
01611  14A0             
01612  14A0  20 00 28              JSR MATH.ADD16$ ; ($FD+$FE) = ($FD+$FE) + $28
01613  14A3             
01614  14A3  A5 84                 LDA MATH.ADD16.SUM$
01615  14A5  85 FD                 STA $FD
01616  14A7  A5 85                 LDA MATH.ADD16.SUM$+1
01617  14A9  85 FE                 STA $FE
01618  14AB             
01619  14AB  4C 65 14              JMP @LOOP1
01620  14AE             
01621  14AE             @CLEAR_LR
01622  14AE             ;        LDA #$20
01623  14AE             ;        LDY #$00
01624  14AE             ;@LOOP_LR
01625  14AE             ;        STA CONSOLE.MEMORYADDRESS_LR,Y
01626  14AE             ;        INY
01627  14AE             ;        CPY #$28
01628  14AE             ;        BNE @LOOP_LR
01629  14AE             
01630  14AE  60                    RTS
01631  14AF             
01632  14AF             
01633  14AF             CONSOLE.WRITELN$ 
01634  14AF  A9 FE                 LDA #CONSOLE.NEWLINE$
01635  14B1  85 02                 STA CONSOLE.WRITECHR.CHAR$
01636  14B3  20 19 15              JSR CONSOLE.WRITECHR$
01637  14B6  60                    RTS
01638  14B7             
01639  14B7             CONSOLE.WRITESTR.STRADDRESS$ = $E0 ; 2 BYTES
01640  14B7             
01641  14B7             CONSOLE.WRITESTR$ 
01642  14B7                        ; PRINT EACH CHARACTER TO THE SCREEN
01643  14B7  A0 00                 LDY #$00
01644  14B9             @LOOP
01645  14B9  B1 E0                 LDA (CONSOLE.WRITESTR.STRADDRESS$),Y
01646  14BB                        ;CMP #$00
01647  14BB  C9 FF                 CMP #CONSOLE.NULL$
01648  14BD  F0 0F                 BEQ @END
01649  14BF  85 02                 STA CONSOLE.WRITECHR.CHAR$
01650  14C1  20 19 15              JSR CONSOLE.WRITECHR$
01651  14C4  C8                    INY
01652  14C5  C0 00                 CPY #$00
01653  14C7  D0 F0                 BNE @LOOP
01654  14C9  E6 E1                 INC CONSOLE.WRITESTR.STRADDRESS$+1
01655  14CB  4C B9 14              JMP @LOOP
01656  14CE             @END
01657  14CE  60                    RTS
01658  14CF             
01659  14CF             ;ALIGN $100
01660  14CF             
01661  14CF             CONSOLE.WRITEINT8.INTEGER$ = $E0 ; 1 BYTE
01662  14CF             CONSOLE.WRITEINT8$ 
01663  14CF  20 00 1C              JSR CONVERT.HEX2DEC8
01664  14D2  A2 02                 LDX #2 ; MAX. LENGTH - 1
01665  14D4  4C 00 15              JMP CONSOLE.WRITEINT
01666  14D7             
01667  14D7             CONSOLE.WRITEINT16.INTEGER$ = $E0 ; 2 BYTES
01668  14D7             CONSOLE.WRITEINT16$ 
01669  14D7  20 1F 1C              JSR CONVERT.HEX2DEC16
01670  14DA  A2 04                 LDX #4 ; MAX. LENGTH - 1
01671  14DC  4C 00 15              JMP CONSOLE.WRITEINT
01672  14DF             
01673  14DF             CONSOLE.WRITEINT32.INTEGER$ = $E0 ; 4 BYTES
01674  14DF             CONSOLE.WRITEINT32$ 
01675  14DF  20 40 1C              JSR CONVERT.HEX2DEC32
01676  14E2  A2 09                 LDX #9 ; MAX. LENGTH - 1
01677  14E4  4C 00 15              JMP CONSOLE.WRITEINT
01678  14E7             
01679  14E7             ALIGN      $100
01680  1500             
01681  1500             CONSOLE.WRITEINT 
01682  1500             @L1        
01683  1500  B5 E4                 LDA CONVERT.HEX2DEC.RESULT,X
01684  1502  D0 03                 BNE @L2
01685  1504  CA                    DEX             ; SKIP LEADING ZEROS
01686  1505  D0 F9                 BNE @L1
01687  1507             
01688  1507             @L2
01689  1507  A0 00                 LDY #$00
01690  1509             @LOOP
01691  1509  B5 E4                 LDA CONVERT.HEX2DEC.RESULT,X
01692  150B  09 30                 ORA #$30  ;(CONVERT TO ASCII)
01693  150D                        ;STA CONSOLE.MEMORYADDRESS,Y
01694  150D  85 02                 STA CONSOLE.WRITECHR.CHAR$
01695  150F  20 19 15              JSR CONSOLE.WRITECHR$
01696  1512  C8                    INY
01697  1513  CA                    DEX
01698  1514  10 F3                 BPL @LOOP
01699  1516  60                    RTS
01700  1517             
01701  1517             ;ALIGN $100
01702  1517             
01703  1517             CONSOLE.NEWLINE$ = $FE
01704  1517             CONSOLE.NULL$ = $FF
01705  1517             CONSOLE.BACKSPACE$ = $FD
01706  1517             CONSOLE.QUOTE$ = $27
01707  1517             
01708  1517             CONSOLE.WRITECHR.CHAR$ = $02 ; 1 BYTE
01709  1517             CONSOLE.WRITECHR.ADDRESS = $FB ; 2 BYTES
01710  1517  00 00      CONSOLE.WRITECHR.OFFSET WORD $0000
01711  1519             CONSOLE.WRITECHR$ 
01712  1519                        ; PRINTS AN INDIVIDUAL CHARACTER TO THE SCREEN.
01713  1519                        ; THE CHARACTER TO PRINT IS STORED IN A.
01714  1519             
01715  1519                        ;STA CONSOLE.WRITECHR.CHAR$
01716  1519             
01717  1519             ;        PHA ; SAVE A ONTO STACK.
01718  1519             ;        TXA
01719  1519             ;        PHA ; SAVE X ONTO STACK.
01720  1519             ;        TYA
01721  1519             ;        PHA ; SAVE Y ONTO STACK.
01722  1519  20 37 10              JSR MEMORY.PUSHREGS$
01723  151C             
01724  151C                        ; SET THE COLOR OF THIS CHARACTER.
01725  151C  A0 00                 LDY #$00
01726  151E  AD F2 12              LDA CONSOLE.CURRENTCOLORADDR
01727  1521  85 FB                 STA CONSOLE.WRITECHR.ADDRESS
01728  1523  AD F3 12              LDA CONSOLE.CURRENTCOLORADDR+1
01729  1526  85 FC                 STA CONSOLE.WRITECHR.ADDRESS+1
01730  1528             
01731  1528  AD F4 12              LDA CONSOLE.CHARACTERCOLOR
01732  152B  91 FB                 STA (CONSOLE.WRITECHR.ADDRESS),Y
01733  152D             
01734  152D                        ; WRITE THE CHARACTER TO THE SCREEN MEMORY.
01735  152D  A0 00                 LDY #$00
01736  152F  AD EE 12              LDA CONSOLE.CURRENTADDRESS
01737  1532  85 FB                 STA CONSOLE.WRITECHR.ADDRESS
01738  1534  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
01739  1537  85 FC                 STA CONSOLE.WRITECHR.ADDRESS+1
01740  1539             
01741  1539                        ; IF {RETURN} DETECTED THEN WE NEED TO START AT THE BEGINNING OF THE NEXT ROW.
01742  1539  A5 02                 LDA CONSOLE.WRITECHR.CHAR$
01743  153B  C9 FE                 CMP #CONSOLE.NEWLINE$
01744  153D  F0 1C                 BEQ @DO_NEWLINE
01745  153F             
01746  153F                        ; IF {DELETE} DETECTED THEN WE NEED TO PERFORM A BACKSPACE OPERATION.
01747  153F  A5 02                 LDA CONSOLE.WRITECHR.CHAR$
01748  1541  C9 FD                 CMP #CONSOLE.BACKSPACE$
01749  1543  F0 36                 BEQ @DO_BACKSPACE
01750  1545             
01751  1545                        ; INVERT THE CHARACTER AS NEEDED.
01752  1545  18                    CLC
01753  1546  6D F5 12              ADC CONSOLE.CHARACTERSINVERTED
01754  1549             
01755  1549             ;        LDA GRAPHICS.ISACTIVE$
01756  1549             ;        CMP #$01
01757  1549             ;        BEQ @DRAWCHR
01758  1549             ;        STA (CONSOLE.WRITECHR.ADDRESS),Y
01759  1549             ;        JMP @SKIPDRAWCHR
01760  1549             ;@DRAWCHR
01761  1549             ;        JSR GRAPHICS.DRAWCHR
01762  1549             ;@SKIPDRAWCHR
01763  1549  91 FB                 STA (CONSOLE.WRITECHR.ADDRESS),Y
01764  154B  20 CA 2F              JSR GRAPHICS.DRAWCHR
01765  154E             
01766  154E                        ;LDY #$01
01767  154E  A9 01                 LDA #$01
01768  1550  8D 17 15              STA CONSOLE.WRITECHR.OFFSET
01769  1553  A9 00                 LDA #$00
01770  1555  8D 18 15              STA CONSOLE.WRITECHR.OFFSET+1
01771  1558             
01772  1558  4C A5 15              JMP CONSOLE.INC_MEMADDRESS
01773  155B             
01774  155B             ;@INC_MEMADDRESS
01775  155B             ;        ; UPDATE CONSOLE.CURRENTADDRESS
01776  155B             ;        LDA CONSOLE.WRITECHR.ADDRESS
01777  155B             ;        STA MATH.ADD16.ADDEND1$
01778  155B             ;        LDA CONSOLE.WRITECHR.ADDRESS+1
01779  155B             ;        STA MATH.ADD16.ADDEND1$+1
01780  155B             
01781  155B             ;        ;LDA #$01
01782  155B             ;        ;TYA
01783  155B             ;        LDA CONSOLE.WRITECHR.OFFSET
01784  155B             ;        STA MATH.ADD16.ADDEND2$
01785  155B             ;        LDA CONSOLE.WRITECHR.OFFSET+1
01786  155B             ;        STA MATH.ADD16.ADDEND2$+1
01787  155B             
01788  155B             ;        JSR MATH.ADD16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS + 1
01789  155B             ;
01790  155B             ;        LDA MATH.ADD16.SUM$
01791  155B             ;        STA CONSOLE.CURRENTADDRESS
01792  155B             ;        LDA MATH.ADD16.SUM$+1
01793  155B             ;        STA CONSOLE.CURRENTADDRESS+1
01794  155B             ;
01795  155B             ;        ; UPDATE CONSOLE.CURRENTCOLORADDR
01796  155B             ;        LDA CONSOLE.CURRENTCOLORADDR
01797  155B             ;        STA MATH.ADD16.ADDEND1$
01798  155B             ;        LDA CONSOLE.CURRENTCOLORADDR+1
01799  155B             ;        STA MATH.ADD16.ADDEND1$+1
01800  155B             
01801  155B             ;        LDA CONSOLE.WRITECHR.OFFSET
01802  155B             ;        STA MATH.ADD16.ADDEND2$
01803  155B             ;        LDA CONSOLE.WRITECHR.OFFSET+1
01804  155B             ;        STA MATH.ADD16.ADDEND2$+1
01805  155B             
01806  155B             ;        JSR MATH.ADD16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS + 1
01807  155B             ;
01808  155B             ;        LDA MATH.ADD16.SUM$
01809  155B             ;        STA CONSOLE.CURRENTCOLORADDR
01810  155B             ;        LDA MATH.ADD16.SUM$+1
01811  155B             ;        STA CONSOLE.CURRENTCOLORADDR+1
01812  155B             ;
01813  155B             ;        ; INCREASE THE CURRENT COLUMN NUMBER
01814  155B             ;        LDA CONSOLE.CURRENTCOLUMN
01815  155B             ;        CMP #39
01816  155B             ;        BNE @INC_CURRENTCOLUMN
01817  155B             
01818  155B             ;@RESET_LR
01819  155B             ;        ; RESET THE CURRENT COLUMN
01820  155B             ;        LDA #$FF
01821  155B             ;        STA CONSOLE.CURRENTCOLUMN
01822  155B             
01823  155B             ;        ; INCREASE THE CURRENT ROW NUMBER
01824  155B             ;        LDA CONSOLE.CURRENTROW
01825  155B             ;        CMP #24
01826  155B             ;        BNE @INC_CURRENTROW
01827  155B             ;
01828  155B             ;        ; SCROLL ALL TEXT UP ONE ROW
01829  155B             ;        LDA #23
01830  155B             ;        STA CONSOLE.CURRENTROW
01831  155B             
01832  155B             ;        ; NEED TO SCROLL THE CHARCTERS UP ONE ROW.
01833  155B             ;        JSR CONSOLE.SCROLLUP$
01834  155B             
01835  155B             ;        ; UPDATE THE ADDRESS
01836  155B             ;        LDA #<CONSOLE.MEMORYADDRESS_LR
01837  155B             ;        STA CONSOLE.CURRENTADDRESS
01838  155B             ;        LDA #>CONSOLE.MEMORYADDRESS_LR
01839  155B             ;        STA CONSOLE.CURRENTADDRESS+1
01840  155B             
01841  155B             ;@INC_CURRENTROW
01842  155B             ;        INC CONSOLE.CURRENTROW
01843  155B             
01844  155B             ;@INC_CURRENTCOLUMN
01845  155B             ;        INC CONSOLE.CURRENTCOLUMN
01846  155B             
01847  155B             ;        JMP @END
01848  155B             
01849  155B             @DO_NEWLINE 
01850  155B                        ; WE NEED TO INCREASE THE CURRENT ADDRESS BY THE DIFFERENCE OF THE NUMBER OF COLUMNS REMAINING
01851  155B             
01852  155B  AD F1 12              LDA CONSOLE.CURRENTROW
01853  155E  C9 18                 CMP #24
01854  1560  F0 16                 BEQ @RESET_LR
01855  1562                        ;BEQ CONSOLE.INC_MEMADDRESS.RESET_LR
01856  1562             
01857  1562  A9 28                 LDA #40
01858  1564  38                    SEC
01859  1565  ED F0 12              SBC CONSOLE.CURRENTCOLUMN
01860  1568                        ;TAY ; STORE THE NUMBER OF COLUMNS WE NEED TO ADD TO GET THE NEXT ROW
01861  1568  8D 17 15              STA CONSOLE.WRITECHR.OFFSET
01862  156B  A9 00                 LDA #0
01863  156D  8D 18 15              STA CONSOLE.WRITECHR.OFFSET+1
01864  1570             
01865  1570                        ; RESET CONSOLE.CURRENTCOLUMN
01866  1570  A9 27                 LDA #39
01867  1572  8D F0 12              STA CONSOLE.CURRENTCOLUMN
01868  1575             
01869  1575  4C A5 15              JMP CONSOLE.INC_MEMADDRESS
01870  1578             
01871  1578             @RESET_LR
01872  1578  4C F1 15              JMP CONSOLE.INC_MEMADDRESS.RESET_LR
01873  157B             
01874  157B             @DO_BACKSPACE 
01875  157B                        ; WE NEED TO DECREASE THE CURRENT ADDRESS BY 1 AND CLEAR THE CURRENT TEXT.
01876  157B                        ; IF WE ARE AT THE STARTING MEMORY ADDRESS THEN CANNOT GO BACK ANY FUTHER.
01877  157B             
01878  157B  A9 01                 LDA #$01
01879  157D  8D 17 15              STA CONSOLE.WRITECHR.OFFSET
01880  1580  A9 00                 LDA #$00
01881  1582  8D 18 15              STA CONSOLE.WRITECHR.OFFSET+1
01882  1585                        
01883  1585                        ; DO NOT MOVE BACKWARDS OF THE LOCATION IS AT THE BEGINNING OF THE CARET STARTING ADDRESS.
01884  1585  AD EE 12              LDA CONSOLE.CURRENTADDRESS
01885  1588  85 80                 STA MATH.CMP16.NUM1$
01886  158A  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
01887  158D  85 81                 STA MATH.CMP16.NUM1$+1
01888  158F             
01889  158F  AD 73 18              LDA CONSOLE.CARETSTARTADDRESS
01890  1592  85 82                 STA MATH.CMP16.NUM2$
01891  1594  AD 74 18              LDA CONSOLE.CARETSTARTADDRESS+1
01892  1597  85 83                 STA MATH.CMP16.NUM2$+1
01893  1599             
01894  1599  20 E4 28              JSR MATH.CMP16$ ; IF CONSOLE.CURRENTADDRESS = CONSOLE.CARETSTARTADDRESS THEN EXIT
01895  159C  F0 03                 BEQ @END
01896  159E             
01897  159E             ;        LDA CONSOLE.CURRENTROW
01898  159E             ;        CMP #0
01899  159E             ;        BNE @DEC_MEMADDRESS
01900  159E             
01901  159E             ;        LDA CONSOLE.CURRENTCOLUMN
01902  159E             ;        CMP #0
01903  159E             ;        BNE @DEC_MEMADDRESS
01904  159E             
01905  159E             ;        JMP @END
01906  159E             
01907  159E             ;@DEC_MEMADDRESS
01908  159E  4C 26 16              JMP CONSOLE.DEC_MEMADDRESS
01909  15A1             
01910  15A1             @END
01911  15A1             ;        PLA ; SAVE Y ONTO STACK.
01912  15A1             ;        TAY
01913  15A1             ;        PLA ; SAVE X ONTO STACK.
01914  15A1             ;        TAX
01915  15A1             ;        PLA ; SAVE A ONTO STACK.
01916  15A1  20 4D 10              JSR MEMORY.PULLREGS$
01917  15A4             
01918  15A4  60                    RTS
01919  15A5             
01920  15A5             CONSOLE.INC_MEMADDRESS 
01921  15A5             
01922  15A5                        ; UPDATE CONSOLE.CURRENTADDRESS
01923  15A5  AD EE 12              LDA CONSOLE.CURRENTADDRESS
01924  15A8  85 80                 STA MATH.ADD16.ADDEND1$
01925  15AA  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
01926  15AD  85 81                 STA MATH.ADD16.ADDEND1$+1
01927  15AF             
01928  15AF                        ;LDA #$01
01929  15AF                        ;TYA
01930  15AF  AD 17 15              LDA CONSOLE.WRITECHR.OFFSET
01931  15B2  85 82                 STA MATH.ADD16.ADDEND2$
01932  15B4  AD 18 15              LDA CONSOLE.WRITECHR.OFFSET+1
01933  15B7  85 83                 STA MATH.ADD16.ADDEND2$+1
01934  15B9             
01935  15B9  20 00 28              JSR MATH.ADD16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS + 1
01936  15BC                        
01937  15BC  A5 84                 LDA MATH.ADD16.SUM$
01938  15BE  8D EE 12              STA CONSOLE.CURRENTADDRESS
01939  15C1  A5 85                 LDA MATH.ADD16.SUM$+1
01940  15C3  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
01941  15C6                        
01942  15C6                        ; UPDATE CONSOLE.CURRENTCOLORADDR
01943  15C6  AD F2 12              LDA CONSOLE.CURRENTCOLORADDR
01944  15C9  85 80                 STA MATH.ADD16.ADDEND1$
01945  15CB  AD F3 12              LDA CONSOLE.CURRENTCOLORADDR+1
01946  15CE  85 81                 STA MATH.ADD16.ADDEND1$+1
01947  15D0             
01948  15D0  AD 17 15              LDA CONSOLE.WRITECHR.OFFSET
01949  15D3  85 82                 STA MATH.ADD16.ADDEND2$
01950  15D5  AD 18 15              LDA CONSOLE.WRITECHR.OFFSET+1
01951  15D8  85 83                 STA MATH.ADD16.ADDEND2$+1
01952  15DA             
01953  15DA  20 00 28              JSR MATH.ADD16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS + 1
01954  15DD                        
01955  15DD  A5 84                 LDA MATH.ADD16.SUM$
01956  15DF  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
01957  15E2  A5 85                 LDA MATH.ADD16.SUM$+1
01958  15E4  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
01959  15E7                        
01960  15E7                        ; INCREASE THE CURRENT COLUMN NUMBER
01961  15E7  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
01962  15EA  C9 27                 CMP #39
01963  15EC                        ;BNE CONSOLE.INC_MEMADDRESS.INC_CURRENTCOLUMN
01964  15EC  F0 03                 BEQ CONSOLE.INC_MEMADDRESS.RESET_LR
01965  15EE  4C 1F 16              JMP CONSOLE.INC_MEMADDRESS.INC_CURRENTCOLUMN
01966  15F1                        
01967  15F1             
01968  15F1             ;@RESET_LR
01969  15F1             CONSOLE.INC_MEMADDRESS.RESET_LR 
01970  15F1                        ; RESET THE CURRENT COLUMN
01971  15F1  A9 FF                 LDA #$FF
01972  15F3  8D F0 12              STA CONSOLE.CURRENTCOLUMN
01973  15F6             
01974  15F6                        ; INCREASE THE CURRENT ROW NUMBER
01975  15F6  AD F1 12              LDA CONSOLE.CURRENTROW
01976  15F9  C9 18                 CMP #24
01977  15FB                        ;BNE CONSOLE.INC_MEMADDRESS.INC_CURRENTROW
01978  15FB  F0 03                 BEQ CONSOLE.INC_MEMADDRESS.INC_CURRENTROW_SKIP
01979  15FD  4C 1C 16              JMP CONSOLE.INC_MEMADDRESS.INC_CURRENTROW
01980  1600             CONSOLE.INC_MEMADDRESS.INC_CURRENTROW_SKIP 
01981  1600                        
01982  1600                        ; SCROLL ALL TEXT UP ONE ROW
01983  1600  A9 17                 LDA #23
01984  1602  8D F1 12              STA CONSOLE.CURRENTROW
01985  1605             
01986  1605                        ; NEED TO SCROLL THE CHARCTERS UP ONE ROW.
01987  1605  20 2D 14              JSR CONSOLE.SCROLLUP$
01988  1608             
01989  1608                        ; UPDATE THE ADDRESS
01990  1608  A9 C0                 LDA #<CONSOLE.MEMORYADDRESS_LR
01991  160A  8D EE 12              STA CONSOLE.CURRENTADDRESS
01992  160D  A9 07                 LDA #>CONSOLE.MEMORYADDRESS_LR
01993  160F  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
01994  1612             
01995  1612                        ; UPDATE THE ADDRESS
01996  1612  A9 C0                 LDA #<CONSOLE.COLORADDRESS_LR
01997  1614  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
01998  1617  A9 DB                 LDA #>CONSOLE.COLORADDRESS_LR
01999  1619  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
02000  161C             
02001  161C             CONSOLE.INC_MEMADDRESS.INC_CURRENTROW 
02002  161C  EE F1 12              INC CONSOLE.CURRENTROW
02003  161F             
02004  161F             CONSOLE.INC_MEMADDRESS.INC_CURRENTCOLUMN 
02005  161F  EE F0 12              INC CONSOLE.CURRENTCOLUMN
02006  1622             
02007  1622                        ;JMP CONSOLE.INC_MEMADDRESS.END
02008  1622             
02009  1622             CONSOLE.INC_MEMADDRESS.END 
02010  1622  20 4D 10              JSR MEMORY.PULLREGS$
02011  1625  60                    RTS
02012  1626             
02013  1626             ;ALIGN $100
02014  1626             
02015  1626             CONSOLE.DEC_MEMADDRESS 
02016  1626             
02017  1626                        ; UPDATE CONSOLE.CURRENTADDRESS
02018  1626  AD EE 12              LDA CONSOLE.CURRENTADDRESS
02019  1629  85 80                 STA MATH.SUBTRACT16.MENUEND$
02020  162B  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
02021  162E  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
02022  1630             
02023  1630  AD 17 15              LDA CONSOLE.WRITECHR.OFFSET
02024  1633  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
02025  1635  AD 18 15              LDA CONSOLE.WRITECHR.OFFSET+1
02026  1638  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
02027  163A             
02028  163A  20 96 28              JSR MATH.SUBTRACT16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS - 1
02029  163D                        
02030  163D  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
02031  163F  8D EE 12              STA CONSOLE.CURRENTADDRESS
02032  1642  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
02033  1644  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
02034  1647                        
02035  1647                        ; UPDATE CONSOLE.CURRENTCOLORADDR
02036  1647  AD F2 12              LDA CONSOLE.CURRENTCOLORADDR
02037  164A  85 80                 STA MATH.SUBTRACT16.MENUEND$
02038  164C  AD F3 12              LDA CONSOLE.CURRENTCOLORADDR+1
02039  164F  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
02040  1651             
02041  1651  AD 17 15              LDA CONSOLE.WRITECHR.OFFSET
02042  1654  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
02043  1656  AD 18 15              LDA CONSOLE.WRITECHR.OFFSET+1
02044  1659  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
02045  165B             
02046  165B  20 96 28              JSR MATH.SUBTRACT16$ ; CONSOLE.CURRENTADDRESS = CONSOLE.CURRENTADDRESS - 1
02047  165E                        
02048  165E  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
02049  1660  8D F2 12              STA CONSOLE.CURRENTCOLORADDR
02050  1663  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
02051  1665  8D F3 12              STA CONSOLE.CURRENTCOLORADDR+1
02052  1668                        
02053  1668                        ; DECREASE THE CURRENT COLUMN NUMBER
02054  1668  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
02055  166B  C9 00                 CMP #0
02056  166D  D0 21                 BNE CONSOLE.DEC_MEMADDRESS.DEC_CURRENTCOLUMN
02057  166F             
02058  166F             CONSOLE.DEC_MEMADDRESS.RESET_LR 
02059  166F                        ; RESET THE CURRENT COLUMN
02060  166F                        ;LDA #$39
02061  166F  A9 28                 LDA #$28
02062  1671  8D F0 12              STA CONSOLE.CURRENTCOLUMN
02063  1674             
02064  1674                        ; DESCREASE THE CURRENT ROW NUMBER
02065  1674  AD F1 12              LDA CONSOLE.CURRENTROW
02066  1677  C9 00                 CMP #0
02067  1679  D0 12                 BNE CONSOLE.DEC_MEMADDRESS.DEC_CURRENTROW
02068  167B             
02069  167B  A9 00                 LDA #0
02070  167D  8D F0 12              STA CONSOLE.CURRENTCOLUMN
02071  1680             
02072  1680                        ; UPDATE THE ADDRESS
02073  1680  A9 00                 LDA #<CONSOLE.MEMORYADDRESS
02074  1682  8D EE 12              STA CONSOLE.CURRENTADDRESS
02075  1685  A9 04                 LDA #>CONSOLE.MEMORYADDRESS
02076  1687  8D EF 12              STA CONSOLE.CURRENTADDRESS+1
02077  168A                        
02078  168A  4C 93 16              JMP CONSOLE.DEC_MEMADDRESS.END
02079  168D             
02080  168D             CONSOLE.DEC_MEMADDRESS.DEC_CURRENTROW 
02081  168D  CE F1 12              DEC CONSOLE.CURRENTROW
02082  1690             
02083  1690             CONSOLE.DEC_MEMADDRESS.DEC_CURRENTCOLUMN 
02084  1690  CE F0 12              DEC CONSOLE.CURRENTCOLUMN
02085  1693             
02086  1693             CONSOLE.DEC_MEMADDRESS.END 
02087  1693             
02088  1693  20 4D 10              JSR MEMORY.PULLREGS$
02089  1696  60                    RTS
02090  1697             
02091  1697             ;ALIGN $100
02092  1697             
02093  1697             CONSOLE.SETBACKGROUNDCOLOR.COLOR$ = $73 ; 1 BYTE
02094  1697             CONSOLE.SETBACKGROUNDCOLOR$ 
02095  1697  A5 73                 LDA CONSOLE.SETBACKGROUNDCOLOR.COLOR$
02096  1699  8D 21 D0              STA $D021
02097  169C  60                    RTS
02098  169D             
02099  169D             CONSOLE.SETBORDERCOLOR.COLOR$ = $73 ; 1 BYTE
02100  169D             CONSOLE.SETBORDERCOLOR$ 
02101  169D  A5 73                 LDA CONSOLE.SETBORDERCOLOR.COLOR$
02102  169F  8D 20 D0              STA $D020
02103  16A2  60                    RTS
02104  16A3             
02105  16A3             CONSOLE.SETFOREGROUNDCOLOR.COLOR$ = $73 ; 1 BYTE
02106  16A3             CONSOLE.SETFOREGROUNDCOLOR$ 
02107  16A3  A5 73                 LDA CONSOLE.SETFOREGROUNDCOLOR.COLOR$
02108  16A5  A2 00                 LDX #$00
02109  16A7             @LOOP
02110  16A7  9D 00 D8              STA CONSOLE.COLORADDRESS,X
02111  16AA  9D 00 D9              STA CONSOLE.COLORADDRESS+$100,X
02112  16AD  9D 00 DA              STA CONSOLE.COLORADDRESS+$200,X
02113  16B0  9D 00 DB              STA CONSOLE.COLORADDRESS+$300,X
02114  16B3  CA                    DEX
02115  16B4  D0 F1                 BNE @LOOP
02116  16B6  60                    RTS
02117  16B7             
02118  16B7             ;CONSOLE.SETCHRFORECOLOR.COLOR$ = $73 ; 1 BYTES
02119  16B7             ;CONSOLE.SETCHRFORECOLOR$
02120  16B7             ;        ; GET THE COLOR AT THE CONSOLE'S CURRENT MEMORY ADDRESS.
02121  16B7             ;        ; AND THE FORECOLOR WITH ZEROS.
02122  16B7             ;        ; OR THE FORECOLOR WITH THE NEW COLOR.
02123  16B7             ;        ; PUT THE NEW COLOR AT THE CONSOLE'S CURRENT MEMORY ADDRESS.
02124  16B7             
02125  16B7             ;        LDA CONSOLE.COLORADDRESS
02126  16B7             ;        AND #%11110000 ; CLEAR THE LOW BITS
02127  16B7             ;        ORA CONSOLE.SETCHRFORECOLOR.COLOR$ ; SET THE LOW BITS
02128  16B7             ;        STA CONSOLE.COLORADDRESS
02129  16B7             
02130  16B7             ;        RTS
02131  16B7             
02132  16B7             ; THIS IS NOT POSSIBLE USING THE VIC CHIP!
02133  16B7             ;CONSOLE.SETCHRBACKCOLOR.COLOR$ = $73 ; 1 BYTES
02134  16B7             ;CONSOLE.SETCHRBACKCOLOR$
02135  16B7             ;        ; NEED TO SHIFT THE BACKCOLOR TO THE LEFT 4 BITS.
02136  16B7             ;        ; GET THE COLOR AT THE CONSOLE'S CURRENT MEMORY ADDRESS.
02137  16B7             ;        ; AND THE BACKCOLOR WITH ZEROS.
02138  16B7             ;        ; OR THE BACKCOLOR WITH THE NEW COLOR.
02139  16B7             ;        ; PUT THE NEW COLOR AT THE CONSOLE'S CURRENT MEMORY ADDRESS.
02140  16B7             
02141  16B7             ;        ; SHIFT THE BITS TO THE LEFT 4 TIMES (LO->HI)
02142  16B7             ;        ASL CONSOLE.SETCHRBACKCOLOR.COLOR$
02143  16B7             ;        ASL CONSOLE.SETCHRBACKCOLOR.COLOR$
02144  16B7             ;        ASL CONSOLE.SETCHRBACKCOLOR.COLOR$
02145  16B7             ;        ASL CONSOLE.SETCHRBACKCOLOR.COLOR$
02146  16B7             
02147  16B7             ;        LDA CONSOLE.COLORADDRESS
02148  16B7             ;        AND #%00001111 ; CLEAR THE HIGH BITS
02149  16B7             ;        ORA CONSOLE.SETCHRBACKCOLOR.COLOR$ ; SET THE HIGH BITS
02150  16B7             ;        STA CONSOLE.COLORADDRESS
02151  16B7             
02152  16B7             ;        RTS
02153  16B7             
02154  16B7             CONSOLE.SETCHARACTERCOLOR.COLOR$ = $73 ; 1 BYTE
02155  16B7             CONSOLE.SETCHARACTERCOLOR$ 
02156  16B7  A5 73                 LDA CONSOLE.SETCHARACTERCOLOR.COLOR$
02157  16B9  8D F4 12              STA CONSOLE.CHARACTERCOLOR
02158  16BC  60                    RTS
02159  16BD             
02160  16BD             CONSOLE.SETCHARACTERINVERTED.VALUE$ = $73 ; 1 BYTE
02161  16BD             CONSOLE.SETCHARACTERINVERTED$ 
02162  16BD  A5 73                 LDA CONSOLE.SETCHARACTERINVERTED.VALUE$
02163  16BF  C9 01                 CMP #1
02164  16C1  F0 05                 BEQ @SET
02165  16C3             @UNSET
02166  16C3  A9 00                 LDA #$00
02167  16C5  4C CA 16              JMP @END
02168  16C8             @SET
02169  16C8  A9 80                 LDA #$80
02170  16CA             @END
02171  16CA  8D F5 12              STA CONSOLE.CHARACTERSINVERTED
02172  16CD  60                    RTS
02173  16CE             
02174  16CE             
02175  16CE             CONSOLE.READCHR.CARET ; SEPARATE ROUTINE BECAUSE BRANCHES WEREN'T WORKING
02176  16CE                        ; GET THE CURRENT TICKS
02177  16CE  20 D5 1D              JSR TIME.GETTICKS$
02178  16D1             
02179  16D1  A5 73                 LDA TIME.GETTICKS.RESULT$
02180  16D3  85 80                 STA MATH.CMP32.NUM1$
02181  16D5  A5 74                 LDA TIME.GETTICKS.RESULT$+1
02182  16D7  85 81                 STA MATH.CMP32.NUM1$+1
02183  16D9  A5 75                 LDA TIME.GETTICKS.RESULT$+2
02184  16DB  85 82                 STA MATH.CMP32.NUM1$+2
02185  16DD  A5 76                 LDA TIME.GETTICKS.RESULT$+3
02186  16DF  85 83                 STA MATH.CMP32.NUM1$+3
02187  16E1             
02188  16E1  A5 D4                 LDA CONSOLE.READCHR.MILLISECONDS
02189  16E3  85 84                 STA MATH.CMP32.NUM2$
02190  16E5  A5 D5                 LDA CONSOLE.READCHR.MILLISECONDS+1
02191  16E7  85 85                 STA MATH.CMP32.NUM2$+1
02192  16E9  A5 D6                 LDA CONSOLE.READCHR.MILLISECONDS+2
02193  16EB  85 86                 STA MATH.CMP32.NUM2$+2
02194  16ED  A5 D7                 LDA CONSOLE.READCHR.MILLISECONDS+3
02195  16EF  85 87                 STA MATH.CMP32.NUM2$+3
02196  16F1             
02197  16F1  20 00 29              JSR MATH.CMP32$ ; IF TICKS > (MILLISECONDS + TICKS) THEN CARRY FLAG SHOULD BE SET.
02198  16F4             
02199  16F4                        ;BCC @READKEY ; GOTO @READKEY IF TICKS < (MILLISECONDS + TICKS).
02200  16F4  B0 03                 BCS @READKEY_SKIP ; GOTO @READKEY IF TICKS < (MILLISECONDS + TICKS).
02201  16F6  4C 51 17              JMP @READKEY
02202  16F9             @READKEY_SKIP 
02203  16F9             
02204  16F9                        ; GET THE CURRENT TIME AND STORE
02205  16F9  20 D5 1D              JSR TIME.GETTICKS$
02206  16FC             
02207  16FC                        ; 500 = $01F4
02208  16FC                        ; 400 = $0190
02209  16FC  A9 90                 LDA #$90
02210  16FE  85 80                 STA MATH.ADD32.ADDEND1$
02211  1700  A9 01                 LDA #$01
02212  1702  85 81                 STA MATH.ADD32.ADDEND1$+1
02213  1704  A9 00                 LDA #$00
02214  1706  85 82                 STA MATH.ADD32.ADDEND1$+2
02215  1708  A9 00                 LDA #$00
02216  170A  85 83                 STA MATH.ADD32.ADDEND1$+3
02217  170C             
02218  170C  A5 73                 LDA TIME.GETTICKS.RESULT$
02219  170E  85 84                 STA MATH.ADD32.ADDEND2$
02220  1710  A5 74                 LDA TIME.GETTICKS.RESULT$+1
02221  1712  85 85                 STA MATH.ADD32.ADDEND2$+1
02222  1714  A5 75                 LDA TIME.GETTICKS.RESULT$+2
02223  1716  85 86                 STA MATH.ADD32.ADDEND2$+2
02224  1718  A5 76                 LDA TIME.GETTICKS.RESULT$+3
02225  171A  85 87                 STA MATH.ADD32.ADDEND2$+3
02226  171C             
02227  171C  20 22 28              JSR MATH.ADD32$
02228  171F                        
02229  171F                        ; STORE THE SUM
02230  171F  A5 88                 LDA MATH.ADD32.SUM$
02231  1721  85 D4                 STA CONSOLE.READCHR.MILLISECONDS
02232  1723  A5 89                 LDA MATH.ADD32.SUM$+1
02233  1725  85 D5                 STA CONSOLE.READCHR.MILLISECONDS+1
02234  1727  A5 8A                 LDA MATH.ADD32.SUM$+2
02235  1729  85 D6                 STA CONSOLE.READCHR.MILLISECONDS+2
02236  172B  A5 8B                 LDA MATH.ADD32.SUM$+3
02237  172D  85 D7                 STA CONSOLE.READCHR.MILLISECONDS+3
02238  172F             
02239  172F             ;        ; DELAY ADDED TO SLOW DOWN THE QUICK BACKSPACE CHARACTERS.
02240  172F             ;        ; 100 = $64
02241  172F             ;        ; 50 = $32
02242  172F             ;        LDA #$64
02243  172F             ;        STA TIME.WAIT.MILLISECONDS$
02244  172F             ;        LDA #$00
02245  172F             ;        STA TIME.WAIT.MILLISECONDS$+1
02246  172F             ;        LDA #$00
02247  172F             ;        STA TIME.WAIT.MILLISECONDS$+2
02248  172F             ;        LDA #$00
02249  172F             ;        STA TIME.WAIT.MILLISECONDS$+3
02250  172F             ;        JSR TIME.WAIT$
02251  172F             
02252  172F                        ; TOGGLE THE CARET
02253  172F  A0 00                 LDY #$00
02254  1731  A5 D8                 LDA CONSOLE.READCHR.TOGGLECARET
02255  1733  C9 01                 CMP #$01
02256  1735  F0 0F                 BEQ @CLEARCARRET
02257  1737             @SHOWCARRET 
02258  1737                        ; RENDER THE CARET AT THE CURRENT MEMORY LOCATION
02259  1737  AD 72 18              LDA CONSOLE.CARETCHAR$
02260  173A  91 D9                 STA (CONSOLE.READCHR.CARETADDRESS),Y
02261  173C  20 CA 2F              JSR GRAPHICS.DRAWCHR
02262  173F  A9 01                 LDA #$01
02263  1741  85 D8                 STA CONSOLE.READCHR.TOGGLECARET
02264  1743  4C 51 17              JMP @READKEY
02265  1746             @CLEARCARRET 
02266  1746                        ; RENDER THE CARET AT THE CURRENT MEMORY LOCATION
02267  1746  A9 20                 LDA #$20
02268  1748  91 D9                 STA (CONSOLE.READCHR.CARETADDRESS),Y
02269  174A  20 CA 2F              JSR GRAPHICS.DRAWCHR
02270  174D  A9 00                 LDA #$00
02271  174F  85 D8                 STA CONSOLE.READCHR.TOGGLECARET
02272  1751             
02273  1751             @READKEY
02274  1751  60                    RTS
02275  1752             
02276  1752  31 32 33   CONSOLE.READINT.ALLOWEDCHRS TEXT '1234567890', CONSOLE.BACKSPACE$, CONSOLE.NULL$
02277  175E             
02278  175E             CONSOLE.READINT8.INTEGER$ = $7A ; 1 BYTE
02279  175E             CONSOLE.READINT8$ 
02280  175E                        ; READ CHARACTERS FROM THE CONSOLE.
02281  175E  A9 03                 LDA #$03
02282  1760  85 EA                 STA CONSOLE.READGEN.MAXLEN
02283  1762             
02284  1762  A9 52                 LDA #<CONSOLE.READINT.ALLOWEDCHRS
02285  1764  85 EB                 STA CONSOLE.READGEN.ALLOWEDCHRS
02286  1766  A9 17                 LDA #>CONSOLE.READINT.ALLOWEDCHRS
02287  1768  85 EC                 STA CONSOLE.READGEN.ALLOWEDCHRS+1
02288  176A             
02289  176A  20 69 19              JSR CONSOLE.READGEN
02290  176D             
02291  176D                        ; CONVERT THE DECIMAL CHARACTERS TO HEXIDECIMAL.
02292  176D  20 BC 17              JSR CONSOLE.READINT.COPYMEM
02293  1770             
02294  1770  20 65 1C              JSR CONVERT.DEC2HEX8
02295  1773             
02296  1773  A5 E0                 LDA CONVERT.DEC2HEX8.RESULT
02297  1775  85 7A                 STA CONSOLE.READINT8.INTEGER$
02298  1777  60                    RTS
02299  1778             
02300  1778             CONSOLE.READINT16.INTEGER$ = $7A ; 2 BYTES
02301  1778             CONSOLE.READINT16$ 
02302  1778                        ; READ CHARACTERS FROM THE CONSOLE.
02303  1778  A9 05                 LDA #$05
02304  177A  85 EA                 STA CONSOLE.READGEN.MAXLEN
02305  177C             
02306  177C  A9 52                 LDA #<CONSOLE.READINT.ALLOWEDCHRS
02307  177E  85 EB                 STA CONSOLE.READGEN.ALLOWEDCHRS
02308  1780  A9 17                 LDA #>CONSOLE.READINT.ALLOWEDCHRS
02309  1782  85 EC                 STA CONSOLE.READGEN.ALLOWEDCHRS+1
02310  1784             
02311  1784  20 69 19              JSR CONSOLE.READGEN
02312  1787             
02313  1787                        ; CONVERT THE DECIMAL CHARACTERS TO HEXIDECIMAL.
02314  1787  20 BC 17              JSR CONSOLE.READINT.COPYMEM
02315  178A             
02316  178A  20 B9 1C              JSR CONVERT.DEC2HEX16
02317  178D             
02318  178D  A5 E0                 LDA CONVERT.DEC2HEX16.RESULT
02319  178F  85 7A                 STA CONSOLE.READINT16.INTEGER$
02320  1791  A5 E1                 LDA CONVERT.DEC2HEX16.RESULT+1
02321  1793  85 7B                 STA CONSOLE.READINT16.INTEGER$+1
02322  1795             
02323  1795  60                    RTS
02324  1796             
02325  1796             CONSOLE.READINT32.INTEGER$ = $7A ; 4 BYTES
02326  1796             CONSOLE.READINT32$ 
02327  1796                        ; READ CHARACTERS FROM THE CONSOLE.
02328  1796  A9 0A                 LDA #$0A ; 10
02329  1798  85 EA                 STA CONSOLE.READGEN.MAXLEN
02330  179A             
02331  179A  A9 52                 LDA #<CONSOLE.READINT.ALLOWEDCHRS
02332  179C  85 EB                 STA CONSOLE.READGEN.ALLOWEDCHRS
02333  179E  A9 17                 LDA #>CONSOLE.READINT.ALLOWEDCHRS
02334  17A0  85 EC                 STA CONSOLE.READGEN.ALLOWEDCHRS+1
02335  17A2             
02336  17A2  20 69 19              JSR CONSOLE.READGEN
02337  17A5             
02338  17A5                        ; CONVERT THE DECIMAL CHARACTERS TO HEXIDECIMAL.
02339  17A5  20 BC 17              JSR CONSOLE.READINT.COPYMEM
02340  17A8             
02341  17A8  20 2D 1D              JSR CONVERT.DEC2HEX32
02342  17AB             
02343  17AB  A5 E0                 LDA CONVERT.DEC2HEX32.RESULT
02344  17AD  85 7A                 STA CONSOLE.READINT32.INTEGER$
02345  17AF  A5 E1                 LDA CONVERT.DEC2HEX32.RESULT+1
02346  17B1  85 7B                 STA CONSOLE.READINT32.INTEGER$+1
02347  17B3  A5 E2                 LDA CONVERT.DEC2HEX32.RESULT+2
02348  17B5  85 7C                 STA CONSOLE.READINT32.INTEGER$+2
02349  17B7  A5 E3                 LDA CONVERT.DEC2HEX32.RESULT+3
02350  17B9  85 7D                 STA CONSOLE.READINT32.INTEGER$+3
02351  17BB             
02352  17BB  60                    RTS
02353  17BC             
02354  17BC             CONSOLE.READINT.COPYMEM 
02355  17BC                        ; GET THE LENGTH OF THE STRING
02356  17BC  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
02357  17BE  85 7A                 STA STRING.GETLENGTH.ADDRESS$
02358  17C0  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
02359  17C2  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
02360  17C4             
02361  17C4  20 72 2B              JSR STRING.GETLENGTH$
02362  17C7             
02363  17C7  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
02364  17C9  C9 00                 CMP #$00
02365  17CB  F0 0E                 BEQ @END
02366  17CD  85 2A                 STA CONVERT.DEC2HEX.LEN
02367  17CF             
02368  17CF  A2 00                 LDX #$00
02369  17D1             @LOOP
02370  17D1  BD 00 09              LDA CONSOLE.READSTR.BUFADDRESS,X
02371  17D4  95 E4                 STA CONVERT.DEC2HEX.VALUE,X
02372  17D6  E8                    INX
02373  17D7  E4 2A                 CPX CONVERT.DEC2HEX.LEN
02374  17D9  D0 F6                 BNE @LOOP
02375  17DB             
02376  17DB             @END
02377  17DB  60                    RTS
02378  17DC             
02379  17DC             ALIGN      $100
02380  1800             
02381  1800  FF FF FF   CONSOLE.GETKEY.BUFFEROLD BYTE $FF, $FF, $FF
02382  1803             
02383  1803  FF FF FF   CONSOLE.GETKEY.BUFFER BYTE $FF, $FF, $FF, $FF
02384  1807             
02385  1807  FF         CONSOLE.GETKEY.BUFFERQUANTITY BYTE $FF
02386  1808             
02387  1808  00         CONSOLE.GETKEY.SIMULTANEOUSALPHANUMERICKEYSFLAG BYTE $00
02388  1809             
02389  1809             CONSOLE.GETKEY.KEYTABLESHIFT$ 
02390  1809  FF 41 42              BYTE $FF, $41, $42, $43, $44, $45, $46, $47  ; "@", "A", "B", "C", "D", "E", "F", "G"
02391  1811  48 49 4A              BYTE $48, $49, $4A, $4B, $4C, $4D, $4E, $4F  ; "H", "I", "J", "K", "L", "M", "N", "O"
02392  1819  50 51 52              BYTE $50, $51, $52, $53, $54, $55, $56, $57  ; "P", "Q", "R", "S", "T", "U", "V", "W"
02393  1821  58 59 5A              BYTE $58, $59, $5A, $FF, $FF, $FF, $FF, $FF  ; "X", "Y", "Z", "[", (POUND), "]", UP-ARROW, "<-"
02394  1829  20 FF FF              BYTE $20, $FF, $FF, $FF, $FF, $FF, $FF, $FF  ; " " (SPC), "!", (DBL QTE), "#", "$", "%", "&", "`"
02395  1831  FF FF FF              BYTE $FF, $FF, $FF, $FF, $3C, $FF, $3E, $3F  ; "(", ")", "*", "+", ",", "-", ".", "/"
02396  1839  FF 21 22              BYTE $FF, $21, $22, $23, $24, $25, $26, $27  ; "0", "1", "2", "3", "4", "5", "6", "7"
02397  1841  28 29 1B              BYTE $28, $29, $1B, $1D, $FF, $FF, $FF, $FF  ; "8", "9", ":", ";", "<", "=", ">", "?"
02398  1849             
02399  1849             CONSOLE.READKEY.CHAR.INVALID$ = $FF
02400  1849             CONSOLE.READKEY.CHAR$ = $D0 ; 1 BYTE
02401  1849             
02402  1849             CONSOLE.READKEY.SHIFT1.UP_DOWN$ = %10000000
02403  1849             CONSOLE.READKEY.SHIFT1.F5$ = %01000000
02404  1849             CONSOLE.READKEY.SHIFT1.F3$ = %00100000
02405  1849             CONSOLE.READKEY.SHIFT1.F1$ = %00010000
02406  1849             CONSOLE.READKEY.SHIFT1.F7$ = %00001000
02407  1849             CONSOLE.READKEY.SHIFT1.LEFT_RIGHT$ = %00000100
02408  1849             CONSOLE.READKEY.SHIFT1.RETURN$ = %00000010
02409  1849             CONSOLE.READKEY.SHIFT1.INSERT_DELETE$ = %00000001
02410  1849             CONSOLE.READKEY.SHIFT1$ = $D1 ; 1 BYTE
02411  1849             
02412  1849             CONSOLE.READKEY.SHIFT2.RUN_STOP$ = %10000000
02413  1849             CONSOLE.READKEY.SHIFT2.LEFT_SHIFT$ = %01000000
02414  1849             CONSOLE.READKEY.SHIFT2.COMMODORE$ = %00100000
02415  1849             CONSOLE.READKEY.SHIFT2.RIGHT_SHIFT$ = %00010000
02416  1849             CONSOLE.READKEY.SHIFT2.CLEAR_HOME$ = %00001000
02417  1849             CONSOLE.READKEY.SHIFT2.CONTROL$ = %00000100
02418  1849             CONSOLE.READKEY.SHIFT2$ = $D2 ; 1 BYTE
02419  1849             
02420  1849             CONSOLE.READKEY.STATE.OK$ = $00
02421  1849             CONSOLE.READKEY.STATE.NO_ACTIVITY$ = $01
02422  1849             CONSOLE.READKEY.STATE.CONTROL_PORT_1$ = $02
02423  1849             CONSOLE.READKEY.STATE.SHADOWING$ = $03
02424  1849             CONSOLE.READKEY.STATE.MULTIPLEKEYS$ = $04
02425  1849             CONSOLE.READKEY.STATE.AWAITING_NO_ACTIVITY$ = $05
02426  1849             CONSOLE.READKEY.STATE$ = $D3 ; 1 BYTE
02427  1849             CONSOLE.READKEY.PROCESSORSTATE = $DB ; 1 BYTE
02428  1849             CONSOLE.READKEY$ 
02429  1849                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:SCANNING_THE_KEYBOARD_THE_CORRECT_AND_NON_KERNAL_WAY
02430  1849             
02431  1849                        ;THE ROUTINE USES "2 KEY ROLLOWER" OR UP TO 3 IF THE KEY-COMBINATION DOESEN'T INDUCE SHADOWING.
02432  1849                        ;IF 2 OR 3 KEYS ARE PRESSED SIMULTANEOUSLY (WITHIN 1 SCAN) A "NO ACTIVITY" STATE HAS TO OCCUR BEFORE NEW VALID KEYS ARE RETURNED.
02433  1849                        ;RESTORE IS NOT DETECTABLE AND MUST BE HANDLED BY NMI IRQ.
02434  1849                        ;SHIFT LOCK IS NOT DETECTED DUE TO UNRELIABILITY.
02435  1849                        
02436  1849  A9 00                 LDA #$00
02437  184B  85 D0                 STA CONSOLE.READKEY.CHAR$
02438  184D  85 D1                 STA CONSOLE.READKEY.SHIFT1$
02439  184F  85 D2                 STA CONSOLE.READKEY.SHIFT2$
02440  1851  85 D3                 STA CONSOLE.READKEY.STATE$
02441  1853             
02442  1853  08                    PHP ; PUSH THE PROCESSOR STATE ONTO THE STACK
02443  1854  68                    PLA ; PULL THE PROCESSOR STATE INTO A
02444  1855  85 DB                 STA CONSOLE.READKEY.PROCESSORSTATE ; SAVE IN VARIABLE
02445  1857             
02446  1857  78                    SEI ; NEED TO DISABLE INTERRUPTS OTHERWISE PRESSING RUN-STOP (TAB) CAUSES
02447  1858                        ; RANDOM ALPHA-NUMERIC KEY STROKE TO BE RETURNED WHEN NON IS PRESSED
02448  1858  20 6A 1A              JSR CONSOLE.GETKEY
02449  185B  B0 09                 BCS @NOVALIDINPUT ; IF CARRY IS SET, NO VALID CHARACTER PRESSED
02450  185D             
02451  185D  85 D0                 STA CONSOLE.READCHR.CHAR$
02452  185F  86 D1                 STX CONSOLE.READKEY.SHIFT1$
02453  1861  84 D2                 STY CONSOLE.READKEY.SHIFT2$
02454  1863             
02455  1863  4C 68 18              JMP @END
02456  1866             
02457  1866             @NOVALIDINPUT ; THIS MAY BE SUBSTITUTED FOR AN ERRORHANDLER IF NEEDED.
02458  1866  85 D3                 STA CONSOLE.READKEY.STATE$
02459  1868             
02460  1868             @END
02461  1868             
02462  1868                        ; CHECK TO SEE IF INTERRUPTS WERE PREVIOUSLY DISABLED
02463  1868                        ; IF SO, DO NOT RE-ENABLE THEM
02464  1868  A5 DB                 LDA CONSOLE.READKEY.PROCESSORSTATE
02465  186A  29 04                 AND #%00000100
02466  186C  C9 04                 CMP #%00000100
02467  186E  F0 01                 BEQ @SKIPCLI
02468  1870  58                    CLI ; RE-ENABLE INTERRUPTS
02469  1871             @SKIPCLI
02470  1871             
02471  1871  60                    RTS
02472  1872             
02473  1872             
02474  1872             ;CONSOLE.READCHR.CHAR$ = $83
02475  1872             ;CONSOLE.READCHR.YREG = $FB
02476  1872             
02477  1872             ;CONSOLE.READCHR$
02478  1872             ;        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:SCANNING_THE_KEYBOARD_THE_CORRECT_AND_NON_KERNAL_WAY
02479  1872             
02480  1872             ;;        JSR CONSOLE.GETKEY
02481  1872             ;
02482  1872             ;        SEI ; NEED TO DISABLE INTERUPTS OTHERWISE PRESSING RUN-STOP (TAB) CAUSES
02483  1872             ;            ; RANDOM ALPHA-NUMERIC KEY STROKE TO BE RETURNED WHEN NON IS PRESSED
02484  1872             ;@LOOP
02485  1872             ;        JSR CONSOLE.GETKEY
02486  1872             ;        BCS @NOVALIDINPUT ; IF CARRY IS SET, NO VALID CHARACTER PRESSED
02487  1872             
02488  1872             ;        ;STX TEMPX
02489  1872             ;        ;STY TEMPY
02490  1872             ;        CMP #$FF
02491  1872             ;        BEQ @NONEWAPHANUMERICKEY
02492  1872             ;            ;; CHECK A FOR ALPHANUMERIC KEYS
02493  1872             ;            ;STA $0400
02494  1872             
02495  1872             ;        STA CONSOLE.READCHR.CHAR$
02496  1872             
02497  1872             ;        TYA
02498  1872             ;        AND #%01000000 ; LEFT SHIFT
02499  1872             ;        CMP #%01000000
02500  1872             ;        BEQ @SHIFTPRESSED
02501  1872             ;        TYA
02502  1872             ;        AND #%00010000 ; RIGHT SHIFT
02503  1872             ;        CMP #%00010000
02504  1872             ;        BEQ @SHIFTPRESSED
02505  1872             
02506  1872             ;        JMP @END
02507  1872             
02508  1872             ;@SHIFTPRESSED
02509  1872             ;        ;LDA CONSOLE.READCHR.CHAR$
02510  1872             ;        ;ADC #63
02511  1872             ;        ;STA CONSOLE.READCHR.CHAR$
02512  1872             
02513  1872             ;        LDX CONSOLE.READCHR.CHAR$
02514  1872             ;        LDA CONSOLE.GETKEY.KEYTABLESHIFT,X
02515  1872             ;        CMP #$FF
02516  1872             ;        BEQ @LOOP
02517  1872             ;        STA CONSOLE.READCHR.CHAR$
02518  1872             
02519  1872             ;        JMP @END
02520  1872             
02521  1872             ;@NONEWAPHANUMERICKEY
02522  1872             ;            ;; CHECK X & Y FOR NON-ALPHANUMERIC KEYS
02523  1872             ;            ;LDX TEMPX
02524  1872             ;            ;LDY TEMPY
02525  1872             ;            ;STX $0401
02526  1872             ;            ;STY $0402
02527  1872             ;        JMP @LOOP
02528  1872             
02529  1872             ;@NOVALIDINPUT  ; THIS MAY BE SUBSTITUTED FOR AN ERRORHANDLER IF NEEDED.
02530  1872             ;        JMP @LOOP
02531  1872             
02532  1872             ;@END
02533  1872             ;        RTS
02534  1872             
02535  1872             ;ALIGN $100
02536  1872             
02537  1872  64         CONSOLE.CARETCHAR$ BYTE $64 ; MADE PUBLIC SO IT CAN BE OVERRIDDEN
02538  1873  00 00      CONSOLE.CARETSTARTADDRESS WORD $0000
02539  1875  00         CONSOLE.READCHR.PREV_CHR BYTE $00
02540  1876             
02541  1876             CONSOLE.READCHR.CHAR$ = $D0 ; 1 BYTE
02542  1876             CONSOLE.READCHR.MILLISECONDS = $D4 ; 4 BYTES
02543  1876             CONSOLE.READCHR.TOGGLECARET = $D8 ; 1 BYTE
02544  1876             CONSOLE.READCHR.CARETADDRESS = $D9 ; 2 BYTES
02545  1876             
02546  1876             CONSOLE.READCHR$ 
02547  1876  AD EE 12              LDA CONSOLE.CURRENTADDRESS
02548  1879  8D 73 18              STA CONSOLE.CARETSTARTADDRESS
02549  187C  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
02550  187F  8D 74 18              STA CONSOLE.CARETSTARTADDRESS+1
02551  1882             
02552  1882             CONSOLE.READCHR 
02553  1882             
02554  1882                        ;; CHECK FOR DEBUGMODE
02555  1882                        ;LDA KERNEL.DEBUGMODE$
02556  1882                        ;CMP #$00
02557  1882                        ;BEQ @NOT_DEBUGMODE$
02558  1882                        ;RTS
02559  1882             ;@NOT_DEBUGMODE$
02560  1882             
02561  1882                        ; PREVENT QUICK RETURNS FROM BEING PRESSED
02562  1882                        ;JSR TIME.HALT$
02563  1882                        ;JSR TIME.HALT$
02564  1882             
02565  1882                        ; SET THE COLOR OF THE CARET
02566  1882  A0 00                 LDY #$00
02567  1884  AD F2 12              LDA CONSOLE.CURRENTCOLORADDR
02568  1887  85 D9                 STA CONSOLE.READCHR.CARETADDRESS
02569  1889  AD F3 12              LDA CONSOLE.CURRENTCOLORADDR+1
02570  188C  85 DA                 STA CONSOLE.READCHR.CARETADDRESS+1
02571  188E  AD F4 12              LDA CONSOLE.CHARACTERCOLOR
02572  1891  91 D9                 STA (CONSOLE.READCHR.CARETADDRESS),Y
02573  1893             
02574  1893                        ; GET THE LOCATION OF THE CARET
02575  1893  AD EE 12              LDA CONSOLE.CURRENTADDRESS
02576  1896  85 D9                 STA CONSOLE.READCHR.CARETADDRESS
02577  1898  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
02578  189B  85 DA                 STA CONSOLE.READCHR.CARETADDRESS+1
02579  189D             
02580  189D                        ; SHOW THE CARET
02581  189D  A9 00                 LDA #$00
02582  189F  85 D8                 STA CONSOLE.READCHR.TOGGLECARET
02583  18A1             
02584  18A1                        ; RESET THE MILLISECONDS
02585  18A1  A9 00                 LDA #$00
02586  18A3  85 D4                 STA CONSOLE.READCHR.MILLISECONDS
02587  18A5  85 D5                 STA CONSOLE.READCHR.MILLISECONDS+1
02588  18A7  85 D6                 STA CONSOLE.READCHR.MILLISECONDS+2
02589  18A9  85 D7                 STA CONSOLE.READCHR.MILLISECONDS+3
02590  18AB             
02591  18AB             @LOOP
02592  18AB  20 CE 16              JSR CONSOLE.READCHR.CARET ; SEPARATE ROUTINE BECAUSE BRANCHES WEREN'T WORKING
02593  18AE             
02594  18AE             @READKEY
02595  18AE                        ; READ THE KEY FROM THE KEYBOARD
02596  18AE  20 49 18              JSR CONSOLE.READKEY$
02597  18B1             
02598  18B1                        ; DETERMINE IF ANYTHING WAS PRESSED
02599  18B1  A5 D3                 LDA CONSOLE.READKEY.STATE$
02600  18B3  C9 00                 CMP #CONSOLE.READKEY.STATE.OK$
02601  18B5                        ;BNE @LOOP
02602  18B5  F0 08                 BEQ @READKEYOK
02603  18B7  A9 00                 LDA #$00
02604  18B9  8D 75 18              STA CONSOLE.READCHR.PREV_CHR
02605  18BC  4C AB 18              JMP @LOOP
02606  18BF             @READKEYOK 
02607  18BF             
02608  18BF                        ; CONFIRM THAT WE HAVE A VALID CHARACTER
02609  18BF  A5 D0                 LDA CONSOLE.READKEY.CHAR$
02610  18C1  C9 FF                 CMP #CONSOLE.READKEY.CHAR.INVALID$
02611  18C3  F0 21                 BEQ @CHECKSPECIAL
02612  18C5             
02613  18C5                        ; CHECK IF THE SHIFT KEY WAS PRESSED
02614  18C5  A5 D2                 LDA CONSOLE.READKEY.SHIFT2$
02615  18C7  29 40                 AND #CONSOLE.READKEY.SHIFT2.LEFT_SHIFT$
02616  18C9  C9 40                 CMP #CONSOLE.READKEY.SHIFT2.LEFT_SHIFT$
02617  18CB  F0 0B                 BEQ @SHIFTPRESSED
02618  18CD             
02619  18CD  A5 D2                 LDA CONSOLE.READKEY.SHIFT2$
02620  18CF  29 10                 AND #CONSOLE.READKEY.SHIFT2.RIGHT_SHIFT$
02621  18D1  C9 10                 CMP #CONSOLE.READKEY.SHIFT2.RIGHT_SHIFT$
02622  18D3  F0 03                 BEQ @SHIFTPRESSED
02623  18D5                        
02624  18D5  4C 13 19              JMP @END
02625  18D8             
02626  18D8             @SHIFTPRESSED 
02627  18D8                        ; IF A VALID CHARACTER WAS PRESSED WHILE THE SHIFT KEY WAS PRESSED,
02628  18D8                        ; RETURN THE UPPER-CASED VERSION OF THE CHARACTER
02629  18D8  A6 D0                 LDX CONSOLE.READKEY.CHAR$
02630  18DA  BD 09 18              LDA CONSOLE.GETKEY.KEYTABLESHIFT$,X
02631  18DD  C9 FF                 CMP #CONSOLE.READKEY.CHAR.INVALID$
02632  18DF  F0 CA                 BEQ @LOOP
02633  18E1  85 D0                 STA CONSOLE.READCHR.CHAR$
02634  18E3             
02635  18E3  4C 13 19              JMP @END2
02636  18E6             
02637  18E6             ;@CHECKRETURN
02638  18E6             ;        ; IF THE RETURN KEY IS PRESSED, RETURN NULL
02639  18E6             ;        LDA CONSOLE.READKEY.SHIFT1$
02640  18E6             ;        CMP #CONSOLE.READKEY.SHIFT1.RETURN$
02641  18E6             ;        BNE @LOOP
02642  18E6             ;        LDA #CONSOLE.NULL$
02643  18E6             ;        ;LDA #CONSOLE.NEWLINE$
02644  18E6             ;        STA CONSOLE.READKEY.CHAR$
02645  18E6             
02646  18E6             @CHECKSPECIAL 
02647  18E6                        ; IF THE RETURN KEY IS PRESSED, RETURN NULL
02648  18E6  A5 D1                 LDA CONSOLE.READKEY.SHIFT1$
02649  18E8  C9 02                 CMP #CONSOLE.READKEY.SHIFT1.RETURN$
02650  18EA  F0 07                 BEQ @RETURNNULL
02651  18EC  C9 01                 CMP #CONSOLE.READKEY.SHIFT1.INSERT_DELETE$
02652  18EE  F0 0A                 BEQ @RETURNBACKSPACE
02653  18F0                        
02654  18F0  4C AB 18              JMP @LOOP
02655  18F3             
02656  18F3             @RETURNNULL 
02657  18F3  A9 FF                 LDA #CONSOLE.NULL$
02658  18F5  85 D0                 STA CONSOLE.READKEY.CHAR$
02659  18F7  4C 01 19              JMP @HIDECARET
02660  18FA             
02661  18FA             @RETURNBACKSPACE 
02662  18FA  A9 FD                 LDA #CONSOLE.BACKSPACE$
02663  18FC  85 D0                 STA CONSOLE.READKEY.CHAR$
02664  18FE  4C 01 19              JMP @HIDECARET
02665  1901             
02666  1901             @HIDECARET 
02667  1901             
02668  1901                        ; COMPARE LAST CHARACTER
02669  1901                        ;LDA CONSOLE.READCHR.CHAR$
02670  1901  CD 75 18              CMP CONSOLE.READCHR.PREV_CHR
02671  1904  D0 03                 BNE @CHAROK
02672  1906  4C AB 18              JMP @LOOP
02673  1909             @CHAROK
02674  1909  8D 75 18              STA CONSOLE.READCHR.PREV_CHR
02675  190C             
02676  190C                        ; HIDE THE CARET
02677  190C  A9 20                 LDA #$20
02678  190E  91 D9                 STA (CONSOLE.READCHR.CARETADDRESS),Y
02679  1910  20 CA 2F              JSR GRAPHICS.DRAWCHR
02680  1913                        ;JMP @SKIPWRITECHR
02681  1913             
02682  1913                        ;LDA CONSOLE.READCHR.CHAR$
02683  1913                        ;PHA
02684  1913                        ;JMP @T1
02685  1913             
02686  1913             ;        ; DELAY ADDED TO SLOW DOWN THE QUICK BACKSPACE CHARACTERS.
02687  1913             ;        ; 100 = $64
02688  1913             ;        ; 50 = $32
02689  1913             ;        LDA #$64
02690  1913             ;        STA TIME.WAIT.MILLISECONDS$
02691  1913             ;        LDA #$00
02692  1913             ;        STA TIME.WAIT.MILLISECONDS$+1
02693  1913             ;        LDA #$00
02694  1913             ;        STA TIME.WAIT.MILLISECONDS$+2
02695  1913             ;        LDA #$00
02696  1913             ;        STA TIME.WAIT.MILLISECONDS$+3
02697  1913             ;        JSR TIME.WAIT$
02698  1913             
02699  1913                        ;JSR TIME.HALT2
02700  1913                        ;JSR TIME.HALT2
02701  1913             
02702  1913             ;@T1
02703  1913                        ;PLA
02704  1913                        ;STA CONSOLE.READCHR.CHAR$
02705  1913             
02706  1913             @END
02707  1913             
02708  1913             @END2
02709  1913             
02710  1913                        ; WRITE THE CHARACTER TO THE SCREEN
02711  1913  A5 D0                 LDA CONSOLE.READCHR.CHAR$
02712  1915  C9 FF                 CMP #CONSOLE.NULL$
02713  1917  F0 09                 BEQ @SKIPWRITECHR
02714  1919  48                    PHA
02715  191A  85 02                 STA CONSOLE.WRITECHR.CHAR$
02716  191C  20 19 15              JSR CONSOLE.WRITECHR$
02717  191F  68                    PLA
02718  1920  85 D0                 STA CONSOLE.READCHR.CHAR$
02719  1922             @SKIPWRITECHR 
02720  1922             
02721  1922  60                    RTS
02722  1923             
02723  1923             ;ALIGN $100
02724  1923             
02725  1923             
02726  1923             ; STRINGS WILL HAVE A MAX LENGTH OF 255 CHARACTERS.
02727  1923             CONSOLE.READSTR.STRADDRESS$ = $7A ; 2 BYTES
02728  1923             CONSOLE.READSTR.LENGTH = $FB ; 2 BYTES
02729  1923             CONSOLE.READSTR$ 
02730  1923             
02731  1923  A9 FF                 LDA #$FF
02732  1925  85 EA                 STA CONSOLE.READGEN.MAXLEN
02733  1927  A9 00                 LDA #$00
02734  1929  85 EB                 STA CONSOLE.READGEN.ALLOWEDCHRS
02735  192B  85 EC                 STA CONSOLE.READGEN.ALLOWEDCHRS+1
02736  192D  20 69 19              JSR CONSOLE.READGEN
02737  1930             
02738  1930                        ; STORE THE LENGTH
02739  1930  86 FB                 STX CONSOLE.READSTR.LENGTH
02740  1932  A2 00                 LDX #$00
02741  1934  86 FC                 STX CONSOLE.READSTR.LENGTH+1
02742  1936             
02743  1936                        ; NEED TO COPY THE CONTENTS OF THE BUFFER TO AN INSTANCE OF A NEW STRING.
02744  1936  A5 FB                 LDA CONSOLE.READSTR.LENGTH
02745  1938  85 FB                 STA STRING.CREATE.LENGTH$
02746  193A  A5 FC                 LDA CONSOLE.READSTR.LENGTH+1
02747  193C  85 FC                 STA STRING.CREATE.LENGTH$+1
02748  193E             
02749  193E  A9 00                 LDA #$00 ; OPTIMIZATION - DEFAULT TO CHARACTER $00
02750  1940  85 02                 STA STRING.CREATE.CHARACTER$
02751  1942             
02752  1942  20 AD 2A              JSR STRING.CREATE$ ; STRADDRESS = STRING.CREATE$(LENGTH)
02753  1945             
02754  1945  A5 7A                 LDA STRING.CREATE.ADDRESS$
02755  1947  85 7A                 STA CONSOLE.READSTR.STRADDRESS$
02756  1949  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
02757  194B  85 7B                 STA CONSOLE.READSTR.STRADDRESS$+1
02758  194D             
02759  194D  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
02760  194F  85 73                 STA MEMORY.COPY16.SOURCE$
02761  1951  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
02762  1953  85 74                 STA MEMORY.COPY16.SOURCE$+1
02763  1955             
02764  1955  A5 7A                 LDA CONSOLE.READSTR.STRADDRESS$
02765  1957  85 75                 STA MEMORY.COPY16.DESTINATION$
02766  1959  A5 7B                 LDA CONSOLE.READSTR.STRADDRESS$+1
02767  195B  85 76                 STA MEMORY.COPY16.DESTINATION$+1
02768  195D             
02769  195D  A5 FB                 LDA CONSOLE.READSTR.LENGTH
02770  195F  85 78                 STA MEMORY.COPY16.LENGTH$
02771  1961  A9 00                 LDA #$00
02772  1963  85 79                 STA MEMORY.COPY16.LENGTH$+1
02773  1965             
02774  1965  20 9C 0F              JSR MEMORY.COPY16$ ; MEMORY.COPY16(BUFADDRESS, STRADDRESS)
02775  1968             
02776  1968  60                    RTS
02777  1969             
02778  1969             ;ALIGN $100
02779  1969             
02780  1969             CONSOLE.READGEN.MAXLEN = $EA ; 1 BYTE
02781  1969             CONSOLE.READGEN.ALLOWEDCHRS = $EB ; 2 BYTES
02782  1969             CONSOLE.READGEN.SKIPCHR = $ED ; 1 BYTE
02783  1969             CONSOLE.READGEN.CHAR = $EE ; 1 BYTE
02784  1969             CONSOLE.READGEN 
02785  1969                        ; WHEN THE ABILITY TO ALLOCATE STRING EXISTS,
02786  1969                        ; THE NEW STRING NEEDS TO BE THE EXACT SIZE OF
02787  1969                        ; THE CHARACTERS ENTERED + 1 (NULL$).
02788  1969             
02789  1969             ;        ; FILL THE STRADDRESS WITH NULLS
02790  1969             ;        LDA #<CONSOLE.READSTR.BUFADDRESS
02791  1969             ;        STA MEMORY.FILL.ADDRESS$
02792  1969             ;        LDA #>CONSOLE.READSTR.BUFADDRESS
02793  1969             ;        STA MEMORY.FILL.ADDRESS$+1
02794  1969             ;        LDA #CONSOLE.NULL$
02795  1969             ;        STA MEMORY.FILL.VALUE$
02796  1969             ;        LDX CONSOLE.READGEN.MAXLEN
02797  1969             ;        INX ; LENGTH = MAXLEN+1
02798  1969             ;        STX MEMORY.FILL.LENGTH$
02799  1969             ;        JSR MEMORY.FILL$
02800  1969  20 EF 19              JSR CONSOLE.RESETBUFADDRESS
02801  196C             
02802  196C                        ; SET THE CURRENT ADDRESS AS THE STARTING CARET'S LOCATION.
02803  196C  AD EE 12              LDA CONSOLE.CURRENTADDRESS
02804  196F  8D 73 18              STA CONSOLE.CARETSTARTADDRESS
02805  1972  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
02806  1975  8D 74 18              STA CONSOLE.CARETSTARTADDRESS+1
02807  1978             
02808  1978  A2 00                 LDX #0
02809  197A             @LOOP
02810  197A                        ; STORE THE STRING OFFSET IN THE STACK.
02811  197A  8A                    TXA
02812  197B  48                    PHA
02813  197C             
02814  197C                        ; READ A CHARACTER FROM THE CONSOLE.
02815  197C  20 82 18              JSR CONSOLE.READCHR
02816  197F  A5 D0                 LDA CONSOLE.READCHR.CHAR$
02817  1981  85 EE                 STA CONSOLE.READGEN.CHAR
02818  1983             
02819  1983                        ; GET THE CURRENT STRING OFFSET.
02820  1983  68                    PLA
02821  1984  AA                    TAX
02822  1985             
02823  1985                        ; EXIT IF RETURN WAS PRESSED.
02824  1985  A5 EE                 LDA CONSOLE.READGEN.CHAR
02825  1987  C9 FF                 CMP #CONSOLE.NULL$
02826  1989  F0 33                 BEQ @END
02827  198B             
02828  198B                        ; CHECK WHETHER OR NOT THE CHARACTER IS ALLOWED.
02829  198B  20 BF 19              JSR CONSOLE.READGEN.SKIPALLOWCHR
02830  198E  A5 ED                 LDA CONSOLE.READGEN.SKIPCHR
02831  1990  C9 01                 CMP #$01
02832  1992  F0 20                 BEQ @ATMAX
02833  1994             
02834  1994                        ; IF DELETE WAS PRESSED, INSERT A NULL CHARACTER AT THE CURRENT OFFSET
02835  1994                        ; AND DECREASE THE OFSSET
02836  1994  A5 EE                 LDA CONSOLE.READGEN.CHAR
02837  1996  C9 FD                 CMP #CONSOLE.BACKSPACE$
02838  1998  F0 0D                 BEQ @BACKSPACED
02839  199A             
02840  199A  E4 EA                 CPX CONSOLE.READGEN.MAXLEN ; SANITY CHECK
02841  199C  F0 16                 BEQ @ATMAX
02842  199E             
02843  199E                        ; STORE THE CHARACTER IN MEMORY.
02844  199E  A5 EE                 LDA CONSOLE.READGEN.CHAR
02845  19A0  9D 00 09              STA CONSOLE.READSTR.BUFADDRESS,X
02846  19A3  E8                    INX ; INCREASE THE OFFSET
02847  19A4             
02848  19A4  4C 7A 19              JMP @LOOP
02849  19A7             
02850  19A7             @BACKSPACED 
02851  19A7  E0 00                 CPX #0 ; SANITY CHECK
02852  19A9  F0 CF                 BEQ @LOOP
02853  19AB             
02854  19AB  CA                    DEX ; INCREASE THE OFFSET
02855  19AC  A9 FF                 LDA #CONSOLE.NULL$
02856  19AE  9D 00 09              STA CONSOLE.READSTR.BUFADDRESS,X
02857  19B1             
02858  19B1  4C 7A 19              JMP @LOOP
02859  19B4                        
02860  19B4             @ATMAX
02861  19B4  A9 FD                 LDA #CONSOLE.BACKSPACE$
02862  19B6  85 02                 STA CONSOLE.WRITECHR.CHAR$
02863  19B8  20 19 15              JSR CONSOLE.WRITECHR$
02864  19BB             
02865  19BB  4C 7A 19              JMP @LOOP
02866  19BE             
02867  19BE             @END
02868  19BE  60                    RTS
02869  19BF             
02870  19BF             CONSOLE.READGEN.SKIPALLOWCHR 
02871  19BF                        ;JMP @CHAROK
02872  19BF             
02873  19BF                        ; IF ALLOWEDCHRS IS ZERO THEN SKIP CHECK
02874  19BF  A5 EB                 LDA CONSOLE.READGEN.ALLOWEDCHRS
02875  19C1  85 80                 STA MATH.CMP16.NUM1$
02876  19C3  A5 EC                 LDA CONSOLE.READGEN.ALLOWEDCHRS+1
02877  19C5  85 81                 STA MATH.CMP16.NUM1$+1
02878  19C7             
02879  19C7  A9 00                 LDA #$00
02880  19C9  A5 82                 LDA MATH.CMP16.NUM2$
02881  19CB  A5 83                 LDA MATH.CMP16.NUM2$+1
02882  19CD             
02883  19CD  20 E4 28              JSR MATH.CMP16$ ; IF ALLOWCHRS = 0 THEN RETURN
02884  19D0                        ;BEQ @CHAROK
02885  19D0  D0 03                 BNE @DOCHECK
02886  19D2  4C E5 19              JMP @CHAROK
02887  19D5                        ;;JMP @CHAROK
02888  19D5             
02889  19D5             @DOCHECK
02890  19D5                        ; CONFIRM THAT THE CHARACTER TYPED IS ONE OF THE CHARACTERS ALLOWED
02891  19D5  A0 00                 LDY #$00
02892  19D7             @LOOP
02893  19D7  B1 EB                 LDA (CONSOLE.READGEN.ALLOWEDCHRS),Y
02894  19D9  C5 EE                 CMP CONSOLE.READGEN.CHAR
02895  19DB  F0 08                 BEQ @CHAROK
02896  19DD  C9 FF                 CMP #$FF
02897  19DF  F0 09                 BEQ @SKIPCHAR
02898  19E1  C8                    INY
02899  19E2  4C D7 19              JMP @LOOP
02900  19E5             @CHAROK
02901  19E5  A9 00                 LDA #$00
02902  19E7  4C EC 19              JMP @DONE
02903  19EA             @SKIPCHAR
02904  19EA  A9 01                 LDA #$01
02905  19EC             @DONE
02906  19EC  85 ED                 STA CONSOLE.READGEN.SKIPCHR
02907  19EE  60                    RTS
02908  19EF             
02909  19EF             CONSOLE.RESETBUFADDRESS 
02910  19EF             
02911  19EF                        ; FILL THE STRADDRESS WITH NULLS
02912  19EF  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
02913  19F1  85 73                 STA MEMORY.FILL.ADDRESS$
02914  19F3  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
02915  19F5  85 74                 STA MEMORY.FILL.ADDRESS$+1
02916  19F7  A9 FF                 LDA #CONSOLE.NULL$
02917  19F9  85 75                 STA MEMORY.FILL.VALUE$
02918  19FB  A6 EA                 LDX CONSOLE.READGEN.MAXLEN
02919  19FD  E8                    INX ; LENGTH = MAXLEN+1
02920  19FE  86 76                 STX MEMORY.FILL.LENGTH$
02921  1A00  20 03 10              JSR MEMORY.FILL$
02922  1A03             
02923  1A03  60                    RTS
02924  1A04             
02925  1A04             
02926  1A04             ;ALIGN $100
02927  1A04             ;ALIGN $100
02928  1A04             
02929  1A04             ; ZERO PAGE VARIBLES
02930  1A04             CONSOLE.GETKEY.SCANRESULT = $73  ; 8 BYTES
02931  1A04             CONSOLE.GETKEY.BUFFERNEW = $7B  ; 3 BYTES
02932  1A04             CONSOLE.GETKEY.KEYQUANTITY = $7E  ; 1 BYTE
02933  1A04             CONSOLE.GETKEY.NONALPHAFLAGX = $7F  ; 1 BYTE
02934  1A04             CONSOLE.GETKEY.NONALPHAFLAGY = $80  ; 1 BYTE
02935  1A04             CONSOLE.GETKEY.TEMPZP = $81  ; 1 BYTE
02936  1A04             CONSOLE.GETKEY.SIMULTANEOUSKEYS = $82  ; 1 BYTE
02937  1A04             
02938  1A04             ; OPERATIONAL VARIABLES
02939  1A04             CONSOLE.GETKEY.MAXKEYROLLOVER = 3
02940  1A04             
02941  1A04             ;CONSOLE.GETKEY.KEYBOARD
02942  1A04             ;    JMP CONSOLE.GETKEY.MAIN
02943  1A04             
02944  1A04             
02945  1A04                        ; ROUTINE FOR SCANNING A MATRIX ROW
02946  1A04             
02947  1A04             CONSOLE.GETKEY.KEYINROW 
02948  1A04  0A                    ASL
02949  1A05  B0 03                 BCS *+5
02950  1A07  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02951  1A0A             ;REPEAT 1, 7
02952  1A0A             ;        INX
02953  1A0A             ;        ASL
02954  1A0A             ;        BCS *+5
02955  1A0A             ;            JSR CONSOLE.GETKEY.KEYFOUND
02956  1A0A             ;ENDREPEAT
02957  1A0A  E8                    INX
02958  1A0B  0A                    ASL
02959  1A0C  B0 03                 BCS *+5
02960  1A0E  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02961  1A11  E8                    INX
02962  1A12  0A                    ASL
02963  1A13  B0 03                 BCS *+5
02964  1A15  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02965  1A18  E8                    INX
02966  1A19  0A                    ASL
02967  1A1A  B0 03                 BCS *+5
02968  1A1C  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02969  1A1F  E8                    INX
02970  1A20  0A                    ASL
02971  1A21  B0 03                 BCS *+5
02972  1A23  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02973  1A26  E8                    INX
02974  1A27  0A                    ASL
02975  1A28  B0 03                 BCS *+5
02976  1A2A  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02977  1A2D  E8                    INX
02978  1A2E  0A                    ASL
02979  1A2F  B0 03                 BCS *+5
02980  1A31  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02981  1A34  E8                    INX
02982  1A35  0A                    ASL
02983  1A36  B0 03                 BCS *+5
02984  1A38  20 3C 1A              JSR CONSOLE.GETKEY.KEYFOUND
02985  1A3B  60                    RTS
02986  1A3C             
02987  1A3C             
02988  1A3C                        ; ROUTINE FOR HANDLING: KEY FOUND
02989  1A3C             
02990  1A3C             CONSOLE.GETKEY.KEYFOUND 
02991  1A3C  86 81                 STX CONSOLE.GETKEY.TEMPZP
02992  1A3E  C6 7E                 DEC CONSOLE.GETKEY.KEYQUANTITY
02993  1A40  30 0A                 BMI CONSOLE.GETKEY.OVERFLOW
02994  1A42  BC C0 1B              LDY CONSOLE.GETKEY.KEYTABLE,X
02995  1A45  A6 7E                 LDX CONSOLE.GETKEY.KEYQUANTITY
02996  1A47  94 7B                 STY CONSOLE.GETKEY.BUFFERNEW,X
02997  1A49  A6 81                 LDX CONSOLE.GETKEY.TEMPZP
02998  1A4B  60                    RTS
02999  1A4C             
03000  1A4C                        ; ROUTINE FOR HANDLING: OVERFLOW
03001  1A4C             
03002  1A4C             CONSOLE.GETKEY.OVERFLOW 
03003  1A4C  68                    PLA  ; DIRTY HACK TO HANDLE 2 LAYERS OF JSR
03004  1A4D  68                    PLA
03005  1A4E  68                    PLA
03006  1A4F  68                    PLA
03007  1A50                        ; DON'T MANIPULATE LAST LEGAL BUFFER AS THE ROUTINE WILL FIX ITSELF ONCE IT GETS VALID INPUT AGAIN.
03008  1A50  A9 03                 LDA #$03
03009  1A52  38                    SEC
03010  1A53  60                    RTS
03011  1A54             
03012  1A54             
03013  1A54                        ; EXIT ROUTINE FOR: NO ACTIVITY
03014  1A54             
03015  1A54             CONSOLE.GETKEY.NOACTIVITYDETECTED 
03016  1A54                        ; EXIT WITH A = #$01, CARRY SET & RESET BUFFEROLD.
03017  1A54  A9 00                 LDA #$00
03018  1A56  8D 08 18              STA CONSOLE.GETKEY.SIMULTANEOUSALPHANUMERICKEYSFLAG  ; CLEAR THE TOO MANY KEYS FLAG ONCE A "NO ACTIVITY" STATE IS DETECTED.
03019  1A59  8E 00 18              STX CONSOLE.GETKEY.BUFFEROLD
03020  1A5C  8E 01 18              STX CONSOLE.GETKEY.BUFFEROLD+1
03021  1A5F  8E 02 18              STX CONSOLE.GETKEY.BUFFEROLD+2
03022  1A62  38                    SEC
03023  1A63  A9 01                 LDA #$01
03024  1A65  60                    RTS
03025  1A66             
03026  1A66             
03027  1A66                        ; EXIT ROUTINE FOR CONTROL PORT ACTIVITY
03028  1A66             
03029  1A66             CONSOLE.GETKEY.CONTROLPORT 
03030  1A66                        ; EXIT WITH A = #$02, CARRY SET. KEEP BUFFEROLD TO VERIFY INPUT AFTER CONTROL PORT ACTIVITY CEASES
03031  1A66  38                    SEC
03032  1A67  A9 02                 LDA #$02
03033  1A69  60                    RTS
03034  1A6A             
03035  1A6A             
03036  1A6A                        ; CONFIGURE DATA DIRECTION REGISTERS
03037  1A6A             ;CONSOLE.GETKEY.MAIN
03038  1A6A             CONSOLE.GETKEY 
03039  1A6A  A2 FF                 LDX #$FF
03040  1A6C  8E 02 DC              STX $DC02       ; PORT A - OUTPUT
03041  1A6F  A0 00                 LDY #$00
03042  1A71  8C 03 DC              STY $DC03       ; PORT B - INPUT
03043  1A74  18                    CLC
03044  1A75             
03045  1A75                        ; CHECK FOR PORT ACTIVITY
03046  1A75             
03047  1A75  8C 00 DC              STY $DC00       ; CONNECT ALL KEYBOARD ROWS
03048  1A78  EC 01 DC              CPX $DC01
03049  1A7B  F0 D7                 BEQ CONSOLE.GETKEY.NOACTIVITYDETECTED
03050  1A7D             
03051  1A7D  AD 08 18              LDA CONSOLE.GETKEY.SIMULTANEOUSALPHANUMERICKEYSFLAG
03052  1A80                        ;BEQ !+
03053  1A80  F0 04                 BEQ CONSOLE.GETKEY.LOOP1
03054  1A82                        ; WAITING FOR ALL KEYS TO BE RELEASED BEFORE ACCEPTING NEW INPUT.
03055  1A82  A9 05                 LDA #$05
03056  1A84  38                    SEC
03057  1A85  60                    RTS
03058  1A86             ;!:
03059  1A86             CONSOLE.GETKEY.LOOP1 
03060  1A86             
03061  1A86                        ; CHECK FOR CONTROL PORT #1 ACTIVITY
03062  1A86             
03063  1A86  8E 00 DC              STX $DC00       ; DISCONNECT ALL KEYBOARD ROWS
03064  1A89  EC 01 DC              CPX $DC01       ; ONLY CONTROL PORT ACTIVITY WILL BE DETECTED
03065  1A8C  D0 D8                 BNE CONSOLE.GETKEY.CONTROLPORT
03066  1A8E             
03067  1A8E             
03068  1A8E                        ; SCAN KEYBOARD MATRIX
03069  1A8E             
03070  1A8E  A9 FE                 LDA #%11111110
03071  1A90  8D 00 DC              STA $DC00
03072  1A93  AC 01 DC              LDY $DC01
03073  1A96  84 7A                 STY CONSOLE.GETKEY.SCANRESULT+7
03074  1A98  38                    SEC
03075  1A99             ;REPEAT 1, 7, I
03076  1A99             ;RI = 7 - I
03077  1A99             ;        ROL
03078  1A99             ;        STA $DC00
03079  1A99             ;        LDY $DC01
03080  1A99             ;        STY CONSOLE.GETKEY.SCANRESULT+RI
03081  1A99             ;ENDREPEAT
03082  1A99  2A                    ROL
03083  1A9A  8D 00 DC              STA $DC00
03084  1A9D  AC 01 DC              LDY $DC01
03085  1AA0  84 79                 STY CONSOLE.GETKEY.SCANRESULT+6
03086  1AA2  2A                    ROL
03087  1AA3  8D 00 DC              STA $DC00
03088  1AA6  AC 01 DC              LDY $DC01
03089  1AA9  84 78                 STY CONSOLE.GETKEY.SCANRESULT+5
03090  1AAB  2A                    ROL
03091  1AAC  8D 00 DC              STA $DC00
03092  1AAF  AC 01 DC              LDY $DC01
03093  1AB2  84 77                 STY CONSOLE.GETKEY.SCANRESULT+4
03094  1AB4  2A                    ROL
03095  1AB5  8D 00 DC              STA $DC00
03096  1AB8  AC 01 DC              LDY $DC01
03097  1ABB  84 76                 STY CONSOLE.GETKEY.SCANRESULT+3
03098  1ABD  2A                    ROL
03099  1ABE  8D 00 DC              STA $DC00
03100  1AC1  AC 01 DC              LDY $DC01
03101  1AC4  84 75                 STY CONSOLE.GETKEY.SCANRESULT+2
03102  1AC6  2A                    ROL
03103  1AC7  8D 00 DC              STA $DC00
03104  1ACA  AC 01 DC              LDY $DC01
03105  1ACD  84 74                 STY CONSOLE.GETKEY.SCANRESULT+1
03106  1ACF  2A                    ROL
03107  1AD0  8D 00 DC              STA $DC00
03108  1AD3  AC 01 DC              LDY $DC01
03109  1AD6  84 73                 STY CONSOLE.GETKEY.SCANRESULT+0
03110  1AD8             
03111  1AD8                        ; CHECK FOR CONTROL PORT #1 ACTIVITY (AGAIN)
03112  1AD8             
03113  1AD8  8E 00 DC              STX $DC00       ; DISCONNECT ALL KEYBOARD ROWS
03114  1ADB  EC 01 DC              CPX $DC01       ; ONLY CONTROL PORT ACTIVITY WILL BE DETECTED
03115  1ADE  D0 86                 BNE CONSOLE.GETKEY.CONTROLPORT
03116  1AE0             
03117  1AE0             
03118  1AE0                        ; INITIALIZE BUFFER, FLAGS AND MAX KEYS
03119  1AE0             
03120  1AE0                        ; RESET CURRENT READ BUFFER
03121  1AE0  86 7B                 STX CONSOLE.GETKEY.BUFFERNEW
03122  1AE2  86 7C                 STX CONSOLE.GETKEY.BUFFERNEW+1
03123  1AE4  86 7D                 STX CONSOLE.GETKEY.BUFFERNEW+2
03124  1AE6             
03125  1AE6                        ; RESET NON-ALPHANUMERIC FLAG
03126  1AE6  E8                    INX
03127  1AE7  86 80                 STX CONSOLE.GETKEY.NONALPHAFLAGY
03128  1AE9             
03129  1AE9                        ; SET MAX KEYS ALLOWED BEFORE IGNORING RESULT
03130  1AE9  A9 03                 LDA #CONSOLE.GETKEY.MAXKEYROLLOVER
03131  1AEB  85 7E                 STA CONSOLE.GETKEY.KEYQUANTITY
03132  1AED             
03133  1AED                        ; COUNTER TO CHECK FOR SIMULTANEOUS ALPHANUMERIC KEY-PRESSES
03134  1AED  A9 FE                 LDA #$FE
03135  1AEF  85 82                 STA CONSOLE.GETKEY.SIMULTANEOUSKEYS
03136  1AF1             
03137  1AF1             
03138  1AF1                        ; CHECK AND FLAG NON ALPHANUMERIC KEYS
03139  1AF1             
03140  1AF1  A5 79                 LDA CONSOLE.GETKEY.SCANRESULT+6
03141  1AF3  49 FF                 EOR #$FF
03142  1AF5  29 80                 AND #%10000000     ; LEFT SHIFT
03143  1AF7  4A                    LSR
03144  1AF8  85 80                 STA CONSOLE.GETKEY.NONALPHAFLAGY
03145  1AFA  A5 73                 LDA CONSOLE.GETKEY.SCANRESULT+0
03146  1AFC  49 FF                 EOR #$FF
03147  1AFE  29 A4                 AND #%10100100     ; RUN STOP - C= - CTRL
03148  1B00  05 80                 ORA CONSOLE.GETKEY.NONALPHAFLAGY
03149  1B02  85 80                 STA CONSOLE.GETKEY.NONALPHAFLAGY
03150  1B04  A5 74                 LDA CONSOLE.GETKEY.SCANRESULT+1
03151  1B06  49 FF                 EOR #$FF
03152  1B08  29 18                 AND #%00011000     ; RIGHT SHIFT - CLR HOME
03153  1B0A  05 80                 ORA CONSOLE.GETKEY.NONALPHAFLAGY
03154  1B0C  85 80                 STA CONSOLE.GETKEY.NONALPHAFLAGY
03155  1B0E             
03156  1B0E  A5 7A                 LDA CONSOLE.GETKEY.SCANRESULT+7  ; THE REST
03157  1B10  49 FF                 EOR #$FF
03158  1B12  85 7F                 STA CONSOLE.GETKEY.NONALPHAFLAGX
03159  1B14             
03160  1B14             
03161  1B14                        ; CHECK FOR PRESSED KEY(S)
03162  1B14             
03163  1B14  A5 7A                 LDA CONSOLE.GETKEY.SCANRESULT+7
03164  1B16  C9 FF                 CMP #$FF
03165  1B18  F0 03                 BEQ *+5
03166  1B1A  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03167  1B1D             ;REPEAT 1,7,I
03168  1B1D             ;RI = 7 - I
03169  1B1D             ;        LDX #I*8
03170  1B1D             ;        LDA CONSOLE.GETKEY.SCANRESULT+RI
03171  1B1D             ;        BEQ *+5
03172  1B1D             ;            JSR CONSOLE.GETKEY.KEYINROW
03173  1B1D             ;ENDREPEAT
03174  1B1D  A2 08                 LDX #8
03175  1B1F  A5 79                 LDA CONSOLE.GETKEY.SCANRESULT+6
03176  1B21  F0 03                 BEQ *+5
03177  1B23  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03178  1B26  A2 10                 LDX #16
03179  1B28  A5 78                 LDA CONSOLE.GETKEY.SCANRESULT+5
03180  1B2A  F0 03                 BEQ *+5
03181  1B2C  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03182  1B2F  A2 18                 LDX #24
03183  1B31  A5 77                 LDA CONSOLE.GETKEY.SCANRESULT+4
03184  1B33  F0 03                 BEQ *+5
03185  1B35  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03186  1B38  A2 20                 LDX #32
03187  1B3A  A5 76                 LDA CONSOLE.GETKEY.SCANRESULT+3
03188  1B3C  F0 03                 BEQ *+5
03189  1B3E  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03190  1B41  A2 28                 LDX #40
03191  1B43  A5 75                 LDA CONSOLE.GETKEY.SCANRESULT+2
03192  1B45  F0 03                 BEQ *+5
03193  1B47  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03194  1B4A  A2 30                 LDX #48
03195  1B4C  A5 74                 LDA CONSOLE.GETKEY.SCANRESULT+1
03196  1B4E  F0 03                 BEQ *+5
03197  1B50  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03198  1B53  A2 38                 LDX #56
03199  1B55  A5 73                 LDA CONSOLE.GETKEY.SCANRESULT+0
03200  1B57  F0 03                 BEQ *+5
03201  1B59  20 04 1A              JSR CONSOLE.GETKEY.KEYINROW
03202  1B5C             
03203  1B5C                        ; KEY SCAN COMPLETED
03204  1B5C             
03205  1B5C                        ; PUT ANY NEW KEY (NOT IN OLD SCAN) INTO BUFFER
03206  1B5C  A2 02                 LDX #CONSOLE.GETKEY.MAXKEYROLLOVER-1
03207  1B5E                        ;!:
03208  1B5E             CONSOLE.GETKEY.LOOP2 
03209  1B5E  B5 7B                 LDA CONSOLE.GETKEY.BUFFERNEW,X
03210  1B60  C9 FF                 CMP #$FF
03211  1B62  F0 1C                 BEQ CONSOLE.GETKEY.EXIST        ; HANDLE 'NULL' VALUES
03212  1B64  CD 00 18              CMP CONSOLE.GETKEY.BUFFEROLD
03213  1B67  F0 17                 BEQ CONSOLE.GETKEY.EXIST
03214  1B69  CD 01 18              CMP CONSOLE.GETKEY.BUFFEROLD+1
03215  1B6C  F0 12                 BEQ CONSOLE.GETKEY.EXIST
03216  1B6E  CD 02 18              CMP CONSOLE.GETKEY.BUFFEROLD+2
03217  1B71  F0 0D                 BEQ CONSOLE.GETKEY.EXIST
03218  1B73                        ; NEW KEY DETECTED
03219  1B73  EE 07 18              INC CONSOLE.GETKEY.BUFFERQUANTITY
03220  1B76  AC 07 18              LDY CONSOLE.GETKEY.BUFFERQUANTITY
03221  1B79  99 03 18              STA CONSOLE.GETKEY.BUFFER,Y
03222  1B7C                        ; KEEP TRACK OF HOW MANY NEW ALPHANUMERIC KEYS ARE DETECTED
03223  1B7C  E6 82                 INC CONSOLE.GETKEY.SIMULTANEOUSKEYS
03224  1B7E  F0 34                 BEQ CONSOLE.GETKEY.TOOMANYNEWKEYS
03225  1B80             CONSOLE.GETKEY.EXIST 
03226  1B80  CA                    DEX
03227  1B81                        ;BPL !-
03228  1B81  10 DB                 BPL CONSOLE.GETKEY.LOOP2
03229  1B83             
03230  1B83                        ; ANYTHING IN BUFFER?
03231  1B83  AC 07 18              LDY CONSOLE.GETKEY.BUFFERQUANTITY
03232  1B86  30 15                 BMI CONSOLE.GETKEY.BUFFEREMPTY
03233  1B88                        ; YES: THEN RETURN IT AND TIDY UP THE BUFFER
03234  1B88  CE 07 18              DEC CONSOLE.GETKEY.BUFFERQUANTITY
03235  1B8B  AD 03 18              LDA CONSOLE.GETKEY.BUFFER
03236  1B8E  AE 04 18              LDX CONSOLE.GETKEY.BUFFER+1
03237  1B91  8E 03 18              STX CONSOLE.GETKEY.BUFFER
03238  1B94  AE 05 18              LDX CONSOLE.GETKEY.BUFFER+2
03239  1B97  8E 04 18              STX CONSOLE.GETKEY.BUFFER+1
03240  1B9A  4C 9F 1B              JMP CONSOLE.GETKEY.RETURN
03241  1B9D             
03242  1B9D             CONSOLE.GETKEY.BUFFEREMPTY ; NO NEW ALPHANUMERIC KEYS TO HANDLE.
03243  1B9D  A9 FF                 LDA #$FF
03244  1B9F             
03245  1B9F             CONSOLE.GETKEY.RETURN ; A IS PRESET
03246  1B9F  18                    CLC
03247  1BA0                        ; COPY BUFFERNEW TO BUFFEROLD
03248  1BA0  A6 7B                 LDX CONSOLE.GETKEY.BUFFERNEW
03249  1BA2  8E 00 18              STX CONSOLE.GETKEY.BUFFEROLD
03250  1BA5  A6 7C                 LDX CONSOLE.GETKEY.BUFFERNEW+1
03251  1BA7  8E 01 18              STX CONSOLE.GETKEY.BUFFEROLD+1
03252  1BAA  A6 7D                 LDX CONSOLE.GETKEY.BUFFERNEW+2
03253  1BAC  8E 02 18              STX CONSOLE.GETKEY.BUFFEROLD+2
03254  1BAF                        ; HANDLE NON ALPHANUMERIC KEYS
03255  1BAF  A6 7F                 LDX CONSOLE.GETKEY.NONALPHAFLAGX
03256  1BB1  A4 80                 LDY CONSOLE.GETKEY.NONALPHAFLAGY
03257  1BB3  60                    RTS
03258  1BB4             
03259  1BB4             CONSOLE.GETKEY.TOOMANYNEWKEYS 
03260  1BB4  38                    SEC
03261  1BB5  A9 FF                 LDA #$FF
03262  1BB7  8D 07 18              STA CONSOLE.GETKEY.BUFFERQUANTITY
03263  1BBA  8D 08 18              STA CONSOLE.GETKEY.SIMULTANEOUSALPHANUMERICKEYSFLAG
03264  1BBD  A9 04                 LDA #$04
03265  1BBF  60                    RTS
03266  1BC0             
03267  1BC0             CONSOLE.GETKEY.KEYTABLE 
03268  1BC0  FF FF FF              BYTE $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF  ; CRSR DOWN, F5, F3, F1, F7, CRSR RIGHT, RETURN, INST DEL
03269  1BC8  FF 05 13              BYTE $FF, $05, $13, $1A, $34, $01, $17, $33  ; LEFT SHIFT, "E", "S", "Z", "4", "A", "W", "3"
03270  1BD0  18 14 06              BYTE $18, $14, $06, $03, $36, $04, $12, $35  ; "X", "T", "F", "C", "6", "D", "R", "5"
03271  1BD8  16 15 08              BYTE $16, $15, $08, $02, $38, $07, $19, $37  ; "V", "U", "H", "B", "8", "G", "Y", "7"
03272  1BE0  0E 0F 0B              BYTE $0E, $0F, $0B, $0D, $30, $0A, $09, $39  ; "N", "O" (OSCAR), "K", "M", "0" (ZERO), "J", "I", "9"
03273  1BE8  2C 00 3A              BYTE $2C, $00, $3A, $2E, $2D, $0C, $10, $2B  ; ",", "@", ":", ".", "-", "L", "P", "+"
03274  1BF0  2F 1E 3D              BYTE $2F, $1E, $3D, $FF, $FF, $3B, $2A, $1C  ; "/", "^", "=", RIGHT SHIFT, HOME, ";", "*", "£"
03275  1BF8  FF 11 FF              BYTE $FF, $11, $FF, $20, $32, $FF, $1F, $31  ; RUN STOP, "Q", "C=" (CMD), " " (SPC), "2", "CTRL", "<-", "1"
03276  1C00             
03277  1C00             
03278  1C00             
03279  1C00             
03280  1C00             
03281  1C00             
03282  1C00             ALIGN      $100
03283  1C00             
03284  1C00             CONVERT.HEX2DEC.RESULT = $E4
03285  1C00             
03286  1C00             CONVERT.HEX2DEC8.VALUE = $E0 ; 1 BYTE
03287  1C00             CONVERT.HEX2DEC8.RESULT = $E4 ; 3 BYTES
03288  1C00             
03289  1C00             CONVERT.HEX2DEC8 
03290  1C00                        ; CONVERTS 3 DIGITS (8 BIT VALUES HAVE MAX. 3 DECIMAL DIGITS)
03291  1C00  A2 00                 LDX #0
03292  1C02             @L3
03293  1C02  20 0D 1C              JSR @DIV10_8
03294  1C05  95 E4                 STA CONVERT.HEX2DEC8.RESULT,X
03295  1C07  E8                    INX
03296  1C08  E0 0A                 CPX #10
03297  1C0A  D0 F6                 BNE @L3
03298  1C0C  60                    RTS
03299  1C0D             
03300  1C0D                        ; DIVIDES A 8 BIT VALUE BY 10
03301  1C0D                        ; REMAINDER IS RETURNED IN AKKU
03302  1C0D             @DIV10_8
03303  1C0D  A0 08                 LDY #8         ; 8 BITS
03304  1C0F  A9 00                 LDA #0
03305  1C11  18                    CLC
03306  1C12             @L4        
03307  1C12  2A                    ROL
03308  1C13  C9 0A                 CMP #10
03309  1C15  90 02                 BCC @SKIP
03310  1C17  E9 0A                 SBC #10
03311  1C19             @SKIP      
03312  1C19  26 E0                 ROL CONVERT.HEX2DEC8.VALUE
03313  1C1B  88                    DEY
03314  1C1C  10 F4                 BPL @L4
03315  1C1E  60                    RTS
03316  1C1F             
03317  1C1F             CONVERT.HEX2DEC16.VALUE = $E0 ; 2 BYTES
03318  1C1F             CONVERT.HEX2DEC16.RESULT = $E4 ; 5 BYTES
03319  1C1F             
03320  1C1F             CONVERT.HEX2DEC16 
03321  1C1F                        ; CONVERTS 5 DIGITS (16 BIT VALUES HAVE MAX. 5 DECIMAL DIGITS)
03322  1C1F  A2 00                 LDX #0
03323  1C21             @L3
03324  1C21  20 2C 1C              JSR @DIV10_16
03325  1C24  95 E4                 STA CONVERT.HEX2DEC16.RESULT,X
03326  1C26  E8                    INX
03327  1C27  E0 0A                 CPX #10
03328  1C29  D0 F6                 BNE @L3
03329  1C2B  60                    RTS
03330  1C2C             
03331  1C2C                        ; DIVIDES A 16 BIT VALUE BY 10
03332  1C2C                        ; REMAINDER IS RETURNED IN AKKU
03333  1C2C             @DIV10_16
03334  1C2C  A0 10                 LDY #16         ; 16 BITS
03335  1C2E  A9 00                 LDA #0
03336  1C30  18                    CLC
03337  1C31             @L4        
03338  1C31  2A                    ROL
03339  1C32  C9 0A                 CMP #10
03340  1C34  90 02                 BCC @SKIP
03341  1C36  E9 0A                 SBC #10
03342  1C38             @SKIP      
03343  1C38  26 E0                 ROL CONVERT.HEX2DEC16.VALUE
03344  1C3A  26 E1                 ROL CONVERT.HEX2DEC16.VALUE+1
03345  1C3C  88                    DEY
03346  1C3D  10 F2                 BPL @L4
03347  1C3F  60                    RTS
03348  1C40             
03349  1C40             CONVERT.HEX2DEC32.VALUE = $E0 ; 4 BYTES
03350  1C40             CONVERT.HEX2DEC32.RESULT = $E4 ; 10 BYTES
03351  1C40             
03352  1C40             CONVERT.HEX2DEC32 
03353  1C40                        ; CONVERTS 10 DIGITS (32 BIT VALUES HAVE MAX. 10 DECIMAL DIGITS)
03354  1C40  A2 00                 LDX #0
03355  1C42             @L3
03356  1C42  20 4D 1C              JSR @DIV10_32
03357  1C45  95 E4                 STA CONVERT.HEX2DEC32.RESULT,X
03358  1C47  E8                    INX
03359  1C48  E0 0A                 CPX #10
03360  1C4A  D0 F6                 BNE @L3
03361  1C4C  60                    RTS
03362  1C4D             
03363  1C4D                        ; DIVIDES A 32 BIT VALUE BY 10
03364  1C4D                        ; REMAINDER IS RETURNED IN AKKU
03365  1C4D             @DIV10_32
03366  1C4D  A0 20                 LDY #32         ; 32 BITS
03367  1C4F  A9 00                 LDA #0
03368  1C51  18                    CLC
03369  1C52             @L4        
03370  1C52  2A                    ROL
03371  1C53  C9 0A                 CMP #10
03372  1C55  90 02                 BCC @SKIP
03373  1C57  E9 0A                 SBC #10
03374  1C59             @SKIP      
03375  1C59  26 E0                 ROL CONVERT.HEX2DEC32.VALUE
03376  1C5B  26 E1                 ROL CONVERT.HEX2DEC32.VALUE+1
03377  1C5D  26 E2                 ROL CONVERT.HEX2DEC32.VALUE+2
03378  1C5F  26 E3                 ROL CONVERT.HEX2DEC32.VALUE+3
03379  1C61  88                    DEY
03380  1C62  10 EE                 BPL @L4
03381  1C64  60                    RTS
03382  1C65             
03383  1C65             ;CONVERT.DEC2HEX8
03384  1C65             ;  LDA A
03385  1C65             ;  JSR MULT10
03386  1C65             ;  JSR MULT10   ;X100
03387  1C65             ;  STA TMP0
03388  1C65             ;  LDA B
03389  1C65             ;  JSR MULT10   ;X10
03390  1C65             ;  STA TMP1
03391  1C65             ;  LDA C
03392  1C65             ;  STA TMP2     ;X1
03393  1C65             ;
03394  1C65             ;  CLC
03395  1C65             ;  LDA #$00
03396  1C65             ;  ADC TMP0
03397  1C65             ;  ADC TMP1
03398  1C65             ;  ADC TMP2
03399  1C65             ;  RTS     ;CARRY WILL BE SET IF RESULT WAS > 255
03400  1C65             
03401  1C65             
03402  1C65             ;MULT10  ASL         ;MULTIPLY BY 2
03403  1C65             ;        STA TEMP10  ;TEMP STORE IN TEMP
03404  1C65             ;        ASL         ;AGAIN MULTIPLY BY 2 (*4)
03405  1C65             ;        ASL         ;AGAIN MULTIPLY BY 2 (*8)
03406  1C65             ;        CLC
03407  1C65             ;        ADC TEMP10  ;AS RESULT, A = X*8 + X*2
03408  1C65             ;        RTS
03409  1C65             
03410  1C65             
03411  1C65             CONVERT.DEC2HEX.VALUE = $E4
03412  1C65             CONVERT.DEC2HEX.LEN = $2A
03413  1C65             
03414  1C65             CONVERT.DEC2HEX8.VALUE = $E4 ; 3 BYTES
03415  1C65             CONVERT.DEC2HEX8.RESULT = $E0 ; 1 BYTE
03416  1C65             CONVERT.DEC2HEX8.INT = $FB ; 1 BYTE
03417  1C65             CONVERT.DEC2HEX8.LEN = $2A ; 1 BYTE
03418  1C65             CONVERT.DEC2HEX8.OFFSET = $52 ; 1 BYTE
03419  1C65             CONVERT.DEC2HEX8 
03420  1C65                        ; NEED TO SET CONVERT.DEC2HEX8.VALUE AND CONVERT.DEC2HEX8.LEN
03421  1C65                        
03422  1C65                        ; SET THE DEFAULT VALUE
03423  1C65  A9 00                 LDA #$00
03424  1C67  85 E0                 STA CONVERT.DEC2HEX8.RESULT
03425  1C69  85 E1                 STA CONVERT.DEC2HEX8.RESULT+1
03426  1C6B             
03427  1C6B                        ; CHECK THE LENGTH
03428  1C6B  A5 2A                 LDA CONVERT.DEC2HEX8.LEN
03429  1C6D  C9 00                 CMP #$00
03430  1C6F  D0 01                 BNE @LENOK
03431  1C71  60                    RTS
03432  1C72             @LENOK
03433  1C72                        ; MULTIPLY EACH CHARACTER BY 10^(DIGIT-1) AND ADD TO THE RESULT
03434  1C72             
03435  1C72  A2 00                 LDX #$00
03436  1C74             @LOOP
03437  1C74  B5 E4                 LDA CONVERT.DEC2HEX8.VALUE,X
03438  1C76  C9 30                 CMP #$30 ; SKIP IF THE CHARACTER = '0'
03439  1C78  D0 03                 BNE @DIGITOK
03440  1C7A  4C B0 1C              JMP @NEXTDIGIT
03441  1C7D             @DIGITOK
03442  1C7D  38                    SEC ; DO NOT SUBTRACT ANY ADDITIONAL 1S
03443  1C7E  E9 30                 SBC #$30 ; GET THE NUMBER VALUE OF THE CHARACTER (CHAR - #30)
03444  1C80             
03445  1C80  85 FB                 STA CONVERT.DEC2HEX8.INT
03446  1C82             
03447  1C82                        ; Y = LEN - OFFSET - 1
03448  1C82  86 52                 STX CONVERT.DEC2HEX8.OFFSET
03449  1C84  A5 2A                 LDA CONVERT.DEC2HEX8.LEN
03450  1C86  18                    CLC ; SUBTRACT AN ADDITIONAL 1
03451  1C87  E5 52                 SBC CONVERT.DEC2HEX8.OFFSET
03452  1C89  A8                    TAY
03453  1C8A             
03454  1C8A                        ; MULTIPLY AFFECTS X AND Y
03455  1C8A  8A                    TXA
03456  1C8B  48                    PHA
03457  1C8C             
03458  1C8C             @FACTOR
03459  1C8C  C0 00                 CPY #$00
03460  1C8E  F0 17                 BEQ @SKIPFACTOR
03461  1C90             
03462  1C90  A5 FB                 LDA CONVERT.DEC2HEX8.INT
03463  1C92  85 80                 STA MATH.MULTIPLY8.FACTOR1$
03464  1C94             
03465  1C94  A9 0A                 LDA #$0A
03466  1C96  85 82                 STA MATH.MULTIPLY8.FACTOR2$
03467  1C98             
03468  1C98  98                    TYA
03469  1C99  48                    PHA
03470  1C9A  20 48 29              JSR MATH.MULTIPLY8$
03471  1C9D  68                    PLA
03472  1C9E  A8                    TAY
03473  1C9F             
03474  1C9F  A5 83                 LDA MATH.MULTIPLY8.PRODUCT$
03475  1CA1  85 FB                 STA CONVERT.DEC2HEX8.INT
03476  1CA3             
03477  1CA3  88                    DEY ; Y = Y - 1
03478  1CA4  4C 8C 1C              JMP @FACTOR
03479  1CA7             
03480  1CA7             @SKIPFACTOR 
03481  1CA7             
03482  1CA7                        ; RESTORE X AND Y
03483  1CA7  68                    PLA
03484  1CA8  AA                    TAX
03485  1CA9             
03486  1CA9  A5 E0                 LDA CONVERT.DEC2HEX8.RESULT
03487  1CAB  18                    CLC
03488  1CAC  65 FB                 ADC CONVERT.DEC2HEX8.INT
03489  1CAE  85 E0                 STA CONVERT.DEC2HEX8.RESULT
03490  1CB0             
03491  1CB0             @NEXTDIGIT 
03492  1CB0  E8                    INX ; X = X + 1
03493  1CB1  E4 2A                 CPX CONVERT.DEC2HEX8.LEN
03494  1CB3  F0 03                 BEQ @END
03495  1CB5  4C 74 1C              JMP @LOOP
03496  1CB8             
03497  1CB8             @END
03498  1CB8             
03499  1CB8  60                    RTS
03500  1CB9             
03501  1CB9             ;ALIGN $100
03502  1CB9             
03503  1CB9             CONVERT.DEC2HEX16.VALUE = $E4 ; 5 BYTES
03504  1CB9             CONVERT.DEC2HEX16.RESULT = $E0 ; 2 BYTES
03505  1CB9             CONVERT.DEC2HEX16.INT = $FB ; 2 BYTES
03506  1CB9             CONVERT.DEC2HEX16.LEN = $2A ; 1 BYTE
03507  1CB9             CONVERT.DEC2HEX16.OFFSET = $52 ; 1 BYTE
03508  1CB9             CONVERT.DEC2HEX16 
03509  1CB9                        ; NEED TO SET CONVERT.DEC2HEX16.VALUE AND CONVERT.DEC2HEX16.LEN
03510  1CB9                        
03511  1CB9                        ; SET THE DEFAULT VALUE
03512  1CB9  A9 00                 LDA #$00
03513  1CBB  85 E0                 STA CONVERT.DEC2HEX16.RESULT
03514  1CBD  85 E1                 STA CONVERT.DEC2HEX16.RESULT+1
03515  1CBF             
03516  1CBF                        ; CHECK THE LENGTH
03517  1CBF  A5 2A                 LDA CONVERT.DEC2HEX16.LEN
03518  1CC1  C9 00                 CMP #$00
03519  1CC3  D0 01                 BNE @LENOK
03520  1CC5  60                    RTS
03521  1CC6             @LENOK
03522  1CC6             
03523  1CC6                        ;LDA #$05
03524  1CC6                        ;STA CONVERT.DEC2HEX16.LEN
03525  1CC6             
03526  1CC6                        ; MULTIPLY EACH CHARACTER BY 10^(DIGIT-1) AND ADD TO THE RESULT
03527  1CC6             
03528  1CC6  A2 00                 LDX #$00
03529  1CC8             @LOOP
03530  1CC8  B5 E4                 LDA CONVERT.DEC2HEX16.VALUE,X
03531  1CCA  C9 30                 CMP #$30 ; SKIP IF THE CHARACTER = '0'
03532  1CCC  D0 03                 BNE @DIGITOK
03533  1CCE  4C 24 1D              JMP @NEXTDIGIT
03534  1CD1             @DIGITOK
03535  1CD1  38                    SEC ; DO NOT SUBTRACT ANY ADDITIONAL 1S
03536  1CD2  E9 30                 SBC #$30 ; GET THE NUMBER VALUE OF THE CHARACTER (CHAR - #30)
03537  1CD4             
03538  1CD4  85 FB                 STA CONVERT.DEC2HEX16.INT
03539  1CD6  A9 00                 LDA #$00
03540  1CD8  85 FC                 STA CONVERT.DEC2HEX16.INT+1
03541  1CDA             
03542  1CDA                        ; Y = LEN - OFFSET - 1
03543  1CDA  86 52                 STX CONVERT.DEC2HEX16.OFFSET
03544  1CDC  A5 2A                 LDA CONVERT.DEC2HEX16.LEN
03545  1CDE  18                    CLC ; SUBTRACT AN ADDITIONAL 1
03546  1CDF  E5 52                 SBC CONVERT.DEC2HEX16.OFFSET
03547  1CE1  A8                    TAY
03548  1CE2             
03549  1CE2                        ; MULTIPLY AFFECTS X
03550  1CE2  8A                    TXA
03551  1CE3  48                    PHA
03552  1CE4             
03553  1CE4             @FACTOR
03554  1CE4  C0 00                 CPY #$00
03555  1CE6  F0 1F                 BEQ @SKIPFACTOR
03556  1CE8             
03557  1CE8  A5 FB                 LDA CONVERT.DEC2HEX16.INT
03558  1CEA  85 80                 STA MATH.MULTIPLY16.FACTOR1$
03559  1CEC  A5 FC                 LDA CONVERT.DEC2HEX16.INT+1
03560  1CEE  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
03561  1CF0             
03562  1CF0  A9 0A                 LDA #$0A
03563  1CF2  85 82                 STA MATH.MULTIPLY16.FACTOR2$
03564  1CF4  A9 00                 LDA #$00
03565  1CF6  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
03566  1CF8             
03567  1CF8  20 67 29              JSR MATH.MULTIPLY16$
03568  1CFB             
03569  1CFB  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
03570  1CFD  85 FB                 STA CONVERT.DEC2HEX16.INT
03571  1CFF  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
03572  1D01  85 FC                 STA CONVERT.DEC2HEX16.INT+1
03573  1D03             
03574  1D03  88                    DEY ; Y = Y - 1
03575  1D04  4C E4 1C              JMP @FACTOR
03576  1D07             
03577  1D07             @SKIPFACTOR 
03578  1D07             
03579  1D07                        ; RESTORE X
03580  1D07  68                    PLA
03581  1D08  AA                    TAX
03582  1D09             
03583  1D09  A5 E0                 LDA CONVERT.DEC2HEX16.RESULT
03584  1D0B  85 80                 STA MATH.ADD16.ADDEND1$
03585  1D0D  A5 E1                 LDA CONVERT.DEC2HEX16.RESULT+1
03586  1D0F  85 81                 STA MATH.ADD16.ADDEND1$+1
03587  1D11             
03588  1D11  A5 FB                 LDA CONVERT.DEC2HEX16.INT
03589  1D13  85 82                 STA MATH.ADD16.ADDEND2$
03590  1D15  A5 FC                 LDA CONVERT.DEC2HEX16.INT+1
03591  1D17  85 83                 STA MATH.ADD16.ADDEND2$+1
03592  1D19             
03593  1D19  20 00 28              JSR MATH.ADD16$ ; RESULT = RESULT + INT
03594  1D1C             
03595  1D1C  A5 84                 LDA MATH.ADD16.SUM$
03596  1D1E  85 E0                 STA CONVERT.DEC2HEX16.RESULT
03597  1D20  A5 85                 LDA MATH.ADD16.SUM$+1
03598  1D22  85 E1                 STA CONVERT.DEC2HEX16.RESULT+1
03599  1D24             
03600  1D24             @NEXTDIGIT 
03601  1D24  E8                    INX ; X = X + 1
03602  1D25  E4 2A                 CPX CONVERT.DEC2HEX16.LEN
03603  1D27  F0 03                 BEQ @END
03604  1D29  4C C8 1C              JMP @LOOP
03605  1D2C             
03606  1D2C             @END
03607  1D2C             
03608  1D2C  60                    RTS
03609  1D2D             
03610  1D2D             CONVERT.DEC2HEX32.VALUE = $E4 ; 10 BYTES
03611  1D2D             CONVERT.DEC2HEX32.RESULT = $E0 ; 4 BYTES
03612  1D2D             CONVERT.DEC2HEX32.INT = $FB ; 4 BYTES
03613  1D2D             CONVERT.DEC2HEX32.LEN = $2A ; 1 BYTE
03614  1D2D             CONVERT.DEC2HEX32.OFFSET = $52 ; 1 BYTE
03615  1D2D             CONVERT.DEC2HEX32 
03616  1D2D                        ; NEED TO SET CONVERT.DEC2HEX32.VALUE AND CONVERT.DEC2HEX32.LEN
03617  1D2D                        
03618  1D2D                        ; SET THE DEFAULT VALUE
03619  1D2D  A9 00                 LDA #$00
03620  1D2F  85 E0                 STA CONVERT.DEC2HEX32.RESULT
03621  1D31  85 E1                 STA CONVERT.DEC2HEX32.RESULT+1
03622  1D33  85 E2                 STA CONVERT.DEC2HEX32.RESULT+2
03623  1D35  85 E3                 STA CONVERT.DEC2HEX32.RESULT+3
03624  1D37             
03625  1D37                        ; CHECK THE LENGTH
03626  1D37  A5 2A                 LDA CONVERT.DEC2HEX32.LEN
03627  1D39  C9 00                 CMP #$00
03628  1D3B  D0 01                 BNE @LENOK
03629  1D3D  60                    RTS
03630  1D3E             @LENOK
03631  1D3E             
03632  1D3E                        ; MULTIPLY EACH CHARACTER BY 10^(DIGIT-1) AND ADD TO THE RESULT
03633  1D3E             
03634  1D3E  A2 00                 LDX #$00
03635  1D40             @LOOP
03636  1D40  B5 E4                 LDA CONVERT.DEC2HEX32.VALUE,X ; GET THE CURRENT CHARACTER
03637  1D42  C9 30                 CMP #$30 ; SKIP IF THE CHARACTER = '0'
03638  1D44  D0 03                 BNE @DIGITOK
03639  1D46  4C CC 1D              JMP @NEXTDIGIT
03640  1D49             @DIGITOK
03641  1D49  38                    SEC ; DO NOT SUBTRACT ANY ADDITIONAL 1S
03642  1D4A  E9 30                 SBC #$30 ; GET THE NUMBER VALUE OF THE CHARACTER (CHAR - #30)
03643  1D4C             
03644  1D4C  85 FB                 STA CONVERT.DEC2HEX32.INT
03645  1D4E  A9 00                 LDA #$00
03646  1D50  85 FC                 STA CONVERT.DEC2HEX32.INT+1
03647  1D52  85 FD                 STA CONVERT.DEC2HEX32.INT+2
03648  1D54  85 FE                 STA CONVERT.DEC2HEX32.INT+3
03649  1D56             
03650  1D56                        ; Y = LEN - OFFSET - 1
03651  1D56  86 52                 STX CONVERT.DEC2HEX32.OFFSET
03652  1D58  A5 2A                 LDA CONVERT.DEC2HEX32.LEN
03653  1D5A  18                    CLC ; SUBTRACT AN ADDITIONAL 1
03654  1D5B  E5 52                 SBC CONVERT.DEC2HEX32.OFFSET
03655  1D5D  A8                    TAY
03656  1D5E             
03657  1D5E                        ; MULTIPLY AFFECTS X
03658  1D5E  8A                    TXA
03659  1D5F  48                    PHA
03660  1D60             
03661  1D60             @FACTOR
03662  1D60  C0 00                 CPY #$00
03663  1D62  F0 33                 BEQ @SKIPFACTOR
03664  1D64             
03665  1D64  A5 FB                 LDA CONVERT.DEC2HEX32.INT
03666  1D66  85 80                 STA MATH.MULTIPLY32.FACTOR1$
03667  1D68  A5 FC                 LDA CONVERT.DEC2HEX32.INT+1
03668  1D6A  85 81                 STA MATH.MULTIPLY32.FACTOR1$+1
03669  1D6C  A5 FD                 LDA CONVERT.DEC2HEX32.INT+2
03670  1D6E  85 82                 STA MATH.MULTIPLY32.FACTOR1$+2
03671  1D70  A5 FE                 LDA CONVERT.DEC2HEX32.INT+3
03672  1D72  85 83                 STA MATH.MULTIPLY32.FACTOR1$+3
03673  1D74             
03674  1D74  A9 0A                 LDA #$0A
03675  1D76  85 84                 STA MATH.MULTIPLY32.FACTOR2$
03676  1D78  A9 00                 LDA #$00
03677  1D7A  85 85                 STA MATH.MULTIPLY32.FACTOR2$+1
03678  1D7C  85 86                 STA MATH.MULTIPLY32.FACTOR2$+2
03679  1D7E  85 87                 STA MATH.MULTIPLY32.FACTOR2$+3
03680  1D80             
03681  1D80  20 8D 29              JSR MATH.MULTIPLY32$
03682  1D83             
03683  1D83  A5 88                 LDA MATH.MULTIPLY32.PRODUCT$
03684  1D85  85 FB                 STA CONVERT.DEC2HEX32.INT
03685  1D87  A5 89                 LDA MATH.MULTIPLY32.PRODUCT$+1
03686  1D89  85 FC                 STA CONVERT.DEC2HEX32.INT+1
03687  1D8B  A5 8A                 LDA MATH.MULTIPLY32.PRODUCT$+2
03688  1D8D  85 FD                 STA CONVERT.DEC2HEX32.INT+2
03689  1D8F  A5 8B                 LDA MATH.MULTIPLY32.PRODUCT$+3
03690  1D91  85 FE                 STA CONVERT.DEC2HEX32.INT+3
03691  1D93             
03692  1D93  88                    DEY ; Y = Y - 1
03693  1D94  4C 60 1D              JMP @FACTOR
03694  1D97             
03695  1D97             @SKIPFACTOR 
03696  1D97             
03697  1D97                        ; RESTORE X
03698  1D97  68                    PLA
03699  1D98  AA                    TAX
03700  1D99             
03701  1D99  A5 E0                 LDA CONVERT.DEC2HEX32.RESULT
03702  1D9B  85 80                 STA MATH.ADD32.ADDEND1$
03703  1D9D  A5 E1                 LDA CONVERT.DEC2HEX32.RESULT+1
03704  1D9F  85 81                 STA MATH.ADD32.ADDEND1$+1
03705  1DA1  A5 E2                 LDA CONVERT.DEC2HEX32.RESULT+2
03706  1DA3  85 82                 STA MATH.ADD32.ADDEND1$+2
03707  1DA5  A5 E3                 LDA CONVERT.DEC2HEX32.RESULT+3
03708  1DA7  85 83                 STA MATH.ADD32.ADDEND1$+3
03709  1DA9             
03710  1DA9  A5 FB                 LDA CONVERT.DEC2HEX32.INT
03711  1DAB  85 84                 STA MATH.ADD32.ADDEND2$
03712  1DAD  A5 FC                 LDA CONVERT.DEC2HEX32.INT+1
03713  1DAF  85 85                 STA MATH.ADD32.ADDEND2$+1
03714  1DB1  A5 FD                 LDA CONVERT.DEC2HEX32.INT+2
03715  1DB3  85 86                 STA MATH.ADD32.ADDEND2$+2
03716  1DB5  A5 FE                 LDA CONVERT.DEC2HEX32.INT+3
03717  1DB7  85 87                 STA MATH.ADD32.ADDEND2$+3
03718  1DB9             
03719  1DB9  20 22 28              JSR MATH.ADD32$ ; RESULT = RESULT + INT
03720  1DBC             
03721  1DBC  A5 88                 LDA MATH.ADD32.SUM$
03722  1DBE  85 E0                 STA CONVERT.DEC2HEX32.RESULT
03723  1DC0  A5 89                 LDA MATH.ADD32.SUM$+1
03724  1DC2  85 E1                 STA CONVERT.DEC2HEX32.RESULT+1
03725  1DC4  A5 8A                 LDA MATH.ADD32.SUM$+2
03726  1DC6  85 E2                 STA CONVERT.DEC2HEX32.RESULT+2
03727  1DC8  A5 8B                 LDA MATH.ADD32.SUM$+3
03728  1DCA  85 E3                 STA CONVERT.DEC2HEX32.RESULT+3
03729  1DCC             
03730  1DCC             @NEXTDIGIT 
03731  1DCC  E8                    INX ; X = X + 1
03732  1DCD  E4 2A                 CPX CONVERT.DEC2HEX32.LEN
03733  1DCF  F0 03                 BEQ @END
03734  1DD1  4C 40 1D              JMP @LOOP
03735  1DD4             
03736  1DD4             @END
03737  1DD4             
03738  1DD4  60                    RTS
03739  1DD5             
03740  1DD5             
03741  1DD5             
03742  1DD5             
03743  1DD5             
03744  1DD5             ;ALIGN $100
03745  1DD5             
03746  1DD5             TIME.GETTICKS.RESULT$ = $73 ; 4 BYTES
03747  1DD5             
03748  1DD5             TIME.GETTICKS$ 
03749  1DD5                        ;CLI ; RE-ENABLE INTERRUPTS
03750  1DD5             
03751  1DD5                        ;JSR $FFEA ; CALL UDTIM
03752  1DD5             
03753  1DD5  A5 A2                 LDA $A2
03754  1DD7  85 84                 STA MATH.DIVIDE32.DIVIDEND$
03755  1DD9  A5 A1                 LDA $A1
03756  1DDB  85 85                 STA MATH.DIVIDE32.DIVIDEND$+1
03757  1DDD  A5 A0                 LDA $A0
03758  1DDF  85 86                 STA MATH.DIVIDE32.DIVIDEND$+2
03759  1DE1  A9 00                 LDA #$00
03760  1DE3  85 87                 STA MATH.DIVIDE32.DIVIDEND$+3
03761  1DE5             
03762  1DE5  A9 3C                 LDA #$3C
03763  1DE7  85 80                 STA MATH.DIVIDE32.DIVISOR$
03764  1DE9  A9 00                 LDA #$00
03765  1DEB  85 81                 STA MATH.DIVIDE32.DIVISOR$+1
03766  1DED  A9 00                 LDA #$00
03767  1DEF  85 82                 STA MATH.DIVIDE32.DIVISOR$+2
03768  1DF1  A9 00                 LDA #$00
03769  1DF3  85 83                 STA MATH.DIVIDE32.DIVISOR$+3
03770  1DF5             
03771  1DF5  20 26 2A              JSR MATH.DIVIDE32$ ; QUOTIENT = (TIME / 60)
03772  1DF8             
03773  1DF8  A5 84                 LDA MATH.DIVIDE32.QUOTIENT$
03774  1DFA  85 80                 STA MATH.MULTIPLY32.FACTOR1$
03775  1DFC  A5 85                 LDA MATH.DIVIDE32.QUOTIENT$+1
03776  1DFE  85 81                 STA MATH.MULTIPLY32.FACTOR1$+1
03777  1E00  A5 86                 LDA MATH.DIVIDE32.QUOTIENT$+2
03778  1E02  85 82                 STA MATH.MULTIPLY32.FACTOR1$+2
03779  1E04  A5 87                 LDA MATH.DIVIDE32.QUOTIENT$+3
03780  1E06  85 83                 STA MATH.MULTIPLY32.FACTOR1$+3
03781  1E08             
03782  1E08  A9 E8                 LDA #$E8
03783  1E0A  85 84                 STA MATH.MULTIPLY32.FACTOR2$
03784  1E0C  A9 03                 LDA #$03
03785  1E0E  85 85                 STA MATH.MULTIPLY32.FACTOR2$+1
03786  1E10  A9 00                 LDA #$00
03787  1E12  85 86                 STA MATH.MULTIPLY32.FACTOR2$+2
03788  1E14  A9 00                 LDA #$00
03789  1E16  85 87                 STA MATH.MULTIPLY32.FACTOR2$+3
03790  1E18             
03791  1E18  20 8D 29              JSR MATH.MULTIPLY32$ ; TICKS = QUOTIENT * 1000
03792  1E1B             
03793  1E1B  A5 88                 LDA MATH.MULTIPLY32.PRODUCT$
03794  1E1D  85 73                 STA TIME.GETTICKS.RESULT$
03795  1E1F  A5 89                 LDA MATH.MULTIPLY32.PRODUCT$+1
03796  1E21  85 74                 STA TIME.GETTICKS.RESULT$+1
03797  1E23  A5 8A                 LDA MATH.MULTIPLY32.PRODUCT$+2
03798  1E25  85 75                 STA TIME.GETTICKS.RESULT$+2
03799  1E27  A5 8B                 LDA MATH.MULTIPLY32.PRODUCT$+3
03800  1E29  85 76                 STA TIME.GETTICKS.RESULT$+3
03801  1E2B             
03802  1E2B                        ; AT THIS POINT WE HAVE THE TICKS TO THE SECOND (ROUNDED DOWN).
03803  1E2B                        ; WE NEED TO ADD THE DECIMAL (REMAINDER) TO GET THE MILLISECONDS.
03804  1E2B             
03805  1E2B  A5 8C                 LDA MATH.DIVIDE32.REMAINDER$
03806  1E2D  85 80                 STA MATH.MULTIPLY32.FACTOR1$
03807  1E2F  A5 8D                 LDA MATH.DIVIDE32.REMAINDER$+1
03808  1E31  85 81                 STA MATH.MULTIPLY32.FACTOR1$+1
03809  1E33  A5 8E                 LDA MATH.DIVIDE32.REMAINDER$+2
03810  1E35  85 82                 STA MATH.MULTIPLY32.FACTOR1$+2
03811  1E37  A5 8F                 LDA MATH.DIVIDE32.REMAINDER$+3
03812  1E39  85 83                 STA MATH.MULTIPLY32.FACTOR1$+3
03813  1E3B             
03814  1E3B  A9 E8                 LDA #$E8
03815  1E3D  85 84                 STA MATH.MULTIPLY32.FACTOR2$
03816  1E3F  A9 03                 LDA #$03
03817  1E41  85 85                 STA MATH.MULTIPLY32.FACTOR2$+1
03818  1E43  A9 00                 LDA #$00
03819  1E45  85 86                 STA MATH.MULTIPLY32.FACTOR2$+2
03820  1E47  A9 00                 LDA #$00
03821  1E49  85 87                 STA MATH.MULTIPLY32.FACTOR2$+3
03822  1E4B             
03823  1E4B  20 8D 29              JSR MATH.MULTIPLY32$ ; Y = REMAINDER * 1000
03824  1E4E             
03825  1E4E  A5 88                 LDA MATH.MULTIPLY32.PRODUCT$
03826  1E50  85 84                 STA MATH.DIVIDE32.DIVIDEND$
03827  1E52  A5 89                 LDA MATH.MULTIPLY32.PRODUCT$+1
03828  1E54  85 85                 STA MATH.DIVIDE32.DIVIDEND$+1
03829  1E56  A5 8A                 LDA MATH.MULTIPLY32.PRODUCT$+2
03830  1E58  85 86                 STA MATH.DIVIDE32.DIVIDEND$+2
03831  1E5A  A5 8B                 LDA MATH.MULTIPLY32.PRODUCT$+3
03832  1E5C  85 87                 STA MATH.DIVIDE32.DIVIDEND$+3
03833  1E5E             
03834  1E5E  A9 3C                 LDA #$3C
03835  1E60  85 80                 STA MATH.DIVIDE32.DIVISOR$
03836  1E62  A9 00                 LDA #$00
03837  1E64  85 81                 STA MATH.DIVIDE32.DIVISOR$+1
03838  1E66  A9 00                 LDA #$00
03839  1E68  85 82                 STA MATH.DIVIDE32.DIVISOR$+2
03840  1E6A  A9 00                 LDA #$00
03841  1E6C  85 83                 STA MATH.DIVIDE32.DIVISOR$+3
03842  1E6E             
03843  1E6E  20 26 2A              JSR MATH.DIVIDE32$ ; X = (Y / 60)
03844  1E71             
03845  1E71                        ; ADD TO TICKS
03846  1E71  A5 84                 LDA MATH.DIVIDE32.QUOTIENT$
03847  1E73  85 80                 STA MATH.ADD32.ADDEND1$
03848  1E75  A5 85                 LDA MATH.DIVIDE32.QUOTIENT$+1
03849  1E77  85 81                 STA MATH.ADD32.ADDEND1$+1
03850  1E79  A5 86                 LDA MATH.DIVIDE32.QUOTIENT$+2
03851  1E7B  85 82                 STA MATH.ADD32.ADDEND1$+2
03852  1E7D  A5 87                 LDA MATH.DIVIDE32.QUOTIENT$+3
03853  1E7F  85 83                 STA MATH.ADD32.ADDEND1$+3
03854  1E81             
03855  1E81  A5 73                 LDA TIME.GETTICKS.RESULT$
03856  1E83  85 84                 STA MATH.ADD32.ADDEND2$
03857  1E85  A5 74                 LDA TIME.GETTICKS.RESULT$+1
03858  1E87  85 85                 STA MATH.ADD32.ADDEND2$+1
03859  1E89  A5 75                 LDA TIME.GETTICKS.RESULT$+2
03860  1E8B  85 86                 STA MATH.ADD32.ADDEND2$+2
03861  1E8D  A5 76                 LDA TIME.GETTICKS.RESULT$+3
03862  1E8F  85 87                 STA MATH.ADD32.ADDEND2$+3
03863  1E91             
03864  1E91  20 22 28              JSR MATH.ADD32$ ; TICKS = TICKS + X
03865  1E94             
03866  1E94  A5 88                 LDA MATH.ADD32.SUM$
03867  1E96  85 73                 STA TIME.GETTICKS.RESULT$
03868  1E98  A5 89                 LDA MATH.ADD32.SUM$+1
03869  1E9A  85 74                 STA TIME.GETTICKS.RESULT$+1
03870  1E9C  A5 8A                 LDA MATH.ADD32.SUM$+2
03871  1E9E  85 75                 STA TIME.GETTICKS.RESULT$+2
03872  1EA0  A5 8B                 LDA MATH.ADD32.SUM$+3
03873  1EA2  85 76                 STA TIME.GETTICKS.RESULT$+3
03874  1EA4             
03875  1EA4  60                    RTS
03876  1EA5             
03877  1EA5             
03878  1EA5             TIME.HALT$ 
03879  1EA5                        ; DELAY ADDED TO SLOW DOWN THE QUICK BACKSPACE CHARACTERS.
03880  1EA5                        ; 100 = $64
03881  1EA5                        ; 50 = $32
03882  1EA5  A9 32                 LDA #$32
03883  1EA7  85 77                 STA TIME.WAIT.MILLISECONDS$
03884  1EA9  A9 00                 LDA #$00
03885  1EAB  85 78                 STA TIME.WAIT.MILLISECONDS$+1
03886  1EAD  A9 00                 LDA #$00
03887  1EAF  85 79                 STA TIME.WAIT.MILLISECONDS$+2
03888  1EB1  A9 00                 LDA #$00
03889  1EB3  85 7A                 STA TIME.WAIT.MILLISECONDS$+3
03890  1EB5  20 B9 1E              JSR TIME.WAIT$
03891  1EB8             
03892  1EB8  60                    RTS
03893  1EB9             
03894  1EB9             
03895  1EB9             TIME.WAIT.MILLISECONDS$ = $77 ; 4 BYTES
03896  1EB9             
03897  1EB9             TIME.WAIT$ 
03898  1EB9  20 D5 1D              JSR TIME.GETTICKS$
03899  1EBC             
03900  1EBC  A5 77                 LDA TIME.WAIT.MILLISECONDS$
03901  1EBE  85 80                 STA MATH.ADD32.ADDEND1$
03902  1EC0  A5 78                 LDA TIME.WAIT.MILLISECONDS$+1
03903  1EC2  85 81                 STA MATH.ADD32.ADDEND1$+1
03904  1EC4  A5 79                 LDA TIME.WAIT.MILLISECONDS$+2
03905  1EC6  85 82                 STA MATH.ADD32.ADDEND1$+2
03906  1EC8  A5 7A                 LDA TIME.WAIT.MILLISECONDS$+3
03907  1ECA  85 83                 STA MATH.ADD32.ADDEND1$+3
03908  1ECC             
03909  1ECC  A5 73                 LDA TIME.GETTICKS.RESULT$
03910  1ECE  85 84                 STA MATH.ADD32.ADDEND2$
03911  1ED0  A5 74                 LDA TIME.GETTICKS.RESULT$+1
03912  1ED2  85 85                 STA MATH.ADD32.ADDEND2$+1
03913  1ED4  A5 75                 LDA TIME.GETTICKS.RESULT$+2
03914  1ED6  85 86                 STA MATH.ADD32.ADDEND2$+2
03915  1ED8  A5 76                 LDA TIME.GETTICKS.RESULT$+3
03916  1EDA  85 87                 STA MATH.ADD32.ADDEND2$+3
03917  1EDC             
03918  1EDC  20 22 28              JSR MATH.ADD32$
03919  1EDF                        
03920  1EDF                        ; STORE THE FIND
03921  1EDF  A5 88                 LDA MATH.ADD32.SUM$
03922  1EE1  85 77                 STA TIME.WAIT.MILLISECONDS$
03923  1EE3  A5 89                 LDA MATH.ADD32.SUM$+1
03924  1EE5  85 78                 STA TIME.WAIT.MILLISECONDS$+1
03925  1EE7  A5 8A                 LDA MATH.ADD32.SUM$+2
03926  1EE9  85 79                 STA TIME.WAIT.MILLISECONDS$+2
03927  1EEB  A5 8B                 LDA MATH.ADD32.SUM$+3
03928  1EED  85 7A                 STA TIME.WAIT.MILLISECONDS$+3
03929  1EEF                        
03930  1EEF             @LOOP
03931  1EEF  20 D5 1D              JSR TIME.GETTICKS$
03932  1EF2             
03933  1EF2  A5 73                 LDA TIME.GETTICKS.RESULT$
03934  1EF4  85 80                 STA MATH.CMP32.NUM1$
03935  1EF6  A5 74                 LDA TIME.GETTICKS.RESULT$+1
03936  1EF8  85 81                 STA MATH.CMP32.NUM1$+1
03937  1EFA  A5 75                 LDA TIME.GETTICKS.RESULT$+2
03938  1EFC  85 82                 STA MATH.CMP32.NUM1$+2
03939  1EFE  A5 76                 LDA TIME.GETTICKS.RESULT$+3
03940  1F00  85 83                 STA MATH.CMP32.NUM1$+3
03941  1F02             
03942  1F02  A5 77                 LDA TIME.WAIT.MILLISECONDS$
03943  1F04  85 84                 STA MATH.CMP32.NUM2$
03944  1F06  A5 78                 LDA TIME.WAIT.MILLISECONDS$+1
03945  1F08  85 85                 STA MATH.CMP32.NUM2$+1
03946  1F0A  A5 79                 LDA TIME.WAIT.MILLISECONDS$+2
03947  1F0C  85 86                 STA MATH.CMP32.NUM2$+2
03948  1F0E  A5 7A                 LDA TIME.WAIT.MILLISECONDS$+3
03949  1F10  85 87                 STA MATH.CMP32.NUM2$+3
03950  1F12             
03951  1F12  20 00 29              JSR MATH.CMP32$ ; IF TICKS > (MILLISECONDS + TICKS) THEN CARRY FLAG SHOULD BE SET.
03952  1F15             
03953  1F15             ;        LDA TIME.GETTICKS.RESULT$
03954  1F15             ;        STA CONSOLE.WRITEINT32.INTEGER$
03955  1F15             ;        LDA TIME.GETTICKS.RESULT$+1
03956  1F15             ;        STA CONSOLE.WRITEINT32.INTEGER$+1
03957  1F15             ;        LDA TIME.GETTICKS.RESULT$+2
03958  1F15             ;        STA CONSOLE.WRITEINT32.INTEGER$+2
03959  1F15             ;        LDA TIME.GETTICKS.RESULT$+3
03960  1F15             ;        STA CONSOLE.WRITEINT32.INTEGER$+3
03961  1F15             ;        JSR CONSOLE.WRITEINT32$
03962  1F15             
03963  1F15                        ;BCC @LOOP ; GOTO @LOOP IF TICKS < (MILLISECONDS + TICKS).
03964  1F15  B0 03                 BCS @END
03965  1F17  4C EF 1E              JMP @LOOP
03966  1F1A             @END
03967  1F1A  60                    RTS
03968  1F1B             
03969  1F1B             
03970  1F1B             
03971  1F1B             
03972  1F1B             MEMORY.PUSHZP$ 
03973  1F1B             
03974  1F1B                        ; THE STACK IS POINTING TO THE RETURN ADDRESS.
03975  1F1B                        ; GET THE RETURN ADDRESS
03976  1F1B  68                    PLA
03977  1F1C  85 20                 STA $20
03978  1F1E  E6 20                 INC $20
03979  1F20  68                    PLA
03980  1F21  85 21                 STA $21
03981  1F23             
03982  1F23                        ; BACK UP VALUES $73-$8F
03983  1F23  A2 00                 LDX #0
03984  1F25             @BACKUP
03985  1F25  B5 73                 LDA $73,X
03986  1F27  48                    PHA
03987  1F28  E8                    INX
03988  1F29  E0 1D                 CPX #29
03989  1F2B  D0 F8                 BNE @BACKUP
03990  1F2D             
03991  1F2D                        ; IMPLICIT RETURN.
03992  1F2D  6C 20 00              JMP ($0020)
03993  1F30             
03994  1F30  60                    RTS
03995  1F31             
03996  1F31             MEMORY.PULLZP$ 
03997  1F31             
03998  1F31                        ; THE STACK IS POINTING TO THE RETURN ADDRESS.
03999  1F31                        ; GET THE RETURN ADDRESS
04000  1F31  68                    PLA
04001  1F32  85 20                 STA $20
04002  1F34  E6 20                 INC $20
04003  1F36  68                    PLA
04004  1F37  85 21                 STA $21
04005  1F39             
04006  1F39                        ; RESTORE VALUES $73-$79
04007  1F39  A2 1D                 LDX #29
04008  1F3B             @RESTORE
04009  1F3B  CA                    DEX
04010  1F3C  68                    PLA
04011  1F3D  95 73                 STA $73,X
04012  1F3F  E0 00                 CPX #0
04013  1F41  D0 F8                 BNE @RESTORE
04014  1F43             
04015  1F43                        ; IMPLICIT RETURN.
04016  1F43  6C 20 00              JMP ($0020)
04017  1F46             
04018  1F46             STRING.ISEQUAL.ADDRESS1$ = $7A ; 2 BYTES
04019  1F46             STRING.ISEQUAL.ADDRESS2$ = $7C ; 2 BYTES
04020  1F46             STRING.ISEQUAL.CHAR = $7D ; 1 BYTES
04021  1F46             STRING.ISEQUAL.VALUE$ = $7E ; 1 BYTE
04022  1F46             STRING.ISEQUAL$ 
04023  1F46                        ; COMPARES THE VALUES OF ADDRESS1 AND ADDRESS2 AND DETERMINES IF THEY ARE EQUAL
04024  1F46             
04025  1F46  A9 00                 LDA #$00
04026  1F48  85 7E                 STA STRING.ISEQUAL.VALUE$
04027  1F4A                        
04028  1F4A  A5 7A                 LDA STRING.ISEQUAL.ADDRESS1$
04029  1F4C  85 FB                 STA $FB
04030  1F4E  A5 7B                 LDA STRING.ISEQUAL.ADDRESS1$+1
04031  1F50  85 FC                 STA $FC
04032  1F52             
04033  1F52  A5 7C                 LDA STRING.ISEQUAL.ADDRESS2$
04034  1F54  85 FD                 STA $FD
04035  1F56  A5 7D                 LDA STRING.ISEQUAL.ADDRESS2$+1
04036  1F58  85 FE                 STA $FE
04037  1F5A             
04038  1F5A  A0 00                 LDY #$00
04039  1F5C             @LOOP
04040  1F5C  B1 FB                 LDA ($FB),Y
04041  1F5E  85 7D                 STA STRING.ISEQUAL.CHAR
04042  1F60  B1 FD                 LDA ($FD),Y
04043  1F62  C5 7D                 CMP STRING.ISEQUAL.CHAR
04044  1F64  F0 03                 BEQ @CONT
04045  1F66  4C 83 1F              JMP @DONE
04046  1F69             @CONT
04047  1F69             
04048  1F69  C9 FF                 CMP #CONSOLE.NULL$
04049  1F6B  D0 03                 BNE @SKIP0
04050  1F6D  4C 7F 1F              JMP @ISEQUAL
04051  1F70             @SKIP0
04052  1F70             
04053  1F70  E6 FB                 INC $FB
04054  1F72  D0 02                 BNE @SKIP1
04055  1F74  E6 FC                 INC $FC
04056  1F76             @SKIP1
04057  1F76             
04058  1F76  E6 FD                 INC $FD
04059  1F78  D0 02                 BNE @SKIP2
04060  1F7A  E6 FE                 INC $FE
04061  1F7C             @SKIP2
04062  1F7C  4C 5C 1F              JMP @LOOP
04063  1F7F             
04064  1F7F             @ISEQUAL
04065  1F7F  A9 01                 LDA #$01
04066  1F81  85 7E                 STA STRING.ISEQUAL.VALUE$
04067  1F83                        
04068  1F83             @DONE
04069  1F83  60                    RTS
04070  1F84             
04071  1F84             ;TIME.HALT2
04072  1F84             ;        JSR TIME.HALT$
04073  1F84             ;        JSR TIME.HALT$
04074  1F84             ;        RTS
04075  1F84             
04076  1F84             KERNEL.RESET$ 
04077  1F84  20 A9 1F              JSR DISK.RESET$
04078  1F87  6C FC FF              JMP ($FFFC)
04079  1F8A             
04080  1F8A             
04081  1F8A             DISK.CHECKERROR 
04082  1F8A             
04083  1F8A  AD 41 3B              LDA DISK.ERROR$
04084  1F8D  C9 01                 CMP #DISKERROR.FILE_SCRATCHED$
04085  1F8F  F0 03                 BEQ @FILESCRATCHED
04086  1F91  4C 96 1F              JMP @DONE
04087  1F94             @FILESCRATCHED 
04088  1F94                        ;LDA #DISKERROR.FILE_NOT_FOUND$
04089  1F94  A9 00                 LDA #DISKERROR.OK$
04090  1F96             
04091  1F96             @DONE
04092  1F96  8D 41 3B              STA DISK.ERROR$
04093  1F99  60                    RTS
04094  1F9A             
04095  1F9A             DISK.VALIDATE$ 
04096  1F9A                        ; SET THE PREFIX COMMAND "V"
04097  1F9A  A9 56                 LDA #"V"
04098  1F9C  8D 1E 3F              STA DISK.EXECMD.FILENAME
04099  1F9F             
04100  1F9F  A9 02                 LDA #02
04101  1FA1  8D 49 3F              STA DISK.EXECMD.LEN
04102  1FA4             
04103  1FA4  4C 4A 3F              JMP DISK.EXECMD
04104  1FA7             
04105  1FA7             ;DISK.RESET.STRING TEXT "U:"
04106  1FA7             ;;DISK.RESET.LEN BYTE #02
04107  1FA7             ;DISK.RESET$
04108  1FA7             ;        ; THERE IS NO FILE NAME
04109  1FA7             ;        LDA #$00
04110  1FA7             ;        LDX #$00
04111  1FA7             ;        LDY #$00
04112  1FA7             ;        JSR $FFBD     ; CALL SETNAM
04113  1FA7             
04114  1FA7             ;        LDA #$0F      ; FILE NUMBER 15
04115  1FA7             ;        LDX $BA       ; LAST USED DEVICE NUMBER
04116  1FA7             ;        BNE @SKIP
04117  1FA7             ;        LDX #$08      ; DEFAULT TO DEVICE 8
04118  1FA7             ;@SKIP   LDY #$0F      ; SECONDARY ADDRESS 15
04119  1FA7             ;        JSR $FFBA     ; CALL SETLFS
04120  1FA7             
04121  1FA7             ;        JSR $FFC0     ; CALL OPEN
04122  1FA7             ;        BCS @ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
04123  1FA7             
04124  1FA7             ;        ; CHECK DRIVE ERROR CHANNEL HERE TO TEST FOR
04125  1FA7             ;        ; FILE EXISTS ERROR ETC.
04126  1FA7             
04127  1FA7             ;        LDX #$0F      ; FILENUMBER 15
04128  1FA7             ;        JSR $FFC9     ; CALL CHKOUT (FILE 15 NOW USED AS OUTPUT)
04129  1FA7             
04130  1FA7             ;        ; SET THE MEMORY ADDRESS
04131  1FA7             ;        LDA #<DISK.RESET.STRING
04132  1FA7             ;        STA $AE
04133  1FA7             ;        LDA #>DISK.RESET.STRING
04134  1FA7             ;        STA $AF
04135  1FA7             
04136  1FA7             ;        LDY #$00
04137  1FA7             ;@LOOP
04138  1FA7             ;        ;LDX #$08
04139  1FA7             ;        JSR $FFB7     ; CALL READST (READ STATUS BYTE)
04140  1FA7             ;        ;BNE @WERROR   ; WRITE ERROR
04141  1FA7             ;        BNE @ERROR   ; WRITE ERROR
04142  1FA7             ;        LDA ($AE),Y   ; GET BYTE FROM MEMORY
04143  1FA7             ;        JSR $FFD2     ; CALL CHROUT (WRITE BYTE TO FILE)
04144  1FA7             ;        INY
04145  1FA7             ;        CPY #02
04146  1FA7             ;        BNE @LOOP
04147  1FA7             
04148  1FA7             ;        ;; WAIT TWO SECONDS
04149  1FA7             ;;        ; 2000 = $07D0
04150  1FA7             ;;        LDA #$D0
04151  1FA7             ;;        STA TIME.WAIT.MILLISECONDS$
04152  1FA7             ;;        LDA #$07
04153  1FA7             ;;        STA TIME.WAIT.MILLISECONDS$+1
04154  1FA7             ;;        LDA #$00
04155  1FA7             ;;        STA TIME.WAIT.MILLISECONDS$+2
04156  1FA7             ;;        STA TIME.WAIT.MILLISECONDS$+3
04157  1FA7             ;;        JSR TIME.WAIT$
04158  1FA7             
04159  1FA7             ;@CLOSE
04160  1FA7             ;        ;LDA #$0F      ; FILENUMBER 15
04161  1FA7             ;        ;JSR $FFC3     ; CALL CLOSE
04162  1FA7             
04163  1FA7             ;        JSR $FFCC     ; CALL CLRCHN
04164  1FA7             ;        RTS
04165  1FA7             ;@ERROR
04166  1FA7             ;        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
04167  1FA7             
04168  1FA7             ;        ; MOST LIKELY ERRORS:
04169  1FA7             ;        ; A = $05 (DEVICE NOT PRESENT)
04170  1FA7             
04171  1FA7             ;        ;... ERROR HANDLING FOR OPEN ERRORS ...
04172  1FA7             ;        JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
04173  1FA7             ;;@WERROR
04174  1FA7             ;;        ; FOR FURTHER INFORMATION, THE DRIVE ERROR CHANNEL HAS TO BE READ
04175  1FA7             
04176  1FA7             ;;        ;... ERROR HANDLING FOR WRITE ERRORS ...
04177  1FA7             ;;        JMP @CLOSE
04178  1FA7             
04179  1FA7  55 3A      DISK.RESET.STRING TEXT "U:"
04180  1FA9             DISK.RESET$ 
04181  1FA9                        ; THERE IS NO FILE NAME
04182  1FA9  A9 02                 LDA #$02
04183  1FAB  A2 A7                 LDX #<DISK.RESET.STRING
04184  1FAD  A0 1F                 LDY #>DISK.RESET.STRING
04185  1FAF  20 BD FF              JSR $FFBD     ; CALL SETNAM
04186  1FB2             
04187  1FB2  A9 0F                 LDA #$0F      ; FILE NUMBER 15
04188  1FB4  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
04189  1FB6  D0 02                 BNE @SKIP
04190  1FB8  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
04191  1FBA  A0 0F      @SKIP      LDY #$0F      ; SECONDARY ADDRESS 15
04192  1FBC  20 BA FF              JSR $FFBA     ; CALL SETLFS
04193  1FBF             
04194  1FBF  20 C0 FF              JSR $FFC0     ; CALL OPEN
04195  1FC2  B0 00                 BCS @ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
04196  1FC4             @ERROR
04197  1FC4             @CLOSE
04198  1FC4                        ;LDA #$0F      ; FILENUMBER 15
04199  1FC4                        ;JSR $FFC3     ; CALL CLOSE
04200  1FC4             
04201  1FC4  20 CC FF              JSR $FFCC     ; CALL CLRCHN
04202  1FC7  60                    RTS
04203  1FC8             
04204  1FC8             SERIAL.OPEN$ 
04205  1FC8             
04206  1FC8  20 47 41              JSR SERIAL.SET_BAUD
04207  1FCB             
04208  1FCB  A5 BA                 LDA $BA
04209  1FCD  8D 34 41              STA SERIAL.PREV_DEVICE
04210  1FD0             
04211  1FD0                        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
04212  1FD0  A9 05                 LDA #$05      ; FILENUMBER 5
04213  1FD2                        ;NOP
04214  1FD2                        ;NOP
04215  1FD2  20 C3 FF              JSR $FFC3     ; CALL CLOSE
04216  1FD5                        ;NOP
04217  1FD5                        ;NOP
04218  1FD5                        ;NOP
04219  1FD5             
04220  1FD5                        ;LDA #2
04221  1FD5  A9 01                 LDA #1
04222  1FD7  A2 38                 LDX #<SERIAL.BAUD$
04223  1FD9  A0 41                 LDY #>SERIAL.BAUD$
04224  1FDB  20 BD FF              JSR $FFBD     ; CALL SETNAM
04225  1FDE             
04226  1FDE  A9 05                 LDA #$05      ; FILE NUMBER 5
04227  1FE0  A2 02                 LDX #$02      ; DEFAULT TO DEVICE 2
04228  1FE2  A0 00                 LDY #$00      ; SECONDARY ADDRESS 0
04229  1FE4  20 BA FF              JSR $FFBA     ; CALL SETLFS
04230  1FE7             
04231  1FE7  20 C0 FF              JSR $FFC0     ; CALL OPEN
04232  1FEA             
04233  1FEA                        ; SET THE RS232 INPUT TIMER
04234  1FEA                        ;POKE665,73-(PEEK(678)*30)
04235  1FEA  AD A6 02              LDA 678 ; 0=NTSC, 1=PAL
04236  1FED  F0 05                 BEQ @POKE_665_73
04237  1FEF  A9 2B                 LDA #43
04238  1FF1  4C F6 1F              JMP @STA_665
04239  1FF4             @POKE_665_73 
04240  1FF4  A9 49                 LDA #73
04241  1FF6             @STA_665
04242  1FF6  8D 99 02              STA 665
04243  1FF9             
04244  1FF9  60                    RTS
04245  1FFA             
04246  1FFA             
04247  1FFA             
04248  1FFA             ; SKIP $2000-$2800 FOR CUSTOM CHARACTER SET
04249  1FFA             
04250  1FFA             *=$2800
04251  2800             
04252  2800             
04253  2800             
04254  2800             ALIGN      $100
04255  2800             
04256  2800             MATH.ADD16.ADDEND1$ = $80 ; 2 BYTES
04257  2800             MATH.ADD16.ADDEND2$ = $82 ; 2 BYTES
04258  2800             MATH.ADD16.SUM$ = $84 ; 2 BYTES
04259  2800             
04260  2800             MATH.ADD16$ 
04261  2800                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:16BIT_ADDITION_AND_SUBTRACTION
04262  2800  18                    CLC                             ; CLEAR CARRY
04263  2801  A5 80                 LDA MATH.ADD16.ADDEND1$
04264  2803  65 82                 ADC MATH.ADD16.ADDEND2$
04265  2805  85 84                 STA MATH.ADD16.SUM$                       ; STORE SUM OF LSBS
04266  2807  A5 81                 LDA MATH.ADD16.ADDEND1$+1
04267  2809  65 83                 ADC MATH.ADD16.ADDEND2$+1                      ; ADD THE MSBS USING CARRY FROM
04268  280B  85 85                 STA MATH.ADD16.SUM$+1                       ; THE PREVIOUS CALCULATION
04269  280D  60                    RTS
04270  280E             
04271  280E             MATH.ADD24.ADDEND1$ = $80 ; 3 BYTES
04272  280E             MATH.ADD24.ADDEND2$ = $83 ; 3 BYTES
04273  280E             MATH.ADD24.SUM$ = $86 ; 3 BYTES
04274  280E             
04275  280E             MATH.ADD24$ 
04276  280E  18                    CLC                             ; CLEAR CARRY
04277  280F  A5 80                 LDA MATH.ADD24.ADDEND1$
04278  2811  65 83                 ADC MATH.ADD24.ADDEND2$
04279  2813  85 86                 STA MATH.ADD24.SUM$
04280  2815  A5 81                 LDA MATH.ADD24.ADDEND1$+1
04281  2817  65 84                 ADC MATH.ADD24.ADDEND2$+1
04282  2819  85 87                 STA MATH.ADD24.SUM$+1
04283  281B  A5 82                 LDA MATH.ADD24.ADDEND1$+2
04284  281D  65 85                 ADC MATH.ADD24.ADDEND2$+2
04285  281F  85 88                 STA MATH.ADD24.SUM$+2
04286  2821  60                    RTS
04287  2822             
04288  2822             MATH.ADD32.ADDEND1$ = $80 ; 4 BYTES
04289  2822             MATH.ADD32.ADDEND2$ = $84 ; 4 BYTES
04290  2822             MATH.ADD32.SUM$ = $88 ; 4 BYTES
04291  2822             
04292  2822             MATH.ADD32$ 
04293  2822  18                    CLC                             ; CLEAR CARRY
04294  2823  A5 80                 LDA MATH.ADD32.ADDEND1$
04295  2825  65 84                 ADC MATH.ADD32.ADDEND2$
04296  2827  85 88                 STA MATH.ADD32.SUM$
04297  2829  A5 81                 LDA MATH.ADD32.ADDEND1$+1
04298  282B  65 85                 ADC MATH.ADD32.ADDEND2$+1
04299  282D  85 89                 STA MATH.ADD32.SUM$+1
04300  282F  A5 82                 LDA MATH.ADD32.ADDEND1$+2
04301  2831  65 86                 ADC MATH.ADD32.ADDEND2$+2
04302  2833  85 8A                 STA MATH.ADD32.SUM$+2
04303  2835  A5 83                 LDA MATH.ADD32.ADDEND1$+3
04304  2837  65 87                 ADC MATH.ADD32.ADDEND2$+3
04305  2839  85 8B                 STA MATH.ADD32.SUM$+3
04306  283B  60                    RTS
04307  283C             
04308  283C             MATH.INC16.ADDRESS$ = $86 ; 2 BYTES
04309  283C             
04310  283C             MATH.INC16$ 
04311  283C             
04312  283C                        ; STORE Y
04313  283C  98                    TYA
04314  283D  48                    PHA
04315  283E             
04316  283E  A0 00                 LDY #$00
04317  2840  B1 86                 LDA (MATH.INC16.ADDRESS$),Y
04318  2842  85 80                 STA MATH.ADD16.ADDEND1$
04319  2844  C8                    INY
04320  2845  B1 86                 LDA (MATH.INC16.ADDRESS$),Y
04321  2847  85 81                 STA MATH.ADD16.ADDEND1$+1
04322  2849             
04323  2849  A9 01                 LDA #$01
04324  284B  85 82                 STA MATH.ADD16.ADDEND2$
04325  284D  A9 00                 LDA #$00
04326  284F  85 83                 STA MATH.ADD16.ADDEND2$+1
04327  2851                        
04328  2851  20 00 28              JSR MATH.ADD16$ ; (*ADDRESS) = (*ADDRESS) + 1
04329  2854             
04330  2854  A5 84                 LDA MATH.ADD16.SUM$
04331  2856  A0 00                 LDY #$00
04332  2858  91 86                 STA (MATH.INC16.ADDRESS$),Y
04333  285A  A5 85                 LDA MATH.ADD16.SUM$+1
04334  285C  C8                    INY
04335  285D  91 86                 STA (MATH.INC16.ADDRESS$),Y
04336  285F             
04337  285F                        ; RESTORE Y
04338  285F  68                    PLA
04339  2860  A8                    TAY
04340  2861             
04341  2861  60                    RTS
04342  2862             
04343  2862             MATH.INC24.ADDRESS$ = $86 ; 2 BYTES
04344  2862             MATH.INC24$ 
04345  2862             
04346  2862                        ; STORE Y
04347  2862  98                    TYA
04348  2863  48                    PHA
04349  2864             
04350  2864  A0 00                 LDY #$00
04351  2866  B1 86                 LDA (MATH.INC24.ADDRESS$),Y
04352  2868  85 80                 STA MATH.ADD24.ADDEND1$
04353  286A  C8                    INY
04354  286B  B1 86                 LDA (MATH.INC24.ADDRESS$),Y
04355  286D  85 81                 STA MATH.ADD24.ADDEND1$+1
04356  286F  C8                    INY
04357  2870  B1 86                 LDA (MATH.INC24.ADDRESS$),Y
04358  2872  85 82                 STA MATH.ADD24.ADDEND1$+2
04359  2874             
04360  2874  A9 01                 LDA #$01
04361  2876  85 83                 STA MATH.ADD24.ADDEND2$
04362  2878  A9 00                 LDA #$00
04363  287A  85 84                 STA MATH.ADD24.ADDEND2$+1
04364  287C  A9 00                 LDA #$00
04365  287E  85 85                 STA MATH.ADD24.ADDEND2$+2
04366  2880                        
04367  2880  20 0E 28              JSR MATH.ADD24$ ; (*ADDRESS) = (*ADDRESS) + 1
04368  2883             
04369  2883  A5 86                 LDA MATH.ADD24.SUM$
04370  2885  A0 00                 LDY #$00
04371  2887  91 86                 STA (MATH.INC24.ADDRESS$),Y
04372  2889  A5 87                 LDA MATH.ADD24.SUM$+1
04373  288B  C8                    INY
04374  288C  91 86                 STA (MATH.INC24.ADDRESS$),Y
04375  288E  A5 88                 LDA MATH.ADD24.SUM$+2
04376  2890  C8                    INY
04377  2891  91 86                 STA (MATH.INC24.ADDRESS$),Y
04378  2893             
04379  2893                        ; RESTORE Y
04380  2893  68                    PLA
04381  2894  A8                    TAY
04382  2895             
04383  2895  60                    RTS
04384  2896             
04385  2896             MATH.SUBTRACT16.MENUEND$ = $80 ; 2 BYTES
04386  2896             MATH.SUBTRACT16.SUBTRAHEND$ = $82 ; 2 BYTES
04387  2896             MATH.SUBTRACT16.DIFFERENCE$ = $84 ; 2 BYTES
04388  2896             
04389  2896             MATH.SUBTRACT16$ 
04390  2896                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:16BIT_ADDITION_AND_SUBTRACTION
04391  2896  38                    SEC                             ; SET CARRY FOR BORROW PURPOSE
04392  2897  A5 80                 LDA MATH.SUBTRACT16.MENUEND$
04393  2899  E5 82                 SBC MATH.SUBTRACT16.SUBTRAHEND$                      ; PERFORM SUBTRACTION ON THE LSBS
04394  289B  85 84                 STA MATH.SUBTRACT16.DIFFERENCE$
04395  289D  A5 81                 LDA MATH.SUBTRACT16.MENUEND$+1                     ; DO THE SAME FOR THE MSBS, WITH CARRY
04396  289F  E5 83                 SBC MATH.SUBTRACT16.SUBTRAHEND$+1                      ; SET ACCORDING TO THE PREVIOUS RESULT
04397  28A1  85 85                 STA MATH.SUBTRACT16.DIFFERENCE$+1
04398  28A3  60                    RTS
04399  28A4             
04400  28A4             MATH.SUBTRACT32.MENUEND$ = $80 ; 4 BYTES
04401  28A4             MATH.SUBTRACT32.SUBTRAHEND$ = $84 ; 4 BYTES
04402  28A4             MATH.SUBTRACT32.DIFFERENCE$ = $88 ; 4 BYTES
04403  28A4             
04404  28A4             MATH.SUBTRACT32$ 
04405  28A4  38                    SEC                             ; SET CARRY FOR BORROW PURPOSE
04406  28A5  A5 80                 LDA MATH.SUBTRACT32.MENUEND$
04407  28A7  E5 84                 SBC MATH.SUBTRACT32.SUBTRAHEND$                      ; PERFORM SUBTRACTION ON THE LSBS
04408  28A9  85 88                 STA MATH.SUBTRACT32.DIFFERENCE$
04409  28AB  A5 81                 LDA MATH.SUBTRACT32.MENUEND$+1                      ; DO THE SAME FOR THE MSBS, WITH CARRY
04410  28AD  E5 85                 SBC MATH.SUBTRACT32.SUBTRAHEND$+1                      ; SET ACCORDING TO THE PREVIOUS RESULT
04411  28AF  85 89                 STA MATH.SUBTRACT32.DIFFERENCE$+1
04412  28B1  A5 82                 LDA MATH.SUBTRACT32.MENUEND$+2
04413  28B3  E5 86                 SBC MATH.SUBTRACT32.SUBTRAHEND$+2                      ; PERFORM SUBTRACTION ON THE LSBS
04414  28B5  85 8A                 STA MATH.SUBTRACT32.DIFFERENCE$+2
04415  28B7  A5 83                 LDA MATH.SUBTRACT32.MENUEND$+3                      ; DO THE SAME FOR THE MSBS, WITH CARRY
04416  28B9  E5 87                 SBC MATH.SUBTRACT32.SUBTRAHEND$+3                      ; SET ACCORDING TO THE PREVIOUS RESULT
04417  28BB  85 8B                 STA MATH.SUBTRACT32.DIFFERENCE$+3
04418  28BD  60                    RTS
04419  28BE             
04420  28BE             
04421  28BE             MATH.DEC16.ADDRESS$ = $86 ; 2 BYTES
04422  28BE             
04423  28BE             MATH.DEC16$ 
04424  28BE             
04425  28BE                        ; STORE Y
04426  28BE  98                    TYA
04427  28BF  48                    PHA
04428  28C0             
04429  28C0  A0 00                 LDY #$00
04430  28C2  B1 86                 LDA (MATH.DEC16.ADDRESS$),Y
04431  28C4  85 80                 STA MATH.SUBTRACT16.MENUEND$
04432  28C6  C8                    INY
04433  28C7  B1 86                 LDA (MATH.DEC16.ADDRESS$),Y
04434  28C9  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
04435  28CB             
04436  28CB  A9 01                 LDA #$01
04437  28CD  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
04438  28CF  A9 00                 LDA #$00
04439  28D1  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
04440  28D3                        
04441  28D3  20 96 28              JSR MATH.SUBTRACT16$ ; (*ADDRESS) = (*ADDRESS) - 1
04442  28D6             
04443  28D6  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
04444  28D8  A0 00                 LDY #$00
04445  28DA  91 86                 STA (MATH.DEC16.ADDRESS$),Y
04446  28DC  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
04447  28DE  C8                    INY
04448  28DF  91 86                 STA (MATH.DEC16.ADDRESS$),Y
04449  28E1             
04450  28E1                        ; RESTORE Y
04451  28E1  68                    PLA
04452  28E2  A8                    TAY
04453  28E3             
04454  28E3  60                    RTS
04455  28E4             
04456  28E4             
04457  28E4             MATH.CMP16.NUM1$ = $80 ; 2 BYTES
04458  28E4             MATH.CMP16.NUM2$ = $82 ; 2 BYTES
04459  28E4             
04460  28E4             MATH.CMP16$ 
04461  28E4  A5 81                 LDA MATH.CMP16.NUM1$+1
04462  28E6  C5 83                 CMP MATH.CMP16.NUM2$+1
04463  28E8  D0 04                 BNE @DONE
04464  28EA  A5 80                 LDA MATH.CMP16.NUM1$
04465  28EC  C5 82                 CMP MATH.CMP16.NUM2$
04466  28EE             @DONE
04467  28EE  60                    RTS
04468  28EF             
04469  28EF             ALIGN      $100
04470  2900             
04471  2900             MATH.CMP32.NUM1$ = $80 ; 4 BYTES
04472  2900             MATH.CMP32.NUM2$ = $84 ; 4 BYTES
04473  2900             
04474  2900             MATH.CMP32$ 
04475  2900  A5 83                 LDA MATH.CMP32.NUM1$+3
04476  2902  C5 87                 CMP MATH.CMP32.NUM2$+3
04477  2904  D0 10                 BNE @DONE
04478  2906  A5 82                 LDA MATH.CMP32.NUM1$+2
04479  2908  C5 86                 CMP MATH.CMP32.NUM2$+2
04480  290A  D0 0A                 BNE @DONE
04481  290C  A5 81                 LDA MATH.CMP32.NUM1$+1
04482  290E  C5 85                 CMP MATH.CMP32.NUM2$+1
04483  2910  D0 04                 BNE @DONE
04484  2912  A5 80                 LDA MATH.CMP32.NUM1$
04485  2914  C5 84                 CMP MATH.CMP32.NUM2$
04486  2916             @DONE
04487  2916  60                    RTS
04488  2917             
04489  2917             MATH.RANDOM8.SEED$ = $80 ; 1 BYTE
04490  2917             MATH.RANDOM8.RESULT$ = $80 ; 1 BYTE
04491  2917             
04492  2917             MATH.RANDOM8$ 
04493  2917                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:SMALL_FAST_8-BIT_PRNG
04494  2917  A5 80                 LDA MATH.RANDOM8.SEED$
04495  2919  F0 06                 BEQ @DOEOR
04496  291B  18                    CLC
04497  291C  0A                    ASL
04498  291D  F0 04                 BEQ @NOEOR ;IF THE INPUT WAS $80, SKIP THE EOR
04499  291F  90 02                 BCC @NOEOR
04500  2921             @DOEOR
04501  2921  49 12                 EOR #$12 ; MAGIC NUMBER
04502  2923             @NOEOR
04503  2923  85 80                 STA MATH.RANDOM8.RESULT$
04504  2925  60                    RTS
04505  2926             
04506  2926             MATH.RANDOM16.SEED$ = $80 ; 2 BYTES
04507  2926             MATH.RANDOM16.RESULT$ = $80 ; 2 BYTES
04508  2926             
04509  2926             MATH.RANDOM16$ 
04510  2926  A5 80                 LDA MATH.RANDOM16.SEED$
04511  2928  F0 12                 BEQ @LOWZERO ; $0000 AND $8000 ARE SPECIAL VALUES TO TEST FOR
04512  292A             
04513  292A                        ; DO A NORMAL SHIFT
04514  292A  06 80                 ASL MATH.RANDOM16.SEED$
04515  292C  A5 81                 LDA MATH.RANDOM16.SEED$+1
04516  292E  2A                    ROL
04517  292F  90 14                 BCC @NOEOR
04518  2931             
04519  2931             @DOEOR
04520  2931                        ; HIGH BYTE IS IN .A
04521  2931  49 22                 EOR #34 ; MAGIC NUMBER (HI)
04522  2933  85 81                 STA MATH.RANDOM16.SEED$+1
04523  2935  A5 80                 LDA MATH.RANDOM16.SEED$
04524  2937  49 0C                 EOR #12 ; MAGIC NUMBER (LO)
04525  2939  85 80                 STA MATH.RANDOM16.SEED$
04526  293B  60                    RTS
04527  293C             
04528  293C             @LOWZERO
04529  293C  A5 81                 LDA MATH.RANDOM16.SEED$+1
04530  293E  F0 F1                 BEQ @DOEOR ; HIGH BYTE IS ALSO ZERO, SO APPLY THE EOR
04531  2940                        ; FOR SPEED, YOU COULD STORE 'MAGIC' INTO 'SEED' DIRECTLY
04532  2940                        ; INSTEAD OF RUNNING THE EORS
04533  2940             
04534  2940                        ; WASN'T ZERO, CHECK FOR $8000
04535  2940  0A                    ASL
04536  2941  F0 02                 BEQ @NOEOR ; IF $00 IS LEFT AFTER THE SHIFT, THEN IT WAS $80
04537  2943  B0 EC                 BCS @DOEOR ; ELSE, DO THE EOR BASED ON THE CARRY BIT AS USUAL
04538  2945             
04539  2945             @NOEOR
04540  2945  85 81                 STA MATH.RANDOM16.SEED$+1
04541  2947  60                    RTS
04542  2948             
04543  2948             
04544  2948             ;ALIGN $100
04545  2948             
04546  2948             MATH.MULTIPLY8.FACTOR1$ = $80 ; 1 BYTE
04547  2948             MATH.MULTIPLY8.FACTOR2$ = $82 ; 1 BYTE
04548  2948             MATH.MULTIPLY8.PRODUCT$ = $83 ; 1 BYTE
04549  2948             
04550  2948             MATH.MULTIPLY8$ 
04551  2948                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:8BIT_MULTIPLICATION_16BIT_PRODUCT
04552  2948  A9 00                 LDA #$00
04553  294A  A8                    TAY
04554  294B  84 81                 STY MATH.MULTIPLY8.FACTOR1$+1  ; REMOVE THIS LINE FOR 16*8=16BIT MULTIPLY
04555  294D  F0 0D                 BEQ @ENTERLOOP
04556  294F             
04557  294F             @DOADD
04558  294F  18                    CLC
04559  2950  65 80                 ADC MATH.MULTIPLY8.FACTOR1$
04560  2952  AA                    TAX
04561  2953             
04562  2953  98                    TYA
04563  2954  65 81                 ADC MATH.MULTIPLY8.FACTOR1$+1
04564  2956  A8                    TAY
04565  2957  8A                    TXA
04566  2958             
04567  2958             @LOOP
04568  2958  06 80                 ASL MATH.MULTIPLY8.FACTOR1$
04569  295A  26 81                 ROL MATH.MULTIPLY8.FACTOR1$+1
04570  295C             @ENTERLOOP ; ACCUMULATING MULTIPLY ENTRY POINT (ENTER WITH .A=LO, .Y=HI)
04571  295C  46 82                 LSR MATH.MULTIPLY8.FACTOR2$
04572  295E  B0 EF                 BCS @DOADD
04573  2960  D0 F6                 BNE @LOOP
04574  2962             
04575  2962  85 83                 STA MATH.MULTIPLY8.PRODUCT$
04576  2964  84 84                 STY MATH.MULTIPLY8.PRODUCT$+1
04577  2966  60                    RTS
04578  2967             
04579  2967             MATH.MULTIPLY16.FACTOR1$ = $80 ; 2 BYTES
04580  2967             MATH.MULTIPLY16.FACTOR2$ = $82 ; 2 BYTES
04581  2967             MATH.MULTIPLY16.PRODUCT$ = $84 ; 2 BYTES
04582  2967             
04583  2967             MATH.MULTIPLY16$ 
04584  2967                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:16BIT_MULTIPLICATION_32-BIT_PRODUCT
04585  2967  A9 00                 LDA #$00
04586  2969  85 86                 STA MATH.MULTIPLY16.PRODUCT$+2       ; CLEAR UPPER BITS OF PRODUCT
04587  296B  85 87                 STA MATH.MULTIPLY16.PRODUCT$+3
04588  296D  A2 10                 LDX #$10            ; SET BINARY COUNT TO 16
04589  296F             @SHIFT_R
04590  296F  46 81                 LSR MATH.MULTIPLY16.FACTOR1$+1    ; DIVIDE MULTIPLIER BY 2
04591  2971  66 80                 ROR MATH.MULTIPLY16.FACTOR1$
04592  2973  90 0B                 BCC @ROTATE_R
04593  2975  A5 86                 LDA MATH.MULTIPLY16.PRODUCT$+2       ; GET UPPER HALF OF PRODUCT AND ADD MULTIPLICAND
04594  2977  18                    CLC
04595  2978  65 82                 ADC MATH.MULTIPLY16.FACTOR2$
04596  297A  85 86                 STA MATH.MULTIPLY16.PRODUCT$+2
04597  297C  A5 87                 LDA MATH.MULTIPLY16.PRODUCT$+3
04598  297E  65 83                 ADC MATH.MULTIPLY16.FACTOR2$+1
04599  2980             @ROTATE_R  
04600  2980  6A                    ROR                     ; ROTATE PARTIAL PRODUCT
04601  2981  85 87                 STA MATH.MULTIPLY16.PRODUCT$+3
04602  2983  66 86                 ROR MATH.MULTIPLY16.PRODUCT$+2
04603  2985  66 85                 ROR MATH.MULTIPLY16.PRODUCT$+1
04604  2987  66 84                 ROR MATH.MULTIPLY16.PRODUCT$
04605  2989  CA                    DEX
04606  298A  D0 E3                 BNE @SHIFT_R
04607  298C  60                    RTS
04608  298D             
04609  298D             MATH.MULTIPLY32.FACTOR1$ = $80 ; 4 BYTES
04610  298D             MATH.MULTIPLY32.FACTOR2$ = $84 ; 4 BYTES
04611  298D             MATH.MULTIPLY32.PRODUCT$ = $88 ; 4 BYTES
04612  298D             
04613  298D             MATH.MULTIPLY32$ 
04614  298D  A9 00                 LDA #$00                        ; SET PRODUCT TO ZERO
04615  298F  85 88                 STA MATH.MULTIPLY32.PRODUCT$
04616  2991  85 89                 STA MATH.MULTIPLY32.PRODUCT$+1
04617  2993  85 8A                 STA MATH.MULTIPLY32.PRODUCT$+2
04618  2995  85 8B                 STA MATH.MULTIPLY32.PRODUCT$+3
04619  2997             
04620  2997             @LOOP
04621  2997  A5 84                 LDA MATH.MULTIPLY32.FACTOR2$                     ; WHILE FACTOR2 != 0
04622  2999  D0 0D                 BNE @NZ
04623  299B  A5 85                 LDA MATH.MULTIPLY32.FACTOR2$+1
04624  299D  D0 09                 BNE @NZ
04625  299F  A5 86                 LDA MATH.MULTIPLY32.FACTOR2$+2
04626  29A1  D0 05                 BNE @NZ
04627  29A3  A5 87                 LDA MATH.MULTIPLY32.FACTOR2$+3
04628  29A5  D0 01                 BNE @NZ
04629  29A7  60                    RTS
04630  29A8             @NZ
04631  29A8  A5 84                 LDA MATH.MULTIPLY32.FACTOR2$                     ; IF FACTOR2 IS ODD
04632  29AA  29 01                 AND #$01
04633  29AC  F0 19                 BEQ @SKIP
04634  29AE                        
04635  29AE  A5 80                 LDA MATH.MULTIPLY32.FACTOR1$                     ; PRODUCT += FACTOR1
04636  29B0  18                    CLC
04637  29B1  65 88                 ADC MATH.MULTIPLY32.PRODUCT$
04638  29B3  85 88                 STA MATH.MULTIPLY32.PRODUCT$
04639  29B5                        
04640  29B5  A5 81                 LDA MATH.MULTIPLY32.FACTOR1$+1
04641  29B7  65 89                 ADC MATH.MULTIPLY32.PRODUCT$+1
04642  29B9  85 89                 STA MATH.MULTIPLY32.PRODUCT$+1
04643  29BB                        
04644  29BB  A5 82                 LDA MATH.MULTIPLY32.FACTOR1$+2
04645  29BD  65 8A                 ADC MATH.MULTIPLY32.PRODUCT$+2
04646  29BF  85 8A                 STA MATH.MULTIPLY32.PRODUCT$+2
04647  29C1             
04648  29C1  A5 83                 LDA MATH.MULTIPLY32.FACTOR1$+3
04649  29C3  65 8B                 ADC MATH.MULTIPLY32.PRODUCT$+3
04650  29C5  85 8B                 STA MATH.MULTIPLY32.PRODUCT$+3
04651  29C7             
04652  29C7             @SKIP
04653  29C7  06 80                 ASL MATH.MULTIPLY32.FACTOR1$
04654  29C9  26 81                 ROL MATH.MULTIPLY32.FACTOR1$+1
04655  29CB  26 82                 ROL MATH.MULTIPLY32.FACTOR1$+2
04656  29CD  26 83                 ROL MATH.MULTIPLY32.FACTOR1$+3
04657  29CF  46 87                 LSR MATH.MULTIPLY32.FACTOR2$+3
04658  29D1  66 86                 ROR MATH.MULTIPLY32.FACTOR2$+2
04659  29D3  66 85                 ROR MATH.MULTIPLY32.FACTOR2$+1
04660  29D5  66 84                 ROR MATH.MULTIPLY32.FACTOR2$
04661  29D7             
04662  29D7  4C 97 29              JMP @LOOP                       ; END WHILE
04663  29DA             
04664  29DA             
04665  29DA             ;ALIGN $100
04666  29DA             
04667  29DA             MATH.DIVIDE8.DIVISOR$ = $80 ; 1 BYTE
04668  29DA             MATH.DIVIDE8.DIVIDEND$ = $81 ; 1 BYTE
04669  29DA             MATH.DIVIDE8.QUOTIENT$ = MATH.DIVIDE8.DIVIDEND$ ; 1 BYTE
04670  29DA             MATH.DIVIDE8.REMAINDER$ = $82 ; 1 BYTE
04671  29DA             
04672  29DA             MATH.DIVIDE8$ 
04673  29DA                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:8BIT_DIVIDE_8BIT_PRODUCT
04674  29DA  A9 00                 LDA #$00
04675  29DC  A2 07                 LDX #$07
04676  29DE  18                    CLC
04677  29DF             @LOOP1
04678  29DF  26 81                 ROL MATH.DIVIDE8.DIVIDEND$
04679  29E1  2A                    ROL
04680  29E2  C5 80                 CMP MATH.DIVIDE8.DIVISOR$
04681  29E4  90 02                 BCC @LOOP2
04682  29E6  E5 80                 SBC MATH.DIVIDE8.DIVISOR$
04683  29E8             @LOOP2
04684  29E8  CA                    DEX
04685  29E9  10 F4                 BPL @LOOP1
04686  29EB  26 81                 ROL MATH.DIVIDE8.DIVIDEND$
04687  29ED  85 82                 STA MATH.DIVIDE8.REMAINDER$
04688  29EF  60                    RTS
04689  29F0             
04690  29F0             ALIGN      $100
04691  2A00             
04692  2A00             MATH.DIVIDE16.DIVISOR$ = $80 ; 2 BYTES
04693  2A00             MATH.DIVIDE16.DIVIDEND$ = $82 ; 2 BYTES
04694  2A00             MATH.DIVIDE16.QUOTIENT$ = MATH.DIVIDE16.DIVIDEND$ ; 2 BYTES
04695  2A00             MATH.DIVIDE16.REMAINDER$ = $84 ; 2 BYTES
04696  2A00             
04697  2A00             MATH.DIVIDE16$ 
04698  2A00                        ; HTTP://CODEBASE64.ORG/DOKU.PHP?ID=BASE:16BIT_DIVISION_16-BIT_RESULT
04699  2A00  A9 00                 LDA #0          ;PRESET REMAINDER TO 0
04700  2A02  85 84                 STA MATH.DIVIDE16.REMAINDER$
04701  2A04  85 85                 STA MATH.DIVIDE16.REMAINDER$+1
04702  2A06  A2 10                 LDX #16         ;REPEAT FOR EACH BIT: ...
04703  2A08             
04704  2A08             @LOOP
04705  2A08  06 82                 ASL MATH.DIVIDE16.DIVIDEND$    ;DIVIDEND LB & HB*2, MSB -> CARRY
04706  2A0A  26 83                 ROL MATH.DIVIDE16.DIVIDEND$+1
04707  2A0C  26 84                 ROL MATH.DIVIDE16.REMAINDER$   ;REMAINDER LB & HB * 2 + MSB FROM CARRY
04708  2A0E  26 85                 ROL MATH.DIVIDE16.REMAINDER$+1
04709  2A10  A5 84                 LDA MATH.DIVIDE16.REMAINDER$
04710  2A12  38                    SEC
04711  2A13  E5 80                 SBC MATH.DIVIDE16.DIVISOR$     ;SUBSTRACT DIVISOR TO SEE IF IT FITS IN
04712  2A15  A8                    TAY             ;LB RESULT -> Y, FOR WE MAY NEED IT LATER
04713  2A16  A5 85                 LDA MATH.DIVIDE16.REMAINDER$+1
04714  2A18  E5 81                 SBC MATH.DIVIDE16.DIVISOR$+1
04715  2A1A  90 06                 BCC @SKIP        ;IF CARRY=0 THEN DIVISOR DIDN'T FIT IN YET
04716  2A1C             
04717  2A1C  85 85                 STA MATH.DIVIDE16.REMAINDER$+1 ;ELSE SAVE SUBSTRACTION RESULT AS NEW REMAINDER,
04718  2A1E  84 84                 STY MATH.DIVIDE16.REMAINDER$
04719  2A20  E6 82                 INC MATH.DIVIDE16.QUOTIENT$      ;AND INCREMENT RESULT CAUSE DIVISOR FIT IN 1 TIMES
04720  2A22             
04721  2A22             @SKIP      
04722  2A22  CA                    DEX
04723  2A23  D0 E3                 BNE @LOOP
04724  2A25  60                    RTS
04725  2A26             
04726  2A26             MATH.DIVIDE32.DIVISOR$ = $80 ; 4 BYTES
04727  2A26             MATH.DIVIDE32.DIVIDEND$ = $84 ; 4 BYTES
04728  2A26             MATH.DIVIDE32.QUOTIENT$ = MATH.DIVIDE32.DIVIDEND$ ; 4 BYTES
04729  2A26             MATH.DIVIDE32.REMAINDER$ = $8C ; 4 BYTES (DON'T USE $88-$8B AS THIS WILL MESS UP TIME.GETTICKS)
04730  2A26             MATH.DIVIDE32.TEMP1 = $FB ; 1 BYTE
04731  2A26             MATH.DIVIDE32.TEMP2 = $FE ; 1 BYTE
04732  2A26             
04733  2A26             MATH.DIVIDE32$ 
04734  2A26                        ; HTTP://WWW.CODEBASE64.ORG/DOKU.PHP?ID=BASE:24BIT_DIVISION_24-BIT_RESULT
04735  2A26  A9 00                 LDA #0          ;PRESET REMAINDER TO 0
04736  2A28  85 8C                 STA MATH.DIVIDE32.REMAINDER$
04737  2A2A  85 8D                 STA MATH.DIVIDE32.REMAINDER$+1
04738  2A2C  85 8E                 STA MATH.DIVIDE32.REMAINDER$+2
04739  2A2E  85 8F                 STA MATH.DIVIDE32.REMAINDER$+3
04740  2A30  85 FB                 STA MATH.DIVIDE32.TEMP1
04741  2A32  85 FE                 STA MATH.DIVIDE32.TEMP2
04742  2A34  A2 20                 LDX #32         ;REPEAT FOR EACH BIT: ...
04743  2A36             
04744  2A36             @DIVLOOP   
04745  2A36  06 84                 ASL MATH.DIVIDE32.DIVIDEND$    ;DIVIDEND LB & HB*2, MSB -> CARRY
04746  2A38  26 85                 ROL MATH.DIVIDE32.DIVIDEND$+1
04747  2A3A  26 86                 ROL MATH.DIVIDE32.DIVIDEND$+2
04748  2A3C  26 87                 ROL MATH.DIVIDE32.DIVIDEND$+3
04749  2A3E  26 8C                 ROL MATH.DIVIDE32.REMAINDER$   ;REMAINDER LB & HB * 2 + MSB FROM CARRY
04750  2A40  26 8D                 ROL MATH.DIVIDE32.REMAINDER$+1
04751  2A42  26 8E                 ROL MATH.DIVIDE32.REMAINDER$+2
04752  2A44  26 8F                 ROL MATH.DIVIDE32.REMAINDER$+3
04753  2A46  A5 8C                 LDA MATH.DIVIDE32.REMAINDER$
04754  2A48  38                    SEC
04755  2A49  E5 80                 SBC MATH.DIVIDE32.DIVISOR$     ;SUBSTRACT DIVISOR TO SEE IF IT FITS IN
04756  2A4B  A8                    TAY             ;LB RESULT -> Y, FOR WE MAY NEED IT LATER
04757  2A4C  A5 8D                 LDA MATH.DIVIDE32.REMAINDER$+1
04758  2A4E  E5 81                 SBC MATH.DIVIDE32.DIVISOR$+1
04759  2A50  85 FB                 STA MATH.DIVIDE32.TEMP1
04760  2A52  A5 8E                 LDA MATH.DIVIDE32.REMAINDER$+2
04761  2A54  E5 82                 SBC MATH.DIVIDE32.DIVISOR$+2
04762  2A56  85 FE                 STA MATH.DIVIDE32.TEMP2
04763  2A58  A5 8F                 LDA MATH.DIVIDE32.REMAINDER$+3
04764  2A5A  E5 83                 SBC MATH.DIVIDE32.DIVISOR$+3
04765  2A5C  90 0E                 BCC @SKIP        ;IF CARRY=0 THEN DIVISOR DIDN'T FIT IN YET
04766  2A5E             
04767  2A5E  85 8F                 STA MATH.DIVIDE32.REMAINDER$+3 ;ELSE SAVE SUBSTRACTION RESULT AS NEW REMAINDER,
04768  2A60  A5 FE                 LDA MATH.DIVIDE32.TEMP2
04769  2A62  85 8E                 STA MATH.DIVIDE32.REMAINDER$+2 ;ELSE SAVE SUBSTRACTION RESULT AS NEW REMAINDER,
04770  2A64  A5 FB                 LDA MATH.DIVIDE32.TEMP1
04771  2A66  85 8D                 STA MATH.DIVIDE32.REMAINDER$+1
04772  2A68  84 8C                 STY MATH.DIVIDE32.REMAINDER$
04773  2A6A  E6 84                 INC MATH.DIVIDE32.DIVIDEND$    ;AND INCREMENT RESULT CAUSE DIVISOR FIT IN 1 TIMES
04774  2A6C             
04775  2A6C             @SKIP      
04776  2A6C  CA                    DEX
04777  2A6D                        ;BNE @DIVLOOP
04778  2A6D  F0 03                 BEQ @DONE
04779  2A6F  4C 36 2A              JMP @DIVLOOP
04780  2A72             
04781  2A72             @DONE
04782  2A72  60                    RTS
04783  2A73             
04784  2A73             MATH.ABS16.INTEGER$ = $80 ; 2 BYTES
04785  2A73             MATH.ABS16.VALUE$ = $84 ; 2 BYTES
04786  2A73             MATH.ABS16$ 
04787  2A73  A5 80                 LDA MATH.ABS16.INTEGER$
04788  2A75  A4 81                 LDY MATH.ABS16.INTEGER$+1
04789  2A77  A6 81                 LDX MATH.ABS16.INTEGER$+1
04790  2A79  10 10                 BPL @END     ;IF THE NUMBER IS POSITIVE, EXIT
04791  2A7B  38                    SEC           ;ELSE TAKE THE 2'S COMPLEMENT OF THE NEGATIVE
04792  2A7C  85 81                 STA MATH.ABS16.INTEGER$+1       ;  VALUE TO GET THE POSITIVE VALUE
04793  2A7E  A9 00                 LDA #$00
04794  2A80  E5 81                 SBC MATH.ABS16.INTEGER$+1
04795  2A82  48                    PHA
04796  2A83  84 81                 STY MATH.ABS16.INTEGER$+1
04797  2A85  A9 00                 LDA #$00
04798  2A87  E5 81                 SBC MATH.ABS16.INTEGER$+1
04799  2A89  A8                    TAY
04800  2A8A  68                    PLA
04801  2A8B             @END
04802  2A8B  85 84                 STA MATH.ABS16.VALUE$
04803  2A8D  84 85                 STY MATH.ABS16.VALUE$+1
04804  2A8F  60                    RTS
04805  2A90             
04806  2A90             ; SEE MEMORY.SWAP$
04807  2A90             ;MATH.SWAP16.INTADDRESS1$ = $80 ; 2 BYTES
04808  2A90             ;MATH.SWAP16.INTADDRESS2$ = $84 ; 2 BYTES
04809  2A90             ;MATH.SWAP16.TEMP = $88 ; 2 BYTES
04810  2A90             ;MATH.SWAP16$
04811  2A90             ;        ; TEMP = INTEGER1
04812  2A90             ;        LDY #$00
04813  2A90             ;        LDA (MATH.SWAP16.INTADDRESS1$),Y
04814  2A90             ;        STA MATH.SWAP16.TEMP
04815  2A90             ;        INY
04816  2A90             ;        LDA (MATH.SWAP16.INTADDRESS1$),Y
04817  2A90             ;        STA MATH.SWAP16.TEMP+1
04818  2A90             
04819  2A90             ;        ; INTEGER1 = INTEGER2
04820  2A90             ;        LDY #$00
04821  2A90             ;        LDA (MATH.SWAP16.INTADDRESS2$),Y
04822  2A90             ;        STA (MATH.SWAP16.INTADDRESS1$),Y
04823  2A90             ;        INY
04824  2A90             ;        LDA (MATH.SWAP16.INTADDRESS2$),Y
04825  2A90             ;        STA (MATH.SWAP16.INTADDRESS1$),Y
04826  2A90             
04827  2A90             ;        ; INTEGER2 = TEMP
04828  2A90             ;        LDY #$00
04829  2A90             ;        LDA MATH.SWAP16.TEMP
04830  2A90             ;        STA (MATH.SWAP16.INTADDRESS2$),Y
04831  2A90             ;        INY
04832  2A90             ;        LDA MATH.SWAP16.TEMP+1
04833  2A90             ;        STA (MATH.SWAP16.INTADDRESS2$),Y
04834  2A90             
04835  2A90             ;        RTS
04836  2A90             
04837  2A90             MATH.EXPONENT8.BASE$ = $8A
04838  2A90             MATH.EXPONENT8.POWER$ = $8B
04839  2A90             MATH.EXPONENT8.VALUE$ = $8C
04840  2A90             MATH.EXPONENT8$ 
04841  2A90             
04842  2A90  A9 01                 LDA #$01
04843  2A92  85 8C                 STA MATH.EXPONENT8.VALUE$
04844  2A94             
04845  2A94             @LOOP
04846  2A94  A5 8B                 LDA MATH.EXPONENT8.POWER$
04847  2A96  D0 01                 BNE @CONTINUE
04848  2A98  60                    RTS
04849  2A99             @CONTINUE
04850  2A99  A5 8A                 LDA MATH.EXPONENT8.BASE$
04851  2A9B  85 80                 STA MATH.MULTIPLY8.FACTOR1$
04852  2A9D  A5 8C                 LDA MATH.EXPONENT8.VALUE$
04853  2A9F  85 82                 STA MATH.MULTIPLY8.FACTOR2$
04854  2AA1  20 48 29              JSR MATH.MULTIPLY8$
04855  2AA4  A5 83                 LDA MATH.MULTIPLY8.PRODUCT$
04856  2AA6  85 8C                 STA MATH.EXPONENT8.VALUE$
04857  2AA8  C6 8B                 DEC MATH.EXPONENT8.POWER$
04858  2AAA  4C 94 2A              JMP @LOOP
04859  2AAD             
04860  2AAD             
04861  2AAD             
04862  2AAD             
04863  2AAD             
04864  2AAD             
04865  2AAD             ;ALIGN $100
04866  2AAD             
04867  2AAD             STRING.CREATE.CHARACTER$ = $02 ; 1 BYTE
04868  2AAD             STRING.CREATE.LENGTH$ = $FB ; 2 BYTES
04869  2AAD             STRING.CREATE.ADDRESS$ = $7A ; 2 BYTES
04870  2AAD             STRING.CREATE.ADDRESS_LR = $FD ; 2 BYTES
04871  2AAD             STRING.CREATE$ 
04872  2AAD             
04873  2AAD                        ; INCREASE THE LENGTH BY ONE.
04874  2AAD  20 03 2B              JSR STRING.CREATE.INC_LENGTH ; LENGTH = LENGTH + 1
04875  2AB0             
04876  2AB0                        ; ALLOCATE THE MEMORY BLOCK.
04877  2AB0  A5 FB                 LDA STRING.CREATE.LENGTH$
04878  2AB2  85 75                 STA MEMORY.ALLOCATE.LENGTH$
04879  2AB4  A5 FC                 LDA STRING.CREATE.LENGTH$+1
04880  2AB6  85 76                 STA MEMORY.ALLOCATE.LENGTH$+1
04881  2AB8             
04882  2AB8  20 9D 10              JSR MEMORY.ALLOCATE$ ; ADDRESS$ = MEMORY.ALLOCATE$(LENGTH)
04883  2ABB             
04884  2ABB  A5 7A                 LDA MEMORY.ALLOCATE.ADDRESS$
04885  2ABD  85 7A                 STA STRING.CREATE.ADDRESS$
04886  2ABF  A5 7B                 LDA MEMORY.ALLOCATE.ADDRESS$+1
04887  2AC1  85 7B                 STA STRING.CREATE.ADDRESS$+1
04888  2AC3             
04889  2AC3  20 1F 2B              JSR STRING.CREATE.DEC_LENGTH ; LENGTH = LENGTH - 1
04890  2AC6             
04891  2AC6                        ; FILL THE MEMORY WITH THE DEFAULT CHARACTER.
04892  2AC6  A5 02                 LDA STRING.CREATE.CHARACTER$
04893  2AC8  C9 00                 CMP #$00
04894  2ACA  F0 15                 BEQ @SKIPFILLSTR ; SKIP THE FILL IF THE DEFAULT CHARACTER IS $00
04895  2ACC  85 75                 STA MEMORY.FILL16.VALUE$
04896  2ACE             
04897  2ACE  A5 7A                 LDA STRING.CREATE.ADDRESS$
04898  2AD0  85 73                 STA MEMORY.FILL16.ADDRESS$
04899  2AD2  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
04900  2AD4  85 74                 STA MEMORY.FILL16.ADDRESS$+1
04901  2AD6             
04902  2AD6  A5 FB                 LDA STRING.CREATE.LENGTH$
04903  2AD8  85 77                 STA MEMORY.FILL16.LENGTH$
04904  2ADA  A5 FC                 LDA STRING.CREATE.LENGTH$+1
04905  2ADC  85 78                 STA MEMORY.FILL16.LENGTH$+1
04906  2ADE             
04907  2ADE  20 15 10              JSR MEMORY.FILL16$
04908  2AE1             @SKIPFILLSTR 
04909  2AE1             
04910  2AE1                        ; CACULATE THE LOCATION OF THE LAST CHARACTER.
04911  2AE1  A5 7A                 LDA STRING.CREATE.ADDRESS$
04912  2AE3  85 80                 STA MATH.ADD16.ADDEND1$
04913  2AE5  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
04914  2AE7  85 81                 STA MATH.ADD16.ADDEND1$+1
04915  2AE9             
04916  2AE9  A5 FB                 LDA STRING.CREATE.LENGTH$
04917  2AEB  85 82                 STA MATH.ADD16.ADDEND2$
04918  2AED  A5 FC                 LDA STRING.CREATE.LENGTH$+1
04919  2AEF  85 83                 STA MATH.ADD16.ADDEND2$+1
04920  2AF1             
04921  2AF1  20 00 28              JSR MATH.ADD16$ ; ADDRESS_LR = ADDRESS + LENGTH
04922  2AF4             
04923  2AF4  A5 84                 LDA MATH.ADD16.SUM$
04924  2AF6  85 FD                 STA STRING.CREATE.ADDRESS_LR
04925  2AF8  A5 85                 LDA MATH.ADD16.SUM$+1
04926  2AFA  85 FE                 STA STRING.CREATE.ADDRESS_LR+1
04927  2AFC             
04928  2AFC                        ; THE LAST ADDRESS NEEDS TO BE THE NULL$ CHARACTER.
04929  2AFC  A0 00                 LDY #$00
04930  2AFE  A9 FF                 LDA #CONSOLE.NULL$
04931  2B00  91 FD                 STA (STRING.CREATE.ADDRESS_LR),Y
04932  2B02             
04933  2B02  60                    RTS
04934  2B03             
04935  2B03             STRING.CREATE.INC_LENGTH 
04936  2B03  A5 FB                 LDA STRING.CREATE.LENGTH$
04937  2B05  85 80                 STA MATH.ADD16.ADDEND1$
04938  2B07  A5 FC                 LDA STRING.CREATE.LENGTH$+1
04939  2B09  85 81                 STA MATH.ADD16.ADDEND1$+1
04940  2B0B             
04941  2B0B  A9 01                 LDA #$01
04942  2B0D  85 82                 STA MATH.ADD16.ADDEND2$
04943  2B0F  A9 00                 LDA #$00
04944  2B11  85 83                 STA MATH.ADD16.ADDEND2$+1
04945  2B13             
04946  2B13  20 00 28              JSR MATH.ADD16$ ; LENGTH = LENGTH + 1
04947  2B16             
04948  2B16  A5 84                 LDA MATH.ADD16.SUM$
04949  2B18  85 FB                 STA STRING.CREATE.LENGTH$
04950  2B1A  A5 85                 LDA MATH.ADD16.SUM$+1
04951  2B1C  85 FC                 STA STRING.CREATE.LENGTH$+1
04952  2B1E             
04953  2B1E  60                    RTS
04954  2B1F             
04955  2B1F             STRING.CREATE.DEC_LENGTH 
04956  2B1F  A5 FB                 LDA STRING.CREATE.LENGTH$
04957  2B21  85 80                 STA MATH.SUBTRACT16.MENUEND$
04958  2B23  A5 FC                 LDA STRING.CREATE.LENGTH$+1
04959  2B25  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
04960  2B27             
04961  2B27  A9 01                 LDA #$01
04962  2B29  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
04963  2B2B  A9 00                 LDA #$00
04964  2B2D  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
04965  2B2F             
04966  2B2F  20 96 28              JSR MATH.SUBTRACT16$ ; LENGTH = LENGTH - 1
04967  2B32             
04968  2B32  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
04969  2B34  85 FB                 STA STRING.CREATE.LENGTH$
04970  2B36  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
04971  2B38  85 FC                 STA STRING.CREATE.LENGTH$+1
04972  2B3A             
04973  2B3A  60                    RTS
04974  2B3B             
04975  2B3B             STRING.ISHEAP.ADDRESS$ = $7A ; 2 BYTES
04976  2B3B             STRING.ISHEAP.HEAP$ = $73 ; 1 BYTE
04977  2B3B             STRING.ISHEAP$ 
04978  2B3B             
04979  2B3B                        ; DEFAULT HEAP$ = 0
04980  2B3B  A9 00                 LDA #$00
04981  2B3D  85 73                 STA STRING.ISHEAP.HEAP$
04982  2B3F             
04983  2B3F                        ; DETERMINE WHETHER OR NOT THE ADDRESS IS IN THE MEMORY HEAP.
04984  2B3F  A5 7A                 LDA STRING.ISHEAP.ADDRESS$
04985  2B41  85 80                 STA MATH.CMP16.NUM1$
04986  2B43  A5 7B                 LDA STRING.ISHEAP.ADDRESS$+1
04987  2B45  85 81                 STA MATH.CMP16.NUM1$+1
04988  2B47             
04989  2B47  AD 5F 10              LDA MEMORY.HEAPADRESS_LR
04990  2B4A  85 82                 STA MATH.CMP16.NUM2$
04991  2B4C  AD 60 10              LDA MEMORY.HEAPADRESS_LR+1
04992  2B4F  85 83                 STA MATH.CMP16.NUM2$+1
04993  2B51             
04994  2B51  20 E4 28              JSR MATH.CMP16$ ; CARRY FLAG IS SET IF ADDRESS$ >= MEMORY.HEAPADDRESS_LR
04995  2B54  B0 1B                 BCS @END
04996  2B56                        
04997  2B56                        ; DETERMINE WHETHER OR NOT THE ADDRESS IS IN THE MEMORY HEAP.
04998  2B56  AD 5D 10              LDA MEMORY.HEAPADRESS
04999  2B59  85 80                 STA MATH.CMP16.NUM1$
05000  2B5B  AD 5E 10              LDA MEMORY.HEAPADRESS+1
05001  2B5E  85 81                 STA MATH.CMP16.NUM1$+1
05002  2B60             
05003  2B60  A5 7A                 LDA STRING.ISHEAP.ADDRESS$
05004  2B62  85 82                 STA MATH.CMP16.NUM2$
05005  2B64  A5 7B                 LDA STRING.ISHEAP.ADDRESS$+1
05006  2B66  85 83                 STA MATH.CMP16.NUM2$+1
05007  2B68             
05008  2B68  20 E4 28              JSR MATH.CMP16$ ; CARRY FLAG IS SET IF MEMORY.HEAPADRESS$ >= ADDRESS$
05009  2B6B  B0 04                 BCS @END
05010  2B6D             
05011  2B6D  A9 01                 LDA #$01
05012  2B6F  85 73                 STA STRING.ISHEAP.HEAP$
05013  2B71             
05014  2B71             @END
05015  2B71  60                    RTS
05016  2B72             
05017  2B72             STRING.GETLENGTH.ADDRESS$ = $7A ; 2 BYTES
05018  2B72             STRING.GETLENGTH.LENGTH$ = $FB ; 2 BYTES
05019  2B72             STRING.GETLENGTH$ 
05020  2B72                        
05021  2B72                        ; CHECK TO SEE IF THE ADDRESS IS FROM THE HEAP
05022  2B72  A5 7A                 LDA STRING.GETLENGTH.ADDRESS$
05023  2B74  85 7A                 STA STRING.ISHEAP.ADDRESS$
05024  2B76  A5 7B                 LDA STRING.GETLENGTH.ADDRESS$+1
05025  2B78  85 7B                 STA STRING.ISHEAP.ADDRESS$+1
05026  2B7A             
05027  2B7A  20 3B 2B              JSR STRING.ISHEAP$ ; STRING.ISHEAP$(ADDRESS$)
05028  2B7D  A5 73                 LDA STRING.ISHEAP.HEAP$
05029  2B7F  C9 01                 CMP #$01
05030  2B81  F0 06                 BEQ @GETSIZEOF
05031  2B83  20 8D 2B              JSR STRING.GETLENGTH_GETNULLCHAR
05032  2B86  4C 8C 2B              JMP @END
05033  2B89             @GETSIZEOF 
05034  2B89  20 A8 2B              JSR STRING.GETLENGTH_GETSIZEOF
05035  2B8C             @END
05036  2B8C  60                    RTS
05037  2B8D             
05038  2B8D             STRING.GETLENGTH_GETNULLCHAR 
05039  2B8D                        ; WE SHOULD ONLY GET HERE IF THE STRING IS A CONSTANT.
05040  2B8D             
05041  2B8D                        ; COUNT UP THE NUMBER OF NON-NULL$ CHARACTERS.
05042  2B8D  A0 00                 LDY #$00
05043  2B8F  84 FB                 STY STRING.GETLENGTH.LENGTH$
05044  2B91  84 FC                 STY STRING.GETLENGTH.LENGTH$+1
05045  2B93             @LOOP
05046  2B93  B1 7A                 LDA (STRING.GETLENGTH.ADDRESS$),Y
05047  2B95  C9 FF                 CMP #CONSOLE.NULL$
05048  2B97  F0 0C                 BEQ @DONE
05049  2B99  C8                    INY
05050  2B9A  C0 00                 CPY #$00 ; IF Y = $00 THEN WE WRAPPED AROUND THE LO-BYTE
05051  2B9C  D0 F5                 BNE @LOOP
05052  2B9E                        ; INCREMENT THE ADDRESS AND LENGTH HI-BYTES
05053  2B9E  E6 7B                 INC STRING.GETLENGTH.ADDRESS$+1
05054  2BA0  E6 FC                 INC STRING.GETLENGTH.LENGTH$+1
05055  2BA2  4C 93 2B              JMP @LOOP
05056  2BA5             @DONE
05057  2BA5  84 FB                 STY STRING.GETLENGTH.LENGTH$
05058  2BA7             
05059  2BA7  60                    RTS
05060  2BA8             
05061  2BA8             STRING.GETLENGTH_GETSIZEOF 
05062  2BA8                        ; WE SHOULD ONLY GET HERE IF THE STRING IS CREATED VIA STRING.CREATE$
05063  2BA8             
05064  2BA8  A5 7A                 LDA STRING.GETLENGTH.ADDRESS$
05065  2BAA  85 7A                 STA MEMORY.SIZEOF.ADDRESS$
05066  2BAC  A5 7B                 LDA STRING.GETLENGTH.ADDRESS$+1
05067  2BAE  85 7B                 STA MEMORY.SIZEOF.ADDRESS$+1
05068  2BB0             
05069  2BB0  20 60 12              JSR MEMORY.SIZEOF$ ; LENGTH$ = MEMORY.SIZEOF$(ADDRESS$)
05070  2BB3             
05071  2BB3                        ; MEMORY.SIZEOF() RETURNS THE LENGTH OF THE MEMORY BLOCK
05072  2BB3                        ; INCLUDING THE 2 BYTES WHICH IS THE LENGTH OF THE BLOCK AND
05073  2BB3                        ; BECAUSE STRING.CREATE$ APPENDS A NULL$ CHARACTER,
05074  2BB3                        ; WE NEED TO SUBTRACT 3 BYTES FROM SIZEOF TO GET THE LENGTH.
05075  2BB3                        
05076  2BB3  A5 7C                 LDA MEMORY.SIZEOF.LENGTH$
05077  2BB5  85 80                 STA MATH.SUBTRACT16.MENUEND$
05078  2BB7  A5 7D                 LDA MEMORY.SIZEOF.LENGTH$+1
05079  2BB9  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
05080  2BBB             
05081  2BBB  A9 03                 LDA #$03
05082  2BBD  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
05083  2BBF  A9 00                 LDA #$00
05084  2BC1  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
05085  2BC3             
05086  2BC3  20 96 28              JSR MATH.SUBTRACT16$ ; LENGTH$ = LENGTH$ - 1
05087  2BC6             
05088  2BC6  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
05089  2BC8  85 FB                 STA STRING.GETLENGTH.LENGTH$
05090  2BCA  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
05091  2BCC  85 FC                 STA STRING.GETLENGTH.LENGTH$+1
05092  2BCE             
05093  2BCE  60                    RTS
05094  2BCF             
05095  2BCF             ;ALIGN $100
05096  2BCF             
05097  2BCF             
05098  2BCF             STRING.COPY.SRCADDRESS$ = $7E ; 2 BYTES
05099  2BCF             STRING.COPY.DSTADDRESS$ = $7A ; 2 BYTES
05100  2BCF             STRING.COPY$ 
05101  2BCF                        ; CREATES A NEW INSTANCE OF A STRING WITH THE SAME CHARACTERS AS THE SOURCE
05102  2BCF             
05103  2BCF                        ; GET THE LENGTH OF THE SOURCE ADDRESS
05104  2BCF  A5 7E                 LDA STRING.COPY.SRCADDRESS$
05105  2BD1  85 7A                 STA STRING.GETLENGTH.ADDRESS$
05106  2BD3  A5 7F                 LDA STRING.COPY.SRCADDRESS$+1
05107  2BD5  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
05108  2BD7  20 72 2B              JSR STRING.GETLENGTH$
05109  2BDA             
05110  2BDA                        ; CREATE THE NEW STRING
05111  2BDA  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05112  2BDC  85 FB                 STA STRING.CREATE.LENGTH$
05113  2BDE  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05114  2BE0  85 FC                 STA STRING.CREATE.LENGTH$+1
05115  2BE2             
05116  2BE2                        ; SETTING #0 WILL TELL THE CREATE ROUTINE TO SKIP THE FILL PART
05117  2BE2  A9 00                 LDA #$00
05118  2BE4  85 02                 STA STRING.CREATE.CHARACTER$
05119  2BE6  20 AD 2A              JSR STRING.CREATE$
05120  2BE9             
05121  2BE9  A5 7A                 LDA STRING.CREATE.ADDRESS$
05122  2BEB  85 7A                 STA STRING.COPY.DSTADDRESS$
05123  2BED  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
05124  2BEF  85 7B                 STA STRING.COPY.DSTADDRESS$+1
05125  2BF1             
05126  2BF1                        ; COPY THE CONTENTS OF SOURCE ADDRESS TO ADDRESS
05127  2BF1  A5 7E                 LDA STRING.COPY.SRCADDRESS$
05128  2BF3  85 73                 STA MEMORY.COPY16.SOURCE$
05129  2BF5  A5 7F                 LDA STRING.COPY.SRCADDRESS$+1
05130  2BF7  85 74                 STA MEMORY.COPY16.SOURCE$+1
05131  2BF9             
05132  2BF9  A5 7A                 LDA STRING.COPY.DSTADDRESS$
05133  2BFB  85 75                 STA MEMORY.COPY16.DESTINATION$
05134  2BFD  A5 7B                 LDA STRING.COPY.DSTADDRESS$+1
05135  2BFF  85 76                 STA MEMORY.COPY16.DESTINATION$+1
05136  2C01             
05137  2C01  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05138  2C03  85 78                 STA MEMORY.COPY16.LENGTH$
05139  2C05  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05140  2C07  85 79                 STA MEMORY.COPY16.LENGTH$+1
05141  2C09             
05142  2C09  20 9C 0F              JSR MEMORY.COPY16$
05143  2C0C             
05144  2C0C  60                    RTS
05145  2C0D             
05146  2C0D             STRING.CONTAINS.ADDRESS1$ = $7A ; 2 BYTES
05147  2C0D             STRING.CONTAINS.ADDRESS2$ = $7C ; 2 BYTES
05148  2C0D             STRING.CONTAINS.VALUE$ = $73 ; 1 BYTE
05149  2C0D             STRING.CONTAINS$ 
05150  2C0D                        ; SETS VALUE$ = 1 IF THE STRING AT ADDRESS1$ CONTAINS ADDRESS2$
05151  2C0D             
05152  2C0D  A5 7A                 LDA STRING.CONTAINS.ADDRESS1$
05153  2C0F  85 7A                 STA STRING.INDEXOF.ADDRESS1$
05154  2C11  A5 7B                 LDA STRING.CONTAINS.ADDRESS1$+1
05155  2C13  85 7B                 STA STRING.INDEXOF.ADDRESS1$+1
05156  2C15             
05157  2C15  A5 7C                 LDA STRING.CONTAINS.ADDRESS2$
05158  2C17  85 7C                 STA STRING.INDEXOF.ADDRESS2$
05159  2C19  A5 7D                 LDA STRING.CONTAINS.ADDRESS2$+1
05160  2C1B  85 7D                 STA STRING.INDEXOF.ADDRESS2$+1
05161  2C1D             
05162  2C1D  A9 00                 LDA #$00
05163  2C1F  85 7E                 STA STRING.INDEXOF.INDEX$
05164  2C21  85 7F                 STA STRING.INDEXOF.INDEX$+1
05165  2C23             
05166  2C23  20 43 2C              JSR STRING.INDEXOF$ ; INDEX$ = STRING.INDEXOF$(ADDRESS1$, ADDRESS2$, 0)
05167  2C26             
05168  2C26  A5 7E                 LDA STRING.INDEXOF.INDEX$
05169  2C28  85 80                 STA MATH.CMP16.NUM1$
05170  2C2A  A5 7F                 LDA STRING.INDEXOF.INDEX$+1
05171  2C2C  85 81                 STA MATH.CMP16.NUM1$+1
05172  2C2E             
05173  2C2E  A9 FF                 LDA #$FF
05174  2C30  85 82                 STA MATH.CMP16.NUM2$
05175  2C32  85 83                 STA MATH.CMP16.NUM2$+1
05176  2C34             
05177  2C34  20 E4 28              JSR MATH.CMP16$ ; IF INDEX$ <> $FFFF THEN VALUE$ = 1
05178  2C37  D0 05                 BNE @SETVALUE
05179  2C39             @CLEARVALUE 
05180  2C39  A9 00                 LDA #$00
05181  2C3B  4C 40 2C              JMP @END
05182  2C3E             
05183  2C3E             @SETVALUE
05184  2C3E  A9 01                 LDA #$01
05185  2C40             @END
05186  2C40  85 73                 STA STRING.CONTAINS.VALUE$
05187  2C42  60                    RTS
05188  2C43             
05189  2C43             ;ALIGN $100
05190  2C43             
05191  2C43             STRING.INDEXOF.ADDRESS1$ = $7A ; 2 BYTES
05192  2C43             STRING.INDEXOF.ADDRESS2$ = $7C ; 2 BYTES
05193  2C43             STRING.INDEXOF.INDEX$ = $7E ; 2 BYTES
05194  2C43             STRING.INDEXOF.CHR1 = $73 ; 1 BYTE
05195  2C43             STRING.INDEXOF.CHR2 = $74 ; 1 BYTE
05196  2C43             STRING.INDEXOF.ADDRESS1_ORG = $FB ; 2 BYTES
05197  2C43             STRING.INDEXOF.ADDRESS2_ORG = $FD ; 2 BYTES
05198  2C43             STRING.INDEXOF$ 
05199  2C43                        ; FIND THE INDEX WHERE THEREE EXISTS AN OCCURANCE OF A STRING WITHIN ANOTHER.
05200  2C43             
05201  2C43  20 1B 1F              JSR MEMORY.PUSHZP$
05202  2C46             
05203  2C46                        ; VERIFY THAT THE LENGTH OF INDEX IS NOT GREATER THAN ADDRESS1$
05204  2C46  A5 7A                 LDA STRING.INDEXOF.ADDRESS1$
05205  2C48  85 7A                 STA STRING.GETLENGTH.ADDRESS$
05206  2C4A  A5 7B                 LDA STRING.INDEXOF.ADDRESS1$+1
05207  2C4C  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
05208  2C4E  20 72 2B              JSR STRING.GETLENGTH$
05209  2C51             
05210  2C51  20 31 1F              JSR MEMORY.PULLZP$
05211  2C54             
05212  2C54  A5 7E                 LDA STRING.INDEXOF.INDEX$
05213  2C56  85 80                 STA MATH.CMP16.NUM1$
05214  2C58  A5 7F                 LDA STRING.INDEXOF.INDEX$+1
05215  2C5A  85 81                 STA MATH.CMP16.NUM1$+1
05216  2C5C             
05217  2C5C  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05218  2C5E  85 82                 STA MATH.CMP16.NUM2$
05219  2C60  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05220  2C62  85 83                 STA MATH.CMP16.NUM2$+1
05221  2C64             
05222  2C64  20 E4 28              JSR MATH.CMP16$
05223  2C67  90 05                 BCC @LENGTHOK ; OK IF INDEX$ < STRING.GETLENGTH$(ADDRESS1$)
05224  2C69  F0 03                 BEQ @LENGTHOK ; OK IF INDEX$ = STRING.GETLENGTH$(ADDRESS1$)
05225  2C6B  4C E1 2C              JMP @NOFOUNDSTR
05226  2C6E             
05227  2C6E             @LENGTHOK
05228  2C6E                        ; STORE THE ORGINAL ADDRESSES
05229  2C6E  A5 7A                 LDA STRING.INDEXOF.ADDRESS1$
05230  2C70  85 FB                 STA STRING.INDEXOF.ADDRESS1_ORG
05231  2C72  A5 7B                 LDA STRING.INDEXOF.ADDRESS1$+1
05232  2C74  85 FC                 STA STRING.INDEXOF.ADDRESS1_ORG+1
05233  2C76                        
05234  2C76  A5 7C                 LDA STRING.INDEXOF.ADDRESS2$
05235  2C78  85 FD                 STA STRING.INDEXOF.ADDRESS2_ORG
05236  2C7A  A5 7D                 LDA STRING.INDEXOF.ADDRESS2$+1
05237  2C7C  85 FE                 STA STRING.INDEXOF.ADDRESS2_ORG+1
05238  2C7E                        
05239  2C7E  4C 8C 2C              JMP @INITADDRESSES
05240  2C81                        
05241  2C81             @NOMATCHCHR 
05242  2C81                        ; INCREMENT INDEX$
05243  2C81  A9 7E                 LDA #<STRING.INDEXOF.INDEX$
05244  2C83  85 86                 STA MATH.INC16.ADDRESS$
05245  2C85  A9 00                 LDA #>STRING.INDEXOF.INDEX$
05246  2C87  85 87                 STA MATH.INC16.ADDRESS$+1
05247  2C89  20 3C 28              JSR MATH.INC16$
05248  2C8C             
05249  2C8C             @INITADDRESSES 
05250  2C8C                        ; UPDATE THE LOCATION OF ADDRESS1$ BY THE VALUE IN INDEX$
05251  2C8C  A5 FB                 LDA STRING.INDEXOF.ADDRESS1_ORG
05252  2C8E  85 80                 STA MATH.ADD16.ADDEND1$
05253  2C90  A5 FC                 LDA STRING.INDEXOF.ADDRESS1_ORG+1
05254  2C92  85 81                 STA MATH.ADD16.ADDEND1$+1
05255  2C94             
05256  2C94  A5 7E                 LDA STRING.INDEXOF.INDEX$
05257  2C96  85 82                 STA MATH.ADD16.ADDEND2$
05258  2C98  A5 7F                 LDA STRING.INDEXOF.INDEX$+1
05259  2C9A  85 83                 STA MATH.ADD16.ADDEND2$+1
05260  2C9C             
05261  2C9C  20 00 28              JSR MATH.ADD16$ ; ADDRESS1$ = ADDRESS1$ + INDEX$
05262  2C9F             
05263  2C9F  A5 84                 LDA MATH.ADD16.SUM$
05264  2CA1  85 7A                 STA STRING.INDEXOF.ADDRESS1$
05265  2CA3  A5 85                 LDA MATH.ADD16.SUM$+1
05266  2CA5  85 7B                 STA STRING.INDEXOF.ADDRESS1$+1
05267  2CA7             
05268  2CA7  A5 FD                 LDA STRING.INDEXOF.ADDRESS2_ORG
05269  2CA9  85 7C                 STA STRING.INDEXOF.ADDRESS2$
05270  2CAB  A5 FE                 LDA STRING.INDEXOF.ADDRESS2_ORG+1
05271  2CAD  85 7D                 STA STRING.INDEXOF.ADDRESS2$+1
05272  2CAF             
05273  2CAF             ;        ; DEFAULT STRING.INDEXOF.INDEX$ TO $FFFF (-1)
05274  2CAF             ;        LDA #$00
05275  2CAF             ;        LDA STRING.INDEXOF.INDEX$
05276  2CAF             ;        LDA STRING.INDEXOF.INDEX$+1
05277  2CAF                        
05278  2CAF                        ; BEGIN MATCHING EACH CHARACTER IN THE ADDRESS2$ WITH ADDRESS1$
05279  2CAF  A0 00                 LDY #$00
05280  2CB1             @LOOP
05281  2CB1  B1 7A                 LDA (STRING.INDEXOF.ADDRESS1$),Y
05282  2CB3  85 73                 STA STRING.INDEXOF.CHR1
05283  2CB5             
05284  2CB5  B1 7C                 LDA (STRING.INDEXOF.ADDRESS2$),Y
05285  2CB7  85 74                 STA STRING.INDEXOF.CHR2
05286  2CB9  C9 FF                 CMP #CONSOLE.NULL$
05287  2CBB  F0 2D                 BEQ @FOUNDSTR
05288  2CBD             
05289  2CBD  A5 73                 LDA STRING.INDEXOF.CHR1
05290  2CBF  C9 FF                 CMP #CONSOLE.NULL$
05291  2CC1  F0 1E                 BEQ @NOFOUNDSTR
05292  2CC3             
05293  2CC3  C5 74                 CMP STRING.INDEXOF.CHR2
05294  2CC5  D0 BA                 BNE @NOMATCHCHR
05295  2CC7                        
05296  2CC7             ;        TAX
05297  2CC7             ;        CMP (STRING.INDEXOF.ADDRESS2$),Y
05298  2CC7             ;        BNE @NOMATCHCHR
05299  2CC7             ;        CPX #CONSOLE.NULL$
05300  2CC7             ;        BEQ @NOFOUNDSTR
05301  2CC7             
05302  2CC7                        ; INCREMENT INDEX$
05303  2CC7  A9 7E                 LDA #<STRING.INDEXOF.INDEX$
05304  2CC9  85 86                 STA MATH.INC16.ADDRESS$
05305  2CCB  A9 00                 LDA #>STRING.INDEXOF.INDEX$
05306  2CCD  85 87                 STA MATH.INC16.ADDRESS$+1
05307  2CCF  20 3C 28              JSR MATH.INC16$
05308  2CD2             
05309  2CD2  C8                    INY
05310  2CD3  C0 00                 CPY #$00
05311  2CD5  F0 03                 BEQ @INCY
05312  2CD7  4C B1 2C              JMP @LOOP
05313  2CDA             
05314  2CDA             @INCY
05315  2CDA  E6 7B                 INC STRING.INDEXOF.ADDRESS1$+1
05316  2CDC  E6 7D                 INC STRING.INDEXOF.ADDRESS2$+1
05317  2CDE  4C B1 2C              JMP @LOOP
05318  2CE1             
05319  2CE1             @NOFOUNDSTR 
05320  2CE1                        ; INDEX$ = $FFFF (NOT FOUND)
05321  2CE1  A9 FF                 LDA #$FF
05322  2CE3  85 7E                 STA STRING.INDEXOF.INDEX$
05323  2CE5  85 7F                 STA STRING.INDEXOF.INDEX$+1
05324  2CE7  4C 10 2D              JMP @END
05325  2CEA             
05326  2CEA             @FOUNDSTR
05327  2CEA                        ; INDEX$ = INDEX$ - STRING.GETLENGTH$(ADDRESS2)
05328  2CEA                        
05329  2CEA  A5 7C                 LDA STRING.INDEXOF.ADDRESS2$
05330  2CEC  85 7A                 STA STRING.GETLENGTH.ADDRESS$
05331  2CEE  A5 7D                 LDA STRING.INDEXOF.ADDRESS2$+1
05332  2CF0  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
05333  2CF2             
05334  2CF2  20 72 2B              JSR STRING.GETLENGTH$
05335  2CF5             
05336  2CF5  A5 7E                 LDA STRING.INDEXOF.INDEX$
05337  2CF7  85 80                 STA MATH.SUBTRACT16.MENUEND$
05338  2CF9  A5 7F                 LDA STRING.INDEXOF.INDEX$+1
05339  2CFB  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
05340  2CFD             
05341  2CFD  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05342  2CFF  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
05343  2D01  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05344  2D03  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
05345  2D05             
05346  2D05  20 96 28              JSR MATH.SUBTRACT16$
05347  2D08             
05348  2D08  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
05349  2D0A  85 7E                 STA STRING.INDEXOF.INDEX$
05350  2D0C  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
05351  2D0E  85 7F                 STA STRING.INDEXOF.INDEX$+1
05352  2D10             
05353  2D10             @END
05354  2D10  60                    RTS
05355  2D11             
05356  2D11             STRING.CONCAT.SRCADDRESS1$ = $E0 ; 2 BYTES
05357  2D11             STRING.CONCAT.SRCADDRESS2$ = $E2 ; 2 BYTES
05358  2D11             STRING.CONCAT.DSTADDRESS$ = $7A ; 2 BYTES
05359  2D11             STRING.CONCAT.SRCLENGTH1 = $E4 ; 2 BYTES
05360  2D11             STRING.CONCAT.SRCLENGTH2 = $E6 ; 2 BYTES
05361  2D11             STRING.CONCAT.DSTLENGTH = $E8 ; 2 BYTES
05362  2D11             STRING.CONCAT.ADDRESS = $EA ; 2 BYTES
05363  2D11             STRING.CONCAT$ 
05364  2D11                        ; RETURNS A NEW STRING WHICH CONTAINS THE CONTENTS OF SRCADDRESS1 + SRCADDRESS2
05365  2D11             
05366  2D11                        ; CREATE A NEW STRING WHICH HAS THE LENGTH OF SRCADDRESS1 + SRCADDRESS2
05367  2D11             
05368  2D11                        ; STRING.CONCAT.SRCLENGTH1 = STRING.GETLENGTH$(STRING.CONCAT.SRCADDRESS1$)
05369  2D11  A5 E0                 LDA STRING.CONCAT.SRCADDRESS1$
05370  2D13  85 7A                 STA STRING.GETLENGTH.ADDRESS$
05371  2D15  A5 E1                 LDA STRING.CONCAT.SRCADDRESS1$+1
05372  2D17  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
05373  2D19  20 72 2B              JSR STRING.GETLENGTH$
05374  2D1C  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05375  2D1E  85 E4                 STA STRING.CONCAT.SRCLENGTH1
05376  2D20  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05377  2D22  85 E5                 STA STRING.CONCAT.SRCLENGTH1+1
05378  2D24             
05379  2D24                        ; STRING.CONCAT.SRCLENGTH2 = STRING.GETLENGTH$(STRING.CONCAT.SRCADDRESS2$)
05380  2D24  A5 E2                 LDA STRING.CONCAT.SRCADDRESS2$
05381  2D26  85 7A                 STA STRING.GETLENGTH.ADDRESS$
05382  2D28  A5 E3                 LDA STRING.CONCAT.SRCADDRESS2$+1
05383  2D2A  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
05384  2D2C  20 72 2B              JSR STRING.GETLENGTH$
05385  2D2F  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
05386  2D31  85 E6                 STA STRING.CONCAT.SRCLENGTH2
05387  2D33  A5 FC                 LDA STRING.GETLENGTH.LENGTH$+1
05388  2D35  85 E7                 STA STRING.CONCAT.SRCLENGTH2+1
05389  2D37             
05390  2D37                        ; STRING.CONCAT.DSTLENGTH = STRING.CONCAT.SRCLENGTH1 + STRING.CONCAT.SRCLENGTH2
05391  2D37  A5 E4                 LDA STRING.CONCAT.SRCLENGTH1
05392  2D39  85 80                 STA MATH.ADD16.ADDEND1$
05393  2D3B  A5 E5                 LDA STRING.CONCAT.SRCLENGTH1+1
05394  2D3D  85 81                 STA MATH.ADD16.ADDEND1$+1
05395  2D3F  A5 E6                 LDA STRING.CONCAT.SRCLENGTH2
05396  2D41  85 82                 STA MATH.ADD16.ADDEND2$
05397  2D43  A5 E7                 LDA STRING.CONCAT.SRCLENGTH2+1
05398  2D45  85 83                 STA MATH.ADD16.ADDEND2$+1
05399  2D47  20 00 28              JSR MATH.ADD16$
05400  2D4A  A5 84                 LDA MATH.ADD16.SUM$
05401  2D4C  85 E8                 STA STRING.CONCAT.DSTLENGTH
05402  2D4E  A5 85                 LDA MATH.ADD16.SUM$+1
05403  2D50  85 E9                 STA STRING.CONCAT.DSTLENGTH+1
05404  2D52             
05405  2D52                        ; STRING.CONCAT.DSTADDRESS$ = STRING.CREATE$(STRING.CONCAT.DSTLENGTH, 0)
05406  2D52  A5 E8                 LDA STRING.CONCAT.DSTLENGTH
05407  2D54  85 FB                 STA STRING.CREATE.LENGTH$
05408  2D56  A5 E9                 LDA STRING.CONCAT.DSTLENGTH+1
05409  2D58  85 FC                 STA STRING.CREATE.LENGTH$+1
05410  2D5A  A9 00                 LDA #$00
05411  2D5C  85 02                 STA STRING.CREATE.CHARACTER$
05412  2D5E  20 AD 2A              JSR STRING.CREATE$
05413  2D61  A5 7A                 LDA STRING.CREATE.ADDRESS$
05414  2D63  85 7A                 STA STRING.CONCAT.DSTADDRESS$
05415  2D65  85 EA                 STA STRING.CONCAT.ADDRESS
05416  2D67  A5 7B                 LDA STRING.CREATE.ADDRESS$+1
05417  2D69  85 EB                 STA STRING.CONCAT.ADDRESS+1
05418  2D6B  85 7B                 STA STRING.CONCAT.DSTADDRESS$+1
05419  2D6D             
05420  2D6D                        ; COPY THE CONTENTS FROM SRCADDRESS1 TO DSTADDRESS
05421  2D6D  A5 E0                 LDA STRING.CONCAT.SRCADDRESS1$
05422  2D6F  85 73                 STA MEMORY.COPY16.SOURCE$
05423  2D71  A5 E1                 LDA STRING.CONCAT.SRCADDRESS1$+1
05424  2D73  85 74                 STA MEMORY.COPY16.SOURCE$+1
05425  2D75             
05426  2D75  A5 EA                 LDA STRING.CONCAT.ADDRESS
05427  2D77  85 75                 STA MEMORY.COPY16.DESTINATION$
05428  2D79  A5 EB                 LDA STRING.CONCAT.ADDRESS+1
05429  2D7B  85 76                 STA MEMORY.COPY16.DESTINATION$+1
05430  2D7D             
05431  2D7D  A5 E4                 LDA STRING.CONCAT.SRCLENGTH1
05432  2D7F  85 78                 STA MEMORY.COPY16.LENGTH$
05433  2D81  A5 E5                 LDA STRING.CONCAT.SRCLENGTH1+1
05434  2D83  85 79                 STA MEMORY.COPY16.LENGTH$+1
05435  2D85             
05436  2D85  20 9C 0F              JSR MEMORY.COPY16$
05437  2D88             
05438  2D88                        ; INCREMENT ADDRESS BY SRCLENGTH1
05439  2D88  A5 EA                 LDA STRING.CONCAT.ADDRESS
05440  2D8A  85 80                 STA MATH.ADD16.ADDEND1$
05441  2D8C  85 74                 STA MEMORY.COPY16.SOURCE$+1
05442  2D8E  A5 81                 LDA MATH.ADD16.ADDEND1$+1
05443  2D90                        
05444  2D90  A5 E4                 LDA STRING.CONCAT.SRCLENGTH1
05445  2D92  85 82                 STA MATH.ADD16.ADDEND2$
05446  2D94  A5 E5                 LDA STRING.CONCAT.SRCLENGTH1+1
05447  2D96  85 83                 STA MATH.ADD16.ADDEND2$+1
05448  2D98             
05449  2D98  20 00 28              JSR MATH.ADD16$ ; ADDRESS = ADDRESS + SRCLENGTH1
05450  2D9B             
05451  2D9B  A5 84                 LDA MATH.ADD16.SUM$
05452  2D9D  85 EA                 STA STRING.CONCAT.ADDRESS
05453  2D9F  A5 85                 LDA MATH.ADD16.SUM$+1
05454  2DA1  85 EB                 STA STRING.CONCAT.ADDRESS+1
05455  2DA3             
05456  2DA3                        ; COPY THE CONTENTS FROM SRCADDRESS2 TO DSTADDRESS
05457  2DA3  A5 E2                 LDA STRING.CONCAT.SRCADDRESS2$
05458  2DA5  85 73                 STA MEMORY.COPY16.SOURCE$
05459  2DA7  A5 E3                 LDA STRING.CONCAT.SRCADDRESS2$+1
05460  2DA9  85 74                 STA MEMORY.COPY16.SOURCE$+1
05461  2DAB             
05462  2DAB  A5 EA                 LDA STRING.CONCAT.ADDRESS
05463  2DAD  85 75                 STA MEMORY.COPY16.DESTINATION$
05464  2DAF  85 EB                 STA STRING.CONCAT.ADDRESS+1
05465  2DB1  A5 76                 LDA MEMORY.COPY16.DESTINATION$+1
05466  2DB3             
05467  2DB3  A5 E6                 LDA STRING.CONCAT.SRCLENGTH2
05468  2DB5  85 78                 STA MEMORY.COPY16.LENGTH$
05469  2DB7  A5 E7                 LDA STRING.CONCAT.SRCLENGTH2+1
05470  2DB9  85 79                 STA MEMORY.COPY16.LENGTH$+1
05471  2DBB             
05472  2DBB  20 9C 0F              JSR MEMORY.COPY16$
05473  2DBE             
05474  2DBE  60                    RTS
05475  2DBF             
05476  2DBF             
05477  2DBF             
05478  2DBF             
05479  2DBF             ;ALIGN $100
05480  2DBF             
05481  2DBF             GRAPHICS.MEMORYADDRESS = $6000 ; - $7F3F
05482  2DBF             GRAPHICS.MEMORYADDRESS_2R = $6140
05483  2DBF             GRAPHICS.MEMORYADDRESS_LR = $7E00
05484  2DBF  00 04      GRAPHICS.CURRENTADDRESS WORD CONSOLE.MEMORYADDRESS
05485  2DC1             GRAPHICS.COLORADDRESS = $4400
05486  2DC1  00 44      GRAPHICS.CURRENTCOLORADDR WORD GRAPHICS.COLORADDRESS
05487  2DC3             GRAPHICS.BITMAPCOLORADDRESS = $7F40
05488  2DC3             GRAPHICS.MULTIVIDEOFILE = $7F40
05489  2DC3             GRAPHICS.MULTICOLORFILE = $8328
05490  2DC3             GRAPHICS.MULTIBGCOLORFILE = $8710
05491  2DC3             GRAPHICS.MULTIVIDEOADDRESS = $4400
05492  2DC3             GRAPHICS.MULTICOLORADDRESS = $D800
05493  2DC3             GRAPHICS.MULTIBGCOLORADDRESS = $D021
05494  2DC3             
05495  2DC3             GRAPHICS.IMAGEADDRESS$ = $6000
05496  2DC3             
05497  2DC3             ;TODO CHANGE THE ADDRESSES BELOW ACCORDINGLY:
05498  2DC3             ;GRAPHICS.Y_TABLE_LO              = $C100
05499  2DC3             ;GRAPHICS.Y_TABLE_HI              = $C200
05500  2DC3             ;GRAPHICS.X_TABLE                 = $C300
05501  2DC3             ;GRAPHICS.BITMASK                 = $C400
05502  2DC3             GRAPHICS.Y_TABLE_LO = GRAPHICS.Y_TABLE_LO_ADDRESS
05503  2DC3             GRAPHICS.Y_TABLE_HI = GRAPHICS.Y_TABLE_HI_ADDRESS
05504  2DC3             GRAPHICS.X_TABLE = GRAPHICS.X_TABLE_ADDRESS
05505  2DC3             GRAPHICS.BITMASK = GRAPHICS.BITMASK_ADDRESS
05506  2DC3             
05507  2DC3  00         GRAPHICS.ISACTIVE$ BYTE $00
05508  2DC4             
05509  2DC4             GRAPHICS.ENTER$ 
05510  2DC4  20 96 2E              JSR GRAPHICS.START
05511  2DC7  60                    RTS
05512  2DC8             
05513  2DC8             GRAPHICS.LEAVE$ 
05514  2DC8  20 A6 2E              JSR GRAPHICS.END
05515  2DCB  60                    RTS
05516  2DCC             
05517  2DCC             GRAPHICS.SETBITMAPMODE$ 
05518  2DCC                        ; INDICATE THAT GRAPHICS MODE IS ACTIVE
05519  2DCC  A9 01                 LDA #$01
05520  2DCE  8D C3 2D              STA GRAPHICS.ISACTIVE$
05521  2DD1             
05522  2DD1             ;        LDX #$00
05523  2DD1             ;@LOOP
05524  2DD1             ;        LDA GRAPHICS.BITMAPCOLORADDRESS,X  ; COPY COLOURS TO SCREEN RAM
05525  2DD1             ;        STA GRAPHICS.COLORADDRESS,X
05526  2DD1             ;        LDA GRAPHICS.BITMAPCOLORADDRESS+$100,X
05527  2DD1             ;        STA GRAPHICS.COLORADDRESS+$100,X
05528  2DD1             ;        LDA GRAPHICS.BITMAPCOLORADDRESS+$200,X
05529  2DD1             ;        STA GRAPHICS.COLORADDRESS+$200,X
05530  2DD1             ;        LDA GRAPHICS.BITMAPCOLORADDRESS+$300,X
05531  2DD1             ;        STA GRAPHICS.COLORADDRESS+$300,X
05532  2DD1             ;        DEX
05533  2DD1             ;        BNE @LOOP
05534  2DD1             
05535  2DD1                        ;$DD00 = %XXXXXX11 -> BANK0: $0000-$3FFF
05536  2DD1                        ;$DD00 = %XXXXXX10 -> BANK1: $4000-$7FFF
05537  2DD1                        ;$DD00 = %XXXXXX01 -> BANK2: $8000-$BFFF
05538  2DD1                        ;$DD00 = %XXXXXX00 -> BANK3: $C000-$FFFF
05539  2DD1                        ; DEFAULT: 10010111
05540  2DD1  AD 00 DD              LDA $DD00
05541  2DD4  29 FC                 AND #%11111100
05542  2DD6  09 02                 ORA #%00000010 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
05543  2DD8                        ;ORA #%00000011 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
05544  2DD8  8D 00 DD              STA $DD00
05545  2DDB             
05546  2DDB             ;        ; SET BITMAP MEMORY AT $2000+VIC BANK ADDRESS ($6000)
05547  2DDB             ;        LDA $D018
05548  2DDB             ;        ;ORA #%00001000
05549  2DDB             ;        ORA #%00011000
05550  2DDB             ;        STA $D018
05551  2DDB             
05552  2DDB             ;        ; ENTER STANDARD BITMAP MODE
05553  2DDB             ;        LDA $D011
05554  2DDB             ;        ORA #%00100000
05555  2DDB             ;        STA $D011
05556  2DDB             
05557  2DDB  A9 3B                 LDA #$3B     ; BITMAP MODE
05558  2DDD                        ;LDX #$18     ; MULTI-COLOUR MODE
05559  2DDD  A0 18                 LDY #$18     ; SCREEN AT $0400, BITMAP AT $2000
05560  2DDF  8D 11 D0              STA $D011
05561  2DE2                        ;STX $D016
05562  2DE2  8C 18 D0              STY $D018
05563  2DE5             
05564  2DE5                        ; SET THE SPRITE ADDRESSES BE $4200-$43FF
05565  2DE5  A9 08                 LDA #$08
05566  2DE7  8D F8 47              STA $47F8
05567  2DEA  A9 09                 LDA #$09
05568  2DEC  8D F9 47              STA $47F9
05569  2DEF  A9 0A                 LDA #$0A
05570  2DF1  8D FA 47              STA $47FA
05571  2DF4  A9 0B                 LDA #$0B
05572  2DF6  8D FB 47              STA $47FB
05573  2DF9  A9 0C                 LDA #$0C
05574  2DFB  8D FC 47              STA $47FC
05575  2DFE  A9 0D                 LDA #$0D
05576  2E00  8D FD 47              STA $47FD
05577  2E03  A9 0E                 LDA #$0E
05578  2E05  8D FE 47              STA $47FE
05579  2E08  A9 0F                 LDA #$0F
05580  2E0A  8D FF 47              STA $47FF
05581  2E0D             
05582  2E0D  60                    RTS
05583  2E0E             
05584  2E0E             GRAPHICS.SETHIRESMODE$ 
05585  2E0E  20 CC 2D              JSR GRAPHICS.SETBITMAPMODE$
05586  2E11             
05587  2E11  A2 00                 LDX #$00
05588  2E13             @LOOP
05589  2E13                        ; TRANSFERS VIDEO DATA
05590  2E13  BD 40 7F              LDA GRAPHICS.MULTIVIDEOFILE,X
05591  2E16  9D 00 44              STA GRAPHICS.MULTIVIDEOADDRESS,X
05592  2E19  BD 40 80              LDA GRAPHICS.MULTIVIDEOFILE+$100,X
05593  2E1C  9D 00 45              STA GRAPHICS.MULTIVIDEOADDRESS+$100,X
05594  2E1F  BD 40 81              LDA GRAPHICS.MULTIVIDEOFILE+$200,X
05595  2E22  9D 00 46              STA GRAPHICS.MULTIVIDEOADDRESS+$200,X
05596  2E25  BD 28 82              LDA GRAPHICS.MULTIVIDEOFILE+$2E8,X
05597  2E28  9D E8 46              STA GRAPHICS.MULTIVIDEOADDRESS+$2E8,X
05598  2E2B  E8                    INX
05599  2E2C  D0 E5                 BNE @LOOP
05600  2E2E             
05601  2E2E                        ; DISABLE MULTI-COLOR MODE
05602  2E2E  AD 16 D0              LDA $D016
05603  2E31  29 EF                 AND #%11101111 ; BIT #4: 0 = MULTICOLOR MODE OFF.
05604  2E33  8D 16 D0              STA $D016
05605  2E36             
05606  2E36  60                    RTS
05607  2E37             
05608  2E37             GRAPHICS.SETMULTICOLORMODE$ 
05609  2E37  20 CC 2D              JSR GRAPHICS.SETBITMAPMODE$
05610  2E3A             
05611  2E3A  AD 10 87              LDA GRAPHICS.MULTIBGCOLORFILE
05612  2E3D  8D 21 D0              STA GRAPHICS.MULTIBGCOLORADDRESS ; SCREEN COLOR
05613  2E40             
05614  2E40  A2 00                 LDX #$00
05615  2E42             @LOOP
05616  2E42                        ; TRANSFERS VIDEO DATA
05617  2E42  BD 40 7F              LDA GRAPHICS.MULTIVIDEOFILE,X
05618  2E45  9D 00 44              STA GRAPHICS.MULTIVIDEOADDRESS,X
05619  2E48  BD 40 80              LDA GRAPHICS.MULTIVIDEOFILE+$100,X
05620  2E4B  9D 00 45              STA GRAPHICS.MULTIVIDEOADDRESS+$100,X
05621  2E4E  BD 40 81              LDA GRAPHICS.MULTIVIDEOFILE+$200,X
05622  2E51  9D 00 46              STA GRAPHICS.MULTIVIDEOADDRESS+$200,X
05623  2E54  BD 28 82              LDA GRAPHICS.MULTIVIDEOFILE+$2E8,X
05624  2E57  9D E8 46              STA GRAPHICS.MULTIVIDEOADDRESS+$2E8,X
05625  2E5A                        ; TRANSFERS COLOR DATA
05626  2E5A  BD 28 83              LDA GRAPHICS.MULTICOLORFILE,X
05627  2E5D  9D 00 D8              STA GRAPHICS.MULTICOLORADDRESS,X
05628  2E60  BD 28 84              LDA GRAPHICS.MULTICOLORFILE+$100,X
05629  2E63  9D 00 D9              STA GRAPHICS.MULTICOLORADDRESS+$100,X
05630  2E66  BD 28 85              LDA GRAPHICS.MULTICOLORFILE+$200,X
05631  2E69  9D 00 DA              STA GRAPHICS.MULTICOLORADDRESS+$200,X
05632  2E6C  BD 10 86              LDA GRAPHICS.MULTICOLORFILE+$2E8,X
05633  2E6F  9D E8 DA              STA GRAPHICS.MULTICOLORADDRESS+$2E8,X
05634  2E72  E8                    INX
05635  2E73  D0 CD                 BNE @LOOP
05636  2E75             
05637  2E75                        ; ENABLEMULTI-COLOR MODE
05638  2E75  AD 16 D0              LDA $D016
05639  2E78  09 10                 ORA #%00010000 ; BIT #4: 1 = MULTICOLOR MODE ON.
05640  2E7A  8D 16 D0              STA $D016
05641  2E7D             
05642  2E7D  60                    RTS
05643  2E7E             
05644  2E7E             GRAPHICS.SETTEXTMODE$ 
05645  2E7E                        ; LEAVE STANDARD BITMAP MODE
05646  2E7E  AD 11 D0              LDA $D011
05647  2E81  29 DF                 AND #%11011111
05648  2E83  8D 11 D0              STA $D011
05649  2E86             
05650  2E86                        ;$DD00 = %XXXXXX11 -> BANK0: $0000-$3FFF
05651  2E86                        ;$DD00 = %XXXXXX10 -> BANK1: $4000-$7FFF
05652  2E86                        ;$DD00 = %XXXXXX01 -> BANK2: $8000-$BFFF
05653  2E86                        ;$DD00 = %XXXXXX00 -> BANK3: $C000-$FFFF
05654  2E86                        ; DEFAULT: 10010111
05655  2E86  AD 00 DD              LDA $DD00
05656  2E89  29 FC                 AND #%11111100
05657  2E8B                        ;ORA #%00000010 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
05658  2E8B  09 03                 ORA #%00000011 ;<- YOUR DESIRED VIC BANK VALUE, SEE ABOVE
05659  2E8D  8D 00 DD              STA $DD00
05660  2E90             
05661  2E90                        ; INDICATE THAT GRAPHICS MODE IS INACTIVE
05662  2E90  A9 00                 LDA #$00
05663  2E92  8D C3 2D              STA GRAPHICS.ISACTIVE$
05664  2E95                        
05665  2E95  60                    RTS
05666  2E96             
05667  2E96             GRAPHICS.START 
05668  2E96             
05669  2E96  20 76 13              JSR CONSOLE.CLEAR$
05670  2E99  20 C7 2E              JSR GRAPHICS.CLEAR$
05671  2E9C             
05672  2E9C  20 0E 2E              JSR GRAPHICS.SETHIRESMODE$
05673  2E9F             
05674  2E9F  20 B0 2E              JSR GRAPHICS.SETCOLOR$
05675  2EA2  20 83 2F              JSR GRAPHICS.CREATETABLE
05676  2EA5                        
05677  2EA5  60                    RTS
05678  2EA6             
05679  2EA6             GRAPHICS.END 
05680  2EA6                        ;; SET BITMAP MEMORY AT $2000+VIC BANK ADDRESS ($2000)
05681  2EA6             ;        LDA $D018
05682  2EA6             ;        AND #%11110001
05683  2EA6             ;        ORA #%00000010 ; $0800
05684  2EA6             ;        STA $D018
05685  2EA6             
05686  2EA6  20 76 13              JSR CONSOLE.CLEAR$
05687  2EA9  20 C7 2E              JSR GRAPHICS.CLEAR$
05688  2EAC             
05689  2EAC  20 7E 2E              JSR GRAPHICS.SETTEXTMODE$
05690  2EAF             
05691  2EAF  60                    RTS
05692  2EB0             
05693  2EB0             ;ALIGN $100
05694  2EB0             
05695  2EB0             GRAPHICS.SETCOLOR$ 
05696  2EB0  A2 00                 LDX #$00
05697  2EB2  A9 10                 LDA #$10 ; WHITE ON BLACK
05698  2EB4             @LOOP
05699  2EB4  9D 00 44              STA GRAPHICS.COLORADDRESS,X
05700  2EB7  9D 00 45              STA GRAPHICS.COLORADDRESS+$100,X
05701  2EBA  9D 00 46              STA GRAPHICS.COLORADDRESS+$200,X
05702  2EBD  9D 00 47              STA GRAPHICS.COLORADDRESS+$300,X
05703  2EC0  CA                    DEX
05704  2EC1                        ;BNE @LOOP
05705  2EC1  F0 03                 BEQ @DONE
05706  2EC3  4C B4 2E              JMP @LOOP
05707  2EC6             
05708  2EC6             @DONE
05709  2EC6  60                    RTS
05710  2EC7             
05711  2EC7             GRAPHICS.CLEAR$ 
05712  2EC7  A2 00                 LDX #$00
05713  2EC9  A9 00                 LDA #$00
05714  2ECB             @LOOP
05715  2ECB  9D 00 60              STA GRAPHICS.MEMORYADDRESS,X
05716  2ECE  9D 00 61              STA GRAPHICS.MEMORYADDRESS+$100,X
05717  2ED1  9D 00 62              STA GRAPHICS.MEMORYADDRESS+$200,X
05718  2ED4  9D 00 63              STA GRAPHICS.MEMORYADDRESS+$300,X
05719  2ED7  9D 00 64              STA GRAPHICS.MEMORYADDRESS+$400,X
05720  2EDA  9D 00 65              STA GRAPHICS.MEMORYADDRESS+$500,X
05721  2EDD  9D 00 66              STA GRAPHICS.MEMORYADDRESS+$600,X
05722  2EE0  9D 00 67              STA GRAPHICS.MEMORYADDRESS+$700,X
05723  2EE3  9D 00 68              STA GRAPHICS.MEMORYADDRESS+$800,X
05724  2EE6  9D 00 69              STA GRAPHICS.MEMORYADDRESS+$900,X
05725  2EE9  9D 00 6A              STA GRAPHICS.MEMORYADDRESS+$A00,X
05726  2EEC  9D 00 6B              STA GRAPHICS.MEMORYADDRESS+$B00,X
05727  2EEF  9D 00 6C              STA GRAPHICS.MEMORYADDRESS+$C00,X
05728  2EF2  9D 00 6D              STA GRAPHICS.MEMORYADDRESS+$D00,X
05729  2EF5  9D 00 6E              STA GRAPHICS.MEMORYADDRESS+$E00,X
05730  2EF8  9D 00 6F              STA GRAPHICS.MEMORYADDRESS+$F00,X
05731  2EFB  9D 00 70              STA GRAPHICS.MEMORYADDRESS+$1000,X
05732  2EFE  9D 00 71              STA GRAPHICS.MEMORYADDRESS+$1100,X
05733  2F01  9D 00 72              STA GRAPHICS.MEMORYADDRESS+$1200,X
05734  2F04  9D 00 73              STA GRAPHICS.MEMORYADDRESS+$1300,X
05735  2F07  9D 00 74              STA GRAPHICS.MEMORYADDRESS+$1400,X
05736  2F0A  9D 00 75              STA GRAPHICS.MEMORYADDRESS+$1500,X
05737  2F0D  9D 00 76              STA GRAPHICS.MEMORYADDRESS+$1600,X
05738  2F10  9D 00 77              STA GRAPHICS.MEMORYADDRESS+$1700,X
05739  2F13  9D 00 78              STA GRAPHICS.MEMORYADDRESS+$1800,X
05740  2F16  9D 00 79              STA GRAPHICS.MEMORYADDRESS+$1900,X
05741  2F19  9D 00 7A              STA GRAPHICS.MEMORYADDRESS+$1A00,X
05742  2F1C  9D 00 7B              STA GRAPHICS.MEMORYADDRESS+$1B00,X
05743  2F1F  9D 00 7C              STA GRAPHICS.MEMORYADDRESS+$1C00,X
05744  2F22  9D 00 7D              STA GRAPHICS.MEMORYADDRESS+$1D00,X
05745  2F25  9D 00 7E              STA GRAPHICS.MEMORYADDRESS+$1E00,X
05746  2F28  9D 00 7F              STA GRAPHICS.MEMORYADDRESS+$1F00,X
05747  2F2B             
05748  2F2B  9D 00 80              STA GRAPHICS.MEMORYADDRESS+$2000,X
05749  2F2E  9D 00 81              STA GRAPHICS.MEMORYADDRESS+$2100,X
05750  2F31  9D 00 82              STA GRAPHICS.MEMORYADDRESS+$2200,X
05751  2F34  9D 00 83              STA GRAPHICS.MEMORYADDRESS+$2300,X
05752  2F37             
05753  2F37  9D 00 84              STA GRAPHICS.MEMORYADDRESS+$2400,X
05754  2F3A  9D 00 85              STA GRAPHICS.MEMORYADDRESS+$2500,X
05755  2F3D  9D 00 86              STA GRAPHICS.MEMORYADDRESS+$2600,X
05756  2F40  9D 00 87              STA GRAPHICS.MEMORYADDRESS+$2700,X
05757  2F43  CA                    DEX
05758  2F44                        ;BNE @LOOP
05759  2F44  F0 03                 BEQ @DONE
05760  2F46  4C CB 2E              JMP @LOOP
05761  2F49             @DONE
05762  2F49             
05763  2F49  A9 00                 LDA #COLOR.BLACK$
05764  2F4B  8D 21 D0              STA GRAPHICS.MULTIBGCOLORADDRESS
05765  2F4E             
05766  2F4E  A2 00                 LDX #$00
05767  2F50  A9 00                 LDA #COLOR.BLACK$
05768  2F52             @LOOP2
05769  2F52                        ; TRANSFERS VIDEO DATA
05770  2F52  9D 00 44              STA GRAPHICS.MULTIVIDEOADDRESS,X
05771  2F55  9D 00 45              STA GRAPHICS.MULTIVIDEOADDRESS+$100,X
05772  2F58  9D 00 46              STA GRAPHICS.MULTIVIDEOADDRESS+$200,X
05773  2F5B  9D E8 46              STA GRAPHICS.MULTIVIDEOADDRESS+$2E8,X
05774  2F5E                        ; TRANSFERS COLOR DATA
05775  2F5E  9D 00 D8              STA GRAPHICS.MULTICOLORADDRESS,X
05776  2F61  9D 00 D9              STA GRAPHICS.MULTICOLORADDRESS+$100,X
05777  2F64  9D 00 DA              STA GRAPHICS.MULTICOLORADDRESS+$200,X
05778  2F67  9D E8 DA              STA GRAPHICS.MULTICOLORADDRESS+$2E8,X
05779  2F6A  E8                    INX
05780  2F6B  D0 E5                 BNE @LOOP2
05781  2F6D             
05782  2F6D  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS
05783  2F6F  8D BF 2D              STA GRAPHICS.CURRENTADDRESS
05784  2F72  A9 60                 LDA #>GRAPHICS.MEMORYADDRESS
05785  2F74  8D C0 2D              STA GRAPHICS.CURRENTADDRESS+1
05786  2F77             
05787  2F77  A9 00                 LDA #<GRAPHICS.COLORADDRESS
05788  2F79  8D C1 2D              STA GRAPHICS.CURRENTCOLORADDR
05789  2F7C  A9 44                 LDA #>GRAPHICS.COLORADDRESS
05790  2F7E  8D C2 2D              STA GRAPHICS.CURRENTCOLORADDR+1
05791  2F81             
05792  2F81  60                    RTS
05793  2F82             
05794  2F82  00         GRAPHICS.TABLECREATED BYTE $00
05795  2F83             
05796  2F83             ;ALIGN $100
05797  2F83             
05798  2F83             GRAPHICS.CREATETABLE 
05799  2F83  AD 82 2F              LDA GRAPHICS.TABLECREATED
05800  2F86  F0 01                 BEQ @NEEDTOCREATE
05801  2F88  60                    RTS
05802  2F89             @NEEDTOCREATE 
05803  2F89  A9 01                 LDA #$01
05804  2F8B  8D 82 2F              STA GRAPHICS.TABLECREATED
05805  2F8E             
05806  2F8E  18                    CLC ; NEED TO CLEAR THE CARRY FLAG
05807  2F8F  A2 00                 LDX #$00
05808  2F91  A9 80                 LDA #$80
05809  2F93             @LOOP1
05810  2F93  9D 00 0D              STA GRAPHICS.BITMASK,X
05811  2F96  6A                    ROR
05812  2F97  90 01                 BCC @SKIP1
05813  2F99  6A                    ROR
05814  2F9A             @SKIP1
05815  2F9A  A8                    TAY
05816  2F9B  8A                    TXA
05817  2F9C  29 F8                 AND #%11111000
05818  2F9E  9D 00 0C              STA GRAPHICS.X_TABLE,X
05819  2FA1  98                    TYA
05820  2FA2  E8                    INX
05821  2FA3  D0 EE                 BNE @LOOP1
05822  2FA5             
05823  2FA5  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS ; CAN BE REPLACED WITH A TXA IF GFX_MEM IS PAGE ALIGNED
05824  2FA7             @LOOP2
05825  2FA7  A0 07                 LDY #$07
05826  2FA9             @LOOP3
05827  2FA9  9D 00 0A              STA GRAPHICS.Y_TABLE_LO,X
05828  2FAC  48                    PHA
05829  2FAD             @SMC1
05830  2FAD  A9 60                 LDA #>GRAPHICS.MEMORYADDRESS
05831  2FAF  9D 00 0B              STA GRAPHICS.Y_TABLE_HI,X
05832  2FB2  68                    PLA
05833  2FB3  E8                    INX
05834  2FB4  18                    CLC
05835  2FB5  69 01                 ADC #$01
05836  2FB7  88                    DEY
05837  2FB8  10 EF                 BPL @LOOP3
05838  2FBA  EE AE 2F              INC @SMC1+1
05839  2FBD  18                    CLC
05840  2FBE                        ;ADC #$40
05841  2FBE  69 38                 ADC #$38
05842  2FC0  90 03                 BCC @SKIP2
05843  2FC2  EE AE 2F              INC @SMC1+1
05844  2FC5             @SKIP2
05845  2FC5  E0 C8                 CPX #8*25
05846  2FC7  D0 DE                 BNE @LOOP2
05847  2FC9  60                    RTS
05848  2FCA             
05849  2FCA             ;ALIGN $100
05850  2FCA             
05851  2FCA             GRAPHICS.DRAWCHR.CHRADDRESS = $20 ; 2 BYTES
05852  2FCA             GRAPHICS.DRAWCHR.BMPADDRESS = $22 ; 2 BYTES
05853  2FCA             GRAPHICS.DRAWCHR.COL_OFFSET = $24 ; 2 BYTES
05854  2FCA             GRAPHICS.DRAWCHR.ROW_OFFSET = $26 ; 2 BYTES
05855  2FCA             GRAPHICS.DRAWCHR.CHR = $28 ; 1 BYTE
05856  2FCA             GRAPHICS.DRAWCHR 
05857  2FCA             
05858  2FCA  85 28                 STA GRAPHICS.DRAWCHR.CHR
05859  2FCC  AD C3 2D              LDA GRAPHICS.ISACTIVE$
05860  2FCF  C9 01                 CMP #$01
05861  2FD1  F0 01                 BEQ @OKTODRAWCHR
05862  2FD3                        ;LDA GRAPHICS.DRAWCHR.CHR
05863  2FD3  60                    RTS
05864  2FD4             @OKTODRAWCHR 
05865  2FD4             
05866  2FD4                        ; SET THE CHARACTER COLOR
05867  2FD4                        ; ADDRESS = CONSOLE.CURRENTADDRESS + $4000 (2ND BANK)
05868  2FD4  AD EE 12              LDA CONSOLE.CURRENTADDRESS
05869  2FD7  85 80                 STA MATH.ADD16.ADDEND1$
05870  2FD9  AD EF 12              LDA CONSOLE.CURRENTADDRESS+1
05871  2FDC  85 81                 STA MATH.ADD16.ADDEND1$+1
05872  2FDE  A9 00                 LDA #$00
05873  2FE0  85 82                 STA MATH.ADD16.ADDEND2$
05874  2FE2  A9 40                 LDA #$40
05875  2FE4  85 83                 STA MATH.ADD16.ADDEND2$+1
05876  2FE6  20 00 28              JSR MATH.ADD16$
05877  2FE9  A5 84                 LDA MATH.ADD16.SUM$
05878  2FEB  85 20                 STA GRAPHICS.DRAWCHR.CHRADDRESS
05879  2FED  A5 85                 LDA MATH.ADD16.SUM$+1
05880  2FEF  85 21                 STA GRAPHICS.DRAWCHR.CHRADDRESS+1
05881  2FF1  A0 00                 LDY #$00
05882  2FF3  AD F4 12              LDA CONSOLE.CHARACTERCOLOR
05883  2FF6  C9 80                 CMP #$80
05884  2FF8  2A                    ROL
05885  2FF9  C9 80                 CMP #$80
05886  2FFB  2A                    ROL
05887  2FFC  C9 80                 CMP #$80
05888  2FFE  2A                    ROL
05889  2FFF  C9 80                 CMP #$80
05890  3001  2A                    ROL
05891  3002  91 20                 STA (GRAPHICS.DRAWCHR.CHRADDRESS),Y
05892  3004             
05893  3004             TODO       CREATE TABLE TO LOOK UP THE CHARACTERMAP ADDRESS BY CONSOLE.WRITECHR.CHAR$
05894  3004                        ; GET THE MEMORY ADDRESS OF THE CHARACTER
05895  3004                        ; ADDRESS = FONT.MEMORYADDRESS + (CHR * 8)
05896  3004  A5 28                 LDA GRAPHICS.DRAWCHR.CHR
05897  3006  85 80                 STA MATH.MULTIPLY16.FACTOR1$
05898  3008  A9 08                 LDA #$08
05899  300A  85 82                 STA MATH.MULTIPLY16.FACTOR2$
05900  300C  A9 00                 LDA #$00
05901  300E  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
05902  3010  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
05903  3012  20 67 29              JSR MATH.MULTIPLY16$
05904  3015             
05905  3015  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
05906  3017  85 82                 STA MATH.ADD16.ADDEND2$
05907  3019  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
05908  301B  85 83                 STA MATH.ADD16.ADDEND2$+1
05909  301D  A9 00                 LDA #<FONT.MEMORYADDRESS
05910  301F  85 80                 STA MATH.ADD16.ADDEND1$
05911  3021  A9 20                 LDA #>FONT.MEMORYADDRESS
05912  3023  85 81                 STA MATH.ADD16.ADDEND1$+1
05913  3025  20 00 28              JSR MATH.ADD16$
05914  3028             
05915  3028  A5 84                 LDA MATH.ADD16.SUM$
05916  302A  85 20                 STA GRAPHICS.DRAWCHR.CHRADDRESS
05917  302C  A5 85                 LDA MATH.ADD16.SUM$+1
05918  302E  85 21                 STA GRAPHICS.DRAWCHR.CHRADDRESS+1
05919  3030             
05920  3030                        ; GET THE MEMORY ADDRESS OF THE SCREEN
05921  3030                        ; ADDRESS = GRAPHICS.MEMORYADDRESS + (COL * 8) + (ROW * 320)
05922  3030             
05923  3030                        ; COL_OFFSET = CURRENTCOLUMN * 8
05924  3030  AD F0 12              LDA CONSOLE.CURRENTCOLUMN
05925  3033  85 80                 STA MATH.MULTIPLY16.FACTOR1$
05926  3035  A9 08                 LDA #$08
05927  3037  85 82                 STA MATH.MULTIPLY16.FACTOR2$
05928  3039  A9 00                 LDA #$00
05929  303B  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
05930  303D  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
05931  303F  20 67 29              JSR MATH.MULTIPLY16$
05932  3042  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
05933  3044  85 24                 STA GRAPHICS.DRAWCHR.COL_OFFSET
05934  3046  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
05935  3048  85 25                 STA GRAPHICS.DRAWCHR.COL_OFFSET+1
05936  304A             
05937  304A                        ; ROW_OFFSET = CURRENTROW * 320
05938  304A  AD F1 12              LDA CONSOLE.CURRENTROW
05939  304D  85 80                 STA MATH.MULTIPLY16.FACTOR1$
05940  304F  A9 00                 LDA #$00
05941  3051  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
05942  3053  A9 40                 LDA #$40
05943  3055  85 82                 STA MATH.MULTIPLY16.FACTOR2$
05944  3057  A9 01                 LDA #$01
05945  3059  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
05946  305B  20 67 29              JSR MATH.MULTIPLY16$
05947  305E  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
05948  3060  85 26                 STA GRAPHICS.DRAWCHR.ROW_OFFSET
05949  3062  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
05950  3064  85 27                 STA GRAPHICS.DRAWCHR.ROW_OFFSET+1
05951  3066                        
05952  3066                        ; SUM = ROW_OFFSET + COL_OFFSET
05953  3066  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
05954  3068  85 82                 STA MATH.ADD16.ADDEND2$
05955  306A  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
05956  306C  85 83                 STA MATH.ADD16.ADDEND2$+1
05957  306E  A5 24                 LDA GRAPHICS.DRAWCHR.COL_OFFSET
05958  3070  85 80                 STA MATH.ADD16.ADDEND1$
05959  3072  A5 25                 LDA GRAPHICS.DRAWCHR.COL_OFFSET+1
05960  3074  85 81                 STA MATH.ADD16.ADDEND1$+1
05961  3076  20 00 28              JSR MATH.ADD16$
05962  3079             
05963  3079                        ; BMPADDRESS = SUM + GRAPHICS.MEMORYADDRESS
05964  3079  A5 84                 LDA MATH.ADD16.SUM$
05965  307B  85 82                 STA MATH.ADD16.ADDEND2$
05966  307D  A5 85                 LDA MATH.ADD16.SUM$+1
05967  307F  85 83                 STA MATH.ADD16.ADDEND2$+1
05968  3081  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS
05969  3083  85 80                 STA MATH.ADD16.ADDEND1$
05970  3085  A9 60                 LDA #>GRAPHICS.MEMORYADDRESS
05971  3087  85 81                 STA MATH.ADD16.ADDEND1$+1
05972  3089  20 00 28              JSR MATH.ADD16$
05973  308C             
05974  308C  A5 84                 LDA MATH.ADD16.SUM$
05975  308E  85 22                 STA GRAPHICS.DRAWCHR.BMPADDRESS
05976  3090  A5 85                 LDA MATH.ADD16.SUM$+1
05977  3092  85 23                 STA GRAPHICS.DRAWCHR.BMPADDRESS+1
05978  3094             
05979  3094                        ; COPY THE CHARACTER TO THE SCREEN
05980  3094  A5 20                 LDA GRAPHICS.DRAWCHR.CHRADDRESS
05981  3096  85 73                 STA MEMORY.COPY.SOURCE$
05982  3098  A5 21                 LDA GRAPHICS.DRAWCHR.CHRADDRESS+1
05983  309A  85 74                 STA MEMORY.COPY.SOURCE$+1
05984  309C  A5 22                 LDA GRAPHICS.DRAWCHR.BMPADDRESS
05985  309E  85 75                 STA MEMORY.COPY.DESTINATION$
05986  30A0  A5 23                 LDA GRAPHICS.DRAWCHR.BMPADDRESS+1
05987  30A2  85 76                 STA MEMORY.COPY.DESTINATION$+1
05988  30A4  A9 08                 LDA #$08
05989  30A6  85 77                 STA MEMORY.COPY.LENGTH$
05990  30A8  20 8A 0F              JSR MEMORY.COPY$
05991  30AB             
05992  30AB                        ;LDA GRAPHICS.DRAWCHR.CHR
05993  30AB             
05994  30AB  60                    RTS
05995  30AC             
05996  30AC             GRAPHICS.SCROLLUP 
05997  30AC             
05998  30AC  85 28                 STA GRAPHICS.DRAWCHR.CHR
05999  30AE  AD C3 2D              LDA GRAPHICS.ISACTIVE$
06000  30B1  C9 01                 CMP #$01
06001  30B3  F0 01                 BEQ @OKTOSCROLLUP
06002  30B5  60                    RTS
06003  30B6             @OKTOSCROLLUP 
06004  30B6             
06005  30B6                        ; COPY THE CHARACTERS FROM THE 2ND ROW AND OVERRIDE THE FIRST ROW.
06006  30B6                        ; CLEAR OUT THE TEXT ON THE LAST ROW.
06007  30B6  A9 40                 LDA #<GRAPHICS.MEMORYADDRESS_2R
06008  30B8  85 73                 STA MEMORY.COPY16.SOURCE$
06009  30BA  A9 61                 LDA #>GRAPHICS.MEMORYADDRESS_2R
06010  30BC  85 74                 STA MEMORY.COPY16.SOURCE$+1
06011  30BE  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS
06012  30C0  85 75                 STA MEMORY.COPY16.DESTINATION$
06013  30C2  A9 60                 LDA #>GRAPHICS.MEMORYADDRESS
06014  30C4  85 76                 STA MEMORY.COPY16.DESTINATION$+1
06015  30C6  A9 00                 LDA #$00
06016  30C8  85 78                 STA MEMORY.COPY16.LENGTH$
06017  30CA  A9 1E                 LDA #$1E
06018  30CC  85 79                 STA MEMORY.COPY16.LENGTH$+1
06019  30CE  20 9C 0F              JSR MEMORY.COPY16$
06020  30D1             
06021  30D1                        ; NEED TO "SCROLL" UP THE CHARACTER COLORS AS WELL
06022  30D1  A9 28                 LDA #<GRAPHICS.COLORADDRESS+$28
06023  30D3  85 73                 STA MEMORY.COPY16.SOURCE$
06024  30D5  A9 44                 LDA #>GRAPHICS.COLORADDRESS
06025  30D7  85 74                 STA MEMORY.COPY16.SOURCE$+1
06026  30D9  A9 00                 LDA #<GRAPHICS.COLORADDRESS
06027  30DB  85 75                 STA MEMORY.COPY16.DESTINATION$
06028  30DD  A9 44                 LDA #>GRAPHICS.COLORADDRESS
06029  30DF  85 76                 STA MEMORY.COPY16.DESTINATION$+1
06030  30E1  A9 C0                 LDA #$C0
06031  30E3  85 78                 STA MEMORY.COPY16.LENGTH$
06032  30E5  A9 03                 LDA #$03
06033  30E7  85 79                 STA MEMORY.COPY16.LENGTH$+1
06034  30E9  20 9C 0F              JSR MEMORY.COPY16$
06035  30EC             
06036  30EC                        ; CLEAR THE LAST LINE
06037  30EC  A9 00                 LDA #<GRAPHICS.MEMORYADDRESS_LR
06038  30EE  85 73                 STA MEMORY.FILL16.ADDRESS$
06039  30F0  A9 7E                 LDA #>GRAPHICS.MEMORYADDRESS_LR
06040  30F2  85 74                 STA MEMORY.FILL16.ADDRESS$+1
06041  30F4  A9 00                 LDA #$00
06042  30F6  85 75                 STA MEMORY.FILL16.VALUE$
06043  30F8  A9 40                 LDA #$40
06044  30FA  85 77                 STA MEMORY.FILL16.LENGTH$
06045  30FC  A9 01                 LDA #$01
06046  30FE  85 78                 STA MEMORY.FILL16.LENGTH$+1
06047  3100  20 15 10              JSR MEMORY.FILL16$
06048  3103  20 15 10              JSR MEMORY.FILL16$
06049  3106             
06050  3106  60                    RTS
06051  3107             
06052  3107             ;GRAPHICS.SCROLLUPCHRS
06053  3107             ;        LDX #$00
06054  3107             ;@LOOP1 ; DO PROCESS 4 TIMES (6*4 = 24)
06055  3107             ;        LDY #$00
06056  3107             ;@LOOP2 ; MOVE UP 6 LINES
06057  3107             ;        LDA ($FD),Y
06058  3107             ;        STA ($FB),Y
06059  3107             ;        INY
06060  3107             ;        CPY #240 ; (40*6)
06061  3107             ;        BNE @LOOP2
06062  3107             
06063  3107             ;        INX
06064  3107             ;        CPX #4
06065  3107             ;        BNE @INCR
06066  3107             ;        JMP @DONE
06067  3107             
06068  3107             ;@INCR
06069  3107             ;        ; NEED TO INCREASE THE VALUE OF THE ADDRESS THAT $FB AND $FD ARE POINTING TO.
06070  3107             ;        LDA $FB
06071  3107             ;        STA MATH.ADD16.ADDEND1$
06072  3107             ;        LDA $FC
06073  3107             ;        STA MATH.ADD16.ADDEND1$+1
06074  3107             
06075  3107             ;        LDA #240
06076  3107             ;        STA MATH.ADD16.ADDEND2$
06077  3107             ;        LDA #0
06078  3107             ;        STA MATH.ADD16.ADDEND2$+1
06079  3107             
06080  3107             ;        JSR MATH.ADD16$ ; ($FB+$FC) = ($FB+$FC) + $28
06081  3107             
06082  3107             ;        LDA MATH.ADD16.SUM$
06083  3107             ;        STA $FB
06084  3107             ;        LDA MATH.ADD16.SUM$+1
06085  3107             ;        STA $FC
06086  3107             
06087  3107             ;        LDA $FD
06088  3107             ;        STA MATH.ADD16.ADDEND1$
06089  3107             ;        LDA $FE
06090  3107             ;        STA MATH.ADD16.ADDEND1$+1
06091  3107             
06092  3107             ;        LDA #240
06093  3107             ;        STA MATH.ADD16.ADDEND2$
06094  3107             ;        LDA #0
06095  3107             ;        STA MATH.ADD16.ADDEND2$+1
06096  3107             
06097  3107             ;        JSR MATH.ADD16$ ; ($FD+$FE) = ($FD+$FE) + $28
06098  3107             
06099  3107             ;        LDA MATH.ADD16.SUM$
06100  3107             ;        STA $FD
06101  3107             ;        LDA MATH.ADD16.SUM$+1
06102  3107             ;        STA $FE
06103  3107             
06104  3107             ;        JMP @LOOP1
06105  3107             ;@DONE
06106  3107             
06107  3107             ;        RTS
06108  3107             
06109  3107             
06110  3107             ;ALIGN $100
06111  3107             
06112  3107             GRAPHICS.SETPIXEL.X$ = $20 ; 2 BYTES
06113  3107             GRAPHICS.SETPIXEL.Y$ = $22 ; 2 BYTES
06114  3107             GRAPHICS.SETPIXEL.COLOR$ = $24 ; 1 BYTE
06115  3107             GRAPHICS.SETPIXEL$ 
06116  3107  A6 20                 LDX GRAPHICS.SETPIXEL.X$
06117  3109  A4 22                 LDY GRAPHICS.SETPIXEL.Y$
06118  310B  A5 21                 LDA GRAPHICS.SETPIXEL.X$+1
06119  310D             ;        CMP #$01
06120  310D             ;        BNE @PLOT
06121  310D             ;        SEC
06122  310D             
06123  310D             ;@PLOT
06124  310D             ;        LDA GRAPHICS.Y_TABLE_HI,Y
06125  310D             ;        BCC @SKIP
06126  310D             ;        ADC #$00      ; ADDS 1 (256 PIXELS) TO HIBYTE
06127  310D             ;@SKIP
06128  310D             ;        STA $FC
06129  310D  18                    CLC
06130  310E  B9 00 0B              LDA GRAPHICS.Y_TABLE_HI,Y
06131  3111  65 21                 ADC GRAPHICS.SETPIXEL.X$+1
06132  3113  85 FC                 STA $FC
06133  3115             
06134  3115  B9 00 0A              LDA GRAPHICS.Y_TABLE_LO,Y
06135  3118  85 FB                 STA $FB
06136  311A  BC 00 0C              LDY GRAPHICS.X_TABLE,X
06137  311D             
06138  311D  A5 24                 LDA GRAPHICS.SETPIXEL.COLOR$
06139  311F  C9 01                 CMP #$01
06140  3121  F0 0A                 BEQ @SET
06141  3123             
06142  3123                        ;LDA #$FF
06143  3123                        ;SEC
06144  3123                        ;SBC GRAPHICS.BITMASK,X
06145  3123  BD 00 0D              LDA GRAPHICS.BITMASK,X
06146  3126  49 FF                 EOR #$FF
06147  3128  31 FB                 AND ($FB),Y
06148  312A  91 FB                 STA ($FB),Y
06149  312C             
06150  312C  60                    RTS
06151  312D             
06152  312D             @SET
06153  312D  BD 00 0D              LDA GRAPHICS.BITMASK,X
06154  3130  11 FB                 ORA ($FB),Y
06155  3132  91 FB                 STA ($FB),Y
06156  3134             
06157  3134  60                    RTS
06158  3135             
06159  3135             
06160  3135             GRAPHICS.DRAWFILL.COLOR$ = $24 ; 1 BYTE
06161  3135             GRAPHICS.DRAWFILL.X1$ = $25 ; 2 BYTES
06162  3135             GRAPHICS.DRAWFILL.Y1$ = $27 ; 2 BYTES
06163  3135             GRAPHICS.DRAWFILL.X2$ = $29 ; 2 BYTES
06164  3135             GRAPHICS.DRAWFILL.Y2$ = $2B ; 2 BYTES
06165  3135             GRAPHICS.DRAWFILL.Y = $2D ; 2 BYTES
06166  3135             GRAPHICS.DRAWFILL$ 
06167  3135                        ; DRAW LINES WHICH FILLS A BOX
06168  3135             
06169  3135                        ; INITILIZE Y = Y1
06170  3135  A5 27                 LDA GRAPHICS.DRAWFILL.Y1$
06171  3137  85 2D                 STA GRAPHICS.DRAWFILL.Y
06172  3139  A5 28                 LDA GRAPHICS.DRAWFILL.Y1$+1
06173  313B  85 2E                 STA GRAPHICS.DRAWFILL.Y+1
06174  313D             
06175  313D             @DRAWLINE
06176  313D                        ; DRAW LINE
06177  313D  A5 25                 LDA GRAPHICS.DRAWFILL.X1$
06178  313F  85 D0                 STA GRAPHICS.DRAWLINE.X1$
06179  3141  A5 26                 LDA GRAPHICS.DRAWFILL.X1$+1
06180  3143  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
06181  3145  A5 2D                 LDA GRAPHICS.DRAWFILL.Y
06182  3147  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
06183  3149  A5 2E                 LDA GRAPHICS.DRAWFILL.Y+1
06184  314B  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
06185  314D  A5 29                 LDA GRAPHICS.DRAWFILL.X2$
06186  314F  85 D4                 STA GRAPHICS.DRAWLINE.X2$
06187  3151  A5 2A                 LDA GRAPHICS.DRAWFILL.X2$+1
06188  3153  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
06189  3155  A5 2D                 LDA GRAPHICS.DRAWFILL.Y
06190  3157  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
06191  3159  A5 2E                 LDA GRAPHICS.DRAWFILL.Y+1
06192  315B  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
06193  315D  20 84 31              JSR GRAPHICS.DRAWLINE$
06194  3160             
06195  3160  A5 2D                 LDA GRAPHICS.DRAWFILL.Y
06196  3162  85 80                 STA MATH.CMP16.NUM1$
06197  3164  A5 2E                 LDA GRAPHICS.DRAWFILL.Y+1
06198  3166  85 81                 STA MATH.CMP16.NUM1$+1
06199  3168  A5 2B                 LDA GRAPHICS.DRAWFILL.Y2$
06200  316A  85 82                 STA MATH.CMP16.NUM2$
06201  316C  A5 2C                 LDA GRAPHICS.DRAWFILL.Y2$+1
06202  316E  85 83                 STA MATH.CMP16.NUM2$+1
06203  3170  20 E4 28              JSR MATH.CMP16$
06204  3173  D0 01                 BNE @INCY ; IF Y <> Y2 THEN @INCY
06205  3175  60                    RTS
06206  3176             @INCY
06207  3176                        ; INCREMENT Y
06208  3176  A9 2D                 LDA #<GRAPHICS.DRAWFILL.Y
06209  3178  85 86                 STA MATH.INC16.ADDRESS$
06210  317A  A9 00                 LDA #>GRAPHICS.DRAWFILL.Y
06211  317C  85 87                 STA MATH.INC16.ADDRESS$+1
06212  317E  20 3C 28              JSR MATH.INC16$ ; Y = Y + 1
06213  3181                        
06214  3181  4C 3D 31              JMP @DRAWLINE
06215  3184                        ;RTS
06216  3184             
06217  3184             ;ALIGN $100
06218  3184             
06219  3184             GRAPHICS.DRAWLINE.X = $E0 ; 2 BYTES
06220  3184             GRAPHICS.DRAWLINE.Y = $E2 ; 2 BYTES
06221  3184             GRAPHICS.DRAWLINE.COLOR$ = $24 ; 1 BYTE
06222  3184             GRAPHICS.DRAWLINE.X1$ = $D0 ; 2 BYTES
06223  3184             GRAPHICS.DRAWLINE.Y1$ = $D2 ; 2 BYTES
06224  3184             GRAPHICS.DRAWLINE.X2$ = $D4 ; 2 BYTES
06225  3184             GRAPHICS.DRAWLINE.Y2$ = $D6 ; 2 BYTES
06226  3184             GRAPHICS.DRAWLINE.DX = $D8 ; 2 BYTES
06227  3184             GRAPHICS.DRAWLINE.DY = $DA ; 2 BYTES
06228  3184             GRAPHICS.DRAWLINE.STEEP = $DC ; 1 BYTES
06229  3184             GRAPHICS.DRAWLINE.X1_X2 = $E4 ; 2 BYTES
06230  3184             GRAPHICS.DRAWLINE.Y1_Y2 = $E6 ; 2 BYTES
06231  3184             GRAPHICS.DRAWLINE.DERROR2 = $E8 ; 2 BYTES
06232  3184             GRAPHICS.DRAWLINE.ERROR2 = $EA ; 2 BYTES
06233  3184             GRAPHICS.DRAWLINE.Y_OFFSET = $EC ; 2 BYTES
06234  3184             GRAPHICS.DRAWLINE.DX_2 = $EE ; 2 BYTES
06235  3184             GRAPHICS.DRAWLINE$ 
06236  3184             ; D:\TEST\LINE1\LINE1.VBP
06237  3184             
06238  3184             ;    STEEP = FALSE
06239  3184  A9 00                 LDA #$00
06240  3186  85 DC                 STA GRAPHICS.DRAWLINE.STEEP
06241  3188             
06242  3188             ;    IF (ABS(X1 - X2) < ABS(Y1 - Y2)) THEN
06243  3188  A5 D0                 LDA GRAPHICS.DRAWLINE.X1$
06244  318A  85 80                 STA MATH.SUBTRACT16.MENUEND$
06245  318C  A5 D1                 LDA GRAPHICS.DRAWLINE.X1$+1
06246  318E  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06247  3190  A5 D4                 LDA GRAPHICS.DRAWLINE.X2$
06248  3192  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06249  3194  A5 D5                 LDA GRAPHICS.DRAWLINE.X2$+1
06250  3196  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06251  3198  20 96 28              JSR MATH.SUBTRACT16$ ; DIFFERENCE = X1 - X2
06252  319B             
06253  319B  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06254  319D  85 80                 STA MATH.ABS16.INTEGER$
06255  319F  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06256  31A1  85 81                 STA MATH.ABS16.INTEGER$+1
06257  31A3  20 73 2A              JSR MATH.ABS16$ ; X1_X2 = ABS(DIFFERENCE)
06258  31A6                        
06259  31A6  A5 84                 LDA MATH.ABS16.VALUE$
06260  31A8  85 E4                 STA GRAPHICS.DRAWLINE.X1_X2
06261  31AA  A5 85                 LDA MATH.ABS16.VALUE$+1
06262  31AC  85 E5                 STA GRAPHICS.DRAWLINE.X1_X2+1
06263  31AE             
06264  31AE  A5 D2                 LDA GRAPHICS.DRAWLINE.Y1$
06265  31B0  85 80                 STA MATH.SUBTRACT16.MENUEND$
06266  31B2  A5 D3                 LDA GRAPHICS.DRAWLINE.Y1$+1
06267  31B4  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06268  31B6  A5 D6                 LDA GRAPHICS.DRAWLINE.Y2$
06269  31B8  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06270  31BA  A5 D7                 LDA GRAPHICS.DRAWLINE.Y2$+1
06271  31BC  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06272  31BE  20 96 28              JSR MATH.SUBTRACT16$ ; DIFFERENCE = Y1 - Y2
06273  31C1             
06274  31C1  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06275  31C3  85 80                 STA MATH.ABS16.INTEGER$
06276  31C5  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06277  31C7  85 81                 STA MATH.ABS16.INTEGER$+1
06278  31C9  20 73 2A              JSR MATH.ABS16$ ; Y1_Y2 = ABS(DIFFERENCE)
06279  31CC                        
06280  31CC  A5 84                 LDA MATH.ABS16.VALUE$
06281  31CE  85 E6                 STA GRAPHICS.DRAWLINE.Y1_Y2
06282  31D0  A5 85                 LDA MATH.ABS16.VALUE$+1
06283  31D2  85 E7                 STA GRAPHICS.DRAWLINE.Y1_Y2+1
06284  31D4             
06285  31D4  A5 E4                 LDA GRAPHICS.DRAWLINE.X1_X2
06286  31D6  85 80                 STA MATH.CMP16.NUM1$
06287  31D8  A5 E5                 LDA GRAPHICS.DRAWLINE.X1_X2+1
06288  31DA  85 81                 STA MATH.CMP16.NUM1$+1
06289  31DC  A5 E6                 LDA GRAPHICS.DRAWLINE.Y1_Y2
06290  31DE  85 82                 STA MATH.CMP16.NUM2$
06291  31E0  A5 E7                 LDA GRAPHICS.DRAWLINE.Y1_Y2+1
06292  31E2  85 83                 STA MATH.CMP16.NUM2$+1
06293  31E4  20 E4 28              JSR MATH.CMP16$
06294  31E7  90 03                 BCC @SWAPX1Y1_X2Y2 ; IF X1_X2 < Y1_Y2 THEN @SWAPX1Y1_X2Y2
06295  31E9  4C 1E 32              JMP @SKIPSWAPX1Y1_X2Y2
06296  31EC             @SWAPX1Y1_X2Y2 
06297  31EC             
06298  31EC             ;        CALL SWAP(X1, Y1)
06299  31EC  A9 D0                 LDA #<GRAPHICS.DRAWLINE.X1$
06300  31EE  85 73                 STA MEMORY.SWAP.ADDRESS1$
06301  31F0  A9 00                 LDA #>GRAPHICS.DRAWLINE.X1$
06302  31F2  85 74                 STA MEMORY.SWAP.ADDRESS1$+1
06303  31F4  A9 D2                 LDA #<GRAPHICS.DRAWLINE.Y1$
06304  31F6  85 75                 STA MEMORY.SWAP.ADDRESS2$
06305  31F8  A9 00                 LDA #>GRAPHICS.DRAWLINE.Y1$
06306  31FA  85 76                 STA MEMORY.SWAP.ADDRESS2$+1
06307  31FC  A9 02                 LDA #$02
06308  31FE  85 77                 STA MEMORY.SWAP.LENGTH$
06309  3200  20 C0 0F              JSR MEMORY.SWAP$
06310  3203             
06311  3203             ;        CALL SWAP(X2, Y2)
06312  3203  A9 D4                 LDA #<GRAPHICS.DRAWLINE.X2$
06313  3205  85 73                 STA MEMORY.SWAP.ADDRESS1$
06314  3207  A9 00                 LDA #>GRAPHICS.DRAWLINE.X2$
06315  3209  85 74                 STA MEMORY.SWAP.ADDRESS1$+1
06316  320B  A9 D6                 LDA #<GRAPHICS.DRAWLINE.Y2$
06317  320D  85 75                 STA MEMORY.SWAP.ADDRESS2$
06318  320F  A9 00                 LDA #>GRAPHICS.DRAWLINE.Y2$
06319  3211  85 76                 STA MEMORY.SWAP.ADDRESS2$+1
06320  3213  A9 02                 LDA #$02
06321  3215  85 77                 STA MEMORY.SWAP.LENGTH$
06322  3217  20 C0 0F              JSR MEMORY.SWAP$
06323  321A             
06324  321A             ;        STEEP = TRUE
06325  321A  A9 01                 LDA #$01
06326  321C  85 DC                 STA GRAPHICS.DRAWLINE.STEEP
06327  321E             
06328  321E             ;    END IF
06329  321E             @SKIPSWAPX1Y1_X2Y2 
06330  321E             
06331  321E             ;    IF (X1 > X2) THEN
06332  321E  A5 D4                 LDA GRAPHICS.DRAWLINE.X2$
06333  3220  85 80                 STA MATH.CMP16.NUM1$
06334  3222  A5 D5                 LDA GRAPHICS.DRAWLINE.X2$+1
06335  3224  85 81                 STA MATH.CMP16.NUM1$+1
06336  3226  A5 D0                 LDA GRAPHICS.DRAWLINE.X1$
06337  3228  85 82                 STA MATH.CMP16.NUM2$
06338  322A  A5 D1                 LDA GRAPHICS.DRAWLINE.X1$+1
06339  322C  85 83                 STA MATH.CMP16.NUM2$+1
06340  322E  20 E4 28              JSR MATH.CMP16$ ; IF X2 < X1 THEN @SKIPSWAPX1X2_Y1Y2
06341  3231  90 03                 BCC @SWAPX1X2_Y1Y2
06342  3233  4C 64 32              JMP @SKIPSWAPX1X2_Y1Y2
06343  3236             
06344  3236             @SWAPX1X2_Y1Y2 
06345  3236             ;        CALL SWAP(X1, X2)
06346  3236  A9 D0                 LDA #<GRAPHICS.DRAWLINE.X1$
06347  3238  85 73                 STA MEMORY.SWAP.ADDRESS1$
06348  323A  A9 00                 LDA #>GRAPHICS.DRAWLINE.X1$
06349  323C  85 74                 STA MEMORY.SWAP.ADDRESS1$+1
06350  323E  A9 D4                 LDA #<GRAPHICS.DRAWLINE.X2$
06351  3240  85 75                 STA MEMORY.SWAP.ADDRESS2$
06352  3242  A9 00                 LDA #>GRAPHICS.DRAWLINE.X2$
06353  3244  85 76                 STA MEMORY.SWAP.ADDRESS2$+1
06354  3246  A9 02                 LDA #$02
06355  3248  85 77                 STA MEMORY.SWAP.LENGTH$
06356  324A  20 C0 0F              JSR MEMORY.SWAP$
06357  324D             
06358  324D             ;        CALL SWAP(Y1, Y2)
06359  324D  A9 D2                 LDA #<GRAPHICS.DRAWLINE.Y1$
06360  324F  85 73                 STA MEMORY.SWAP.ADDRESS1$
06361  3251  A9 00                 LDA #>GRAPHICS.DRAWLINE.Y1$
06362  3253  85 74                 STA MEMORY.SWAP.ADDRESS1$+1
06363  3255  A9 D6                 LDA #<GRAPHICS.DRAWLINE.Y2$
06364  3257  85 75                 STA MEMORY.SWAP.ADDRESS2$
06365  3259  A9 00                 LDA #>GRAPHICS.DRAWLINE.Y2$
06366  325B  85 76                 STA MEMORY.SWAP.ADDRESS2$+1
06367  325D  A9 02                 LDA #$02
06368  325F  85 77                 STA MEMORY.SWAP.LENGTH$
06369  3261  20 C0 0F              JSR MEMORY.SWAP$
06370  3264             
06371  3264             ;    END IF
06372  3264             @SKIPSWAPX1X2_Y1Y2 
06373  3264             
06374  3264             ;    DX = X2 - X1
06375  3264  A5 D4                 LDA GRAPHICS.DRAWLINE.X2$
06376  3266  85 80                 STA MATH.SUBTRACT16.MENUEND$
06377  3268  A5 D5                 LDA GRAPHICS.DRAWLINE.X2$+1
06378  326A  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06379  326C  A5 D0                 LDA GRAPHICS.DRAWLINE.X1$
06380  326E  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06381  3270  A5 D1                 LDA GRAPHICS.DRAWLINE.X1$+1
06382  3272  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06383  3274  20 96 28              JSR MATH.SUBTRACT16$ ; DX = X2 - X1
06384  3277  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06385  3279  85 D8                 STA GRAPHICS.DRAWLINE.DX
06386  327B  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06387  327D  85 D9                 STA GRAPHICS.DRAWLINE.DX+1
06388  327F             
06389  327F             ;    DY = Y2 - Y1
06390  327F  A5 D6                 LDA GRAPHICS.DRAWLINE.Y2$
06391  3281  85 80                 STA MATH.SUBTRACT16.MENUEND$
06392  3283  A5 D7                 LDA GRAPHICS.DRAWLINE.Y2$+1
06393  3285  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06394  3287  A5 D2                 LDA GRAPHICS.DRAWLINE.Y1$
06395  3289  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06396  328B  A5 D3                 LDA GRAPHICS.DRAWLINE.Y1$+1
06397  328D  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06398  328F  20 96 28              JSR MATH.SUBTRACT16$ ; DY = Y2 - Y1
06399  3292  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06400  3294  85 DA                 STA GRAPHICS.DRAWLINE.DY
06401  3296  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06402  3298  85 DB                 STA GRAPHICS.DRAWLINE.DY+1
06403  329A             
06404  329A             ;    DERROR2 = ABS(DY) * 2
06405  329A  A5 DA                 LDA GRAPHICS.DRAWLINE.DY
06406  329C  85 80                 STA MATH.ABS16.INTEGER$
06407  329E  A5 DB                 LDA GRAPHICS.DRAWLINE.DY+1
06408  32A0  85 81                 STA MATH.ABS16.INTEGER$+1
06409  32A2  20 73 2A              JSR MATH.ABS16$ ; VALUE = ABS(DY)
06410  32A5             
06411  32A5  A5 84                 LDA MATH.ABS16.VALUE$
06412  32A7  85 80                 STA MATH.MULTIPLY16.FACTOR1$
06413  32A9  A5 85                 LDA MATH.ABS16.VALUE$+1
06414  32AB  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
06415  32AD  A9 02                 LDA #$02
06416  32AF  85 82                 STA MATH.MULTIPLY16.FACTOR2$
06417  32B1  A9 00                 LDA #$00
06418  32B3  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
06419  32B5  20 67 29              JSR MATH.MULTIPLY16$ ; DERROR2 = VALUE * 2
06420  32B8                        
06421  32B8  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06422  32BA  85 E8                 STA GRAPHICS.DRAWLINE.DERROR2
06423  32BC  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06424  32BE  85 E9                 STA GRAPHICS.DRAWLINE.DERROR2+1
06425  32C0             
06426  32C0             ;    ERROR2 = 0
06427  32C0  A9 00                 LDA #$00
06428  32C2  85 EA                 STA GRAPHICS.DRAWLINE.ERROR2
06429  32C4  85 EB                 STA GRAPHICS.DRAWLINE.ERROR2+1
06430  32C6             
06431  32C6             ;    Y = Y1
06432  32C6  A5 D2                 LDA GRAPHICS.DRAWLINE.Y1$
06433  32C8  85 E2                 STA GRAPHICS.DRAWLINE.Y
06434  32CA  A5 D3                 LDA GRAPHICS.DRAWLINE.Y1$+1
06435  32CC  85 E3                 STA GRAPHICS.DRAWLINE.Y+1
06436  32CE             
06437  32CE                        ; Y_OFFSET = IIF(Y2 > Y1, 1, -1)
06438  32CE  A5 D2                 LDA GRAPHICS.DRAWLINE.Y1$
06439  32D0  85 80                 STA MATH.CMP16.NUM1$
06440  32D2  A5 D3                 LDA GRAPHICS.DRAWLINE.Y1$+1
06441  32D4  85 81                 STA MATH.CMP16.NUM1$+1
06442  32D6  A5 D6                 LDA GRAPHICS.DRAWLINE.Y2$
06443  32D8  85 82                 STA MATH.CMP16.NUM2$
06444  32DA  A5 D7                 LDA GRAPHICS.DRAWLINE.Y2$+1
06445  32DC  85 83                 STA MATH.CMP16.NUM2$+1
06446  32DE  20 E4 28              JSR MATH.CMP16$ ; IF Y1 < Y2 THEN @SETY_OFFSET1
06447  32E1  90 0B                 BCC @SETY_OFFSET1
06448  32E3  A9 FF                 LDA #$FF ; -1
06449  32E5  85 EC                 STA GRAPHICS.DRAWLINE.Y_OFFSET
06450  32E7  A9 FF                 LDA #$FF ; -1
06451  32E9  85 ED                 STA GRAPHICS.DRAWLINE.Y_OFFSET+1
06452  32EB  4C F6 32              JMP @SKIPSETY_OFFSET
06453  32EE             @SETY_OFFSET1 
06454  32EE  A9 01                 LDA #$01
06455  32F0  85 EC                 STA GRAPHICS.DRAWLINE.Y_OFFSET
06456  32F2  A9 00                 LDA #$00
06457  32F4  85 ED                 STA GRAPHICS.DRAWLINE.Y_OFFSET+1
06458  32F6             @SKIPSETY_OFFSET 
06459  32F6                        
06460  32F6                        ; DX_2 = (DX * 2)
06461  32F6  A5 D8                 LDA GRAPHICS.DRAWLINE.DX
06462  32F8  85 80                 STA MATH.MULTIPLY16.FACTOR1$
06463  32FA  A5 D9                 LDA GRAPHICS.DRAWLINE.DX+1
06464  32FC  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
06465  32FE  A9 02                 LDA #$02
06466  3300  85 82                 STA MATH.MULTIPLY16.FACTOR2$
06467  3302  A9 00                 LDA #$00
06468  3304  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
06469  3306  20 67 29              JSR MATH.MULTIPLY16$
06470  3309  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06471  330B  85 EE                 STA GRAPHICS.DRAWLINE.DX_2
06472  330D  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06473  330F  85 EF                 STA GRAPHICS.DRAWLINE.DX_2+1
06474  3311             
06475  3311             ;    FOR X = X1 TO X2
06476  3311  A5 D0                 LDA GRAPHICS.DRAWLINE.X1$
06477  3313  85 E0                 STA GRAPHICS.DRAWLINE.X
06478  3315  A5 D1                 LDA GRAPHICS.DRAWLINE.X1$+1
06479  3317  85 E1                 STA GRAPHICS.DRAWLINE.X+1
06480  3319                        
06481  3319             @LOOP
06482  3319  A5 D4                 LDA GRAPHICS.DRAWLINE.X2$
06483  331B  85 80                 STA MATH.CMP16.NUM1$
06484  331D  A5 D5                 LDA GRAPHICS.DRAWLINE.X2$+1
06485  331F  85 81                 STA MATH.CMP16.NUM1$+1
06486  3321  A5 E0                 LDA GRAPHICS.DRAWLINE.X
06487  3323  85 82                 STA MATH.CMP16.NUM2$
06488  3325  A5 E1                 LDA GRAPHICS.DRAWLINE.X+1
06489  3327  85 83                 STA MATH.CMP16.NUM2$+1
06490  3329  20 E4 28              JSR MATH.CMP16$ ; IF X2 >= X THEN @PROCESSLOOP
06491  332C  B0 03                 BCS @PROCESSLOOP
06492  332E  4C F5 33              JMP @SKIPPROCESSLOOP
06493  3331             @PROCESSLOOP 
06494  3331             
06495  3331             ;        IF (STEEP = TRUE) THEN
06496  3331  A5 DC                 LDA GRAPHICS.DRAWLINE.STEEP
06497  3333  C9 01                 CMP #$01
06498  3335  F0 03                 BEQ @DRAWPIXELYX ; IF STEEP = $01 THEN @DRAWPIXELYX
06499  3337  4C 54 33              JMP @DRAWPIXELXY
06500  333A             @DRAWPIXELYX 
06501  333A             ;            PICTUREBOX.PSET (Y, X), COLOR
06502  333A  A5 E2                 LDA GRAPHICS.DRAWLINE.Y
06503  333C  85 20                 STA GRAPHICS.SETPIXEL.X$
06504  333E  A5 E3                 LDA GRAPHICS.DRAWLINE.Y+1
06505  3340  85 21                 STA GRAPHICS.SETPIXEL.X$+1
06506  3342  A5 E0                 LDA GRAPHICS.DRAWLINE.X
06507  3344  85 22                 STA GRAPHICS.SETPIXEL.Y$
06508  3346  A5 E1                 LDA GRAPHICS.DRAWLINE.X+1
06509  3348  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
06510  334A  A5 24                 LDA GRAPHICS.DRAWLINE.COLOR$
06511  334C  85 24                 STA GRAPHICS.SETPIXEL.COLOR$
06512  334E  20 07 31              JSR GRAPHICS.SETPIXEL$
06513  3351             
06514  3351  4C 6B 33              JMP @SKIPDRAWPIXEL
06515  3354             ;        ELSE
06516  3354             @DRAWPIXELXY 
06517  3354             ;            PICTUREBOX.PSET (X, Y), COLOR
06518  3354  A5 E0                 LDA GRAPHICS.DRAWLINE.X
06519  3356  85 20                 STA GRAPHICS.SETPIXEL.X$
06520  3358  A5 E1                 LDA GRAPHICS.DRAWLINE.X+1
06521  335A  85 21                 STA GRAPHICS.SETPIXEL.X$+1
06522  335C  A5 E2                 LDA GRAPHICS.DRAWLINE.Y
06523  335E  85 22                 STA GRAPHICS.SETPIXEL.Y$
06524  3360  A5 E3                 LDA GRAPHICS.DRAWLINE.Y+1
06525  3362  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
06526  3364  A5 24                 LDA GRAPHICS.DRAWLINE.COLOR$
06527  3366  85 24                 STA GRAPHICS.SETPIXEL.COLOR$
06528  3368  20 07 31              JSR GRAPHICS.SETPIXEL$
06529  336B             
06530  336B             ;        END IF
06531  336B             @SKIPDRAWPIXEL 
06532  336B             
06533  336B             ;        ERROR2 = ERROR2 + DERROR2
06534  336B  A5 EA                 LDA GRAPHICS.DRAWLINE.ERROR2
06535  336D  85 80                 STA MATH.ADD16.ADDEND1$
06536  336F  A5 EB                 LDA GRAPHICS.DRAWLINE.ERROR2+1
06537  3371  85 81                 STA MATH.ADD16.ADDEND1$+1
06538  3373  A5 E8                 LDA GRAPHICS.DRAWLINE.DERROR2
06539  3375  85 82                 STA MATH.ADD16.ADDEND2$
06540  3377  A5 E9                 LDA GRAPHICS.DRAWLINE.DERROR2+1
06541  3379  85 83                 STA MATH.ADD16.ADDEND2$+1
06542  337B  20 00 28              JSR MATH.ADD16$
06543  337E  A5 84                 LDA MATH.ADD16.SUM$
06544  3380  85 EA                 STA GRAPHICS.DRAWLINE.ERROR2
06545  3382  A5 85                 LDA MATH.ADD16.SUM$+1
06546  3384  85 EB                 STA GRAPHICS.DRAWLINE.ERROR2+1
06547  3386                        
06548  3386             ;;        IF (ERROR2 > DX) THEN
06549  3386             ;        LDA GRAPHICS.DRAWLINE.DX
06550  3386             ;        STA MATH.CMP16.NUM1$
06551  3386             ;        LDA GRAPHICS.DRAWLINE.DX+1
06552  3386             ;        STA MATH.CMP16.NUM1$+1
06553  3386             ;        LDA GRAPHICS.DRAWLINE.ERROR2
06554  3386             ;        STA MATH.CMP16.NUM2$
06555  3386             ;        LDA GRAPHICS.DRAWLINE.ERROR2+1
06556  3386             ;        STA MATH.CMP16.NUM2$+1
06557  3386             ;        JSR MATH.CMP16$ ; IF DX < ERROR2 THEN @PROCESSYERROR2
06558  3386             ;        BCC @PROCESSYERROR2
06559  3386             
06560  3386             ;        IF (ERROR2 > DX) THEN [SIGNED INTEGER CHECK!]
06561  3386             
06562  3386  A5 EA                 LDA GRAPHICS.DRAWLINE.ERROR2
06563  3388  85 80                 STA MATH.SUBTRACT16.MENUEND$
06564  338A  A5 EB                 LDA GRAPHICS.DRAWLINE.ERROR2+1
06565  338C  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06566  338E  A5 D8                 LDA GRAPHICS.DRAWLINE.DX
06567  3390  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06568  3392  A5 D9                 LDA GRAPHICS.DRAWLINE.DX+1
06569  3394  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06570  3396  20 96 28              JSR MATH.SUBTRACT16$
06571  3399  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06572  339B  C9 80                 CMP #$80
06573  339D  90 03                 BCC @PROCESSYERROR2_1
06574  339F  4C E7 33              JMP @SKIPPROCESSYERROR2
06575  33A2             @PROCESSYERROR2_1 
06576  33A2  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06577  33A4  C9 00                 CMP #$00
06578  33A6  D0 09                 BNE @PROCESSYERROR2
06579  33A8  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06580  33AA  C9 00                 CMP #$00
06581  33AC  D0 03                 BNE @PROCESSYERROR2
06582  33AE                        ;BEQ @SKIPPROCESSYERROR2_1
06583  33AE                        ;BPL @PROCESSYERROR2
06584  33AE                        ;BMI @PROCESSYERROR2
06585  33AE             ;@SKIPPROCESSYERROR2_1
06586  33AE  4C E7 33              JMP @SKIPPROCESSYERROR2
06587  33B1             @PROCESSYERROR2 
06588  33B1             
06589  33B1             ;        Y = Y + IIF(Y2 > Y1, 1, -1)
06590  33B1  A5 E2                 LDA GRAPHICS.DRAWLINE.Y
06591  33B3  85 80                 STA MATH.ADD16.ADDEND1$
06592  33B5  A5 E3                 LDA GRAPHICS.DRAWLINE.Y+1
06593  33B7  85 81                 STA MATH.ADD16.ADDEND1$+1
06594  33B9  A5 EC                 LDA GRAPHICS.DRAWLINE.Y_OFFSET
06595  33BB  85 82                 STA MATH.ADD16.ADDEND2$
06596  33BD  A5 ED                 LDA GRAPHICS.DRAWLINE.Y_OFFSET+1
06597  33BF  85 83                 STA MATH.ADD16.ADDEND2$+1
06598  33C1  20 00 28              JSR MATH.ADD16$ ; Y = Y + Y_OFFSET
06599  33C4  A5 84                 LDA MATH.ADD16.SUM$
06600  33C6  85 E2                 STA GRAPHICS.DRAWLINE.Y
06601  33C8  A5 85                 LDA MATH.ADD16.SUM$+1
06602  33CA  85 E3                 STA GRAPHICS.DRAWLINE.Y+1
06603  33CC             
06604  33CC             ;        LDA GRAPHICS.DRAWLINE.Y_OFFSET
06605  33CC             ;        CMP #$01
06606  33CC             ;        BEQ @INCY
06607  33CC             ;        JMP @DECY
06608  33CC             ;@INCY
06609  33CC             ;        LDA #<GRAPHICS.DRAWLINE.Y
06610  33CC             ;        STA MATH.INC16.ADDRESS$
06611  33CC             ;        LDA #>GRAPHICS.DRAWLINE.Y
06612  33CC             ;        STA MATH.INC16.ADDRESS$+1
06613  33CC             ;        JSR MATH.INC16$
06614  33CC             ;        JMP @SKPINCDECY
06615  33CC             ;@DECY
06616  33CC             ;        LDA #<GRAPHICS.DRAWLINE.Y
06617  33CC             ;        STA MATH.DEC16.ADDRESS$
06618  33CC             ;        LDA #>GRAPHICS.DRAWLINE.Y
06619  33CC             ;        STA MATH.DEC16.ADDRESS$+1
06620  33CC             ;        JSR MATH.DEC16$
06621  33CC             ;        JMP @SKPINCDECY
06622  33CC             ;@SKPINCDECY
06623  33CC             
06624  33CC             ;            ERROR2 = ERROR2 - (DX * 2)
06625  33CC  A5 EA                 LDA GRAPHICS.DRAWLINE.ERROR2
06626  33CE  85 80                 STA MATH.SUBTRACT16.MENUEND$
06627  33D0  A5 EB                 LDA GRAPHICS.DRAWLINE.ERROR2+1
06628  33D2  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06629  33D4  A5 EE                 LDA GRAPHICS.DRAWLINE.DX_2
06630  33D6  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06631  33D8  A5 EF                 LDA GRAPHICS.DRAWLINE.DX_2+1
06632  33DA  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06633  33DC  20 96 28              JSR MATH.SUBTRACT16$ ; ERROR2 = ERROR2 - DX_2
06634  33DF  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06635  33E1  85 EA                 STA GRAPHICS.DRAWLINE.ERROR2
06636  33E3  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06637  33E5  85 EB                 STA GRAPHICS.DRAWLINE.ERROR2+1
06638  33E7             
06639  33E7             ;        END IF
06640  33E7             @SKIPPROCESSYERROR2 
06641  33E7             
06642  33E7             ;    NEXT X
06643  33E7  A9 E0                 LDA #<GRAPHICS.DRAWLINE.X
06644  33E9  85 86                 STA MATH.INC16.ADDRESS$
06645  33EB  A9 00                 LDA #>GRAPHICS.DRAWLINE.X
06646  33ED  85 87                 STA MATH.INC16.ADDRESS$+1
06647  33EF  20 3C 28              JSR MATH.INC16$ ; X = X + 1
06648  33F2             
06649  33F2  4C 19 33              JMP @LOOP
06650  33F5             
06651  33F5             @SKIPPROCESSLOOP 
06652  33F5             
06653  33F5  60                    RTS
06654  33F6             
06655  33F6             GRAPHICS.DRAWBOX.COLOR$ = $24 ; 1 BYTE
06656  33F6             GRAPHICS.DRAWBOX.X1$ = $25 ; 2 BYTES
06657  33F6             GRAPHICS.DRAWBOX.Y1$ = $27 ; 2 BYTES
06658  33F6             GRAPHICS.DRAWBOX.X2$ = $29 ; 2 BYTES
06659  33F6             GRAPHICS.DRAWBOX.Y2$ = $2B ; 2 BYTES
06660  33F6             GRAPHICS.DRAWBOX$ 
06661  33F6                        ; DRAW 4 LINES
06662  33F6             
06663  33F6                        ; TOP
06664  33F6  A5 25                 LDA GRAPHICS.DRAWBOX.X1$
06665  33F8  85 D0                 STA GRAPHICS.DRAWLINE.X1$
06666  33FA  A5 26                 LDA GRAPHICS.DRAWBOX.X1$+1
06667  33FC  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
06668  33FE  A5 27                 LDA GRAPHICS.DRAWBOX.Y1$
06669  3400  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
06670  3402  A5 28                 LDA GRAPHICS.DRAWBOX.Y1$+1
06671  3404  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
06672  3406  A5 29                 LDA GRAPHICS.DRAWBOX.X2$
06673  3408  85 D4                 STA GRAPHICS.DRAWLINE.X2$
06674  340A  A5 2A                 LDA GRAPHICS.DRAWBOX.X2$+1
06675  340C  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
06676  340E  A5 27                 LDA GRAPHICS.DRAWBOX.Y1$
06677  3410  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
06678  3412  A5 28                 LDA GRAPHICS.DRAWBOX.Y1$+1
06679  3414  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
06680  3416  20 84 31              JSR GRAPHICS.DRAWLINE$
06681  3419             
06682  3419                        ; RIGHT
06683  3419  A5 29                 LDA GRAPHICS.DRAWBOX.X2$
06684  341B  85 D0                 STA GRAPHICS.DRAWLINE.X1$
06685  341D  A5 2A                 LDA GRAPHICS.DRAWBOX.X2$+1
06686  341F  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
06687  3421  A5 27                 LDA GRAPHICS.DRAWBOX.Y1$
06688  3423  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
06689  3425  A5 28                 LDA GRAPHICS.DRAWBOX.Y1$+1
06690  3427  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
06691  3429  A5 29                 LDA GRAPHICS.DRAWBOX.X2$
06692  342B  85 D4                 STA GRAPHICS.DRAWLINE.X2$
06693  342D  A5 2A                 LDA GRAPHICS.DRAWBOX.X2$+1
06694  342F  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
06695  3431  A5 2B                 LDA GRAPHICS.DRAWBOX.Y2$
06696  3433  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
06697  3435  A5 2C                 LDA GRAPHICS.DRAWBOX.Y2$+1
06698  3437  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
06699  3439  20 84 31              JSR GRAPHICS.DRAWLINE$
06700  343C             
06701  343C                        ; BOTTOM
06702  343C  A5 29                 LDA GRAPHICS.DRAWBOX.X2$
06703  343E  85 D0                 STA GRAPHICS.DRAWLINE.X1$
06704  3440  A5 2A                 LDA GRAPHICS.DRAWBOX.X2$+1
06705  3442  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
06706  3444  A5 2B                 LDA GRAPHICS.DRAWBOX.Y2$
06707  3446  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
06708  3448  A5 2C                 LDA GRAPHICS.DRAWBOX.Y2$+1
06709  344A  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
06710  344C  A5 25                 LDA GRAPHICS.DRAWBOX.X1$
06711  344E  85 D4                 STA GRAPHICS.DRAWLINE.X2$
06712  3450  A5 26                 LDA GRAPHICS.DRAWBOX.X1$+1
06713  3452  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
06714  3454  A5 2B                 LDA GRAPHICS.DRAWBOX.Y2$
06715  3456  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
06716  3458  A5 2C                 LDA GRAPHICS.DRAWBOX.Y2$+1
06717  345A  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
06718  345C  20 84 31              JSR GRAPHICS.DRAWLINE$
06719  345F             
06720  345F                        ; LEFT
06721  345F  A5 25                 LDA GRAPHICS.DRAWBOX.X1$
06722  3461  85 D0                 STA GRAPHICS.DRAWLINE.X1$
06723  3463  A5 26                 LDA GRAPHICS.DRAWBOX.X1$+1
06724  3465  85 D1                 STA GRAPHICS.DRAWLINE.X1$+1
06725  3467  A5 2B                 LDA GRAPHICS.DRAWBOX.Y2$
06726  3469  85 D2                 STA GRAPHICS.DRAWLINE.Y1$
06727  346B  A5 2C                 LDA GRAPHICS.DRAWBOX.Y2$+1
06728  346D  85 D3                 STA GRAPHICS.DRAWLINE.Y1$+1
06729  346F  A5 25                 LDA GRAPHICS.DRAWBOX.X1$
06730  3471  85 D4                 STA GRAPHICS.DRAWLINE.X2$
06731  3473  A5 26                 LDA GRAPHICS.DRAWBOX.X1$+1
06732  3475  85 D5                 STA GRAPHICS.DRAWLINE.X2$+1
06733  3477  A5 27                 LDA GRAPHICS.DRAWBOX.Y1$
06734  3479  85 D6                 STA GRAPHICS.DRAWLINE.Y2$
06735  347B  A5 28                 LDA GRAPHICS.DRAWBOX.Y1$+1
06736  347D  85 D7                 STA GRAPHICS.DRAWLINE.Y2$+1
06737  347F  20 84 31              JSR GRAPHICS.DRAWLINE$
06738  3482             
06739  3482  60                    RTS
06740  3483             
06741  3483             GRAPHICS.DRAWCIRCLE.COLOR$ = $24 ; 1 BYTE
06742  3483             GRAPHICS.DRAWCIRCLE.RADIUS$ = $25 ; 1 BYTE
06743  3483             GRAPHICS.DRAWCIRCLE.XCENTER$ = $26 ; 2 BYTES
06744  3483             GRAPHICS.DRAWCIRCLE.YCENTER$ = $28 ; 2 BYTES
06745  3483             GRAPHICS.DRAWCIRCLE.X = $2A ; 2 BYTES
06746  3483             GRAPHICS.DRAWCIRCLE.Y = $2C ; 2 BYTES
06747  3483             GRAPHICS.DRAWCIRCLE.D = $2E ; 2 BYTES
06748  3483             GRAPHICS.DRAWCIRCLE$ 
06749  3483             ; SEE: HTTPS://WWW.GEEKSFORGEEKS.ORG/BRESENHAMS-CIRCLE-DRAWING-ALGORITHM/
06750  3483             
06751  3483                        ; X = 0
06752  3483                        ; Y = R
06753  3483  A9 00                 LDA #$00
06754  3485  85 2A                 STA GRAPHICS.DRAWCIRCLE.X
06755  3487  85 2B                 STA GRAPHICS.DRAWCIRCLE.X+1
06756  3489  85 2D                 STA GRAPHICS.DRAWCIRCLE.Y+1
06757  348B  A5 25                 LDA GRAPHICS.DRAWCIRCLE.RADIUS$
06758  348D  85 2C                 STA GRAPHICS.DRAWCIRCLE.Y
06759  348F             
06760  348F             ;        ; D = 3 - (2 * R)
06761  348F             ;        LDA GRAPHICS.DRAWCIRCLE.RADIUS$
06762  348F             ;        STA MATH.MULTIPLY16.FACTOR1$
06763  348F             ;        LDA #$02
06764  348F             ;        STA MATH.MULTIPLY16.FACTOR2$
06765  348F             ;        LDA #$00
06766  348F             ;        STA MATH.MULTIPLY16.FACTOR1$+1
06767  348F             ;        STA MATH.MULTIPLY16.FACTOR2$+1
06768  348F             ;        JSR MATH.MULTIPLY16$ ; PRODUCT = 2 * RADIUS
06769  348F             ;        LDA MATH.MULTIPLY16.PRODUCT$
06770  348F             ;        STA MATH.SUBTRACT16.SUBTRAHEND$
06771  348F             ;        LDA MATH.MULTIPLY16.PRODUCT$+1
06772  348F             ;        STA MATH.SUBTRACT16.SUBTRAHEND$+1
06773  348F             ;        LDA #$03
06774  348F             ;        STA MATH.SUBTRACT16.MENUEND$
06775  348F             ;        LDA #$00
06776  348F             ;        STA MATH.SUBTRACT16.MENUEND$+1
06777  348F             ;        JSR MATH.SUBTRACT16$ ; D = 3 - PRODUCT
06778  348F             ;        LDA MATH.SUBTRACT16.DIFFERENCE$
06779  348F             ;        STA GRAPHICS.DRAWCIRCLE.D
06780  348F             ;        LDA MATH.SUBTRACT16.DIFFERENCE$+1
06781  348F             ;        STA GRAPHICS.DRAWCIRCLE.D+1
06782  348F             
06783  348F                        ; D = 0 - (2 * R)
06784  348F  A5 25                 LDA GRAPHICS.DRAWCIRCLE.RADIUS$
06785  3491  85 80                 STA MATH.MULTIPLY16.FACTOR1$
06786  3493  A9 02                 LDA #$02
06787  3495  85 82                 STA MATH.MULTIPLY16.FACTOR2$
06788  3497  A9 00                 LDA #$00
06789  3499  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
06790  349B  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
06791  349D  20 67 29              JSR MATH.MULTIPLY16$ ; PRODUCT = 2 * RADIUS
06792  34A0  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06793  34A2  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06794  34A4  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06795  34A6  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06796  34A8  A9 00                 LDA #$00
06797  34AA  85 80                 STA MATH.SUBTRACT16.MENUEND$
06798  34AC  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06799  34AE  20 96 28              JSR MATH.SUBTRACT16$ ; D = 0 - PRODUCT
06800  34B1  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06801  34B3  85 2E                 STA GRAPHICS.DRAWCIRCLE.D
06802  34B5  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06803  34B7  85 2F                 STA GRAPHICS.DRAWCIRCLE.D+1
06804  34B9             
06805  34B9                        ; CALL DRAWCIRCLE(XC, YC, X, Y, COLOR)
06806  34B9  20 9C 35              JSR GRAPHICS.PLOTCIRCLE
06807  34BC             
06808  34BC                        ; WHILE (Y >= X)
06809  34BC             @CHECK_Y_X 
06810  34BC  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
06811  34BE  85 80                 STA MATH.CMP16.NUM1$
06812  34C0  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
06813  34C2  85 81                 STA MATH.CMP16.NUM1$+1
06814  34C4  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
06815  34C6  85 82                 STA MATH.CMP16.NUM2$
06816  34C8  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
06817  34CA  85 83                 STA MATH.CMP16.NUM2$+1
06818  34CC  20 E4 28              JSR MATH.CMP16$
06819  34CF  B0 01                 BCS @CONTINUE ; IF Y >= X THEN @CONTINUE
06820  34D1  60                    RTS
06821  34D2             @CONTINUE
06822  34D2             
06823  34D2                        ; FOR EACH PIXEL WE WILL DRAW ALL EIGHT PIXELS
06824  34D2                        ; X = X + 1
06825  34D2  A9 2A                 LDA #<GRAPHICS.DRAWCIRCLE.X
06826  34D4  85 86                 STA MATH.INC16.ADDRESS$
06827  34D6  A9 00                 LDA #>GRAPHICS.DRAWCIRCLE.X
06828  34D8  85 87                 STA MATH.INC16.ADDRESS$+1
06829  34DA  20 3C 28              JSR MATH.INC16$
06830  34DD             
06831  34DD                        ; CHECK FOR DECISION PARAMETER AND CORRESPONDINGLY UPDATE D, X, Y
06832  34DD                        ; IF D > 0 THEN
06833  34DD  A5 2F                 LDA GRAPHICS.DRAWCIRCLE.D+1
06834  34DF  C9 80                 CMP #$80
06835  34E1  90 03                 BCC @D_NOT_NEG ; IF D(HI) < $80 THEN @D_NOT_NEG
06836  34E3  4C 55 35              JMP @D_NEG
06837  34E6             @D_NOT_NEG 
06838  34E6  C9 00                 CMP #$00
06839  34E8  D0 09                 BNE @D_POS ; IF D(HI) != $00 THEN @D_POS
06840  34EA  A5 2E                 LDA GRAPHICS.DRAWCIRCLE.D
06841  34EC  C9 00                 CMP #$00
06842  34EE  D0 03                 BNE @D_POS ; IF D(LO) != $00 THEN @D_POS
06843  34F0  4C 55 35              JMP @D_NEG
06844  34F3             @D_POS
06845  34F3             
06846  34F3                        ; Y = Y - 1
06847  34F3  A9 2C                 LDA #<GRAPHICS.DRAWCIRCLE.Y
06848  34F5  85 86                 STA MATH.DEC16.ADDRESS$
06849  34F7  A9 00                 LDA #>GRAPHICS.DRAWCIRCLE.Y
06850  34F9  85 87                 STA MATH.DEC16.ADDRESS$+1
06851  34FB  20 BE 28              JSR MATH.DEC16$
06852  34FE             
06853  34FE                        ; D = D + 10 + (4 * (X - Y))
06854  34FE  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
06855  3500  85 80                 STA MATH.SUBTRACT16.MENUEND$
06856  3502  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
06857  3504  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06858  3506  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
06859  3508  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06860  350A  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
06861  350C  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06862  350E  20 96 28              JSR MATH.SUBTRACT16$ ; DIFFERENCE = X - Y
06863  3511                        
06864  3511  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06865  3513  85 80                 STA MATH.MULTIPLY16.FACTOR1$
06866  3515  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06867  3517  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
06868  3519  A9 04                 LDA #$04
06869  351B  85 82                 STA MATH.MULTIPLY16.FACTOR2$
06870  351D  A9 00                 LDA #$00
06871  351F  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
06872  3521  20 67 29              JSR MATH.MULTIPLY16$ ; PRODUCT = 4 * DIFFERENCE
06873  3524             
06874  3524  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06875  3526  85 80                 STA MATH.ADD16.ADDEND1$
06876  3528  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06877  352A  85 81                 STA MATH.ADD16.ADDEND1$+1
06878  352C  A9 0A                 LDA #$0A
06879  352E  85 82                 STA MATH.ADD16.ADDEND2$
06880  3530  A9 00                 LDA #$00
06881  3532  85 83                 STA MATH.ADD16.ADDEND2$+1
06882  3534  20 00 28              JSR MATH.ADD16$ ; SUM = 10 + PRODUCT
06883  3537             
06884  3537  A5 84                 LDA MATH.ADD16.SUM$
06885  3539  85 80                 STA MATH.ADD16.ADDEND1$
06886  353B  A5 85                 LDA MATH.ADD16.SUM$+1
06887  353D  85 81                 STA MATH.ADD16.ADDEND1$+1
06888  353F  A5 2E                 LDA GRAPHICS.DRAWCIRCLE.D
06889  3541  85 82                 STA MATH.ADD16.ADDEND2$
06890  3543  A5 2F                 LDA GRAPHICS.DRAWCIRCLE.D+1
06891  3545  85 83                 STA MATH.ADD16.ADDEND2$+1
06892  3547  20 00 28              JSR MATH.ADD16$ ; D = D + SUM
06893  354A             
06894  354A  A5 84                 LDA MATH.ADD16.SUM$
06895  354C  85 2E                 STA GRAPHICS.DRAWCIRCLE.D
06896  354E  A5 85                 LDA MATH.ADD16.SUM$+1
06897  3550  85 2F                 STA GRAPHICS.DRAWCIRCLE.D+1
06898  3552             
06899  3552  4C 96 35              JMP @SKIP_CHECK_D
06900  3555             
06901  3555             @D_NEG
06902  3555                        ; D = D + 6 + (4 * X)
06903  3555  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
06904  3557  85 80                 STA MATH.MULTIPLY16.FACTOR1$
06905  3559  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
06906  355B  85 81                 STA MATH.MULTIPLY16.FACTOR1$+1
06907  355D  A9 04                 LDA #$04
06908  355F  85 82                 STA MATH.MULTIPLY16.FACTOR2$
06909  3561  A9 00                 LDA #$00
06910  3563  85 83                 STA MATH.MULTIPLY16.FACTOR2$+1
06911  3565  20 67 29              JSR MATH.MULTIPLY16$ ; PRODUCT = 4 * X
06912  3568             
06913  3568  A5 84                 LDA MATH.MULTIPLY16.PRODUCT$
06914  356A  85 80                 STA MATH.ADD16.ADDEND1$
06915  356C  A5 85                 LDA MATH.MULTIPLY16.PRODUCT$+1
06916  356E  85 81                 STA MATH.ADD16.ADDEND1$+1
06917  3570  A9 06                 LDA #$06
06918  3572  85 82                 STA MATH.ADD16.ADDEND2$
06919  3574  A9 00                 LDA #$00
06920  3576  85 83                 STA MATH.ADD16.ADDEND2$+1
06921  3578  20 00 28              JSR MATH.ADD16$ ; SUM = 6 + PRODUCT
06922  357B             
06923  357B  A5 84                 LDA MATH.ADD16.SUM$
06924  357D  85 80                 STA MATH.ADD16.ADDEND1$
06925  357F  A5 85                 LDA MATH.ADD16.SUM$+1
06926  3581  85 81                 STA MATH.ADD16.ADDEND1$+1
06927  3583  A5 2E                 LDA GRAPHICS.DRAWCIRCLE.D
06928  3585  85 82                 STA MATH.ADD16.ADDEND2$
06929  3587  A5 2F                 LDA GRAPHICS.DRAWCIRCLE.D+1
06930  3589  85 83                 STA MATH.ADD16.ADDEND2$+1
06931  358B  20 00 28              JSR MATH.ADD16$ ; D = D + SUM
06932  358E             
06933  358E  A5 84                 LDA MATH.ADD16.SUM$
06934  3590  85 2E                 STA GRAPHICS.DRAWCIRCLE.D
06935  3592  A5 85                 LDA MATH.ADD16.SUM$+1
06936  3594  85 2F                 STA GRAPHICS.DRAWCIRCLE.D+1
06937  3596             @SKIP_CHECK_D 
06938  3596             
06939  3596  20 9C 35              JSR GRAPHICS.PLOTCIRCLE
06940  3599             
06941  3599  4C BC 34              JMP @CHECK_Y_X
06942  359C             
06943  359C             GRAPHICS.PLOTCIRCLE 
06944  359C                        ; FUNCTION TO PUT PIXELS AT SUBSEQUENCE POINTS
06945  359C             
06946  359C                        ; PSET (XC + X, YC + Y), COLOR
06947  359C  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
06948  359E  85 80                 STA MATH.ADD16.ADDEND1$
06949  35A0  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
06950  35A2  85 81                 STA MATH.ADD16.ADDEND1$+1
06951  35A4  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
06952  35A6  85 82                 STA MATH.ADD16.ADDEND2$
06953  35A8  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
06954  35AA  85 83                 STA MATH.ADD16.ADDEND2$+1
06955  35AC  20 00 28              JSR MATH.ADD16$ ; (XC + X)
06956  35AF  A5 84                 LDA MATH.ADD16.SUM$
06957  35B1  85 20                 STA GRAPHICS.SETPIXEL.X$
06958  35B3  A5 85                 LDA MATH.ADD16.SUM$+1
06959  35B5  85 21                 STA GRAPHICS.SETPIXEL.X$+1
06960  35B7             
06961  35B7  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
06962  35B9  85 80                 STA MATH.ADD16.ADDEND1$
06963  35BB  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
06964  35BD  85 81                 STA MATH.ADD16.ADDEND1$+1
06965  35BF  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
06966  35C1  85 82                 STA MATH.ADD16.ADDEND2$
06967  35C3  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
06968  35C5  85 83                 STA MATH.ADD16.ADDEND2$+1
06969  35C7  20 00 28              JSR MATH.ADD16$ ; (YC + Y)
06970  35CA  A5 84                 LDA MATH.ADD16.SUM$
06971  35CC  85 22                 STA GRAPHICS.SETPIXEL.Y$
06972  35CE  A5 85                 LDA MATH.ADD16.SUM$+1
06973  35D0  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
06974  35D2             
06975  35D2  20 07 31              JSR GRAPHICS.SETPIXEL$
06976  35D5             
06977  35D5                        ; PSET (XC - X, YC + Y), COLOR
06978  35D5  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
06979  35D7  85 80                 STA MATH.SUBTRACT16.MENUEND$
06980  35D9  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
06981  35DB  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
06982  35DD  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
06983  35DF  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
06984  35E1  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
06985  35E3  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
06986  35E5  20 96 28              JSR MATH.SUBTRACT16$ ; (XC - X)
06987  35E8  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
06988  35EA  85 20                 STA GRAPHICS.SETPIXEL.X$
06989  35EC  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
06990  35EE  85 21                 STA GRAPHICS.SETPIXEL.X$+1
06991  35F0             
06992  35F0  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
06993  35F2  85 80                 STA MATH.ADD16.ADDEND1$
06994  35F4  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
06995  35F6  85 81                 STA MATH.ADD16.ADDEND1$+1
06996  35F8  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
06997  35FA  85 82                 STA MATH.ADD16.ADDEND2$
06998  35FC  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
06999  35FE  85 83                 STA MATH.ADD16.ADDEND2$+1
07000  3600  20 00 28              JSR MATH.ADD16$ ; (YC + Y)
07001  3603  A5 84                 LDA MATH.ADD16.SUM$
07002  3605  85 22                 STA GRAPHICS.SETPIXEL.Y$
07003  3607  A5 85                 LDA MATH.ADD16.SUM$+1
07004  3609  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07005  360B             
07006  360B  20 07 31              JSR GRAPHICS.SETPIXEL$
07007  360E             
07008  360E                        ; PSET (XC + X, YC - Y), COLOR
07009  360E  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07010  3610  85 80                 STA MATH.ADD16.ADDEND1$
07011  3612  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07012  3614  85 81                 STA MATH.ADD16.ADDEND1$+1
07013  3616  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07014  3618  85 82                 STA MATH.ADD16.ADDEND2$
07015  361A  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07016  361C  85 83                 STA MATH.ADD16.ADDEND2$+1
07017  361E  20 00 28              JSR MATH.ADD16$ ; (XC + X)
07018  3621  A5 84                 LDA MATH.ADD16.SUM$
07019  3623  85 20                 STA GRAPHICS.SETPIXEL.X$
07020  3625  A5 85                 LDA MATH.ADD16.SUM$+1
07021  3627  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07022  3629             
07023  3629  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07024  362B  85 80                 STA MATH.SUBTRACT16.MENUEND$
07025  362D  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07026  362F  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07027  3631  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07028  3633  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07029  3635  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07030  3637  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07031  3639  20 96 28              JSR MATH.SUBTRACT16$ ; (YC - Y)
07032  363C  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07033  363E  85 22                 STA GRAPHICS.SETPIXEL.Y$
07034  3640  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07035  3642  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07036  3644             
07037  3644  20 07 31              JSR GRAPHICS.SETPIXEL$
07038  3647             
07039  3647                        ; PSET (XC - X, YC - Y), COLOR
07040  3647  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07041  3649  85 80                 STA MATH.SUBTRACT16.MENUEND$
07042  364B  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07043  364D  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07044  364F  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07045  3651  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07046  3653  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07047  3655  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07048  3657  20 96 28              JSR MATH.SUBTRACT16$ ; (XC - X)
07049  365A  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07050  365C  85 20                 STA GRAPHICS.SETPIXEL.X$
07051  365E  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07052  3660  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07053  3662             
07054  3662  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07055  3664  85 80                 STA MATH.SUBTRACT16.MENUEND$
07056  3666  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07057  3668  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07058  366A  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07059  366C  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07060  366E  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07061  3670  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07062  3672  20 96 28              JSR MATH.SUBTRACT16$ ; (YC - Y)
07063  3675  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07064  3677  85 22                 STA GRAPHICS.SETPIXEL.Y$
07065  3679  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07066  367B  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07067  367D             
07068  367D  20 07 31              JSR GRAPHICS.SETPIXEL$
07069  3680             
07070  3680                        ; PSET (XC + Y, YC + X), COLOR
07071  3680  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07072  3682  85 80                 STA MATH.ADD16.ADDEND1$
07073  3684  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07074  3686  85 81                 STA MATH.ADD16.ADDEND1$+1
07075  3688  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07076  368A  85 82                 STA MATH.ADD16.ADDEND2$
07077  368C  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07078  368E  85 83                 STA MATH.ADD16.ADDEND2$+1
07079  3690  20 00 28              JSR MATH.ADD16$ ; (XC + Y)
07080  3693  A5 84                 LDA MATH.ADD16.SUM$
07081  3695  85 20                 STA GRAPHICS.SETPIXEL.X$
07082  3697  A5 85                 LDA MATH.ADD16.SUM$+1
07083  3699  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07084  369B             
07085  369B  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07086  369D  85 80                 STA MATH.ADD16.ADDEND1$
07087  369F  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07088  36A1  85 81                 STA MATH.ADD16.ADDEND1$+1
07089  36A3  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07090  36A5  85 82                 STA MATH.ADD16.ADDEND2$
07091  36A7  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07092  36A9  85 83                 STA MATH.ADD16.ADDEND2$+1
07093  36AB  20 00 28              JSR MATH.ADD16$ ; (YC + X)
07094  36AE  A5 84                 LDA MATH.ADD16.SUM$
07095  36B0  85 22                 STA GRAPHICS.SETPIXEL.Y$
07096  36B2  A5 85                 LDA MATH.ADD16.SUM$+1
07097  36B4  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07098  36B6             
07099  36B6  20 07 31              JSR GRAPHICS.SETPIXEL$
07100  36B9             
07101  36B9                        ; PSET (XC - Y, YC + X), COLOR
07102  36B9  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07103  36BB  85 80                 STA MATH.SUBTRACT16.MENUEND$
07104  36BD  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07105  36BF  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07106  36C1  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07107  36C3  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07108  36C5  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07109  36C7  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07110  36C9  20 96 28              JSR MATH.SUBTRACT16$ ; (XC - Y)
07111  36CC  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07112  36CE  85 20                 STA GRAPHICS.SETPIXEL.X$
07113  36D0  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07114  36D2  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07115  36D4             
07116  36D4  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07117  36D6  85 80                 STA MATH.ADD16.ADDEND1$
07118  36D8  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07119  36DA  85 81                 STA MATH.ADD16.ADDEND1$+1
07120  36DC  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07121  36DE  85 82                 STA MATH.ADD16.ADDEND2$
07122  36E0  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07123  36E2  85 83                 STA MATH.ADD16.ADDEND2$+1
07124  36E4  20 00 28              JSR MATH.ADD16$ ; (YC + X)
07125  36E7  A5 84                 LDA MATH.ADD16.SUM$
07126  36E9  85 22                 STA GRAPHICS.SETPIXEL.Y$
07127  36EB  A5 85                 LDA MATH.ADD16.SUM$+1
07128  36ED  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07129  36EF             
07130  36EF  20 07 31              JSR GRAPHICS.SETPIXEL$
07131  36F2             
07132  36F2                        ; PSET (XC + Y, YC - X), COLOR
07133  36F2  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07134  36F4  85 80                 STA MATH.ADD16.ADDEND1$
07135  36F6  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07136  36F8  85 81                 STA MATH.ADD16.ADDEND1$+1
07137  36FA  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07138  36FC  85 82                 STA MATH.ADD16.ADDEND2$
07139  36FE  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07140  3700  85 83                 STA MATH.ADD16.ADDEND2$+1
07141  3702  20 00 28              JSR MATH.ADD16$ ; (XC + Y)
07142  3705  A5 84                 LDA MATH.ADD16.SUM$
07143  3707  85 20                 STA GRAPHICS.SETPIXEL.X$
07144  3709  A5 85                 LDA MATH.ADD16.SUM$+1
07145  370B  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07146  370D             
07147  370D  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07148  370F  85 80                 STA MATH.SUBTRACT16.MENUEND$
07149  3711  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07150  3713  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07151  3715  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07152  3717  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07153  3719  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07154  371B  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07155  371D  20 96 28              JSR MATH.SUBTRACT16$ ; (YC - X)
07156  3720  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07157  3722  85 22                 STA GRAPHICS.SETPIXEL.Y$
07158  3724  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07159  3726  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07160  3728             
07161  3728  20 07 31              JSR GRAPHICS.SETPIXEL$
07162  372B             
07163  372B                        ; PSET (XC - Y, YC - X), COLOR
07164  372B  A5 26                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$
07165  372D  85 80                 STA MATH.SUBTRACT16.MENUEND$
07166  372F  A5 27                 LDA GRAPHICS.DRAWCIRCLE.XCENTER$+1
07167  3731  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07168  3733  A5 2C                 LDA GRAPHICS.DRAWCIRCLE.Y
07169  3735  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07170  3737  A5 2D                 LDA GRAPHICS.DRAWCIRCLE.Y+1
07171  3739  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07172  373B  20 96 28              JSR MATH.SUBTRACT16$ ; (XC - Y)
07173  373E  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07174  3740  85 20                 STA GRAPHICS.SETPIXEL.X$
07175  3742  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07176  3744  85 21                 STA GRAPHICS.SETPIXEL.X$+1
07177  3746             
07178  3746  A5 28                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$
07179  3748  85 80                 STA MATH.SUBTRACT16.MENUEND$
07180  374A  A5 29                 LDA GRAPHICS.DRAWCIRCLE.YCENTER$+1
07181  374C  85 81                 STA MATH.SUBTRACT16.MENUEND$+1
07182  374E  A5 2A                 LDA GRAPHICS.DRAWCIRCLE.X
07183  3750  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
07184  3752  A5 2B                 LDA GRAPHICS.DRAWCIRCLE.X+1
07185  3754  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
07186  3756  20 96 28              JSR MATH.SUBTRACT16$ ; (YC - X)
07187  3759  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
07188  375B  85 22                 STA GRAPHICS.SETPIXEL.Y$
07189  375D  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
07190  375F  85 23                 STA GRAPHICS.SETPIXEL.Y$+1
07191  3761             
07192  3761  20 07 31              JSR GRAPHICS.SETPIXEL$
07193  3764             
07194  3764             
07195  3764  60                    RTS
07196  3765             
07197  3765             ; NOTE: SPRITES TAKE ATMOST 512 BYTES OF MEMORY.
07198  3765             
07199  3765             GRAPHICS.SPRITE1$ = #1
07200  3765             GRAPHICS.SPRITE2$ = #2
07201  3765             GRAPHICS.SPRITE3$ = #3
07202  3765             GRAPHICS.SPRITE4$ = #4
07203  3765             GRAPHICS.SPRITE5$ = #5
07204  3765             GRAPHICS.SPRITE6$ = #6
07205  3765             GRAPHICS.SPRITE7$ = #7
07206  3765             GRAPHICS.SPRITE8$ = #8
07207  3765             
07208  3765             GRAPHICS.SPRITE1ADDRESS$ = $4200
07209  3765             GRAPHICS.SPRITE2ADDRESS$ = $4240
07210  3765             GRAPHICS.SPRITE3ADDRESS$ = $4280
07211  3765             GRAPHICS.SPRITE4ADDRESS$ = $42C0
07212  3765             GRAPHICS.SPRITE5ADDRESS$ = $4300
07213  3765             GRAPHICS.SPRITE6ADDRESS$ = $4340
07214  3765             GRAPHICS.SPRITE7ADDRESS$ = $4380
07215  3765             GRAPHICS.SPRITE8ADDRESS$ = $43C0
07216  3765             
07217  3765             GRAPHICS.SPRITEMULTICOLOR1ADDRESS$ = $D025
07218  3765             GRAPHICS.SPRITEMULTICOLOR2ADDRESS$ = $D026
07219  3765             
07220  3765             GRAPHICS.GETSPRITEORMASK.NUMBER = $73
07221  3765             GRAPHICS.GETSPRITEORMASK 
07222  3765                        ; NUMBER = 2^(NUMBER - 1)
07223  3765  A5 73                 LDA GRAPHICS.GETSPRITEORMASK.NUMBER
07224  3767  38                    SEC
07225  3768  E9 01                 SBC #$01
07226  376A  85 8B                 STA MATH.EXPONENT8.POWER$
07227  376C  A9 02                 LDA #$02
07228  376E  85 8A                 STA MATH.EXPONENT8.BASE$
07229  3770  20 90 2A              JSR MATH.EXPONENT8$
07230  3773  A5 8C                 LDA MATH.EXPONENT8.VALUE$
07231  3775  85 73                 STA GRAPHICS.GETSPRITEORMASK.NUMBER
07232  3777  60                    RTS
07233  3778             
07234  3778             GRAPHICS.GETSPRITEANDMASK.NUMBER = $73
07235  3778             GRAPHICS.GETSPRITEANDMASK 
07236  3778                        ; NUMBER = 255 - NUMBER (2'S COMP.)
07237  3778  38                    SEC
07238  3779                        ;SBC #$FF
07239  3779  A9 FF                 LDA #$FF
07240  377B  E5 73                 SBC GRAPHICS.GETSPRITEANDMASK.NUMBER
07241  377D  85 73                 STA GRAPHICS.GETSPRITEANDMASK.NUMBER
07242  377F  60                    RTS
07243  3780             
07244  3780             GRAPHICS.SHOWSPRITE.NUMBER$ = $73 ; 1 BYTE
07245  3780             GRAPHICS.SHOWSPRITE$ 
07246  3780  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07247  3783             
07248  3783                        ; ENABLE THE SPECIFIC SPRITE
07249  3783  AD 15 D0              LDA $D015
07250  3786  05 73                 ORA GRAPHICS.SHOWSPRITE.NUMBER$
07251  3788  8D 15 D0              STA $D015
07252  378B             
07253  378B  60                    RTS
07254  378C             
07255  378C             GRAPHICS.HIDESPRITE.NUMBER$ = $73 ; 1 BYTE
07256  378C             GRAPHICS.HIDESPRITE$ 
07257  378C  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07258  378F  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07259  3792             
07260  3792                        ; ENABLE THE SPECIFIC SPRITE
07261  3792  AD 15 D0              LDA $D015
07262  3795  25 73                 AND GRAPHICS.HIDESPRITE.NUMBER$
07263  3797  8D 15 D0              STA $D015
07264  379A             
07265  379A  60                    RTS
07266  379B             
07267  379B             GRAPHICS.SETSPRITEMULTICOLOR.NUMBER$ = $73 ; 1 BYTE
07268  379B             GRAPHICS.SETSPRITEMULTICOLOR$ 
07269  379B  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07270  379E             
07271  379E                        ; ENABLE THE SPECIFIC SPRITE
07272  379E  AD 1C D0              LDA $D01C
07273  37A1  05 73                 ORA GRAPHICS.SETSPRITEMULTICOLOR.NUMBER$
07274  37A3  8D 1C D0              STA $D01C
07275  37A6             
07276  37A6  60                    RTS
07277  37A7             
07278  37A7             GRAPHICS.SETSPRITEHIRES.NUMBER$ = $73 ; 1 BYTE
07279  37A7             GRAPHICS.SETSPRITEHIRES$ 
07280  37A7  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07281  37AA  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07282  37AD             
07283  37AD                        ; ENABLE THE SPECIFIC SPRITE
07284  37AD  AD 1C D0              LDA $D01C
07285  37B0  25 73                 AND GRAPHICS.SETSPRITEHIRES.NUMBER$
07286  37B2  8D 1C D0              STA $D01C
07287  37B5             
07288  37B5  60                    RTS
07289  37B6             
07290  37B6             GRAPHICS.STRETCHSPRITEHORIZONTALLY.NUMBER$ = $73 ; 1 BYTE
07291  37B6             GRAPHICS.STRETCHSPRITEHORIZONTALLY$ 
07292  37B6  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07293  37B9             
07294  37B9                        ; ENABLE THE SPECIFIC SPRITE
07295  37B9  AD 1D D0              LDA $D01D
07296  37BC  05 73                 ORA GRAPHICS.STRETCHSPRITEHORIZONTALLY.NUMBER$
07297  37BE  8D 1D D0              STA $D01D
07298  37C1             
07299  37C1  60                    RTS
07300  37C2             
07301  37C2             GRAPHICS.UNSTRETCHSPRITEHORIZONTALLY.NUMBER$ = $73 ; 1 BYTE
07302  37C2             GRAPHICS.UNSTRETCHSPRITEHORIZONTALLY$ 
07303  37C2  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07304  37C5  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07305  37C8             
07306  37C8                        ; ENABLE THE SPECIFIC SPRITE
07307  37C8  AD 1D D0              LDA $D01D
07308  37CB  25 73                 AND GRAPHICS.UNSTRETCHSPRITEHORIZONTALLY.NUMBER$
07309  37CD  8D 1D D0              STA $D01D
07310  37D0             
07311  37D0  60                    RTS
07312  37D1             
07313  37D1             GRAPHICS.STRETCHSPRITEVERTICALLY.NUMBER$ = $73 ; 1 BYTE
07314  37D1             GRAPHICS.STRETCHSPRITEVERTICALLY$ 
07315  37D1  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07316  37D4             
07317  37D4                        ; ENABLE THE SPECIFIC SPRITE
07318  37D4  AD 17 D0              LDA $D017
07319  37D7  05 73                 ORA GRAPHICS.STRETCHSPRITEVERTICALLY.NUMBER$
07320  37D9  8D 17 D0              STA $D017
07321  37DC             
07322  37DC  60                    RTS
07323  37DD             
07324  37DD             GRAPHICS.UNSTRETCHSPRITEVERTICALLY.NUMBER$ = $73 ; 1 BYTE
07325  37DD             GRAPHICS.UNSTRETCHSPRITEVERTICALLY$ 
07326  37DD  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07327  37E0  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07328  37E3             
07329  37E3                        ; ENABLE THE SPECIFIC SPRITE
07330  37E3  AD 17 D0              LDA $D017
07331  37E6  25 73                 AND GRAPHICS.UNSTRETCHSPRITEVERTICALLY.NUMBER$
07332  37E8  8D 17 D0              STA $D017
07333  37EB             
07334  37EB  60                    RTS
07335  37EC             
07336  37EC             GRAPHICS.SETSPRITECOLOR.NUMBER$ = $73 ; 1 BYTE
07337  37EC             GRAPHICS.SETSPRITECOLOR.COLOR$ = $74 ; 1 BYTE
07338  37EC             GRAPHICS.SETSPRITECOLOR.ADDRESS = $75 ; 2 BYTES
07339  37EC             GRAPHICS.SETSPRITECOLOR$ 
07340  37EC             
07341  37EC                        ; THE SPRITE COLORS ARE LOCATED AT $D027-$D02E
07342  37EC  A9 27                 LDA #$27
07343  37EE  85 75                 STA GRAPHICS.SETSPRITECOLOR.ADDRESS
07344  37F0  A9 D0                 LDA #$D0
07345  37F2  85 76                 STA GRAPHICS.SETSPRITECOLOR.ADDRESS+1
07346  37F4             
07347  37F4                        ; SET THE COLOR AT $D027+(NUMBER-1)
07348  37F4  A4 73                 LDY GRAPHICS.SETSPRITECOLOR.NUMBER$
07349  37F6  88                    DEY
07350  37F7  A5 74                 LDA GRAPHICS.SETSPRITECOLOR.COLOR$
07351  37F9  91 75                 STA (GRAPHICS.SETSPRITECOLOR.ADDRESS),Y
07352  37FB             
07353  37FB  60                    RTS
07354  37FC             
07355  37FC             GRAPHICS.GETSPRITECOLOR.NUMBER$ = $73 ; 1 BYTE
07356  37FC             GRAPHICS.GETSPRITECOLOR.COLOR$ = $74 ; 1 BYTE
07357  37FC             GRAPHICS.GETSPRITECOLOR.ADDRESS = $75 ; 2 BYTES
07358  37FC             GRAPHICS.GETSPRITECOLOR$ 
07359  37FC             
07360  37FC                        ; THE SPRITE COLORS ARE LOCATED AT $D027-$D02E
07361  37FC  A9 27                 LDA #$27
07362  37FE  85 75                 STA GRAPHICS.GETSPRITECOLOR.ADDRESS
07363  3800  A9 D0                 LDA #$D0
07364  3802  85 76                 STA GRAPHICS.GETSPRITECOLOR.ADDRESS+1
07365  3804             
07366  3804                        ; GET THE COLOR AT $D027+(NUMBER-1)
07367  3804  A4 73                 LDY GRAPHICS.GETSPRITECOLOR.NUMBER$
07368  3806  88                    DEY
07369  3807  B1 75                 LDA (GRAPHICS.GETSPRITECOLOR.ADDRESS),Y
07370  3809  29 0F                 AND #%00001111
07371  380B  85 74                 STA GRAPHICS.GETSPRITECOLOR.COLOR$
07372  380D             
07373  380D  60                    RTS
07374  380E             
07375  380E             GRAPHICS.SETSPRITELOCATION.NUMBER$ = $73 ; 1 BYTE
07376  380E             GRAPHICS.SETSPRITELOCATION.X$ = $74 ; 2 BYTES
07377  380E             GRAPHICS.SETSPRITELOCATION.Y$ = $76 ; 2 BYTES
07378  380E             GRAPHICS.SETSPRITELOCATION.ADDRESS = $78 ; 2 BYTES
07379  380E             GRAPHICS.SETSPRITELOCATION$ 
07380  380E             
07381  380E                        ; THE SPRITE LOCATIONS ARE LOCATED AT $D000-$D00F
07382  380E  A9 00                 LDA #$00
07383  3810  85 78                 STA GRAPHICS.SETSPRITELOCATION.ADDRESS
07384  3812  A9 D0                 LDA #$D0
07385  3814  85 79                 STA GRAPHICS.SETSPRITELOCATION.ADDRESS+1
07386  3816             
07387  3816                        ; NUMBER = (NUMBER-1)*2
07388  3816  A4 73                 LDY GRAPHICS.SETSPRITELOCATION.NUMBER$
07389  3818  88                    DEY
07390  3819  98                    TYA
07391  381A  0A                    ASL ; A=A*2
07392  381B  A8                    TAY
07393  381C             
07394  381C  A5 74                 LDA GRAPHICS.SETSPRITELOCATION.X$ ; WE ONLY CARE ABOUT THE LO BYTE
07395  381E  91 78                 STA (GRAPHICS.SETSPRITELOCATION.ADDRESS),Y
07396  3820             
07397  3820  C8                    INY
07398  3821  A5 76                 LDA GRAPHICS.SETSPRITELOCATION.Y$ ; WE ONLY CARE ABOUT THE LO BYTE
07399  3823  91 78                 STA (GRAPHICS.SETSPRITELOCATION.ADDRESS),Y
07400  3825             
07401  3825                        ; DETERMINE IF WE NEED TO SET/CLEAR THE 9TH BIT FOR X'S HI BYTE
07402  3825  A5 75                 LDA GRAPHICS.SETSPRITELOCATION.X$+1
07403  3827  F0 0E                 BEQ @CLEARXHI
07404  3829             @SETXHI
07405  3829  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07406  382C  AD 10 D0              LDA $D010
07407  382F  05 73                 ORA GRAPHICS.SETSPRITELOCATION.NUMBER$
07408  3831  8D 10 D0              STA $D010
07409  3834  4C 45 38              JMP @DONE
07410  3837             @CLEARXHI
07411  3837  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07412  383A  20 78 37              JSR GRAPHICS.GETSPRITEANDMASK
07413  383D  AD 10 D0              LDA $D010
07414  3840  25 73                 AND GRAPHICS.SETSPRITELOCATION.NUMBER$
07415  3842  8D 10 D0              STA $D010
07416  3845             @DONE
07417  3845  60                    RTS
07418  3846             
07419  3846             GRAPHICS.GETSPRITELOCATION.NUMBER$ = $73 ; 1 BYTE
07420  3846             GRAPHICS.GETSPRITELOCATION.X$ = $74 ; 2 BYTES
07421  3846             GRAPHICS.GETSPRITELOCATION.Y$ = $76 ; 2 BYTES
07422  3846             GRAPHICS.GETSPRITELOCATION.ADDRESS = $78 ; 2 BYTES
07423  3846             GRAPHICS.GETSPRITELOCATION$ 
07424  3846             
07425  3846                        ; THE SPRITE LOCATIONS ARE LOCATED AT $D000-$D00F
07426  3846  A9 00                 LDA #$00
07427  3848  85 78                 STA GRAPHICS.GETSPRITELOCATION.ADDRESS
07428  384A  A9 D0                 LDA #$D0
07429  384C  85 79                 STA GRAPHICS.GETSPRITELOCATION.ADDRESS+1
07430  384E             
07431  384E                        ; NUMBER = (NUMBER-1)*2
07432  384E  A4 73                 LDY GRAPHICS.GETSPRITELOCATION.NUMBER$
07433  3850  88                    DEY
07434  3851  98                    TYA
07435  3852  0A                    ASL ; A=A*2
07436  3853  A8                    TAY
07437  3854             
07438  3854  B1 78                 LDA (GRAPHICS.GETSPRITELOCATION.ADDRESS),Y
07439  3856  85 74                 STA GRAPHICS.GETSPRITELOCATION.X$ ; WE ONLY CARE ABOUT THE LO BYTE
07440  3858             
07441  3858  C8                    INY
07442  3859  B1 78                 LDA (GRAPHICS.GETSPRITELOCATION.ADDRESS),Y
07443  385B  85 76                 STA GRAPHICS.GETSPRITELOCATION.Y$ ; WE ONLY CARE ABOUT THE LO BYTE
07444  385D  A9 00                 LDA #$00
07445  385F  85 77                 STA GRAPHICS.GETSPRITELOCATION.Y$+1
07446  3861             
07447  3861                        ; FIND THE 9TH BIT FOR X'S HI BYTE
07448  3861  20 65 37              JSR GRAPHICS.GETSPRITEORMASK
07449  3864  AD 10 D0              LDA $D010
07450  3867  25 73                 AND GRAPHICS.GETSPRITELOCATION.NUMBER$
07451  3869  F0 07                 BEQ @CLEARXHI
07452  386B                        ;JMP @DONE
07453  386B             @SETXHI
07454  386B  A9 01                 LDA #$01
07455  386D  85 75                 STA GRAPHICS.GETSPRITELOCATION.X$+1
07456  386F  4C 76 38              JMP @DONE
07457  3872             @CLEARXHI
07458  3872  A9 00                 LDA #$00
07459  3874  85 75                 STA GRAPHICS.GETSPRITELOCATION.X$+1
07460  3876             @DONE
07461  3876  60                    RTS
07462  3877             
07463  3877             
07464  3877             
07465  3877             
07466  3877             
07467  3877             
07468  3877             AUDIO.VOICE1$ = #01
07469  3877             AUDIO.VOICE2$ = #02
07470  3877             AUDIO.VOICE3$ = #03
07471  3877             
07472  3877             AUDIO.VOLUMEADDRESS = $D418
07473  3877             
07474  3877             AUDIO.TRIANGLEON$ = $11
07475  3877             AUDIO.TRIANGLEOFF$ = $10
07476  3877             AUDIO.SAWTOOTHON$ = $21
07477  3877             AUDIO.SAWTOOTHOFF$ = $20
07478  3877             AUDIO.PULSEON$ = $41
07479  3877             AUDIO.PULSEOFF$ = $40
07480  3877             AUDIO.NOISEON$ = $81
07481  3877             AUDIO.NOISEOFF$ = $80
07482  3877             
07483  3877             AUDIO.ATTACKHIGH$ = $80
07484  3877             AUDIO.ATTACKMEDIUM$ = $40
07485  3877             AUDIO.ATTACKLOW$ = $20
07486  3877             AUDIO.ATTACKLOWEST$ = $10
07487  3877             AUDIO.DECAYHIGH$ = $08
07488  3877             AUDIO.DECAYMEDIUM$ = $04
07489  3877             AUDIO.DECAYLOW$ = $02
07490  3877             AUDIO.DECAYLOWEST$ = $01
07491  3877             
07492  3877             AUDIO.SUSTAINHIGH$ = $80
07493  3877             AUDIO.SUSTAINMEDIUM$ = $40
07494  3877             AUDIO.SUSTAINLOW$ = $20
07495  3877             AUDIO.SUSTAINLOWEST$ = $10
07496  3877             AUDIO.RELEASEHIGH$ = $08
07497  3877             AUDIO.RELEASEMEDIUM$ = $04
07498  3877             AUDIO.RELEASELOW$ = $02
07499  3877             AUDIO.RELEASELOWEST$ = $01
07500  3877             
07501  3877             AUDIO.SETVOLUME.VALUE$ = $73 ; 1 BYTE
07502  3877             AUDIO.SETVOLUME$ 
07503  3877                        ; 0 = OFF, 15 = MAX
07504  3877  A5 73                 LDA AUDIO.SETVOLUME.VALUE$
07505  3879  8D 18 D4              STA AUDIO.VOLUMEADDRESS
07506  387C  60                    RTS
07507  387D             
07508  387D             AUDIO.GETVOICEADDRESS.VOICE = $73 ; 1 BYTE
07509  387D             AUDIO.GETVOICEADDRESS.ADDRESS = $74 ; 1 BYTE
07510  387D             AUDIO.GETVOICEADDRESS 
07511  387D             
07512  387D                        ; PRODUCT = (VOICE-1)*7
07513  387D  A6 73                 LDX AUDIO.GETVOICEADDRESS.VOICE
07514  387F  CA                    DEX
07515  3880  86 80                 STX MATH.MULTIPLY8.FACTOR1$
07516  3882  A9 07                 LDA #$07
07517  3884  85 82                 STA MATH.MULTIPLY8.FACTOR2$
07518  3886  20 48 29              JSR MATH.MULTIPLY8$
07519  3889             
07520  3889                        ; VOICE(LO) = PRODUCT + ADDRESS
07521  3889  A5 83                 LDA MATH.MULTIPLY8.PRODUCT$
07522  388B  18                    CLC
07523  388C  65 74                 ADC AUDIO.GETVOICEADDRESS.ADDRESS
07524  388E  85 73                 STA AUDIO.GETVOICEADDRESS.VOICE
07525  3890             
07526  3890                        ; VOICE(HI) = $D4
07527  3890  A9 D4                 LDA #$D4
07528  3892  85 74                 STA AUDIO.GETVOICEADDRESS.VOICE+1
07529  3894             
07530  3894  60                    RTS
07531  3895             
07532  3895             AUDIO.SETWAVEFORM.VOICE$ = $73 ; 1 BYTE
07533  3895             AUDIO.SETWAVEFORM.VALUE$ = $75 ; 1 BYTE
07534  3895             AUDIO.SETWAVEFORM$ 
07535  3895  A9 04                 LDA #$04
07536  3897  85 74                 STA AUDIO.GETVOICEADDRESS.ADDRESS
07537  3899  20 7D 38              JSR AUDIO.GETVOICEADDRESS
07538  389C             
07539  389C  A0 00                 LDY #$00
07540  389E  A5 75                 LDA AUDIO.SETWAVEFORM.VALUE$
07541  38A0  91 73                 STA (AUDIO.SETWAVEFORM.VOICE$),Y
07542  38A2  60                    RTS
07543  38A3             
07544  38A3             
07545  38A3             AUDIO.SETATTACKDECAY.VOICE$ = $73 ; 1 BYTE
07546  38A3             AUDIO.SETATTACKDECAY.VALUE$ = $75 ; 1 BYTE
07547  38A3             AUDIO.SETATTACKDECAY$ 
07548  38A3  A9 05                 LDA #$05
07549  38A5  85 74                 STA AUDIO.GETVOICEADDRESS.ADDRESS
07550  38A7  20 7D 38              JSR AUDIO.GETVOICEADDRESS
07551  38AA             
07552  38AA  A0 00                 LDY #$00
07553  38AC  A5 75                 LDA AUDIO.SETATTACKDECAY.VALUE$
07554  38AE  91 73                 STA (AUDIO.SETATTACKDECAY.VOICE$),Y
07555  38B0  60                    RTS
07556  38B1             
07557  38B1             AUDIO.SETSUSTAINRELEASE.VOICE$ = $73 ; 2 BYTES
07558  38B1             AUDIO.SETSUSTAINRELEASE.VALUE$ = $75 ; 1 BYTE
07559  38B1             AUDIO.SETSUSTAINRELEASE$ 
07560  38B1  A9 06                 LDA #$06
07561  38B3  85 74                 STA AUDIO.GETVOICEADDRESS.ADDRESS
07562  38B5  20 7D 38              JSR AUDIO.GETVOICEADDRESS
07563  38B8             
07564  38B8  A0 00                 LDY #$00
07565  38BA  A5 75                 LDA AUDIO.SETSUSTAINRELEASE.VALUE$
07566  38BC  91 73                 STA (AUDIO.SETSUSTAINRELEASE.VOICE$),Y
07567  38BE  60                    RTS
07568  38BF             
07569  38BF             AUDIO.SETFREQUENCY.VOICE$ = $73 ; 1 BYTE
07570  38BF             AUDIO.SETFREQUENCY.FREQUENCY$ = $75 ; 2 BYTES
07571  38BF             AUDIO.SETFREQUENCY$ 
07572  38BF  A9 00                 LDA #$00
07573  38C1  85 74                 STA AUDIO.GETVOICEADDRESS.ADDRESS
07574  38C3  20 7D 38              JSR AUDIO.GETVOICEADDRESS
07575  38C6             
07576  38C6  A0 00                 LDY #$00
07577  38C8  A5 75                 LDA AUDIO.SETFREQUENCY.FREQUENCY$
07578  38CA  91 73                 STA (AUDIO.SETFREQUENCY.VOICE$),Y
07579  38CC  C8                    INY
07580  38CD  A5 76                 LDA AUDIO.SETFREQUENCY.FREQUENCY$+1
07581  38CF  91 73                 STA (AUDIO.SETFREQUENCY.VOICE$),Y
07582  38D1             
07583  38D1  60                    RTS
07584  38D2             
07585  38D2             AUDIO.BEEP$ 
07586  38D2             
07587  38D2                        ; SET THE VOLUME
07588  38D2  A9 0F                 LDA #$0F
07589  38D4  8D 18 D4              STA AUDIO.VOLUMEADDRESS
07590  38D7             
07591  38D7                        ; SET ATTACK/DECAY
07592  38D7  A9 00                 LDA #$0
07593  38D9  8D 05 D4              STA $D405
07594  38DC             
07595  38DC                        ; SET SUSTAIN/RELEASE
07596  38DC  A9 F8                 LDA #$F8
07597  38DE  8D 06 D4              STA $D406
07598  38E1             
07599  38E1                        ; SET FREQUENCY
07600  38E1  A9 4A                 LDA #$4A
07601  38E3  8D 00 D4              STA $D400 ; LO
07602  38E6  A9 22                 LDA #$22
07603  38E8  8D 01 D4              STA $D401 ; HI
07604  38EB             
07605  38EB                        ; SET WAVEFORM
07606  38EB  A9 11                 LDA #$11
07607  38ED  8D 04 D4              STA $D404
07608  38F0             
07609  38F0                        ; WAIT
07610  38F0  20 A5 1E              JSR TIME.HALT$
07611  38F3  20 A5 1E              JSR TIME.HALT$
07612  38F6             
07613  38F6                        ; DISABLE WAVEFORM
07614  38F6  A9 10                 LDA #$10
07615  38F8  8D 04 D4              STA $D404
07616  38FB             
07617  38FB  60                    RTS
07618  38FC             
07619  38FC             ; HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:SIMPLE_IRQ_MUSIC_PLAYER
07620  38FC  00 A0      AUDIO.SIDINITADDRESS$ WORD $A000 ;$A048
07621  38FE  06 A0      AUDIO.SIDPLAYADDRESS$ WORD $A006 ;$A021
07622  3900             ;AUDIO.SIDLOADADDRESS$   WORD $A000
07623  3900  00         AUDIO.SIDFINISHED$ BYTE $00
07624  3901  00 50      AUDIO.SIDTIMER$ WORD $5000
07625  3903             
07626  3903             ;;AUDIO.CIA1
07627  3903             ;;INCASM "BUFFER256.ASM"
07628  3903             
07629  3903             ;AUDIO.SIDSTART$
07630  3903             ;        SEI
07631  3903             
07632  3903             ;;;        LDA #$10
07633  3903             ;;;        STA MEMORY.COPY16.SOURCE$
07634  3903             ;;;        LDA #$DC
07635  3903             ;;;        STA MEMORY.COPY16.SOURCE$+1
07636  3903             ;;;        LDA #<AUDIO.CIA1
07637  3903             ;;;        STA MEMORY.COPY16.DESTINATION$
07638  3903             ;;;        LDA #>AUDIO.CIA1
07639  3903             ;;;        STA MEMORY.COPY16.DESTINATION$+1
07640  3903             ;;;        LDA #$F0
07641  3903             ;;;        STA MEMORY.COPY16.LENGTH$
07642  3903             ;;;        LDA #$00
07643  3903             ;;;        STA MEMORY.COPY16.LENGTH$+1
07644  3903             ;;;        JSR MEMORY.COPY16$
07645  3903             ;;        LDA #$00
07646  3903             ;;        STA MEMORY.COPY16.SOURCE$
07647  3903             ;;        LDA #$DC
07648  3903             ;;        STA MEMORY.COPY16.SOURCE$+1
07649  3903             ;;        LDA #<AUDIO.CIA1
07650  3903             ;;        STA MEMORY.COPY16.DESTINATION$
07651  3903             ;;        LDA #>AUDIO.CIA1
07652  3903             ;;        STA MEMORY.COPY16.DESTINATION$+1
07653  3903             ;;        LDA #$00
07654  3903             ;;        STA MEMORY.COPY16.LENGTH$
07655  3903             ;;        LDA #$01
07656  3903             ;;        STA MEMORY.COPY16.LENGTH$+1
07657  3903             ;;        JSR MEMORY.COPY16$
07658  3903             ;;;        LDA #$00
07659  3903             ;;;        STA MEMORY.COPY16.SOURCE$
07660  3903             ;;;        LDA #$DC
07661  3903             ;;;        STA MEMORY.COPY16.SOURCE$+1
07662  3903             ;;;        LDA #<AUDIO.CIA1
07663  3903             ;;;        STA MEMORY.COPY16.DESTINATION$
07664  3903             ;;;        LDA #>AUDIO.CIA1
07665  3903             ;;;        STA MEMORY.COPY16.DESTINATION$+1
07666  3903             ;;;        LDA #$10
07667  3903             ;;;        STA MEMORY.COPY16.LENGTH$
07668  3903             ;;;        LDA #$00
07669  3903             ;;;        STA MEMORY.COPY16.LENGTH$+1
07670  3903             ;;;        JSR MEMORY.COPY16$
07671  3903             
07672  3903             ;        LDA #<AUDIO.SIDIRQ
07673  3903             ;        LDX #>AUDIO.SIDIRQ
07674  3903             ;        STA $0314
07675  3903             ;        STX $0315
07676  3903             ;        LDA #$1B
07677  3903             ;        LDX #$00
07678  3903             ;        LDY #$7F
07679  3903             ;        STA $D011
07680  3903             ;        STX $D012
07681  3903             ;        STY $DC0D; CIA #1
07682  3903             ;        ;STY $DD0D; CIA #2
07683  3903             
07684  3903             ;          ;LDA $DC0D  ;BY READING THIS TWO REGISTERS WE NEGATE ANY PENDING CIA IRQS.
07685  3903             ;          ;LDA $DD0D  ;IF WE DON'T DO THIS, A PENDING CIA IRQ MIGHT OCCUR AFTER WE FINISH SETTING UP OUR IRQ.
07686  3903             ;                       ;WE DON'T WANT THAT TO HAPPEN.
07687  3903             
07688  3903             ;        LDA #$01
07689  3903             ;        STA $D01A
07690  3903             ;        STA $D019 ; ACK ANY RASTER IRQS
07691  3903             ;        LDA #$00
07692  3903             ;
07693  3903             ;        ; CHANGE TOD TO 50 HZ
07694  3903             ;        LDA $DD0E
07695  3903             ;        ORA #%10000000
07696  3903             ;        STA $DD0E
07697  3903             ;        LDA $DC0E
07698  3903             ;        ORA #%10000000
07699  3903             ;        STA $DC0E
07700  3903             
07701  3903             ;        ;JSR $A000
07702  3903             ;        ;;JSR $A048
07703  3903             ;        LDA #>AUDIO.SIDAFTERINIJMP
07704  3903             ;        PHA
07705  3903             ;        LDA #<AUDIO.SIDAFTERINIJMP
07706  3903             ;        PHA
07707  3903             ;        LDA #$00 ; !!!
07708  3903             ;        JMP (AUDIO.SIDINITADDRESS$) ;INITIALIZE RICHARD'S MUSIC
07709  3903             ;AUDIO.SIDAFTERINIJMP=*-1
07710  3903             
07711  3903             ;;        LDA AUDIO.SIDINITADDRESS$
07712  3903             ;;        STA AUDIO.SIDINITJSR+1
07713  3903             ;;        LDA AUDIO.SIDINITADDRESS$+1
07714  3903             ;;        STA AUDIO.SIDINITJSR+2
07715  3903             ;;        LDA #$00
07716  3903             ;;AUDIO.SIDINITJSR
07717  3903             ;;        JSR $1234
07718  3903             
07719  3903             ;        CLI
07720  3903             ;        RTS
07721  3903             
07722  3903             
07723  3903             ;AUDIO.SIDIRQ
07724  3903             
07725  3903             ;           PHA        ;STORE REGISTER A IN STACK
07726  3903             ;           TXA
07727  3903             ;           PHA        ;STORE REGISTER X IN STACK
07728  3903             ;           TYA
07729  3903             ;           PHA        ;STORE REGISTER Y IN STACK
07730  3903             
07731  3903             
07732  3903             ;        LDA AUDIO.SIDFINISHED$
07733  3903             ;        CMP #$01
07734  3903             ;        BNE @CONT
07735  3903             ;        JMP @DONE
07736  3903             ;@CONT
07737  3903             
07738  3903             
07739  3903             ;        LDA #$01
07740  3903             ;        STA $D019 ; ACK ANY RASTER IRQS
07741  3903             
07742  3903             ;        ;JSR $A006
07743  3903             ;        ;JSR $A021 ;PLAY THE MUSIC
07744  3903             ;        LDA #>AUDIO.SIDAFTERPLAYJMP
07745  3903             ;        PHA
07746  3903             ;        LDA #<AUDIO.SIDAFTERPLAYJMP
07747  3903             ;        PHA
07748  3903             ;        JMP (AUDIO.SIDPLAYADDRESS$) ;PLAY THE MUSIC
07749  3903             ;AUDIO.SIDAFTERPLAYJMP=*-1
07750  3903             
07751  3903             ;@DONE
07752  3903             ;           PLA
07753  3903             ;           TAY        ;RESTORE REGISTER Y FROM STACK (REMEMBER STACK IS FIFO: FIRST IN FIRST OUT)
07754  3903             ;           PLA
07755  3903             ;           TAX        ;RESTORE REGISTER X FROM STACK
07756  3903             ;           PLA        ;RESTORE REGISTER A FROM STACK
07757  3903             
07758  3903             ;           ;JMP $EA81
07759  3903             ;           JMP $EA31   ; CALL ROUTINE TO MOVE/FLASH CURSOR, READ KEYBOARD, ETC. (2)
07760  3903             ;           ;RTI         ;(3)
07761  3903             
07762  3903             
07763  3903             ;AUDIO.SIDEND$
07764  3903             
07765  3903             ;        LDA #$01
07766  3903             ;        STA AUDIO.SIDFINISHED$
07767  3903             
07768  3903             ;        SEI
07769  3903             
07770  3903             ;        LDA #$31
07771  3903             ;        ;LDA #$81
07772  3903             ;        LDX #$EA
07773  3903             ;        STA $0314
07774  3903             ;        STX $0315
07775  3903             
07776  3903             ;;;        LDA #$10
07777  3903             ;;;        STA MEMORY.COPY16.DESTINATION$
07778  3903             ;;;        LDA #$DC
07779  3903             ;;;        STA MEMORY.COPY16.DESTINATION$+1
07780  3903             ;;;        LDA #<AUDIO.CIA1
07781  3903             ;;;        STA MEMORY.COPY16.SOURCE$
07782  3903             ;;;        LDA #>AUDIO.CIA1
07783  3903             ;;;        STA MEMORY.COPY16.SOURCE$+1
07784  3903             ;;;        LDA #$F0
07785  3903             ;;;        STA MEMORY.COPY16.LENGTH$
07786  3903             ;;;        LDA #$00
07787  3903             ;;;        STA MEMORY.COPY16.LENGTH$+1
07788  3903             ;;;        JSR MEMORY.COPY16$
07789  3903             ;;        LDA #$00
07790  3903             ;;        STA MEMORY.COPY16.DESTINATION$
07791  3903             ;;        LDA #$DC
07792  3903             ;;        STA MEMORY.COPY16.DESTINATION$+1
07793  3903             ;;        LDA #<AUDIO.CIA1
07794  3903             ;;        STA MEMORY.COPY16.SOURCE$
07795  3903             ;;        LDA #>AUDIO.CIA1
07796  3903             ;;        STA MEMORY.COPY16.SOURCE$+1
07797  3903             ;;        LDA #$00
07798  3903             ;;        STA MEMORY.COPY16.LENGTH$
07799  3903             ;;        LDA #$01
07800  3903             ;;        STA MEMORY.COPY16.LENGTH$+1
07801  3903             ;;        JSR MEMORY.COPY16$
07802  3903             ;;;;        LDA #$00
07803  3903             ;;;;        STA MEMORY.COPY16.DESTINATION$
07804  3903             ;;;;        LDA #$DC
07805  3903             ;;;;        STA MEMORY.COPY16.DESTINATION$+1
07806  3903             ;;;;        LDA #<AUDIO.CIA1
07807  3903             ;;;;        STA MEMORY.COPY16.SOURCE$
07808  3903             ;;;;        LDA #>AUDIO.CIA1
07809  3903             ;;;;        STA MEMORY.COPY16.SOURCE$+1
07810  3903             ;;;;        LDA #$10
07811  3903             ;;;;        STA MEMORY.COPY16.LENGTH$
07812  3903             ;;;;        LDA #$00
07813  3903             ;;;;        STA MEMORY.COPY16.LENGTH$+1
07814  3903             ;;;;        JSR MEMORY.COPY16$
07815  3903             
07816  3903             ;        LDA #$1B
07817  3903             ;        ;LDA #$9B
07818  3903             ;        STA $D011
07819  3903             
07820  3903             ;        LDX #$00
07821  3903             ;        ;LDX #$0C
07822  3903             ;        STX $D012
07823  3903             
07824  3903             
07825  3903             ;         LDA #0
07826  3903             ;   STA $DC0E      ;SET TOD CLOCK FREQUENCY TO 60HZ
07827  3903             ;   STA $DC0F      ;ENABLE SET-TOD-CLOCK
07828  3903             ;   STA $DC0B      ;SET TOD-CLOCK TO 0 (HOURS)
07829  3903             ;   STA $DC0A      ;- (MINUTES)
07830  3903             ;   STA $DC09      ;- (SECONDS)
07831  3903             ;   STA $DC08      ;- (DECISECONDS)
07832  3903             ;        BIT $DC0E
07833  3903             ;        BIT $DC0F
07834  3903             ;        BIT $DC0D
07835  3903             ;                LDA #0
07836  3903             ;                STA $DC0E
07837  3903             
07838  3903             ;        ;LDY #$00
07839  3903             ;        ;LDY #$81 ; CIA #1: HTTP://UNUSEDINO.DE/EC64/TECHNICAL/AAY/C64/CIA113.HTM
07840  3903             ;        LDY #$7F
07841  3903             ;        STY $DC0D
07842  3903             ;        LDY #$81
07843  3903             ;        STY $DC0D
07844  3903             
07845  3903             ;        LDY #$7F ; CIA #2: HTTP://UNUSEDINO.DE/EC64/TECHNICAL/AAY/C64/CIA213.HTM
07846  3903             ;        STY $DD0D
07847  3903             
07848  3903             ;        LDA #$01
07849  3903             ;        STA $DC0E
07850  3903             ;;        LDA #$08
07851  3903             ;;        STA $DC0F
07852  3903             
07853  3903             ;;        ;LDA #$7F
07854  3903             ;;;        STA $D01A ; TURN OFF RASTER INTERRUPTS
07855  3903             ;;;        LDA #$01
07856  3903             ;;;        STA $DC0D ; TURN ON CIA INTERRUPTS
07857  3903             
07858  3903             ;        LDX #$00
07859  3903             ;        ;LDX #$F0
07860  3903             ;        ;LDY #$01
07861  3903             ;        STX $D01A
07862  3903             ;        ;STY $D019 ; ACK ANY RASTER IRQS
07863  3903             
07864  3903             ;        LDA #$FF
07865  3903             ;        ;LDA #$00
07866  3903             ;        STA $D019 ; ACK ANY PENDING INTERRUPT
07867  3903             
07868  3903             ;        CLI
07869  3903             
07870  3903             ;;        JSR $FFEA ; CALL UDTIM
07871  3903             
07872  3903             ;        LDA #AUDIO.VOICE1$
07873  3903             ;        STA AUDIO.SETFREQUENCY.VOICE$
07874  3903             ;        LDA #$00
07875  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$
07876  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$+1
07877  3903             ;        JSR AUDIO.SETFREQUENCY$
07878  3903             
07879  3903             ;        LDA #AUDIO.VOICE2$
07880  3903             ;        STA AUDIO.SETFREQUENCY.VOICE$
07881  3903             ;        LDA #$00
07882  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$
07883  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$+1
07884  3903             ;        JSR AUDIO.SETFREQUENCY$
07885  3903             
07886  3903             ;        LDA #AUDIO.VOICE3$
07887  3903             ;        STA AUDIO.SETFREQUENCY.VOICE$
07888  3903             ;        LDA #$00
07889  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$
07890  3903             ;        STA AUDIO.SETFREQUENCY.FREQUENCY$+1
07891  3903             ;        JSR AUDIO.SETFREQUENCY$
07892  3903             
07893  3903             ;        RTS
07894  3903             
07895  3903             AUDIO.SIDSTART$ 
07896  3903  78                    SEI
07897  3904  A9 35                 LDA #$35; DISABLE KERNAL AND BASIC ROMS
07898  3906  85 01                 STA $01
07899  3908             
07900  3908  20 1D 39              JSR AUDIO.SID_INIT
07901  390B             
07902  390B  20 91 39              JSR AUDIO.SID_PLAY
07903  390E             
07904  390E  60                    RTS
07905  390F             
07906  390F             
07907  390F             AUDIO.SIDEND$ 
07908  390F  A9 01                 LDA #$01
07909  3911  8D 00 39              STA AUDIO.SIDFINISHED$
07910  3914                        
07911  3914  20 4B 39              JSR AUDIO.SID_OFF
07912  3917                        
07913  3917  A9 36                 LDA #$36 ; ENABLE KERNAL BUT KEEP BASIC DISABLED
07914  3919  85 01                 STA $01
07915  391B  58                    CLI
07916  391C             
07917  391C  60                    RTS
07918  391D             
07919  391D             AUDIO.SID_INIT 
07920  391D  20 4B 39              JSR AUDIO.SID_OFF
07921  3920             
07922  3920                        ;LDA #$00
07923  3920                        ;JSR $A000 ;INITIALIZE RICHARD'S MUSIC
07924  3920             
07925  3920  A9 39                 LDA #>AUDIO.SIDAFTERINIJMP
07926  3922  48                    PHA
07927  3923  A9 2A                 LDA #<AUDIO.SIDAFTERINIJMP
07928  3925  48                    PHA
07929  3926  A9 00                 LDA #$00 ; !!!
07930  3928  6C FC 38              JMP (AUDIO.SIDINITADDRESS$) ;INITIALIZE RICHARD'S MUSIC
07931  392B             AUDIO.SIDAFTERINIJMP=*-1 
07932  392B             
07933  392B                        ;CLI
07934  392B             
07935  392B  60                    RTS
07936  392C             
07937  392C             AUDIO.SID_ON 
07938  392C                        ; TURN ON VOLUME
07939  392C  A9 0F                 LDA #$0F
07940  392E  85 73                 STA AUDIO.SETVOLUME.VALUE$
07941  3930  20 77 38              JSR AUDIO.SETVOLUME$
07942  3933             
07943  3933  A9 39                 LDA #>AUDIO.SIDON
07944  3935  8D FB FF              STA $FFFB
07945  3938  A9 A4                 LDA #<AUDIO.SIDON
07946  393A  8D FA FF              STA $FFFA
07947  393D             
07948  393D  A9 81                 LDA #%10000001    ; ENABLE CIA-2 TIMER A NMI
07949  393F  8D 0D DD              STA $DD0D
07950  3942  AD 0D DD              LDA $DD0D
07951  3945  A9 01                 LDA #%00000001    ; TIMER A START
07952  3947  8D 0E DD              STA $DD0E
07953  394A  60                    RTS
07954  394B             
07955  394B             AUDIO.SID_OFF 
07956  394B  A9 00                 LDA #%00000000
07957  394D  8D 0E DD              STA $DD0E         ; TIMER A STOP
07958  3950  A9 4F                 LDA #%01001111    ; DISABLE ALL CIA-2 NMI'S
07959  3952  8D 0D DD              STA $DD0D
07960  3955  AD 0D DD              LDA $DD0D
07961  3958             
07962  3958  A9 39                 LDA #>AUDIO.SIDOFF
07963  395A  8D FB FF              STA $FFFB
07964  395D  A9 D2                 LDA #<AUDIO.SIDOFF
07965  395F  8D FA FF              STA $FFFA
07966  3962             
07967  3962                        ; TURN OFF VOLUME
07968  3962  A9 00                 LDA #$00
07969  3964  85 73                 STA AUDIO.SETVOLUME.VALUE$
07970  3966  20 77 38              JSR AUDIO.SETVOLUME$
07971  3969             
07972  3969  A9 01                 LDA #AUDIO.VOICE1$
07973  396B  85 73                 STA AUDIO.SETFREQUENCY.VOICE$
07974  396D  A9 00                 LDA #$00
07975  396F  85 75                 STA AUDIO.SETFREQUENCY.FREQUENCY$
07976  3971  85 76                 STA AUDIO.SETFREQUENCY.FREQUENCY$+1
07977  3973  20 BF 38              JSR AUDIO.SETFREQUENCY$
07978  3976             
07979  3976  A9 02                 LDA #AUDIO.VOICE2$
07980  3978  85 73                 STA AUDIO.SETFREQUENCY.VOICE$
07981  397A  A9 00                 LDA #$00
07982  397C  85 75                 STA AUDIO.SETFREQUENCY.FREQUENCY$
07983  397E  85 76                 STA AUDIO.SETFREQUENCY.FREQUENCY$+1
07984  3980  20 BF 38              JSR AUDIO.SETFREQUENCY$
07985  3983             
07986  3983  A9 03                 LDA #AUDIO.VOICE3$
07987  3985  85 73                 STA AUDIO.SETFREQUENCY.VOICE$
07988  3987  A9 00                 LDA #$00
07989  3989  85 75                 STA AUDIO.SETFREQUENCY.FREQUENCY$
07990  398B  85 76                 STA AUDIO.SETFREQUENCY.FREQUENCY$+1
07991  398D  20 BF 38              JSR AUDIO.SETFREQUENCY$
07992  3990             
07993  3990  60                    RTS
07994  3991             
07995  3991             AUDIO.SID_PLAY 
07996  3991             
07997  3991  20 4B 39              JSR AUDIO.SID_OFF
07998  3994             
07999  3994             ;        ; TIMER VALUE OF 19656 ($4CC8)
08000  3994             ;        LDA #$00
08001  3994             ;        STA $DD04
08002  3994             ;        LDA #$50
08003  3994             ;        STA $DD05
08004  3994  AD 01 39              LDA AUDIO.SIDTIMER$
08005  3997  8D 04 DD              STA $DD04
08006  399A  AD 02 39              LDA AUDIO.SIDTIMER$+1
08007  399D  8D 05 DD              STA $DD05
08008  39A0             
08009  39A0  20 2C 39              JSR AUDIO.SID_ON
08010  39A3             
08011  39A3  60                    RTS
08012  39A4             
08013  39A4             AUDIO.SIDON 
08014  39A4             
08015  39A4                        ; THIS WILL STORE THE VALUES OF A,X,Y AT THE MEMORY LOCATION WHERE THEY
08016  39A4                        ; ARE LOADED BACK NEAR THE END OF THIS INTERRUPT HANDLER
08017  39A4  8D CD 39              STA AUDIO.SIDABUFF
08018  39A7  8C CF 39              STY AUDIO.SIDYBUFF
08019  39AA  8E D1 39              STX AUDIO.SIDXBUFF
08020  39AD             
08021  39AD                        ;JSR $A006
08022  39AD             
08023  39AD  A9 39                 LDA #>AUDIO.SIDAFTERPLAYJMP
08024  39AF  48                    PHA
08025  39B0  A9 B5                 LDA #<AUDIO.SIDAFTERPLAYJMP
08026  39B2  48                    PHA
08027  39B3  6C FE 38              JMP (AUDIO.SIDPLAYADDRESS$) ;PLAY THE MUSIC
08028  39B6             AUDIO.SIDAFTERPLAYJMP=*-1 
08029  39B6             
08030  39B6                        ; MANUALLY UPDATE THE TOD VARIABLES
08031  39B6  18                    CLC                             ; CLEAR CARRY
08032  39B7  A5 A2                 LDA $A2
08033  39B9  69 01                 ADC #$01
08034  39BB  85 A2                 STA $A2
08035  39BD  A5 A1                 LDA $A1
08036  39BF  69 00                 ADC #$00
08037  39C1  85 A1                 STA $A1
08038  39C3  A5 A0                 LDA $A0
08039  39C5  69 00                 ADC #$00
08040  39C7  85 A0                 STA $A0
08041  39C9             
08042  39C9  AD 0D DD              LDA $DD0D
08043  39CC             
08044  39CC             AUDIO.SIDABUFF=*+1 
08045  39CC  A9 00                 LDA #$00
08046  39CE             AUDIO.SIDYBUFF=*+1 
08047  39CE  A0 00                 LDY #$00
08048  39D0             AUDIO.SIDXBUFF=*+1 
08049  39D0  A2 00                 LDX #$00
08050  39D2             
08051  39D2             AUDIO.SIDOFF 
08052  39D2  40                    RTI
08053  39D3             
08054  39D3             
08055  39D3             ;-------------------------------------------------------------------------
08056  39D3             ;ALIGN $100
08057  39D3             
08058  39D3             ; HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:NMI_SAMPLE_PLAYER
08059  39D3             AUDIO.DIGITABLE=* 
08060  39D3  00 A0      AUDIO.DIGISTARTADDRESS$ WORD $A000 ; DIGI START ADDRESS
08061  39D5  FF BF      AUDIO.DIGIENDADDRESS$ WORD $BFFF ; DIGI ENDI ADDRESS
08062  39D7  00 01      AUDIO.DIGISAMPLERATE$ WORD $0100 ; SAMPLE RATE: 256 FOR 8 BIT MONO 8 KHZ
08063  39D9  00         AUDIO.DIGIFINISHED$ BYTE $00 ; IS SET TO 1 ONCE THE AUDIO HAS FINISHED PLAYING
08064  39DA             
08065  39DA             AUDIO.DIGISOUNDPTR = $30 ; 2 BYTES
08066  39DA             AUDIO.DIGIPOINT = $32 ; 2 BYTES
08067  39DA             AUDIO.SIDADDRESS = $D400
08068  39DA             AUDIO.DIGIDB = 0
08069  39DA             
08070  39DA             WITHSIDPLAYER = 0
08074  39DA             
08075  39DA             ;0: HIGH NIBBLE FIRST 1: LOW NIBBLE FIRST
08076  39DA             ;FIRSTNIBBLE=1
08077  39DA             FIRSTNIBBLE=0 
08078  39DA             ;1: NO NIBBLES
08079  39DA             ;NONIBBLES=1
08080  39DA             NONIBBLES=0 
08081  39DA             
08082  39DA             AUDIO.DIGISTART$ 
08083  39DA             
08084  39DA  78                    SEI
08085  39DB  A9 35                 LDA #$35; DISABLE KERNAL AND BASIC ROMS
08086  39DD  85 01                 STA $01
08087  39DF             
08088  39DF  A9 00                 LDA #$00
08089  39E1  8D D9 39              STA AUDIO.DIGIFINISHED$
08090  39E4             
08091  39E4  20 F8 39              JSR AUDIO.DIGIINIT$
08092  39E7  A0 D3                 LDY #<AUDIO.DIGITABLE
08093  39E9  A2 39                 LDX #>AUDIO.DIGITABLE
08094  39EB  20 84 3A              JSR AUDIO.DIGIPLAY$
08095  39EE             
08096  39EE             ;        LDA #$36 ; ENABLE KERNAL BUT KEEP BASIC DISABLED
08097  39EE             ;        STA $01
08098  39EE             ;        CLI
08099  39EE             
08100  39EE  60                    RTS
08101  39EF             
08102  39EF             AUDIO.DIGIEND$ 
08103  39EF             
08104  39EF  20 5B 3A              JSR AUDIO.DIGIOFF$
08105  39F2             
08106  39F2  A9 36                 LDA #$36 ; ENABLE KERNAL BUT KEEP BASIC DISABLED
08107  39F4  85 01                 STA $01
08108  39F6  58                    CLI
08109  39F7             
08110  39F7  60                    RTS
08111  39F8             
08112  39F8             AUDIO.DIGIINIT$ 
08113  39F8  20 5B 3A              JSR AUDIO.DIGIOFF$
08114  39FB             
08115  39FB  A9 00                 LDA #$00
08116  39FD  A2 00                 LDX #$00
08117  39FF  EA                    NOP
08118  3A00             @L
08119  3A00  9D 00 D4              STA AUDIO.SIDADDRESS,X
08120  3A03  E8                    INX
08121  3A04  D0 FA                 BNE @L
08122  3A06             
08123  3A06  A9 00                 LDA #$00
08124  3A08  8D 05 D4              STA AUDIO.SIDADDRESS+$05   ; VOICE 1 AD
08125  3A0B  A9 F0                 LDA #$F0
08126  3A0D  8D 06 D4              STA AUDIO.SIDADDRESS+$06   ;         SR
08127  3A10  A9 01                 LDA #$01
08128  3A12  8D 04 D4              STA AUDIO.SIDADDRESS+$04   ;         CTRL
08129  3A15  A9 00                 LDA #$00
08130  3A17  8D 0C D4              STA AUDIO.SIDADDRESS+$0C   ; VOICE 2 AD
08131  3A1A  A9 F0                 LDA #$F0
08132  3A1C  8D 0D D4              STA AUDIO.SIDADDRESS+$0D   ;         SR
08133  3A1F  A9 01                 LDA #$01
08134  3A21  8D 0B D4              STA AUDIO.SIDADDRESS+$0B   ;         CTRL
08135  3A24  A9 00                 LDA #$00
08136  3A26  8D 13 D4              STA AUDIO.SIDADDRESS+$13   ; VOICE 3 AD
08137  3A29  A9 F0                 LDA #$F0
08138  3A2B  8D 14 D4              STA AUDIO.SIDADDRESS+$14   ;         SR
08139  3A2E  A9 01                 LDA #$01
08140  3A30  8D 12 D4              STA AUDIO.SIDADDRESS+$12   ;         CTRL
08141  3A33  A9 00                 LDA #$00
08142  3A35  8D 15 D4              STA AUDIO.SIDADDRESS+$15   ; FILTER LO
08143  3A38  A9 10                 LDA #$10
08144  3A3A  8D 16 D4              STA AUDIO.SIDADDRESS+$16   ; FILTER HI
08145  3A3D  A9 F7                 LDA #%11110111
08146  3A3F  8D 17 D4              STA AUDIO.SIDADDRESS+$17   ; FILTER VOICES+RESO
08147  3A42             
08148  3A42  60                    RTS
08149  3A43             
08150  3A43             AUDIO.DIGION$ 
08151  3A43  A9 3A                 LDA #>AUDIO._DIGION
08152  3A45  8D FB FF              STA $FFFB
08153  3A48  A9 B7                 LDA #<AUDIO._DIGION
08154  3A4A  8D FA FF              STA $FFFA
08155  3A4D             
08156  3A4D  A9 81                 LDA #%10000001    ; ENABLE CIA-2 TIMER A NMI
08157  3A4F  8D 0D DD              STA $DD0D
08158  3A52  AD 0D DD              LDA $DD0D
08159  3A55  A9 01                 LDA #%00000001    ; TIMER A START
08160  3A57  8D 0E DD              STA $DD0E
08161  3A5A  60                    RTS
08162  3A5B             AUDIO.DIGIOFF$ 
08163  3A5B  A9 00                 LDA #%00000000
08164  3A5D  8D 0E DD              STA $DD0E         ; TIMER A STOP
08165  3A60  A9 4F                 LDA #%01001111    ; DISABLE ALL CIA-2 NMI'S
08166  3A62  8D 0D DD              STA $DD0D
08167  3A65  AD 0D DD              LDA $DD0D
08168  3A68             
08169  3A68  A9 3B                 LDA #>AUDIO._DIGIOFF
08170  3A6A  8D FB FF              STA $FFFB
08171  3A6D  A9 09                 LDA #<AUDIO._DIGIOFF
08172  3A6F  8D FA FF              STA $FFFA
08173  3A72             
08174  3A72  A9 00                 LDA #$00
08175  3A74  85 32                 STA AUDIO.DIGIPOINT
08176  3A76  85 33                 STA AUDIO.DIGIPOINT+1
08177  3A78  8D CD 3A              STA AUDIO.DIGISTOPLO+1
08178  3A7B  8D C7 3A              STA AUDIO.DIGISTOPHI+1
08179  3A7E             
08180  3A7E  A9 00                 LDA #%00000000
08181  3A80  8D 17 D4              STA AUDIO.SIDADDRESS+$17   ; FILTER VOICES+RESO
08182  3A83             
08183  3A83  60                    RTS
08184  3A84             
08185  3A84             
08186  3A84             AUDIO.DIGIPLAY$ 
08187  3A84             
08188  3A84  20 5B 3A              JSR AUDIO.DIGIOFF$
08189  3A87             
08190  3A87  86 31                 STX AUDIO.DIGISOUNDPTR+1
08191  3A89  84 30                 STY AUDIO.DIGISOUNDPTR
08192  3A8B             
08193  3A8B  A0 00                 LDY #$00
08194  3A8D  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08195  3A8F  85 32                 STA AUDIO.DIGIPOINT
08196  3A91  C8                    INY
08197  3A92  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08198  3A94  85 33                 STA AUDIO.DIGIPOINT+1
08199  3A96  C8                    INY
08200  3A97  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08201  3A99  8D CD 3A              STA AUDIO.DIGISTOPLO+1
08202  3A9C  C8                    INY
08203  3A9D  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08204  3A9F  8D C7 3A              STA AUDIO.DIGISTOPHI+1
08205  3AA2  C8                    INY
08206  3AA3  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08207  3AA5  8D 04 DD              STA $DD04
08208  3AA8  C8                    INY
08209  3AA9  B1 30                 LDA (AUDIO.DIGISOUNDPTR),Y
08210  3AAB  8D 05 DD              STA $DD05
08211  3AAE             
08212  3AAE             
08214  3AAE  A9 00                 LDA #$00
08215  3AB0  8D E4 3A              STA AUDIO.DIGI_NIB+1
08217  3AB3             
08218  3AB3  20 43 3A              JSR AUDIO.DIGION$
08219  3AB6             
08220  3AB6  60                    RTS
08221  3AB7             
08222  3AB7             ;-------------------------------------------
08223  3AB7             ;ALIGN $100
08224  3AB7             
08225  3AB7             AUDIO._DIGION 
08226  3AB7  8D 06 3B              STA AUDIO._DIGIABUFFER
08227  3ABA  8C 08 3B              STY AUDIO._DIGIYBUFFER
08228  3ABD             
08233  3ABD  A9 10                 LDA #$10
08235  3ABF             
08236  3ABF  09 00      AUDIO.DIGID418NMI ORA #$00
08237  3AC1  8D 18 D4              STA AUDIO.SIDADDRESS+$18          ; VOLUME REG
08238  3AC4             
08242  3AC4             
08246  3AC4             
08247  3AC4  A5 33                 LDA AUDIO.DIGIPOINT+1
08248  3AC6  C9 12      AUDIO.DIGISTOPHI CMP #$12                ;ENDHIGH
08249  3AC8  D0 17                 BNE AUDIO.DIGI_SK1
08250  3ACA             
08251  3ACA  A5 32                 LDA AUDIO.DIGIPOINT
08252  3ACC  C9 00      AUDIO.DIGISTOPLO CMP #$00                ;ENDLOW
08253  3ACE  D0 11                 BNE AUDIO.DIGI_SK1
08254  3AD0             
08258  3AD0  A9 00                 LDA #$00
08260  3AD2             
08261  3AD2  8D C0 3A              STA AUDIO.DIGID418NMI+1
08262  3AD5             
08263  3AD5  A9 01                 LDA #$01
08264  3AD7  8D D9 39              STA AUDIO.DIGIFINISHED$
08265  3ADA             
08266  3ADA  20 5B 3A              JSR AUDIO.DIGIOFF$
08267  3ADD             
08268  3ADD  AD 06 3B              LDA AUDIO._DIGIABUFFER
08269  3AE0             
08270  3AE0  40                    RTI
08271  3AE1             
08272  3AE1             AUDIO.DIGI_SK1 
08273  3AE1             
08274  3AE1  A0 00                 LDY #$00
08275  3AE3             
08277  3AE3             AUDIO.DIGI_NIB 
08278  3AE3  A9 00                 LDA #$00
08279  3AE5  29 01                 AND #$01
08280  3AE7  D0 09                 BNE AUDIO.DIGI_S1
08282  3AE9             
08283  3AE9  B1 32                 LDA (AUDIO.DIGIPOINT),Y
08284  3AEB             
08287  3AEB  4A                    LSR A
08288  3AEC  4A                    LSR A
08289  3AED  4A                    LSR A
08290  3AEE  4A                    LSR A
08294  3AEF             
08295  3AEF  4C FC 3A              JMP AUDIO.DIGI_S2
08296  3AF2             AUDIO.DIGI_S1 
08297  3AF2  B1 32                 LDA (AUDIO.DIGIPOINT),Y
08304  3AF4  29 0F                 AND #$0F
08307  3AF6             
08308  3AF6  E6 32                 INC AUDIO.DIGIPOINT
08309  3AF8  D0 02                 BNE @SK
08310  3AFA  E6 33                 INC AUDIO.DIGIPOINT+1
08311  3AFC             @SK
08312  3AFC             AUDIO.DIGI_S2 
08313  3AFC  8D C0 3A              STA AUDIO.DIGID418NMI+1
08314  3AFF             
08316  3AFF  EE E4 3A              INC AUDIO.DIGI_NIB+1
08318  3B02             
08319  3B02  AD 0D DD              LDA $DD0D ; ACK
08320  3B05             
08321  3B05             AUDIO._DIGIABUFFER=*+1 
08322  3B05  A9 00                 LDA #$00
08323  3B07             AUDIO._DIGIYBUFFER=*+1 
08324  3B07  A0 00                 LDY #$00
08325  3B09             
08326  3B09             AUDIO._DIGIOFF 
08327  3B09  40                    RTI
08328  3B0A             
08329  3B0A             
08330  3B0A             
08331  3B0A             
08332  3B0A             
08333  3B0A             JOYSTICK.PORT1$ = #01
08334  3B0A             JOYSTICK.PORT2$ = #02
08335  3B0A             
08336  3B0A             JOYSTICK.GETSTATE.PORT$ = $7A ; 1 BYTE
08337  3B0A             JOYSTICK.GETSTATE.FIRE$ = $7B ; 1 BYTE
08338  3B0A             JOYSTICK.GETSTATE.DELTAX$ = $7C ; 1 BYTE
08339  3B0A             JOYSTICK.GETSTATE.DELTAY$ = $7D ; 1 BYTE
08340  3B0A             JOYSTICK.GETSTATE$ 
08341  3B0A                        ;HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:JOYSTICK_INPUT_HANDLING
08342  3B0A             
08343  3B0A  A5 7A                 LDA JOYSTICK.GETSTATE.PORT$
08344  3B0C  C9 01                 CMP #JOYSTICK.PORT1$
08345  3B0E  F0 03                 BEQ @PORT1
08346  3B10  4C 19 3B              JMP @PORT2
08347  3B13             @PORT1
08348  3B13  AD 01 DC              LDA $DC01 ; PORT 1
08349  3B16  4C 1C 3B              JMP @GETSTATE
08350  3B19             @PORT2
08351  3B19  AD 00 DC              LDA $DC00 ; PORT 2
08352  3B1C             @GETSTATE
08353  3B1C             
08354  3B1C  A0 00      DJRRB      LDY #0        ; THIS ROUTINE READS AND DECODES THE
08355  3B1E  A2 00                 LDX #0        ; JOYSTICK/FIREBUTTON INPUT DATA IN
08356  3B20  4A                    LSR           ; THE ACCUMULATOR. THIS LEAST SIGNIFICANT
08357  3B21  B0 01                 BCS DJR0      ; 5 BITS CONTAIN THE SWITCH CLOSURE
08358  3B23  88                    DEY           ; INFORMATION. IF A SWITCH IS CLOSED THEN IT
08359  3B24  4A         DJR0       LSR           ; PRODUCES A ZERO BIT. IF A SWITCH IS OPEN THEN
08360  3B25  B0 01                 BCS DJR1      ; IT PRODUCES A ONE BIT. THE JOYSTICK DIR-
08361  3B27  C8                    INY           ; ECTIONS ARE RIGHT, LEFT, FORWARD, BACKWARD
08362  3B28  4A         DJR1       LSR           ; BIT3=RIGHT, BIT2=LEFT, BIT1=BACKWARD,
08363  3B29  B0 01                 BCS DJR2      ; BIT0=FORWARD AND BIT4=FIRE BUTTON.
08364  3B2B  CA                    DEX           ; AT RTS TIME DX AND DY CONTAIN 2'S COMPLIMENT
08365  3B2C  4A         DJR2       LSR           ; DIRECTION NUMBERS I.E. $FF=-1, $00=0, $01=1.
08366  3B2D  B0 01                 BCS DJR3      ; DX=1 (MOVE RIGHT), DX=-1 (MOVE LEFT),
08367  3B2F  E8                    INX           ; DX=0 (NO X CHANGE). DY=-1 (MOVE UP SCREEN),
08368  3B30  4A         DJR3       LSR           ; DY=0 (MOVE DOWN SCREEN), DY=0 (NO Y CHANGE).
08369  3B31  86 7C                 STX JOYSTICK.GETSTATE.DELTAX$        ; THE FORWARD JOYSTICK POSITION CORRESPONDS
08370  3B33  84 7D                 STY JOYSTICK.GETSTATE.DELTAY$        ; TO MOVE UP THE SCREEN AND THE BACKWARD
08371  3B35                        ; POSITION TO MOVE DOWN SCREEN.
08372  3B35  A9 00                 LDA #$00
08373  3B37  90 03                 BCC @FIRE
08374  3B39  4C 3E 3B              JMP @SETFIRE
08375  3B3C             @FIRE      ; AT RTS TIME THE CARRY FLAG CONTAINS THE FIRE
08376  3B3C  A9 01                 LDA #$01      ; BUTTON STATE. IF C=1 THEN BUTTON NOT PRESSED.
08377  3B3E             @SETFIRE   ; IF C=0 THEN PRESSED.
08378  3B3E  85 7B                 STA JOYSTICK.GETSTATE.FIRE$
08379  3B40             
08380  3B40  60                    RTS
08381  3B41             
08382  3B41             
08383  3B41             
08384  3B41             
08385  3B41             
08386  3B41             ;ALIGN $100
08387  3B41             
08388  3B41             ; HTTP://WWW.UNUSEDINO.DE/EC64/TECHNICAL/MISC/C64/ROMLISTING.HTML
08389  3B41  00         DISK.ERROR$ BYTE $00
08390  3B42             ;DISKERR.RUN_STOP$                = $00 ; THIS COULD HAPPEN IF THE USER PRESSES RUN/STOP DURING LOAD
08391  3B42             ;DISKERR.TOO_MANY_FILES$          = $01
08392  3B42             ;DISKERR.FILE_OPEN$               = $02
08393  3B42             ;DISKERR.FILE_NOT_OPEN$           = $03
08394  3B42             ;DISKERR.FILE_NOT_FOUND$          = $04
08395  3B42             ;DISKERR.DEVICE_NOT_PRESENT$      = $05
08396  3B42             ;DISKERR.NOT_INPUT_FILE$          = $06
08397  3B42             ;DISKERR.NOT_OUTPUT_FILE$         = $07
08398  3B42             ;DISKERR.MISSING_FILE_NAME$       = $08
08399  3B42             ;DISKERR.ILLEGAL_DEVICE_NUMBER$   = $09
08400  3B42             ;DISKERR.OUT_OF_DATA$             = $0D
08401  3B42             ;DISKERR.OUT_OF_MEMORY$           = $10
08402  3B42             ;DISKERR.STRING_TOO_LONG$         = $17
08403  3B42             ;DISKERR.FILE_DATA$               = $18
08404  3B42             ;DISKERR.VERIFY$                  = $1C
08405  3B42             ;DISKERR.LOAD$                    = $1D
08406  3B42             ;DISKERR.BREAK$                   = $1E
08407  3B42             DISKERROR.OK$ = 00
08408  3B42             DISKERROR.FILE_SCRATCHED$ = 01
08409  3B42             DISKERROR.FILE_OPEN$ = 02
08410  3B42             ;DISKERROR.FILE_NOT_OPEN$           = 03
08411  3B42             ;DISKERROR.FILE_NOT_FOUND$          = 04
08412  3B42             DISKERROR.DEVICE_NOT_PRESENT$ = 05
08413  3B42             DISKERROR.NOT_INPUT_FILE$ = 06
08414  3B42             DISKERROR.NOT_OUTPUT_FILE$ = 07
08415  3B42             DISKERROR.MISSING_FILE_NAME$ = 08
08416  3B42             DISKERROR.ILLEGAL_DEVICE_NUMBER$ = 09
08417  3B42             DISKERROR.OUT_OF_DATA$ = 13
08418  3B42             DISKERROR.OUT_OF_MEMORY$ = 16
08419  3B42             DISKERROR.BLOCK_HEADER_NOT_FOUND$ = 20
08420  3B42             DISKERROR.SYNC_CHAR_NOT_FOUND$ = 21
08421  3B42             DISKERROR.DATA_BLOCK_NOT_PRESENT$ = 22
08422  3B42             DISKERROR.CHECKSUM_ERROR$ = 23
08423  3B42             DISKERROR.BYTE_DECODE_ERROR$ = 24
08424  3B42             DISKERROR.WRITE_VERIFY_ERROR$ = 25
08425  3B42             DISKERROR.WRITE_PROTECT_ON$ = 26
08426  3B42             DISKERROR.CHECKSUM_ERROR_HEADER$ = 27
08427  3B42             DISKERROR.DATA_EXTENDS_BLOCK$ = 28
08428  3B42             DISKERROR.DISK_ID_MISMATCH$ = 29
08429  3B42             DISKERROR.GENERAL_SYNTAX_ERROR$ = 30
08430  3B42             DISKERROR.INVALID_COMMAND$ = 31
08431  3B42             DISKERROR.LONG_LINE$ = 32
08432  3B42             DISKERROR.INVALID_FILENAME$ = 33
08433  3B42             DISKERROR.NO_FILE_GIVEN$ = 34
08434  3B42             DISKERROR.CMD_FILE_NOT_FOUND$ = 39
08435  3B42             DISKERROR.RCD_NOT_PRESENT$ = 50
08436  3B42             DISKERROR.OVERFLOW_IN_RCD$ = 51
08437  3B42             DISKERROR.FILE_TOO_LARGE$ = 52
08438  3B42             DISKERROR.FILE_OPEN_FOR_WRITE$ = 60
08439  3B42             DISKERROR.FILE_NOT_OPEN$ = 61
08440  3B42             DISKERROR.FILE_NOT_FOUND$ = 62
08441  3B42             DISKERROR.FILE_EXISTS$ = 63
08442  3B42             DISKERROR.FILE_TYPE_MISMATCH$ = 64
08443  3B42             DISKERROR.NO_BLOCK$ = 65
08444  3B42             DISKERROR.ILLEGAL_TRACK_SECTOR$ = 66
08445  3B42             DISKERROR.ILLEGAL_SYS_TRACK_SECTOR$ = 67
08446  3B42             DISKERROR.NO_CHANNELS$ = 70
08447  3B42             DISKERROR.DIRECTORY_ERROR$ = 71
08448  3B42             DISKERROR.DISK_DIRECTORY_FULL$ = 72
08449  3B42             DISKERROR.POWER_UP$ = 73
08450  3B42             DISKERROR.DRIVE_NOT_READY$ = 74
08451  3B42             
08452  3B42             
08453  3B42             
08454  3B42             DISK.SETNAM.FILENAME$ = $20 ; 2 BYTES
08455  3B42             DISK.SETNAM 
08456  3B42             
08457  3B42  A9 00                 LDA #$00
08458  3B44  20 90 FF              JSR $FF90 ; DISABLE KERNAL MESSAGES (SEARCHING/LOADING)
08459  3B47             
08460  3B47                        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
08461  3B47                        ;LDA #$02      ; FILENUMBER 2
08462  3B47                        ;JSR $FFC3     ; CALL CLOSE
08463  3B47             
08464  3B47  A9 00                 LDA #DISKERROR.OK$
08465  3B49  8D 41 3B              STA DISK.ERROR$
08466  3B4C             
08467  3B4C  A5 20                 LDA DISK.SETNAM.FILENAME$
08468  3B4E  85 7A                 STA STRING.GETLENGTH.ADDRESS$
08469  3B50  A5 21                 LDA DISK.SETNAM.FILENAME$+1
08470  3B52  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
08471  3B54  20 72 2B              JSR STRING.GETLENGTH$
08472  3B57             
08473  3B57  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
08474  3B59  A6 20                 LDX DISK.SETNAM.FILENAME$
08475  3B5B  A4 21                 LDY DISK.SETNAM.FILENAME$+1
08476  3B5D  20 BD FF              JSR $FFBD     ; CALL SETNAM
08477  3B60  A9 01                 LDA #$01
08478  3B62  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
08479  3B64  D0 02                 BNE @SKIP
08480  3B66  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
08481  3B68             @SKIP      
08482  3B68                        ;LDY #$01      ; NOT $01 MEANS: LOAD TO ADDRESS STORED IN FILE
08483  3B68  A0 00                 LDY #$00        ; SECONDARY ADDRESS OVERRIDDEN BELOW IN CALL TO $FFD5
08484  3B6A  20 BA FF              JSR $FFBA     ; CALL SETLFS
08485  3B6D             
08486  3B6D  60                    RTS
08487  3B6E             
08488  3B6E             DISK.READFILE.FILENAME$ = $20 ; 2 BYTES
08489  3B6E             DISK.READFILE.ADDRESS$ = $22 ; 2 BYTES
08490  3B6E             DISK.READFILE.LENGTH$ = $24 ; 2 BYTES
08491  3B6E             DISK.READFILE$ 
08492  3B6E             
08493  3B6E  A9 00                 LDA #$00
08494  3B70  85 24                 STA DISK.READFILE.LENGTH$
08495  3B72  85 25                 STA DISK.READFILE.LENGTH$+1
08496  3B74             
08497  3B74  20 42 3B              JSR DISK.SETNAM
08498  3B77             
08499  3B77  A9 00                 LDA #$00      ; $00 MEANS: LOAD TO MEMORY (NOT VERIFY)
08500  3B79  A6 22                 LDX DISK.READFILE.ADDRESS$ ; MEMORY ADDRESS TO LOAD
08501  3B7B  A4 23                 LDY DISK.READFILE.ADDRESS$+1
08502  3B7D  20 D5 FF              JSR $FFD5     ; CALL LOAD
08503  3B80  90 07                 BCC @OK    ; IF CARRY SET, A LOAD ERROR HAS HAPPENED
08504  3B82             @ERROR
08505  3B82                        ; ACCUMULATOR CONTAINS BASIC ERROR CODE
08506  3B82             
08507  3B82                        ; MOST LIKELY ERRORS:
08508  3B82                        ; A = $05 (DEVICE NOT PRESENT)
08509  3B82                        ; A = $04 (FILE NOT FOUND)
08510  3B82                        ; A = $1D (LOAD ERROR)
08511  3B82                        ; A = $00 (BREAK, RUN/STOP HAS BEEN PRESSED DURING LOADING)
08512  3B82             
08513  3B82                        ;... ERROR HANDLING ...
08514  3B82             
08515  3B82                        ;STA DISK.ERROR$
08516  3B82                        ;RTS
08517  3B82             
08518  3B82                        ; FOR SOME REASON THE MACHINE HAS ENCOUNTERED A BREAK.
08519  3B82                        ; TRY LOADING THE FILE AGAIN.
08520  3B82  C9 00                 CMP #$00
08521  3B84  F0 E8                 BEQ DISK.READFILE$
08522  3B86             
08523  3B86  4C 2F 3C              JMP DISK.READERRORCHANNEL
08524  3B89             
08525  3B89             @OK
08526  3B89             
08527  3B89                        ;  X/Y = ADDRESS OF LAST BYTE LOADED/VERIFIED (IF CARRY = 0)
08528  3B89  86 80                 STX MATH.SUBTRACT16.MENUEND$
08529  3B8B                        ;STY MATH.SUBTRACT32.MENUEND$+1
08530  3B8B  84 81                 STY MATH.SUBTRACT16.MENUEND$+1
08531  3B8D  A5 22                 LDA DISK.READFILE.ADDRESS$
08532  3B8F  85 82                 STA MATH.SUBTRACT16.SUBTRAHEND$
08533  3B91  A5 23                 LDA DISK.READFILE.ADDRESS$+1
08534  3B93  85 83                 STA MATH.SUBTRACT16.SUBTRAHEND$+1
08535  3B95  20 96 28              JSR MATH.SUBTRACT16$
08536  3B98  A5 84                 LDA MATH.SUBTRACT16.DIFFERENCE$
08537  3B9A  85 24                 STA DISK.READFILE.LENGTH$
08538  3B9C  A5 85                 LDA MATH.SUBTRACT16.DIFFERENCE$+1
08539  3B9E  85 25                 STA DISK.READFILE.LENGTH$+1
08540  3BA0             
08541  3BA0  60                    RTS
08542  3BA1             
08543  3BA1             DISK.READFILE.FILENAME$ = $20 ; 2 BYTES
08544  3BA1             DISK.READFILE.ADDRESS$ = $22 ; 2 BYTES
08545  3BA1             DISK.READFILE.LENGTH$ = $24 ; 2 BYTES
08546  3BA1             DISK.READFILE 
08547  3BA1             
08548  3BA1                        ; DEFAULTS
08549  3BA1             
08550  3BA1                        ;JSR CONSOLE.RESETBUFADDRESS
08551  3BA1             
08552  3BA1                        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
08553  3BA1  A9 02                 LDA #$02      ; FILENUMBER 2
08554  3BA3  20 C3 FF              JSR $FFC3     ; CALL CLOSE
08555  3BA6             
08556  3BA6  A9 00                 LDA #DISKERROR.OK$
08557  3BA8  8D 41 3B              STA DISK.ERROR$
08558  3BAB             
08559  3BAB  A9 00                 LDA #$00
08560  3BAD  85 24                 STA DISK.READFILE.LENGTH$
08561  3BAF  85 25                 STA DISK.READFILE.LENGTH$+1
08562  3BB1             
08563  3BB1  A5 20                 LDA DISK.READFILE.FILENAME$
08564  3BB3  85 7A                 STA STRING.GETLENGTH.ADDRESS$
08565  3BB5  A5 21                 LDA DISK.READFILE.FILENAME$+1
08566  3BB7  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
08567  3BB9  20 72 2B              JSR STRING.GETLENGTH$
08568  3BBC             
08569  3BBC  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
08570  3BBE  A6 20                 LDX DISK.READFILE.FILENAME$
08571  3BC0  A4 21                 LDY DISK.READFILE.FILENAME$+1
08572  3BC2  20 BD FF              JSR $FFBD     ; CALL SETNAM
08573  3BC5             
08574  3BC5  A9 02                 LDA #$02      ; FILE NUMBER 2
08575  3BC7  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
08576  3BC9  D0 02                 BNE @SKIP
08577  3BCB  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
08578  3BCD             @SKIP      
08579  3BCD  A0 02                 LDY #$02      ; SECONDARY ADDRESS 2
08580  3BCF  A0 00                 LDY #$00
08581  3BD1  20 BA FF              JSR $FFBA     ; CALL SETLFS
08582  3BD4             
08583  3BD4  20 C0 FF              JSR $FFC0     ; CALL OPEN
08584  3BD7                        ;BCS ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
08585  3BD7  90 06                 BCC @OK
08586  3BD9                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
08587  3BD9             
08588  3BD9                        ; MOST LIKELY ERRORS:
08589  3BD9                        ; A = $05 (DEVICE NOT PRESENT)
08590  3BD9  8D 41 3B              STA DISK.ERROR$
08591  3BDC                        ;NOP
08592  3BDC                        ;NOP
08593  3BDC                        ;NOP
08594  3BDC             
08595  3BDC                        ;... ERROR HANDLING FOR OPEN ERRORS ...
08596  3BDC  4C 24 3C              JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
08597  3BDF                        ;NOP
08598  3BDF                        ;NOP
08599  3BDF                        ;NOP
08600  3BDF             @OK
08601  3BDF             
08602  3BDF                        ;; CHECK DRIVE ERROR CHANNEL HERE TO TEST FOR
08603  3BDF                        ;; FILE NOT FOUND ERROR ETC.
08604  3BDF                        ;JSR DISK.READERRORCHANNEL
08605  3BDF                        ;LDA #DISKERROR.OK$
08606  3BDF                        ;CMP DISK.ERROR$
08607  3BDF                        ;BEQ @OK2
08608  3BDF                        ;JMP @CLOSE
08609  3BDF             
08610  3BDF             @OK2
08611  3BDF  A2 02                 LDX #$02      ; FILENUMBER 2
08612  3BE1  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 2 NOW USED AS INPUT)
08613  3BE4             
08614  3BE4  A5 22                 LDA DISK.READFILE.ADDRESS$
08615  3BE6  85 AE                 STA $AE
08616  3BE8  A5 23                 LDA DISK.READFILE.ADDRESS$+1
08617  3BEA  85 AF                 STA $AF
08618  3BEC             
08619  3BEC  A0 00                 LDY #$00
08620  3BEE             @LOOP
08621  3BEE  20 B7 FF              JSR $FFB7     ; CALL READST (READ STATUS BYTE)
08622  3BF1                        ;BNE @EOF      ; EITHER EOF OR READ ERROR
08623  3BF1                        ;BEQ @CONT
08624  3BF1  D0 03                 BNE @NO_CONT
08625  3BF3  4C 0B 3C              JMP @CONT
08626  3BF6             @NO_CONT
08627  3BF6  4C FE 3B              JMP @EOF
08628  3BF9             
08629  3BF9  EA                    NOP
08630  3BFA  EA                    NOP
08631  3BFB  EA                    NOP
08632  3BFC  EA                    NOP
08633  3BFD  EA                    NOP
08634  3BFE             
08635  3BFE             @EOF
08636  3BFE  29 40                 AND #$40      ; END OF FILE?
08637  3C00                        ;BEQ READERROR
08638  3C00  D0 03                 BNE @READERROR
08639  3C02  4C 24 3C              JMP @CLOSE
08640  3C05                        
08641  3C05             @READERROR 
08642  3C05                        ; FOR FURTHER INFORMATION, THE DRIVE ERROR CHANNEL HAS TO BE READ
08643  3C05  20 2F 3C              JSR DISK.READERRORCHANNEL
08644  3C08             
08645  3C08  4C 24 3C              JMP @CLOSE
08646  3C0B                        
08647  3C0B             @CONT
08648  3C0B                        ;INC $D020
08649  3C0B  20 CF FF              JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
08650  3C0E  91 AE                 STA ($AE),Y   ; WRITE BYTE TO MEMORY
08651  3C10             
08652  3C10                        ; INCREMENT THE LENGTH
08653  3C10  A2 24                 LDX #<DISK.READFILE.LENGTH$
08654  3C12  86 86                 STX MATH.INC16.ADDRESS$
08655  3C14  A2 00                 LDX #>DISK.READFILE.LENGTH$
08656  3C16  86 87                 STX MATH.INC16.ADDRESS$+1
08657  3C18  20 3C 28              JSR MATH.INC16$
08658  3C1B             
08659  3C1B  E6 AE                 INC $AE
08660  3C1D  D0 02                 BNE @SKIP2
08661  3C1F  E6 AF                 INC $AF
08662  3C21             @SKIP2     
08663  3C21  4C EE 3B              JMP @LOOP     ; NEXT BYTE
08664  3C24             
08665  3C24             @CLOSE
08666  3C24  A9 02                 LDA #$02      ; FILENUMBER 2
08667  3C26  20 C3 FF              JSR $FFC3     ; CALL CLOSE
08668  3C29             
08669  3C29  20 CC FF              JSR $FFCC     ; CALL CLRCHN
08670  3C2C  60                    RTS
08671  3C2D             
08672  3C2D  00 00      DISK.READERRORCHANNEL.ERRORDEC WORD $0000
08673  3C2F             DISK.READERRORCHANNEL 
08674  3C2F             ; HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:READING_THE_ERROR_CHANNEL_OF_A_DISK_DRIVE
08675  3C2F  A9 00                 LDA #$00      ; NO FILENAME
08676  3C31  A2 00                 LDX #$00
08677  3C33  A0 00                 LDY #$00
08678  3C35  20 BD FF              JSR $FFBD     ; CALL SETNAM
08679  3C38             
08680  3C38  A9 0F                 LDA #$0F      ; FILE NUMBER 15
08681  3C3A  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
08682  3C3C  D0 02                 BNE @SKIP
08683  3C3E  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
08684  3C40             @SKIP      
08685  3C40  A0 0F                 LDY #$0F      ; SECONDARY ADDRESS 15 (ERROR CHANNEL)
08686  3C42  20 BA FF              JSR $FFBA     ; CALL SETLFS
08687  3C45             
08688  3C45  20 C0 FF              JSR $FFC0     ; CALL OPEN
08689  3C48                        ;BCS @ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
08690  3C48  90 03                 BCC @OK
08691  3C4A  4C 7C 3C              JMP @ERROR
08692  3C4D             @OK
08693  3C4D             
08694  3C4D  A2 0F                 LDX #$0F      ; FILENUMBER 15
08695  3C4F  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 15 NOW USED AS INPUT)
08696  3C52             
08697  3C52                        ; SET THE LENGTH TO BE CONVERTED FROM PETSCII TO INTEGER TO BE 2 CHARACTERS
08698  3C52  A9 02                 LDA #$02
08699  3C54  85 2A                 STA CONVERT.DEC2HEX8.LEN
08700  3C56             
08701  3C56                        ; READ THE FIRST TWO CHARACTER FROM THE DRIVE (THIS WILL BE THE ERROR NUMBER)
08702  3C56  A0 00                 LDY #$00
08703  3C58             @LOOP
08704  3C58  20 B7 FF              JSR $FFB7     ; CALL READST (READ STATUS BYTE)
08705  3C5B                        ;BNE @EOF      ; EITHER EOF OR READ ERROR
08706  3C5B  F0 03                 BEQ @NOTEOF
08707  3C5D  4C 73 3C              JMP @EOF
08708  3C60             @NOTEOF
08709  3C60  20 CF FF              JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
08710  3C63  99 E4 00              STA CONVERT.DEC2HEX8.VALUE,Y
08711  3C66  C8                    INY
08712  3C67  C4 2A                 CPY CONVERT.DEC2HEX8.LEN
08713  3C69  D0 ED                 BNE @LOOP
08714  3C6B             
08715  3C6B                        ; CONVERT THE ERROR NUMBER CHARACTERS TO INTEGER
08716  3C6B  20 65 1C              JSR CONVERT.DEC2HEX8
08717  3C6E  A5 E0                 LDA CONVERT.DEC2HEX8.RESULT
08718  3C70  8D 41 3B              STA DISK.ERROR$
08719  3C73             
08720  3C73             @EOF
08721  3C73             @CLOSE
08722  3C73  A9 0F                 LDA #$0F      ; FILENUMBER 15
08723  3C75  20 C3 FF              JSR $FFC3     ; CALL CLOSE
08724  3C78             
08725  3C78  20 CC FF              JSR $FFCC     ; CALL CLRCHN
08726  3C7B  60                    RTS
08727  3C7C             @ERROR
08728  3C7C                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
08729  3C7C             
08730  3C7C                        ; MOST LIKELY ERROR:
08731  3C7C                        ; A = $05 (DEVICE NOT PRESENT)
08732  3C7C             
08733  3C7C                        ;... ERROR HANDLING FOR OPEN ERRORS ...
08734  3C7C  4C 73 3C              JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
08735  3C7F             
08736  3C7F  24 3A FF   DISK.GETDISKINFO.FILENAME TEXT '$:', CONSOLE.NULL$
08737  3C82  FF FF FF   DISK.GETDISKINFO.LABEL$ TEXT $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, CONSOLE.NULL$
08738  3C93             ;DISK.GETDISKINFO.ID$ TEXT $FF, $FF, CONSOLE.NULL$
08739  3C93             ;DISK.GETDISKINFO.TYPE$   BYTE $00
08740  3C93  00 00      DISK.GETDISKINFO.BLOCKSFREE$ WORD $0000
08741  3C95             DISK.GETDISKINFO$ 
08742  3C95             
08743  3C95  20 EF 19              JSR CONSOLE.RESETBUFADDRESS
08744  3C98             
08745  3C98                        ; LOAD THE FILE INTO MEMORY
08746  3C98  A9 7F                 LDA #<DISK.GETDISKINFO.FILENAME
08747  3C9A  85 20                 STA DISK.READFILE.FILENAME$
08748  3C9C  A9 3C                 LDA #>DISK.GETDISKINFO.FILENAME
08749  3C9E  85 21                 STA DISK.READFILE.FILENAME$+1
08750  3CA0  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
08751  3CA2  85 22                 STA DISK.READFILE.ADDRESS$
08752  3CA4  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
08753  3CA6  85 23                 STA DISK.READFILE.ADDRESS$+1
08754  3CA8  20 A1 3B              JSR DISK.READFILE
08755  3CAB             
08756  3CAB                        ; CLEAR THE LABEL
08757  3CAB  A9 82                 LDA #<DISK.GETDISKINFO.LABEL$
08758  3CAD  85 73                 STA MEMORY.FILL.ADDRESS$
08759  3CAF  A9 3C                 LDA #>DISK.GETDISKINFO.LABEL$
08760  3CB1  85 74                 STA MEMORY.FILL.ADDRESS$+1
08761  3CB3  A9 FF                 LDA #$FF
08762  3CB5  85 75                 STA MEMORY.FILL.VALUE$
08763  3CB7  A9 10                 LDA #16
08764  3CB9  85 76                 STA MEMORY.FILL.LENGTH$
08765  3CBB  20 03 10              JSR MEMORY.FILL$
08766  3CBE             
08767  3CBE                        ; FIGURE OUT THE OFFSET OF THE LABEL
08768  3CBE  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
08769  3CC0  85 80                 STA MATH.ADD16.ADDEND1$
08770  3CC2  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
08771  3CC4  85 81                 STA MATH.ADD16.ADDEND1$+1
08772  3CC6  A9 08                 LDA #8
08773  3CC8  85 82                 STA MATH.ADD16.ADDEND2$
08774  3CCA  A9 00                 LDA #0
08775  3CCC  85 83                 STA MATH.ADD16.ADDEND2$+1
08776  3CCE  20 00 28              JSR MATH.ADD16$
08777  3CD1             
08778  3CD1                        ; DISK LABEL TEXT IS FROM 8 THRU 23
08779  3CD1  A5 84                 LDA MATH.ADD16.SUM$
08780  3CD3  85 73                 STA MEMORY.COPY.SOURCE$
08781  3CD5  A5 85                 LDA MATH.ADD16.SUM$+1
08782  3CD7  85 74                 STA MEMORY.COPY.SOURCE$+1
08783  3CD9  A9 82                 LDA #<DISK.GETDISKINFO.LABEL$
08784  3CDB  85 75                 STA MEMORY.COPY.DESTINATION$
08785  3CDD  A9 3C                 LDA #>DISK.GETDISKINFO.LABEL$
08786  3CDF  85 76                 STA MEMORY.COPY.DESTINATION$+1
08787  3CE1  A9 10                 LDA #16
08788  3CE3  85 77                 STA MEMORY.COPY.LENGTH$
08789  3CE5  20 8A 0F              JSR MEMORY.COPY$
08790  3CE8             
08791  3CE8                        ; CLEAR BLOCKS FREE
08792  3CE8  A9 00                 LDA #$00
08793  3CEA  8D 93 3C              STA DISK.GETDISKINFO.BLOCKSFREE$
08794  3CED  A9 00                 LDA #$00
08795  3CEF  8D 94 3C              STA DISK.GETDISKINFO.BLOCKSFREE$+1
08796  3CF2             
08797  3CF2                        ; FIGURE OUT THE OFFSET OF THE BLOCKS FREE
08798  3CF2  A9 00                 LDA #<CONSOLE.READSTR.BUFADDRESS
08799  3CF4  85 80                 STA MATH.ADD16.ADDEND1$
08800  3CF6  A9 09                 LDA #>CONSOLE.READSTR.BUFADDRESS
08801  3CF8  85 81                 STA MATH.ADD16.ADDEND1$+1
08802  3CFA  A9 22                 LDA #34
08803  3CFC  85 82                 STA MATH.ADD16.ADDEND2$
08804  3CFE  A9 00                 LDA #0
08805  3D00  85 83                 STA MATH.ADD16.ADDEND2$+1
08806  3D02  20 00 28              JSR MATH.ADD16$
08807  3D05             
08808  3D05                        ; DISK BLOCKS FREE HEXADECIMAL IS FROM 34 THRU 35
08809  3D05  A5 84                 LDA MATH.ADD16.SUM$
08810  3D07  85 73                 STA MEMORY.COPY.SOURCE$
08811  3D09  A5 85                 LDA MATH.ADD16.SUM$+1
08812  3D0B  85 74                 STA MEMORY.COPY.SOURCE$+1
08813  3D0D  A9 93                 LDA #<DISK.GETDISKINFO.BLOCKSFREE$
08814  3D0F  85 75                 STA MEMORY.COPY.DESTINATION$
08815  3D11  A9 3C                 LDA #>DISK.GETDISKINFO.BLOCKSFREE$
08816  3D13  85 76                 STA MEMORY.COPY.DESTINATION$+1
08817  3D15  A9 02                 LDA #2
08818  3D17  85 77                 STA MEMORY.COPY.LENGTH$
08819  3D19  20 8A 0F              JSR MEMORY.COPY$
08820  3D1C             
08821  3D1C  60                    RTS
08822  3D1D             
08823  3D1D             ;ALIGN $100
08824  3D1D             
08825  3D1D             DISK.FILEEXISTS.FILENAME$ = $20 ; 2 BYTES
08826  3D1D             DISK.FILEEXISTS.EXISTS$ = $26 ; 1 BYTE
08827  3D1D             DISK.FILEEXISTS$ 
08828  3D1D                        ; FOR REASONS UNCLEAR, AFTER SEARCHING FOR THE FILE USING THE
08829  3D1D                        ; LOAD"$:FILENAME",8 COMMAND, YOU GET A "?DEVICE NOT READY" ERROR
08830  3D1D                        ; WHICH IS ONLY RESOLVED BY USING LOAD"$",8
08831  3D1D                        ; THIS ADDS EXTRA OVERHEAD WHICH USED WITH A 1541 DRIVE
08832  3D1D                        ; NOT SO MUCH WHEN USED WITH A IEC DEVICE
08833  3D1D             
08834  3D1D                        ; FIND THE FILE USING THE LOAD"$:FILENAME",8 COMMAND
08835  3D1D  20 CE 3D              JSR DISK.GETFILEINFO$
08836  3D20  20 4D 3D              JSR DISK.GETFILEINFOCLOSE$
08837  3D23             
08838  3D23                        ; CHECK FOR ERRORS
08839  3D23  AD 41 3B              LDA DISK.ERROR$
08840  3D26  C9 00                 CMP #DISKERROR.OK$
08841  3D28  F0 01                 BEQ @FILEEXISTOK
08842  3D2A  60                    RTS
08843  3D2B             @FILEEXISTOK 
08844  3D2B             
08845  3D2B                        ; IF TYPE != UNKNOWN THEN WE HAVE FOUND THE FILE
08846  3D2B  AD C8 3D              LDA DISK.GETFILEINFO.TYPE$
08847  3D2E  F0 02                 BEQ @DONE
08848  3D30  A9 01                 LDA #$01
08849  3D32             @DONE
08850  3D32  85 26                 STA DISK.FILEEXISTS.EXISTS$
08851  3D34             
08852  3D34                        ; THE FOLLOWING CODE IS THE FIX FOR THE "?DEVICE NOT READY" ERROR
08853  3D34  A9 24                 LDA #'$'
08854  3D36  8D AD 3D              STA DISK.GETFILEINFO.FILENAME
08855  3D39  20 3C 3E              JSR DISK.GETDISKINFO.RESET
08856  3D3C                        
08857  3D3C             @LOOP
08858  3D3C  AD C8 3D              LDA DISK.GETFILEINFO.TYPE$
08859  3D3F  F0 06                 BEQ @DONE2
08860  3D41  20 7D 3E              JSR DISK.GETNEXTFILEINFO$
08861  3D44  4C 3C 3D              JMP @LOOP
08862  3D47             
08863  3D47             @DONE2
08864  3D47  20 4D 3D              JSR DISK.GETFILEINFOCLOSE$
08865  3D4A             
08866  3D4A  A5 26                 LDA DISK.FILEEXISTS.EXISTS$
08867  3D4C             
08868  3D4C  60                    RTS
08869  3D4D             
08870  3D4D             ;DISK.FILEEXISTS.FILENAME$      = $20 ; 2 BYTES
08871  3D4D             ;DISK.FILEEXISTS.EXISTS$        = $26 ; 1 BYTE
08872  3D4D             ;DISK.FILEEXISTS$
08873  3D4D             ;        LDA #$00
08874  3D4D             ;        STA DISK.FILEEXISTS.EXISTS$
08875  3D4D             
08876  3D4D             ;        LDA #'$'
08877  3D4D             ;        STA DISK.GETFILEINFO.FILENAME
08878  3D4D             ;        JSR DISK.GETDISKINFO.RESET
08879  3D4D             ;
08880  3D4D             ;@LOOP
08881  3D4D             ;        LDA DISK.GETFILEINFO.FILENAME$
08882  3D4D             ;        STA STRING.ISEQUAL.ADDRESS1$
08883  3D4D             ;        LDA DISK.GETFILEINFO.FILENAME$+1
08884  3D4D             ;        STA STRING.ISEQUAL.ADDRESS1$+1
08885  3D4D             ;        LDA #<DISK.GETFILEINFO.NAME$
08886  3D4D             ;        STA STRING.ISEQUAL.ADDRESS2$
08887  3D4D             ;        LDA #>DISK.GETFILEINFO.NAME$
08888  3D4D             ;        STA STRING.ISEQUAL.ADDRESS2$+1
08889  3D4D             ;        JSR STRING.ISEQUAL$
08890  3D4D             ;        LDA STRING.ISEQUAL.VALUE$
08891  3D4D             ;        BNE @FOUNDFILE
08892  3D4D             ;        JMP @CHECKFILETYPE
08893  3D4D             ;@FOUNDFILE
08894  3D4D             ;        LDA #$01
08895  3D4D             ;        STA DISK.FILEEXISTS.EXISTS$
08896  3D4D             
08897  3D4D             ;@CHECKFILETYPE
08898  3D4D             ;        LDA DISK.GETFILEINFO.TYPE$
08899  3D4D             ;        BEQ @DONE2
08900  3D4D             ;        JSR DISK.GETNEXTFILEINFO$
08901  3D4D             ;        JMP @LOOP
08902  3D4D             
08903  3D4D             ;@DONE2
08904  3D4D             ;        JSR DISK.GETFILEINFOCLOSE$
08905  3D4D             
08906  3D4D             ;        LDA DISK.FILEEXISTS.EXISTS$
08907  3D4D             
08908  3D4D             ;        RTS
08909  3D4D             
08910  3D4D             DISK.GETFILEINFOCLOSE$ 
08911  3D4D             ;@CLOSE
08912  3D4D  A9 03                 LDA #$03      ; FILENUMBER 3
08913  3D4F  20 C3 FF              JSR $FFC3     ; CALL CLOSE
08914  3D52             
08915  3D52  20 CC FF              JSR $FFCC     ; CALL CLRCHN
08916  3D55  60                    RTS
08917  3D56             
08918  3D56             ;;DISK.WRITEFILE.FILENAME TEXT "@0:"
08919  3D56             ;DISK.WRITEFILE.FILENAME
08920  3D56             ;DISK.WRITEFILE.NAME TEXT '1234567890123456'
08921  3D56             ;DISK.WRITEFILE.EXT TEXT ",P,W"
08922  3D56             ;DISK.WRITEFILE.FILENAME$ = $20 ; 2 BYTES
08923  3D56             ;DISK.WRITEFILE.ADDRESS$ = $22 ; 2 BYTES
08924  3D56             ;DISK.WRITEFILE.LENGTH$ = $24 ; 2 BYTES
08925  3D56             ;DISK.WRITEFILE.LEN = $26 ; 2 BYTES
08926  3D56             ;DISK.WRITEFILE$
08927  3D56             
08928  3D56             ;        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
08929  3D56             ;        LDA #$02      ; FILENUMBER 2
08930  3D56             ;        JSR $FFC3     ; CALL CLOSE
08931  3D56             
08932  3D56             ;        ; DUE TO A BUG FOR THE REPLACE COMMAND WE NEED TO SCRATCH THE FILE PRIOR TO SAVING IT
08933  3D56             ;        ; HTTPS://WWW.C64-WIKI.COM/WIKI/COMMODORE_1541#DISK_DRIVE_COMMANDS
08934  3D56             ;        JSR DISK.SCRATCHFILE
08935  3D56             ;        LDA DISK.ERROR$
08936  3D56             ;        ;NOP
08937  3D56             ;        ;NOP
08938  3D56             ;        CMP #DISKERROR.OK$
08939  3D56             ;        BEQ @SCRATCHOK
08940  3D56             ;        CMP #DISKERROR.FILE_NOT_FOUND$
08941  3D56             ;        BEQ @SCRATCHOK
08942  3D56             ;        RTS
08943  3D56             ;@SCRATCHOK
08944  3D56             
08945  3D56             ;        ; SET DEFAULT VALUES
08946  3D56             ;        LDA #DISKERROR.OK$
08947  3D56             ;        STA DISK.ERROR$
08948  3D56             
08949  3D56             ;        ; CHECK FOR 0 LENGTH$
08950  3D56             ;        LDA #$00
08951  3D56             ;        STA MATH.CMP16.NUM1$
08952  3D56             ;        STA MATH.CMP16.NUM1$+1
08953  3D56             ;        LDA DISK.WRITEFILE.LENGTH$
08954  3D56             ;        STA MATH.CMP16.NUM2$
08955  3D56             ;        LDA DISK.WRITEFILE.LENGTH$+1
08956  3D56             ;        STA MATH.CMP16.NUM2$+1
08957  3D56             ;        JSR MATH.CMP16$
08958  3D56             ;        BNE @LENOK
08959  3D56             ;        RTS
08960  3D56             ;@LENOK
08961  3D56             
08962  3D56             ;;        ; CHECK DRIVE ERROR CHANNEL
08963  3D56             ;;        JSR DISK.READERRORCHANNEL
08964  3D56             ;;        LDA DISK.ERROR$
08965  3D56             ;;        CMP #DISKERROR.OK$
08966  3D56             ;;        BEQ @OK0
08967  3D56             ;;        JMP @CLOSE
08968  3D56             ;;@OK0
08969  3D56             
08970  3D56             ;        ; GET THE LENGTH OF FILENAME$
08971  3D56             ;        LDA DISK.WRITEFILE.FILENAME$
08972  3D56             ;        STA STRING.GETLENGTH.ADDRESS$
08973  3D56             ;        LDA DISK.WRITEFILE.FILENAME$+1
08974  3D56             ;        STA STRING.GETLENGTH.ADDRESS$+1
08975  3D56             ;        JSR STRING.GETLENGTH$
08976  3D56             ;        LDA STRING.GETLENGTH.LENGTH$
08977  3D56             ;        STA DISK.WRITEFILE.LEN
08978  3D56             
08979  3D56             ;        ; COPY FILENAME$ INTO FILENAME AT POSITION 3
08980  3D56             ;        LDA DISK.WRITEFILE.FILENAME$
08981  3D56             ;        STA MEMORY.COPY.SOURCE$
08982  3D56             ;        LDA DISK.WRITEFILE.FILENAME$+1
08983  3D56             ;        STA MEMORY.COPY.SOURCE$+1
08984  3D56             ;        LDA #<DISK.WRITEFILE.NAME
08985  3D56             ;        STA MEMORY.COPY.DESTINATION$
08986  3D56             ;        LDA #>DISK.WRITEFILE.NAME
08987  3D56             ;        STA MEMORY.COPY.DESTINATION$+1
08988  3D56             ;        LDA DISK.WRITEFILE.LEN
08989  3D56             ;        STA MEMORY.COPY.LENGTH$
08990  3D56             ;        JSR MEMORY.COPY$
08991  3D56             ;
08992  3D56             ;        ; APPEND ',P,W'
08993  3D56             ;        LDX #$00
08994  3D56             ;        LDY DISK.WRITEFILE.LEN
08995  3D56             ;@EXTCOPY_LOOP
08996  3D56             ;        LDA DISK.WRITEFILE.EXT,X
08997  3D56             ;        STA DISK.WRITEFILE.NAME,Y
08998  3D56             ;        INX
08999  3D56             ;        INY
09000  3D56             ;        CPX #4
09001  3D56             ;        BNE @EXTCOPY_LOOP
09002  3D56             
09003  3D56             ;        ; CALCULATE THE LENGTH (LENGTH OF FILENAME$ + 7)
09004  3D56             ;        LDA DISK.WRITEFILE.LEN
09005  3D56             ;        CLC
09006  3D56             ;        ;ADC #7
09007  3D56             ;        ADC #4
09008  3D56             
09009  3D56             ;        ; WRITE LENGTH$ NUMBER OF BYTES FROM ADDRESS$ TO DISK
09010  3D56             ;        LDX #<DISK.WRITEFILE.FILENAME
09011  3D56             ;        LDY #>DISK.WRITEFILE.FILENAME
09012  3D56             ;        JSR $FFBD     ; CALL SETNAM
09013  3D56             
09014  3D56             ;        LDA #$02      ; FILE NUMBER 2
09015  3D56             ;        LDX $BA       ; LAST USED DEVICE NUMBER
09016  3D56             ;        BNE @SKIP
09017  3D56             ;        LDX #$08      ; DEFAULT TO DEVICE 8
09018  3D56             ;@SKIP
09019  3D56             ;        LDY #$02      ; SECONDARY ADDRESS 2
09020  3D56             ;        ;LDY #$00
09021  3D56             ;        JSR $FFBA     ; CALL SETLFS
09022  3D56             
09023  3D56             ;        JSR $FFC0     ; CALL OPEN
09024  3D56             ;        ;BCS ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
09025  3D56             ;        BCC @OK
09026  3D56             ;        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
09027  3D56             
09028  3D56             ;        ;LDA #$01 ; RED
09029  3D56             ;        ;STA $D020
09030  3D56             
09031  3D56             ;        ; MOST LIKELY ERRORS:
09032  3D56             ;        ; A = $05 (DEVICE NOT PRESENT)
09033  3D56             ;        STA DISK.ERROR$
09034  3D56             
09035  3D56             ;        ;... ERROR HANDLING FOR OPEN ERRORS ...
09036  3D56             ;        JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
09037  3D56             ;@OK
09038  3D56             ;        ;; CHECK DRIVE ERROR CHANNEL HERE TO TEST FOR
09039  3D56             ;        ;; FILE NOT FOUND ERROR ETC.
09040  3D56             ;        ;JSR DISK.READERRORCHANNEL
09041  3D56             ;        ;LDA DISK.ERROR$
09042  3D56             ;        ;CMP #DISKERROR.OK$
09043  3D56             ;        ;BEQ @OK2
09044  3D56             ;        ;JMP @CLOSE
09045  3D56             
09046  3D56             ;@OK2
09047  3D56             
09048  3D56             ;        ;LDA #$04 ; PURPLE
09049  3D56             ;        ;STA $D020
09050  3D56             
09051  3D56             ;;        ; CHECK FOR 0 LENGTH$
09052  3D56             ;;        LDA #$00
09053  3D56             ;;        STA MATH.CMP16.NUM1$
09054  3D56             ;;        STA MATH.CMP16.NUM1$+1
09055  3D56             ;;        LDA DISK.WRITEFILE.LENGTH$
09056  3D56             ;;        STA MATH.CMP16.NUM2$
09057  3D56             ;;        LDA DISK.WRITEFILE.LENGTH$+1
09058  3D56             ;;        STA MATH.CMP16.NUM2$+1
09059  3D56             ;;        JSR MATH.CMP16$
09060  3D56             ;;        BNE @OK3
09061  3D56             ;;        JMP @CLOSE
09062  3D56             ;@OK3
09063  3D56             
09064  3D56             ;        LDX #$02      ; FILENUMBER 2
09065  3D56             ;        JSR $FFC9     ; CALL CHKOUT (FILE 2 NOW USED AS OUTPUT)
09066  3D56             
09067  3D56             ;        ; SET THE MEMORY ADDRESS
09068  3D56             ;        LDA DISK.WRITEFILE.ADDRESS$
09069  3D56             ;        STA $AE
09070  3D56             ;        LDA DISK.WRITEFILE.ADDRESS$+1
09071  3D56             ;        STA $AF
09072  3D56             
09073  3D56             ;        LDY #$00
09074  3D56             
09075  3D56             ;        ; RESET THE COUNTER
09076  3D56             ;        LDA #$00
09077  3D56             ;        STA DISK.WRITEFILE.LEN
09078  3D56             ;        STA DISK.WRITEFILE.LEN+1
09079  3D56             
09080  3D56             ;@LOOP
09081  3D56             ;        LDY #$00
09082  3D56             ;        LDX #$08
09083  3D56             ;        JSR $FFB7     ; CALL READST (READ STATUS BYTE)
09084  3D56             ;        ;BNE @EOF      ; EITHER EOF OR READ ERROR
09085  3D56             ;        BEQ @CONT
09086  3D56             
09087  3D56             ;@WRITEERROR
09088  3D56             
09089  3D56             ;        ;LDA #$02 ; RED
09090  3D56             ;        ;STA $D020
09091  3D56             
09092  3D56             ;        ; FOR FURTHER INFORMATION, THE DRIVE ERROR CHANNEL HAS TO BE READ
09093  3D56             ;        JSR DISK.READERRORCHANNEL
09094  3D56             
09095  3D56             ;        JMP @CLOSE
09096  3D56             ;
09097  3D56             ;@CONT
09098  3D56             ;        ;LDA #$03 ; CYAN
09099  3D56             ;        ;STA $D020
09100  3D56             
09101  3D56             ;        LDA ($AE),Y   ; GET BYTE FROM MEMORY
09102  3D56             ;        JSR $FFD2     ; CALL CHROUT (WRITE BYTE TO FILE)
09103  3D56             
09104  3D56             ;        ; INCREMENT THE COUNTER
09105  3D56             ;        LDA #<DISK.WRITEFILE.LEN
09106  3D56             ;        STA MATH.INC16.ADDRESS$
09107  3D56             ;        LDA #>DISK.WRITEFILE.LEN
09108  3D56             ;        STA MATH.INC16.ADDRESS$+1
09109  3D56             ;        JSR MATH.INC16$
09110  3D56             
09111  3D56             ;        ; CHECK HOW MANY BYTES HAVE BEEN WRITTEN TO DISK
09112  3D56             ;        LDA DISK.WRITEFILE.LEN
09113  3D56             ;        STA MATH.CMP16.NUM1$
09114  3D56             ;        LDA DISK.WRITEFILE.LEN+1
09115  3D56             ;        STA MATH.CMP16.NUM1$+1
09116  3D56             ;        LDA DISK.WRITEFILE.LENGTH$
09117  3D56             ;        STA MATH.CMP16.NUM2$
09118  3D56             ;        LDA DISK.WRITEFILE.LENGTH$+1
09119  3D56             ;        STA MATH.CMP16.NUM2$+1
09120  3D56             ;        JSR MATH.CMP16$
09121  3D56             ;        BNE @INC_MEM
09122  3D56             ;        JMP @CLOSE
09123  3D56             
09124  3D56             ;@INC_MEM
09125  3D56             ;        ; INCREMENT MEMORY ADDRESS
09126  3D56             ;        INC $AE
09127  3D56             ;        BNE @SKIP2
09128  3D56             ;        INC $AF
09129  3D56             ;@SKIP2
09130  3D56             
09131  3D56             ;        JMP @LOOP     ; NEXT BYTE
09132  3D56             
09133  3D56             ;@CLOSE
09134  3D56             ;        LDA #$02      ; FILENUMBER 2
09135  3D56             ;        JSR $FFC3     ; CALL CLOSE
09136  3D56             
09137  3D56             ;        JSR $FFCC     ; CALL CLRCHN
09138  3D56             
09139  3D56             ;        JSR DISK.READERRORCHANNEL
09140  3D56             
09141  3D56             ;        RTS
09142  3D56             
09143  3D56             DISK.WRITEFILE.FILENAME$ = $20 ; 2 BYTES
09144  3D56             DISK.WRITEFILE.ADDRESS$ = $22 ; 2 BYTES
09145  3D56             DISK.WRITEFILE.LENGTH$ = $24 ; 2 BYTES
09146  3D56             ;DISK.WRITEFILE.LEN = $26 ; 2 BYTES
09147  3D56             DISK.WRITEFILE$ 
09148  3D56             
09149  3D56  20 CF 3F              JSR DISK.SCRATCHFILE
09150  3D59  AD 41 3B              LDA DISK.ERROR$
09151  3D5C  C9 00                 CMP #DISKERROR.OK$
09152  3D5E  F0 05                 BEQ @SCRATCHOK
09153  3D60  C9 3E                 CMP #DISKERROR.FILE_NOT_FOUND$
09154  3D62  F0 01                 BEQ @SCRATCHOK
09155  3D64  60                    RTS
09156  3D65             @SCRATCHOK 
09157  3D65             
09158  3D65                        ; SET DEFAULT VALUES
09159  3D65  A9 00                 LDA #DISKERROR.OK$
09160  3D67  8D 41 3B              STA DISK.ERROR$
09161  3D6A             
09162  3D6A                        ; CHECK FOR 0 LENGTH$
09163  3D6A  A9 00                 LDA #$00
09164  3D6C  85 80                 STA MATH.CMP16.NUM1$
09165  3D6E  85 81                 STA MATH.CMP16.NUM1$+1
09166  3D70  A5 24                 LDA DISK.WRITEFILE.LENGTH$
09167  3D72  85 82                 STA MATH.CMP16.NUM2$
09168  3D74  A5 25                 LDA DISK.WRITEFILE.LENGTH$+1
09169  3D76  85 83                 STA MATH.CMP16.NUM2$+1
09170  3D78  20 E4 28              JSR MATH.CMP16$
09171  3D7B  D0 01                 BNE @LENOK
09172  3D7D  60                    RTS
09173  3D7E             @LENOK
09174  3D7E             
09175  3D7E  20 42 3B              JSR DISK.SETNAM
09176  3D81             
09177  3D81                        ; CALCULATE THE ENDING ADDRESS
09178  3D81  A5 22                 LDA DISK.WRITEFILE.ADDRESS$
09179  3D83  85 80                 STA MATH.ADD16.ADDEND1$
09180  3D85  A5 23                 LDA DISK.WRITEFILE.ADDRESS$+1
09181  3D87  85 81                 STA MATH.ADD16.ADDEND1$+1
09182  3D89  A5 24                 LDA DISK.WRITEFILE.LENGTH$
09183  3D8B  85 82                 STA MATH.ADD16.ADDEND2$
09184  3D8D  A5 25                 LDA DISK.WRITEFILE.LENGTH$+1
09185  3D8F  85 83                 STA MATH.ADD16.ADDEND2$+1
09186  3D91  20 00 28              JSR MATH.ADD16$
09187  3D94             
09188  3D94  A9 22                 LDA #DISK.WRITEFILE.ADDRESS$ ; THE ZP ADDRESS OF THE STARTING ADDRESS
09189  3D96  A6 84                 LDX MATH.ADD16.SUM$
09190  3D98  A4 85                 LDY MATH.ADD16.SUM$+1
09191  3D9A  20 D8 FF              JSR $FFD8     ; CALL SAVE
09192  3D9D  90 03                 BCC @OK       ; IF CARRY SET, A LOAD ERROR HAS HAPPENED
09193  3D9F             @ERROR
09194  3D9F                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
09195  3D9F             
09196  3D9F                        ; ... ERROR HANDLING ...
09197  3D9F             
09198  3D9F                        ;STA DISK.ERROR$
09199  3D9F                        ;RTS
09200  3D9F             
09201  3D9F  4C 2F 3C              JMP DISK.READERRORCHANNEL
09202  3DA2             
09203  3DA2             @OK
09204  3DA2  60                    RTS
09205  3DA3             
09206  3DA3             DISKFILETYPES.NONE$ = 0
09207  3DA3             DISKFILETYPES.PRG$ = 1
09208  3DA3             DISKFILETYPES.SEQ$ = 2
09209  3DA3             DISKFILETYPES.USR$ = 3
09210  3DA3             DISKFILETYPES.REL$ = 4
09211  3DA3             DISKFILETYPES.DEL$ = 5
09212  3DA3             
09213  3DA3             DISK.GETFILEINFO.FILENAME$ = $20 ; 2 BYTES
09214  3DA3  00         DISK.GETFILEINFO.LEN BYTE $00
09215  3DA4  00         DISK.GETFILEINFO.OFFSET BYTE $00
09216  3DA5  00 00      DISK.GETFILEINFO.CBM WORD $0000 ; 2
09217  3DA7  00 00      DISK.GETFILEINFO.CBM2 WORD $0000 ; 2
09218  3DA9  00         DISK.GETFILEINFO.BLOCKS$ BYTE $00 ; 1 (1 BLOCK => 254 BYTES)
09219  3DAA  20 20 20   DISK.GETFILEINFO.BUF1 TEXT '   ' ; 3
09220  3DAD  24 3A      DISK.GETFILEINFO.FILENAME TEXT '$:' ; 2
09221  3DAF  FF FF FF   DISK.GETFILEINFO.NAME$ TEXT $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF ; 16
09222  3DBF  20 20      DISK.GETFILEINFO.BUF2 TEXT '  ' ; 2
09223  3DC1  20 20 20   DISK.GETFILEINFO.EXTENSION TEXT  '   ' ; 3
09224  3DC4  20 20 20   DISK.GETFILEINFO.BUF3 TEXT '    ' ; 5
09225  3DC8  00         DISK.GETFILEINFO.TYPE$ BYTE $00
09226  3DC9  50 53 55   DISK.GETFILEINFO.TYPEMAP TEXT 'PSURD'
09227  3DCE             
09228  3DCE             DISK.GETFILEINFO$ 
09229  3DCE             
09230  3DCE                        ; SET DEFAULT VALUES
09231  3DCE  A9 00                 LDA #DISKERROR.OK$
09232  3DD0  8D 41 3B              STA DISK.ERROR$
09233  3DD3             
09234  3DD3  A9 00                 LDA #$00
09235  3DD5  8D A4 3D              STA DISK.GETFILEINFO.OFFSET
09236  3DD8             
09237  3DD8  A9 24                 LDA #'$'
09238  3DDA  8D AD 3D              STA DISK.GETFILEINFO.FILENAME
09239  3DDD  A9 3A                 LDA #':'
09240  3DDF  8D AE 3D              STA DISK.GETFILEINFO.FILENAME+1
09241  3DE2             
09242  3DE2  A9 AF                 LDA #<DISK.GETFILEINFO.NAME$
09243  3DE4  85 73                 STA MEMORY.FILL.ADDRESS$
09244  3DE6  A9 3D                 LDA #>DISK.GETFILEINFO.NAME$
09245  3DE8  85 74                 STA MEMORY.FILL.ADDRESS$+1
09246  3DEA  A9 FF                 LDA #$FF
09247  3DEC  85 75                 STA MEMORY.FILL.VALUE$
09248  3DEE  A9 10                 LDA #16
09249  3DF0  85 76                 STA MEMORY.FILL.LENGTH$
09250  3DF2  20 03 10              JSR MEMORY.FILL$
09251  3DF5             
09252  3DF5                        ; CHECK TO SEE IF FILENAME$ IS ZERO
09253  3DF5  A5 20                 LDA DISK.GETFILEINFO.FILENAME$
09254  3DF7  85 80                 STA MATH.CMP16.NUM1$
09255  3DF9  A5 21                 LDA DISK.GETFILEINFO.FILENAME$+1
09256  3DFB  85 81                 STA MATH.CMP16.NUM1$+1
09257  3DFD  A9 00                 LDA #$00
09258  3DFF  85 82                 STA MATH.CMP16.NUM2$
09259  3E01  85 83                 STA MATH.CMP16.NUM2$+1
09260  3E03  20 E4 28              JSR MATH.CMP16$
09261  3E06  D0 03                 BNE @SETNAM_SPECIFIC
09262  3E08  4C 3C 3E              JMP DISK.GETDISKINFO._SETNAM_ALL
09263  3E0B             
09264  3E0B             @SETNAM_SPECIFIC ; SET FILENAME = "$:" + FILENAME$
09265  3E0B             
09266  3E0B                        ; GET THE LENGTH OF THE STRING
09267  3E0B  A5 20                 LDA DISK.GETFILEINFO.FILENAME$
09268  3E0D  85 7A                 STA STRING.GETLENGTH.ADDRESS$
09269  3E0F  A5 21                 LDA DISK.GETFILEINFO.FILENAME$+1
09270  3E11  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
09271  3E13  20 72 2B              JSR STRING.GETLENGTH$
09272  3E16  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
09273  3E18  8D A3 3D              STA DISK.GETFILEINFO.LEN
09274  3E1B             
09275  3E1B                        ; COPY THE STRING TO DISK.GETFILEINFO.NAME$
09276  3E1B  A5 20                 LDA DISK.GETFILEINFO.FILENAME$
09277  3E1D  85 73                 STA MEMORY.COPY.SOURCE$
09278  3E1F  A5 21                 LDA DISK.GETFILEINFO.FILENAME$+1
09279  3E21  85 74                 STA MEMORY.COPY.SOURCE$+1
09280  3E23  A9 AF                 LDA #<DISK.GETFILEINFO.NAME$
09281  3E25  85 75                 STA MEMORY.COPY.DESTINATION$
09282  3E27  A9 3D                 LDA #>DISK.GETFILEINFO.NAME$
09283  3E29  85 76                 STA MEMORY.COPY.DESTINATION$+1
09284  3E2B  AD A3 3D              LDA DISK.GETFILEINFO.LEN
09285  3E2E  85 77                 STA MEMORY.COPY.LENGTH$
09286  3E30  20 8A 0F              JSR MEMORY.COPY$
09287  3E33             
09288  3E33                        ; CALCULATE THE LENGTH (LEN OF FILENAME$ + 2)
09289  3E33  AD A3 3D              LDA DISK.GETFILEINFO.LEN
09290  3E36  18                    CLC
09291  3E37  69 02                 ADC #2
09292  3E39             
09293  3E39  4C 3E 3E              JMP DISK.GETDISKINFO._SETNAM
09294  3E3C             
09295  3E3C             DISK.GETDISKINFO.RESET 
09296  3E3C             
09297  3E3C             DISK.GETDISKINFO._SETNAM_ALL ; SET FILENAME = "$"
09298  3E3C  A9 01                 LDA #01
09299  3E3E                        ;JMP @SETNAM
09300  3E3E             
09301  3E3E             DISK.GETDISKINFO._SETNAM 
09302  3E3E  A2 AD                 LDX #<DISK.GETFILEINFO.FILENAME
09303  3E40  A0 3D                 LDY #>DISK.GETFILEINFO.FILENAME
09304  3E42  20 BD FF              JSR $FFBD     ; CALL SETNAM
09305  3E45             
09306  3E45  A9 03                 LDA #$03      ; FILE NUMBER 3
09307  3E47  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
09308  3E49  D0 02                 BNE @SKIP
09309  3E4B  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
09310  3E4D             @SKIP      
09311  3E4D  A0 02                 LDY #$02      ; SECONDARY ADDRESS 2
09312  3E4F  A0 00                 LDY #$00
09313  3E51  20 BA FF              JSR $FFBA     ; CALL SETLFS
09314  3E54             
09315  3E54  20 C0 FF              JSR $FFC0     ; CALL OPEN
09316  3E57  90 06                 BCC @OK
09317  3E59                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
09318  3E59             
09319  3E59  8D 41 3B              STA DISK.ERROR$
09320  3E5C             
09321  3E5C  4C 4D 3D              JMP DISK.GETFILEINFOCLOSE$    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
09322  3E5F             @OK
09323  3E5F             @OK2
09324  3E5F  A2 03                 LDX #$03      ; FILENUMBER 3
09325  3E61  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 3 NOW USED AS INPUT)
09326  3E64             
09327  3E64                        ;; SKIP THE FIRST 2 BYTES
09328  3E64                        ;LDA #2
09329  3E64                        ;STA DISK.GETFILEINFO.LEN
09330  3E64                        ;JSR DISK.GETNEXTFILEINFO$
09331  3E64             
09332  3E64                        ; SKIP THE DISK LABEL
09333  3E64                        ;LDA #28
09334  3E64  A9 1E                 LDA #30
09335  3E66  8D A3 3D              STA DISK.GETFILEINFO.LEN
09336  3E69  20 7D 3E              JSR DISK.GETNEXTFILEINFO$
09337  3E6C             
09338  3E6C  AD 41 3B              LDA DISK.ERROR$
09339  3E6F                        ;NOP
09340  3E6F  F0 03                 BEQ @GET_FIRST_FILE
09341  3E71  4C 4D 3D              JMP DISK.GETFILEINFOCLOSE$
09342  3E74                        ;JMP @DONE
09343  3E74                        ;;CMP #DISKERROR.OK$
09344  3E74                        ;;BNE @DONE
09345  3E74             
09346  3E74             @GET_FIRST_FILE 
09347  3E74                        ; GET THE FIRST FILE
09348  3E74  A9 20                 LDA #32
09349  3E76  8D A3 3D              STA DISK.GETFILEINFO.LEN
09350  3E79  20 7D 3E              JSR DISK.GETNEXTFILEINFO$
09351  3E7C  60                    RTS
09352  3E7D             ;@DONE
09353  3E7D             ;        RTS
09354  3E7D             
09355  3E7D             DISK.GETNEXTFILEINFO$ 
09356  3E7D             
09357  3E7D                        ; SET DEFAULTS
09358  3E7D  A9 00                 LDA #$00
09359  3E7F  8D A4 3D              STA DISK.GETFILEINFO.OFFSET
09360  3E82             
09361  3E82  A9 00                 LDA #DISKFILETYPES.NONE$
09362  3E84  8D C8 3D              STA DISK.GETFILEINFO.TYPE$
09363  3E87             
09364  3E87  A9 A5                 LDA #<DISK.GETFILEINFO.CBM
09365  3E89  85 AE                 STA $AE
09366  3E8B  A9 3D                 LDA #>DISK.GETFILEINFO.CBM
09367  3E8D  85 AF                 STA $AF
09368  3E8F             
09369  3E8F  A0 00                 LDY #$00
09370  3E91             @LOOP
09371  3E91  20 B7 FF              JSR $FFB7     ; CALL READST (READ STATUS BYTE)
09372  3E94  F0 0D                 BEQ @CONT
09373  3E96             
09374  3E96             @EOF
09375  3E96  29 40                 AND #$40      ; END OF FILE?
09376  3E98  D0 03                 BNE @READERROR
09377  3E9A  4C 4D 3D              JMP DISK.GETFILEINFOCLOSE$
09378  3E9D                        
09379  3E9D             @READERROR 
09380  3E9D                        ; FOR FURTHER INFORMATION, THE DRIVE ERROR CHANNEL HAS TO BE READ
09381  3E9D  20 2F 3C              JSR DISK.READERRORCHANNEL
09382  3EA0             
09383  3EA0  4C 4D 3D              JMP DISK.GETFILEINFOCLOSE$
09384  3EA3                        
09385  3EA3             @CONT
09386  3EA3  20 CF FF              JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
09387  3EA6                        ; DO NOT OVERRIDE A!
09388  3EA6             
09389  3EA6                        ; CHECK TO SEE IF WE HAVE READ THE MAX NUMBER OF BYTES THAT WE WANT
09390  3EA6  EE A4 3D              INC DISK.GETFILEINFO.OFFSET
09391  3EA9  AE A4 3D              LDX DISK.GETFILEINFO.OFFSET
09392  3EAC  EC A3 3D              CPX DISK.GETFILEINFO.LEN
09393  3EAF                        ;BEQ @DONE
09394  3EAF                        ;NOP
09395  3EAF  D0 03                 BNE @CONT2
09396  3EB1  4C DC 3E              JMP @DONE
09397  3EB4             @CONT2
09398  3EB4             
09399  3EB4                        ; NEED TO CHECK THE BLOCK SIZE (SEE BELOW)
09400  3EB4  E0 06                 CPX #6
09401  3EB6  D0 03                 BNE @WRITE_MEM
09402  3EB8  4C C6 3E              JMP @CHECK_BLOCKS
09403  3EBB             @WRITE_MEM 
09404  3EBB             
09405  3EBB  91 AE                 STA ($AE),Y   ; WRITE BYTE TO MEMORY
09406  3EBD  E6 AE                 INC $AE
09407  3EBF  D0 02                 BNE @SKIP2
09408  3EC1  E6 AF                 INC $AF
09409  3EC3             
09410  3EC3             @SKIP2     
09411  3EC3  4C 91 3E              JMP @LOOP     ; NEXT BYTE
09412  3EC6             
09413  3EC6             @CHECK_BLOCKS 
09414  3EC6             
09415  3EC6                        ; BECAUSE THE 1541 DIRECTORY LISTING ADDS SPACES BETWEEN THE BLOCK
09416  3EC6                        ; SIZE AND THE FILE NAME, WE NEED TO ADJUST Y BY THE NUMBER OF BLOCKS.
09417  3EC6  AE A9 3D              LDX DISK.GETFILEINFO.BLOCKS$
09418  3EC9                        ;CPX #00 ; IF LESS THAN 0 GET MUST BE 128-255
09419  3EC9                        ;BMI @INC_Y2
09420  3EC9  E0 0A                 CPX #10 ; CHECK IF LESS THAN 10
09421  3ECB             ;        NOP
09422  3ECB             ;        NOP
09423  3ECB             ;        NOP
09424  3ECB             ;        NOP
09425  3ECB             ;        NOP
09426  3ECB                        ;BCC @WRITE_MEM
09427  3ECB  B0 03                 BCS @WRITE_MEM_OK1
09428  3ECD  4C BB 3E              JMP @WRITE_MEM
09429  3ED0             @WRITE_MEM_OK1 
09430  3ED0  C8                    INY
09431  3ED1  E0 64                 CPX #100 ; CHECK IF LESS THAN 100
09432  3ED3                        ;BCC @WRITE_MEM
09433  3ED3  B0 03                 BCS @WRITE_MEM_OK2
09434  3ED5  4C BB 3E              JMP @WRITE_MEM
09435  3ED8             @WRITE_MEM_OK2 
09436  3ED8  C8                    INY
09437  3ED9  4C BB 3E              JMP @WRITE_MEM
09438  3EDC             
09439  3EDC             ;@INC_Y2
09440  3EDC             ;        INY
09441  3EDC             ;        INY
09442  3EDC             ;        JMP @WRITE_MEM
09443  3EDC             
09444  3EDC             @DONE
09445  3EDC             
09446  3EDC                        ; REPLACE THE " CHARACTER IN THE NAME$ WITH A NULL$
09447  3EDC  A9 AF                 LDA #<DISK.GETFILEINFO.NAME$
09448  3EDE  85 AE                 STA $AE
09449  3EE0  A9 3D                 LDA #>DISK.GETFILEINFO.NAME$
09450  3EE2  85 AF                 STA $AF
09451  3EE4  A0 FF                 LDY #$FF
09452  3EE6             @FNAME_LOOP 
09453  3EE6  C8                    INY
09454  3EE7  C0 11                 CPY #17
09455  3EE9  F0 0D                 BEQ @FNAME_DONE
09456  3EEB             @FNAME_CONT 
09457  3EEB  B1 AE                 LDA ($AE),Y
09458  3EED  C9 22                 CMP #$22 ; DOUBLE-QUOTES
09459  3EEF                        ;BNE @FNAME_LOOP
09460  3EEF  F0 03                 BEQ @FNAME_LOOP2
09461  3EF1  4C E6 3E              JMP @FNAME_LOOP
09462  3EF4             @FNAME_LOOP2 
09463  3EF4  A9 FF                 LDA #$FF
09464  3EF6  91 AE                 STA ($AE),Y
09465  3EF8             @FNAME_DONE 
09466  3EF8             
09467  3EF8  A9 C9                 LDA #<DISK.GETFILEINFO.TYPEMAP
09468  3EFA  85 AE                 STA $AE
09469  3EFC  A9 3D                 LDA #>DISK.GETFILEINFO.TYPEMAP
09470  3EFE  85 AF                 STA $AF
09471  3F00  A0 FF                 LDY #$FF
09472  3F02             @FTYPE_LOOP 
09473  3F02  C8                    INY
09474  3F03  C0 05                 CPY #5
09475  3F05                        ;BEQ @FTYPE_DONE
09476  3F05  D0 03                 BNE @FTYPE_CONT
09477  3F07  4C 18 3F              JMP @FTYPE_DONE
09478  3F0A             @FTYPE_CONT 
09479  3F0A  B1 AE                 LDA ($AE),Y
09480  3F0C  CD C1 3D              CMP DISK.GETFILEINFO.EXTENSION
09481  3F0F                        ;BNE @FTYPE_LOOP
09482  3F0F  F0 03                 BEQ @FTYPE_CONT2
09483  3F11  4C 02 3F              JMP @FTYPE_LOOP
09484  3F14             @FTYPE_CONT2 
09485  3F14  C8                    INY
09486  3F15  8C C8 3D              STY DISK.GETFILEINFO.TYPE$
09487  3F18             @FTYPE_DONE 
09488  3F18             
09489  3F18  A9 20                 LDA #32
09490  3F1A  8D A3 3D              STA DISK.GETFILEINFO.LEN
09491  3F1D             
09492  3F1D  60                    RTS
09493  3F1E             
09494  3F1E  58 30 3A   DISK.EXECMD.FILENAME TEXT "X0:"
09495  3F21  31 32 33   DISK.EXECMD.NAME TEXT '1234567890123456789012345678901234567890'
09496  3F49  00         DISK.EXECMD.LEN BYTE $00
09497  3F4A             DISK.EXECMD 
09498  3F4A             
09499  3F4A                        ; SET DEFAULT VALUE
09500  3F4A  A9 00                 LDA #DISKERROR.OK$
09501  3F4C  8D 41 3B              STA DISK.ERROR$
09502  3F4F             
09503  3F4F  AD 49 3F              LDA DISK.EXECMD.LEN
09504  3F52  A2 1E                 LDX #<DISK.EXECMD.FILENAME
09505  3F54  A0 3F                 LDY #>DISK.EXECMD.FILENAME
09506  3F56  20 BD FF              JSR $FFBD     ; CALL SETNAM
09507  3F59             
09508  3F59  A9 04                 LDA #$04      ; FILE NUMBER 4
09509  3F5B  A6 BA                 LDX $BA       ; LAST USED DEVICE NUMBER
09510  3F5D  D0 02                 BNE @SKIP
09511  3F5F  A2 08                 LDX #$08      ; DEFAULT TO DEVICE 8
09512  3F61             @SKIP      
09513  3F61  A0 0F                 LDY #$0F      ; SECONDARY ADDRESS 15
09514  3F63  20 BA FF              JSR $FFBA     ; CALL SETLFS
09515  3F66             
09516  3F66  20 C0 FF              JSR $FFC0     ; CALL OPEN
09517  3F69  EA                    NOP
09518  3F6A                        ;BCS ERROR    ; IF CARRY SET, THE FILE COULD NOT BE OPENED
09519  3F6A  90 03                 BCC @CLOSE
09520  3F6C                        ; AKKUMULATOR CONTAINS BASIC ERROR CODE
09521  3F6C             
09522  3F6C                        ; MOST LIKELY ERRORS:
09523  3F6C                        ; A = $05 (DEVICE NOT PRESENT)
09524  3F6C  8D 41 3B              STA DISK.ERROR$
09525  3F6F             
09526  3F6F                        ;... ERROR HANDLING FOR OPEN ERRORS ...
09527  3F6F                        ;JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
09528  3F6F             
09529  3F6F             @CLOSE
09530  3F6F  A9 04                 LDA #$04      ; FILENUMBER 4
09531  3F71  20 C3 FF              JSR $FFC3     ; CALL CLOSE
09532  3F74             
09533  3F74  20 CC FF              JSR $FFCC     ; CALL CLRCHN
09534  3F77             
09535  3F77  20 2F 3C              JSR DISK.READERRORCHANNEL
09536  3F7A             
09537  3F7A  20 8A 1F              JSR DISK.CHECKERROR
09538  3F7D             
09539  3F7D  60                    RTS
09540  3F7E             
09541  3F7E             DISK.EXECMD1.FILENAME = $20 ; 2 BYTES
09542  3F7E             DISK.EXECMD1 
09543  3F7E             
09544  3F7E                        ; GET THE LENGTH OF FILENAME$
09545  3F7E  A5 20                 LDA DISK.EXECMD1.FILENAME
09546  3F80  85 7A                 STA STRING.GETLENGTH.ADDRESS$
09547  3F82  A5 21                 LDA DISK.EXECMD1.FILENAME+1
09548  3F84  85 7B                 STA STRING.GETLENGTH.ADDRESS$+1
09549  3F86  20 72 2B              JSR STRING.GETLENGTH$
09550  3F89  A5 FB                 LDA STRING.GETLENGTH.LENGTH$
09551  3F8B  8D 49 3F              STA DISK.EXECMD.LEN
09552  3F8E             
09553  3F8E                        ; COPY FILENAME$ INTO FILENAME
09554  3F8E  A5 20                 LDA DISK.EXECMD1.FILENAME
09555  3F90  85 73                 STA MEMORY.COPY.SOURCE$
09556  3F92  A5 21                 LDA DISK.EXECMD1.FILENAME+1
09557  3F94  85 74                 STA MEMORY.COPY.SOURCE$+1
09558  3F96  A9 21                 LDA #<DISK.EXECMD.NAME
09559  3F98  85 75                 STA MEMORY.COPY.DESTINATION$
09560  3F9A  A9 3F                 LDA #>DISK.EXECMD.NAME
09561  3F9C  85 76                 STA MEMORY.COPY.DESTINATION$+1
09562  3F9E  AD 49 3F              LDA DISK.EXECMD.LEN
09563  3FA1  85 77                 STA MEMORY.COPY.LENGTH$
09564  3FA3  20 8A 0F              JSR MEMORY.COPY$
09565  3FA6             
09566  3FA6                        ; ADD 3 TO LEN
09567  3FA6  AD 49 3F              LDA DISK.EXECMD.LEN
09568  3FA9  18                    CLC
09569  3FAA  69 03                 ADC #3
09570  3FAC  8D 49 3F              STA DISK.EXECMD.LEN
09571  3FAF             
09572  3FAF                        ; EXECUTE THE COMMAND
09573  3FAF  4C 4A 3F              JMP DISK.EXECMD
09574  3FB2             
09575  3FB2             DISK.FORMAT.LABELNAME$ = $20 ; 2 BYTES
09576  3FB2             DISK.FORMAT$ 
09577  3FB2             
09578  3FB2                        ; SET THE PREFIX COMMAND "N"
09579  3FB2  A9 4E                 LDA #"N"
09580  3FB4  8D 1E 3F              STA DISK.EXECMD.FILENAME
09581  3FB7             
09582  3FB7                        ; EXECUTE THE COMMAND
09583  3FB7  4C 7E 3F              JMP DISK.EXECMD1
09584  3FBA             
09585  3FBA             
09586  3FBA             DISK.SCRATCHFILE.FILENAME$ = $20 ; 2 BYTES
09587  3FBA             DISK.SCRATCHFILE$ 
09588  3FBA             
09589  3FBA                        ; NOTE: THE 1541 DOES NOT REPORT AN ERROR IF THE FILE DOESN'T EXIST!
09590  3FBA             
09591  3FBA                        ; CONFIRM THAT FILENAME1 EXISTS
09592  3FBA  20 1D 3D              JSR DISK.FILEEXISTS$
09593  3FBD  AD 41 3B              LDA DISK.ERROR$
09594  3FC0  C9 00                 CMP #DISKERROR.OK$
09595  3FC2  F0 01                 BEQ @FILEEXISTOK
09596  3FC4  60                    RTS
09597  3FC5             @FILEEXISTOK 
09598  3FC5  A5 26                 LDA DISK.FILEEXISTS.EXISTS$
09599  3FC7  D0 06                 BNE @FILEEXISTS
09600  3FC9             ;        BEQ @FILENOEXISTS
09601  3FC9             ;        JMP @FILEEXISTS
09602  3FC9             ;@FILENOEXISTS
09603  3FC9  A9 3E                 LDA #DISKERROR.FILE_NOT_FOUND$
09604  3FCB  8D 41 3B              STA DISK.ERROR$
09605  3FCE  60                    RTS
09606  3FCF             @FILEEXISTS 
09607  3FCF             
09608  3FCF             DISK.SCRATCHFILE 
09609  3FCF             
09610  3FCF                        ; SET THE PREFIX COMMAND "S"
09611  3FCF  A9 53                 LDA #"S"
09612  3FD1  8D 1E 3F              STA DISK.EXECMD.FILENAME
09613  3FD4             
09614  3FD4                        ;; GET THE LENGTH OF FILENAME$
09615  3FD4             ;        LDA DISK.SCRATCHFILE.FILENAME$
09616  3FD4             ;        STA STRING.GETLENGTH.ADDRESS$
09617  3FD4             ;        LDA DISK.SCRATCHFILE.FILENAME$+1
09618  3FD4             ;        STA STRING.GETLENGTH.ADDRESS$+1
09619  3FD4             ;        JSR STRING.GETLENGTH$
09620  3FD4             ;        LDA STRING.GETLENGTH.LENGTH$
09621  3FD4             ;        STA DISK.EXECMD.LEN
09622  3FD4             
09623  3FD4             ;        ; COPY FILENAME$ INTO FILENAME
09624  3FD4             ;        LDA DISK.SCRATCHFILE.FILENAME$
09625  3FD4             ;        STA MEMORY.COPY.SOURCE$
09626  3FD4             ;        LDA DISK.SCRATCHFILE.FILENAME$+1
09627  3FD4             ;        STA MEMORY.COPY.SOURCE$+1
09628  3FD4             ;        LDA #<DISK.EXECMD.NAME
09629  3FD4             ;        STA MEMORY.COPY.DESTINATION$
09630  3FD4             ;        LDA #>DISK.EXECMD.NAME
09631  3FD4             ;        STA MEMORY.COPY.DESTINATION$+1
09632  3FD4             ;        LDA DISK.EXECMD.LEN
09633  3FD4             ;        STA MEMORY.COPY.LENGTH$
09634  3FD4             ;        JSR MEMORY.COPY$
09635  3FD4             
09636  3FD4             ;        ; ADD 3 TO LEN
09637  3FD4             ;        LDA DISK.EXECMD.LEN
09638  3FD4             ;        CLC
09639  3FD4             ;        ADC #3
09640  3FD4             ;        STA DISK.EXECMD.LEN
09641  3FD4             
09642  3FD4                        ; EXECUTE THE COMMAND
09643  3FD4  4C 7E 3F              JMP DISK.EXECMD1
09644  3FD7             
09645  3FD7             
09646  3FD7             DISK.COPYFILE.SRCFILENAME$ = $20 ; 2 BYTES
09647  3FD7             DISK.COPYFILE.DSTFILENAME$ = $22 ; 2 BYTES
09648  3FD7             ;DISK.COPYFILE.SRCLEN = $24 ; 1 BYTE
09649  3FD7             ;DISK.COPYFILE.DSTLEN = $25 ; 1 BYTE
09650  3FD7             DISK.COPYFILE$ 
09651  3FD7             
09652  3FD7                        ; SET THE PREFIX COMMAND "C"
09653  3FD7  A9 43                 LDA #"C"
09654  3FD9  8D 1E 3F              STA DISK.EXECMD.FILENAME
09655  3FDC             
09656  3FDC             ;        ; COPY CHARACTERS FROM DSTFILENAME$ TO FILENAME
09657  3FDC             ;        LDA DISK.COPYFILE.DSTFILENAME$
09658  3FDC             ;        STA $AE
09659  3FDC             ;        LDA DISK.COPYFILE.DSTFILENAME$+1
09660  3FDC             ;        STA $AF
09661  3FDC             ;        LDY #$00
09662  3FDC             ;        LDX #$00
09663  3FDC             ;@DSTLOOP
09664  3FDC             ;        LDA ($AE),Y
09665  3FDC             ;        CMP #CONSOLE.NULL$
09666  3FDC             ;        BEQ @DSTDONE
09667  3FDC             ;        STA DISK.EXECMD.NAME,X
09668  3FDC             ;        INY
09669  3FDC             ;        INX
09670  3FDC             ;        JMP @DSTLOOP
09671  3FDC             ;@DSTDONE
09672  3FDC             ;        STY DISK.COPYFILE.DSTLEN
09673  3FDC             
09674  3FDC             ;        ; APPEND "="
09675  3FDC             ;        LDA #61
09676  3FDC             ;        STA DISK.EXECMD.NAME,X
09677  3FDC             ;        INX
09678  3FDC             
09679  3FDC             ;        ; COPY CHARACTERS FROM SRCFILENAME$ TO FILENAME
09680  3FDC             ;        LDA DISK.COPYFILE.SRCFILENAME$
09681  3FDC             ;        STA $AE
09682  3FDC             ;        LDA DISK.COPYFILE.SRCFILENAME$+1
09683  3FDC             ;        STA $AF
09684  3FDC             ;        LDY #$00
09685  3FDC             ;@SRCLOOP
09686  3FDC             ;        LDA ($AE),Y
09687  3FDC             ;        CMP #CONSOLE.NULL$
09688  3FDC             ;        BEQ @SRCDONE
09689  3FDC             ;        STA DISK.EXECMD.NAME,X
09690  3FDC             ;        INY
09691  3FDC             ;        INX
09692  3FDC             ;        JMP @SRCLOOP
09693  3FDC             ;@SRCDONE
09694  3FDC             ;        STY DISK.COPYFILE.SRCLEN
09695  3FDC             
09696  3FDC             ;        ; LEN = DSTLEN + SRCLEN + 3(C0:) + 1(=)
09697  3FDC             ;        LDA #4
09698  3FDC             ;        CLC
09699  3FDC             ;        ADC DISK.COPYFILE.DSTLEN
09700  3FDC             ;        ADC DISK.COPYFILE.SRCLEN
09701  3FDC             ;        STA DISK.EXECMD.LEN
09702  3FDC             
09703  3FDC                        ; EXECUTE THE COMMAND
09704  3FDC  4C E7 3F              JMP DISK.EXECMD2
09705  3FDF             
09706  3FDF             DISK.RENAMEFILE.OLDFILENAME$ = $20 ; 2 BYTES
09707  3FDF             DISK.RENAMEFILE.NEWFILENAME$ = $22 ; 2 BYTES
09708  3FDF             DISK.RENAMEFILE$ 
09709  3FDF             
09710  3FDF                        ; SET THE PREFIX COMMAND "R"
09711  3FDF  A9 52                 LDA #"R"
09712  3FE1  8D 1E 3F              STA DISK.EXECMD.FILENAME
09713  3FE4             
09714  3FE4                        ; EXECUTE THE COMMAND
09715  3FE4  4C E7 3F              JMP DISK.EXECMD2
09716  3FE7             
09717  3FE7             
09718  3FE7             DISK.EXECMD2.FILENAME1 = $20 ; 2 BYTES
09719  3FE7             DISK.EXECMD2.FILENAME2 = $22 ; 2 BYTES
09720  3FE7             DISK.EXECMD2.LEN1 = $24 ; 1 BYTE
09721  3FE7             DISK.EXECMD2.LEN2 = $25 ; 1 BYTE
09722  3FE7             DISK.EXECMD2 
09723  3FE7             
09724  3FE7                        ; CONFIRM THAT FILENAME1 EXISTS
09725  3FE7             ;        JSR DISK.FILEEXISTS$
09726  3FE7             ;        BNE @FILEEXISTS
09727  3FE7             ;        LDA #DISKERROR.FILE_NOT_FOUND$
09728  3FE7             ;        STA DISK.ERROR$
09729  3FE7             ;        RTS
09730  3FE7             ;@FILEEXISTS
09731  3FE7                        ; CONFIRM THAT FILENAME1 EXISTS
09732  3FE7  20 1D 3D              JSR DISK.FILEEXISTS$
09733  3FEA  AD 41 3B              LDA DISK.ERROR$
09734  3FED  C9 00                 CMP #DISKERROR.OK$
09735  3FEF  F0 01                 BEQ @FILEEXISTOK
09736  3FF1  60                    RTS
09737  3FF2             @FILEEXISTOK 
09738  3FF2  A5 26                 LDA DISK.FILEEXISTS.EXISTS$
09739  3FF4  D0 06                 BNE @FILEEXISTS
09740  3FF6             ;        BEQ @FILENOEXISTS
09741  3FF6             ;        JMP @FILEEXISTS
09742  3FF6             ;@FILENOEXISTS
09743  3FF6  A9 3E                 LDA #DISKERROR.FILE_NOT_FOUND$
09744  3FF8  8D 41 3B              STA DISK.ERROR$
09745  3FFB  60                    RTS
09746  3FFC             @FILEEXISTS 
09747  3FFC             
09748  3FFC                        ; COPY CHARACTERS FROM DSTFILENAME$ TO FILENAME
09749  3FFC  A5 22                 LDA DISK.EXECMD2.FILENAME2
09750  3FFE  85 AE                 STA $AE
09751  4000  A5 23                 LDA DISK.EXECMD2.FILENAME2+1
09752  4002  85 AF                 STA $AF
09753  4004  A0 00                 LDY #$00
09754  4006  A2 00                 LDX #$00
09755  4008             @DSTLOOP
09756  4008  B1 AE                 LDA ($AE),Y
09757  400A  C9 FF                 CMP #CONSOLE.NULL$
09758  400C  EA                    NOP
09759  400D  EA                    NOP
09760  400E  EA                    NOP
09761  400F                        ;BEQ @DSTDONE
09762  400F  D0 03                 BNE @DSTCONT
09763  4011  4C 1C 40              JMP @DSTDONE
09764  4014             @DSTCONT
09765  4014  9D 21 3F              STA DISK.EXECMD.NAME,X
09766  4017  C8                    INY
09767  4018  E8                    INX
09768  4019  4C 08 40              JMP @DSTLOOP
09769  401C             @DSTDONE
09770  401C  84 25                 STY DISK.EXECMD2.LEN2
09771  401E             
09772  401E                        ; APPEND "="
09773  401E  A9 3D                 LDA #61
09774  4020  9D 21 3F              STA DISK.EXECMD.NAME,X
09775  4023  E8                    INX
09776  4024             
09777  4024                        ; COPY CHARACTERS FROM SRCFILENAME$ TO FILENAME
09778  4024  A5 20                 LDA DISK.EXECMD2.FILENAME1
09779  4026  85 AE                 STA $AE
09780  4028  A5 21                 LDA DISK.EXECMD2.FILENAME1+1
09781  402A  85 AF                 STA $AF
09782  402C  A0 00                 LDY #$00
09783  402E             @SRCLOOP
09784  402E  B1 AE                 LDA ($AE),Y
09785  4030  C9 FF                 CMP #CONSOLE.NULL$
09786  4032  F0 08                 BEQ @SRCDONE
09787  4034  9D 21 3F              STA DISK.EXECMD.NAME,X
09788  4037  C8                    INY
09789  4038  E8                    INX
09790  4039  4C 2E 40              JMP @SRCLOOP
09791  403C             @SRCDONE
09792  403C  84 24                 STY DISK.EXECMD2.LEN1
09793  403E             
09794  403E                        ; LEN = DSTLEN + SRCLEN + 3(C0:) + 1(=)
09795  403E  A9 04                 LDA #4
09796  4040  18                    CLC
09797  4041  65 25                 ADC DISK.EXECMD2.LEN2
09798  4043  65 24                 ADC DISK.EXECMD2.LEN1
09799  4045  8D 49 3F              STA DISK.EXECMD.LEN
09800  4048             
09801  4048                        ; EXECUTE THE COMMAND
09802  4048  4C 4A 3F              JMP DISK.EXECMD
09803  404B             
09804  404B             DISK.LOADFILE.FILENAME$ = $20 ; 2 BYTES
09805  404B             DISK.LOADFILE$ 
09806  404B             
09807  404B                        ;LDA #$FE
09808  404B                        ;STA DISK.READFILE.ADDRESS$
09809  404B                        ;LDA #$BF
09810  404B                        ;STA DISK.READFILE.ADDRESS$+1
09811  404B  A9 00                 LDA #$00
09812  404D  85 22                 STA DISK.READFILE.ADDRESS$
09813  404F  A9 C0                 LDA #$C0
09814  4051  85 23                 STA DISK.READFILE.ADDRESS$+1
09815  4053  20 6E 3B              JSR DISK.READFILE$
09816  4056             
09817  4056  AD 41 3B              LDA DISK.ERROR$
09818  4059  F0 03                 BEQ @OK
09819  405B  4C 67 40              JMP @ERROR
09820  405E             
09821  405E             @OK
09822  405E                        ;JMP $C000
09823  405E  20 34 0F              JSR KERNEL.END
09824  4061                        ;PLA
09825  4061                        ;PLA
09826  4061                        ;JMP KERNEL.BEGIN
09827  4061  20 10 0F              JSR KERNEL.BEGIN
09828  4064  20 84 1F              JSR KERNEL.RESET$
09829  4067             
09830  4067             @ERROR
09831  4067  60                    RTS
09832  4068             
09833  4068             
09834  4068             
09835  4068             
09836  4068             
09837  4068  00         PRINTER.PREV_DEVCICE BYTE $00
09838  4069             
09839  4069  00         PRINTER.ERROR$ BYTE $00
09840  406A             PRINTERERROR.OK$ = 00
09841  406A             PRINTERERROR.OPEN_ERROR$ = 01
09842  406A             PRINTERERROR.PRINT_ERROR$ = 02
09843  406A             
09844  406A             PRINTER.CARRIAGE_RETURN$ = $0D
09845  406A             PRINTER.LINE_FEED$ = $0A
09846  406A             PRINTER.NULL$ = $FF
09847  406A             PRINTER.LOWER_CASE$ = 17
09848  406A             PRINTER.UPPER_CASE$ = 145
09849  406A             
09850  406A             PRINTER.PRINTSTR.ADDRESS$ = $20 ; 2 BYTES
09851  406A             PRINTER.PRINTSTR$ 
09852  406A             
09853  406A  A5 BA                 LDA $BA
09854  406C  8D 68 40              STA PRINTER.PREV_DEVCICE
09855  406F             
09856  406F                        ; SET DEFAULT VALUES
09857  406F  A9 00                 LDA #PRINTERERROR.OK$
09858  4071  8D 69 40              STA PRINTER.ERROR$
09859  4074             
09860  4074  A9 04                 LDA #$04      ; FILE NUMBER 4
09861  4076  A2 04                 LDX #$04      ; DEFAULT TO DEVICE 4
09862  4078  A0 04                 LDY #$04      ; SECONDARY ADDRESS 4
09863  407A  20 BA FF              JSR $FFBA     ; CALL SETLFS
09864  407D             
09865  407D  20 C0 FF              JSR $FFC0     ; CALL OPEN
09866  4080  90 08                 BCC @OK
09867  4082             
09868  4082  A9 01                 LDA #PRINTERERROR.OPEN_ERROR$
09869  4084  8D 69 40              STA PRINTER.ERROR$
09870  4087             
09871  4087  4C BE 40              JMP @CLOSE    ; EVEN IF OPEN FAILED, THE FILE HAS TO BE CLOSED
09872  408A             @OK
09873  408A             
09874  408A  A2 04                 LDX #$04      ; FILENUMBER 4
09875  408C  20 C9 FF              JSR $FFC9     ; CALL CHKOUT (FILE 4 NOW USED AS OUTPUT)
09876  408F             
09877  408F                        ; SET THE MEMORY ADDRESS
09878  408F  A5 20                 LDA PRINTER.PRINTSTR.ADDRESS$
09879  4091  85 AE                 STA $AE
09880  4093  A5 21                 LDA PRINTER.PRINTSTR.ADDRESS$+1
09881  4095  85 AF                 STA $AF
09882  4097             
09883  4097             @LOOP
09884  4097  A0 00                 LDY #$00
09885  4099  A2 08                 LDX #$08
09886  409B  20 B7 FF              JSR $FFB7     ; CALL READST (READ STATUS BYTE)
09887  409E                        ;;BNE @EOF      ; EITHER EOF OR READ ERROR
09888  409E                        ;BEQ @CONT
09889  409E  4C A9 40              JMP @CONT
09890  40A1             @WRITEERROR 
09891  40A1             
09892  40A1  A9 02                 LDA #PRINTERERROR.PRINT_ERROR$
09893  40A3  8D 69 40              STA PRINTER.ERROR$
09894  40A6             
09895  40A6  4C BE 40              JMP @CLOSE
09896  40A9                        
09897  40A9             @CONT
09898  40A9  B1 AE                 LDA ($AE),Y   ; GET BYTE FROM MEMORY
09899  40AB  C9 FF                 CMP #PRINTER.NULL$
09900  40AD  D0 03                 BNE @CHROUT
09901  40AF  4C BE 40              JMP @CLOSE
09902  40B2             
09903  40B2             @CHROUT
09904  40B2  20 D2 FF              JSR $FFD2     ; CALL CHROUT (WRITE BYTE TO FILE)
09905  40B5             
09906  40B5                        ;NOP
09907  40B5                        ;NOP
09908  40B5             @INC_MEM
09909  40B5                        ; INCREMENT MEMORY ADDRESS
09910  40B5  E6 AE                 INC $AE
09911  40B7  D0 02                 BNE @SKIP2
09912  40B9  E6 AF                 INC $AF
09913  40BB             @SKIP2     
09914  40BB             
09915  40BB  4C 97 40              JMP @LOOP     ; NEXT BYTE
09916  40BE             
09917  40BE             @CLOSE
09918  40BE  A9 04                 LDA #$04      ; FILENUMBER 4
09919  40C0  20 C3 FF              JSR $FFC3     ; CALL CLOSE
09920  40C3             
09921  40C3  20 CC FF              JSR $FFCC     ; CALL CLRCHN
09922  40C6             
09923  40C6  AD 68 40              LDA PRINTER.PREV_DEVCICE
09924  40C9  85 BA                 STA $BA
09925  40CB             
09926  40CB  60                    RTS
09927  40CC             
09928  40CC             
09929  40CC             
09930  40CC             
09931  40CC             
09932  40CC             
09933  40CC  00         MOUSE.OLDX BYTE $00
09934  40CD  00         MOUSE.OLDY BYTE $00
09935  40CE             
09936  40CE             MOUSE.GETSTATE.LEFTBUTTON$ = $7A ; 1 BYTE
09937  40CE             MOUSE.GETSTATE.RIGHTBUTTON$ = $7B ; 1 BYTE
09938  40CE             MOUSE.GETSTATE.DELTAX$ = $7C ; 1 BYTE
09939  40CE             MOUSE.GETSTATE.DELTAY$ = $7D ; 1 BYTE
09940  40CE             MOUSE.GETSTATE$ 
09941  40CE                        ;HTTPS://CODEBASE64.ORG/DOKU.PHP?ID=BASE:C_1351_STANDARD_MOUSE_ROUTINE
09942  40CE             
09943  40CE  A9 10                 LDA #%00010000
09944  40D0  20 FE 40              JSR MOUSE.BUTTONCHECK
09945  40D3  85 7A                 STA MOUSE.GETSTATE.LEFTBUTTON$
09946  40D5             
09947  40D5  A9 01                 LDA #%00000001
09948  40D7  20 FE 40              JSR MOUSE.BUTTONCHECK
09949  40DA  85 7B                 STA MOUSE.GETSTATE.RIGHTBUTTON$
09950  40DC             
09951  40DC  AD 19 D4              LDA $D419
09952  40DF                        ;LSR  //CCS64 FIX (REMOVE FOR OTHER EMUS/REAL HW)
09953  40DF  AC CC 40              LDY MOUSE.OLDX
09954  40E2  20 0F 41              JSR MOUSE.MOVECHECK
09955  40E5  8C CC 40              STY MOUSE.OLDX
09956  40E8  85 7C                 STA MOUSE.GETSTATE.DELTAX$
09957  40EA             
09958  40EA  AD 1A D4              LDA $D41A
09959  40ED                        ;LSR  //CCS64 FIX (REMOVE FOR OTHER EMUS/REAL HW)
09960  40ED  AC CD 40              LDY MOUSE.OLDY
09961  40F0  20 0F 41              JSR MOUSE.MOVECHECK
09962  40F3  8C CD 40              STY MOUSE.OLDY
09963  40F6  38                    SEC  ; MODIFY Y POSITION ( DECREASE Y FOR INCREASE IN POT )
09964  40F7  49 FF                 EOR #$FF
09965  40F9  69 00                 ADC #$00
09966  40FB  85 7D                 STA MOUSE.GETSTATE.DELTAY$
09967  40FD             
09968  40FD  60                    RTS
09969  40FE             
09970  40FE             MOUSE.BUTTONCHECK.BUTTONMASK = $7E ; 1 BYTE
09971  40FE             MOUSE.BUTTONCHECK 
09972  40FE  85 7E                 STA MOUSE.BUTTONCHECK.BUTTONMASK
09973  4100             
09974  4100  AD 01 DC              LDA $DC01 ; PORT 1
09975  4103  25 7E                 AND MOUSE.BUTTONCHECK.BUTTONMASK
09976  4105  C5 7E                 CMP MOUSE.BUTTONCHECK.BUTTONMASK
09977  4107                        
09978  4107  D0 03                 BNE @SETBTN
09979  4109  A9 00                 LDA #$00
09980  410B  60                    RTS
09981  410C             
09982  410C             @SETBTN
09983  410C  A9 01                 LDA #$01
09984  410E  60                    RTS
09985  410F             
09986  410F             MOUSE.MOVECHECK.OLDDELTA = $7E ; 1 BYTE
09987  410F             MOUSE.MOVECHECK.NEWDELTA = $7F ; 1 BYTE
09988  410F             MOUSE.MOVECHECK 
09989  410F  84 7E                 STY MOUSE.MOVECHECK.OLDDELTA
09990  4111  85 7F                 STA MOUSE.MOVECHECK.NEWDELTA
09991  4113  A2 00                 LDX #0
09992  4115             
09993  4115  38                    SEC
09994  4116  E5 7E                 SBC MOUSE.MOVECHECK.OLDDELTA
09995  4118  29 7F                 AND #%01111111
09996  411A  C9 40                 CMP #%01000000
09997  411C  B0 06                 BCS @MOVCHK1
09998  411E  4A                    LSR
09999  411F  F0 10                 BEQ @MOVCHK2
10000  4121  A4 7F                 LDY MOUSE.MOVECHECK.NEWDELTA
10001  4123  60                    RTS
10002  4124             
10003  4124             @MOVCHK1
10004  4124  09 C0                 ORA #%11000000
10005  4126  C9 FF                 CMP #$FF
10006  4128  F0 07                 BEQ @MOVCHK2
10007  412A  38                    SEC
10008  412B  6A                    ROR
10009  412C  A2 FF                 LDX #$FF
10010  412E  A4 7F                 LDY MOUSE.MOVECHECK.NEWDELTA
10011  4130  60                    RTS
10012  4131             @MOVCHK2
10013  4131  A9 00                 LDA #0
10014  4133  60                    RTS
10015  4134             
10016  4134             
10017  4134             
10018  4134             
10019  4134             
10020  4134  00         SERIAL.PREV_DEVICE BYTE $00
10021  4135  00         SERIAL.DISCARD_BYTE$ BYTE $00 ; SET TO ONE TO HAVE THE FIRST FIRST OF EACH SEND/RECV CALL TO BE DISCARDED
10022  4136  00         SERIAL.RECV_EOT$ BYTE $00 ; SET TO ONE TO HAVE THE RECV ROUTINE WAIT FOR THE EOT BYTE - CHR$(13)
10023  4137  00         SERIAL.SEND_EOT$ BYTE $00 ; SET TO ONE TO HAVE THE SEND ROUTINE TO SEND THE EOT BYTE - CHR$(13)
10024  4138             
10025  4138             SERIAL.EOT$ = $FF
10026  4138             SERIAL.SKIP = $FE
10027  4138             ;SERIAL.EOT2    = $7F
10028  4138             ;SERIAL.SKIP2   = $7E
10029  4138             ;SERIAL.ARGS    TEXT 08, 00 ; 1200 BAUDRATE, NO PARITY, 8 DATABITS, 1 STOPBIT, DTR NOT ENABLED, RTS NOT ENABLED, NO HANDSHAKE
10030  4138             ;SERIAL.ARGS    TEXT 08
10031  4138  08         SERIAL.BAUD$ BYTE $08 ; 1200
10032  4139                        ; SEE HTTPS://WWW.COMMODORE.CA/MANUALS/C64_PROGRAMMERS_REFERENCE/C64-PROGRAMMERS_REFERENCE_GUIDE-06-INPUT_OUTPUT_GUIDE.PDF (PAGE 349)
10033  4139             ;        0 0 0 1 50 BAUD
10034  4139             ;        0 0 1 0 75
10035  4139             ;        0 0 1 1 110
10036  4139             ;        0 1 0 0 134.5
10037  4139             ;        0 1 0 1 150
10038  4139             ;        0 1 1 0 300 (6)
10039  4139             ;        0 1 1 1 600
10040  4139             ;        1 0 0 0 1200 (8)
10041  4139             ;        1 0 0 1 (1800) 2400 (9)
10042  4139             ;        1 0 1 0 2400 (10)
10043  4139             ;        1 0 1 1 3600 [NI]
10044  4139             ;        1 1 0 0 4800 [NI]
10045  4139             ;        1 1 0 1 7200 [NI)
10046  4139             ;        1 1 1 0 9600 [NI] (14)
10047  4139             ;        1 1 1 1 19200 [NI]
10048  4139             
10049  4139             ;SERIAL.OPEN$
10050  4139             
10051  4139             ;        JSR SERIAL.SET_BAUD
10052  4139             
10053  4139             ;        LDA $BA
10054  4139             ;        STA SERIAL.PREV_DEVICE
10055  4139             
10056  4139             ;        ; NEED TO CLOSE THE FILE FIRST BECAUSE OF A BUG IN COVERT BITOPS WHEN USED WITH SD2IEC!
10057  4139             ;        LDA #$05      ; FILENUMBER 5
10058  4139             ;        ;NOP
10059  4139             ;        ;NOP
10060  4139             ;        JSR $FFC3     ; CALL CLOSE
10061  4139             ;        ;NOP
10062  4139             ;        ;NOP
10063  4139             ;        ;NOP
10064  4139             
10065  4139             ;        ;LDA #2
10066  4139             ;        LDA #1
10067  4139             ;        LDX #<SERIAL.BAUD$
10068  4139             ;        LDY #>SERIAL.BAUD$
10069  4139             ;        JSR $FFBD     ; CALL SETNAM
10070  4139             
10071  4139             ;        LDA #$05      ; FILE NUMBER 5
10072  4139             ;        LDX #$02      ; DEFAULT TO DEVICE 2
10073  4139             ;        LDY #$00      ; SECONDARY ADDRESS 0
10074  4139             ;        JSR $FFBA     ; CALL SETLFS
10075  4139             
10076  4139             ;        JSR $FFC0     ; CALL OPEN
10077  4139             
10078  4139             ;        ; SET THE RS232 INPUT TIMER
10079  4139             ;        ;POKE665,73-(PEEK(678)*30)
10080  4139             ;        LDA 678 ; 0=NTSC, 1=PAL
10081  4139             ;        BEQ @POKE_665_73
10082  4139             ;        LDA #43
10083  4139             ;        JMP @STA_665
10084  4139             ;@POKE_665_73
10085  4139             ;        LDA #73
10086  4139             ;@STA_665
10087  4139             ;        STA 665
10088  4139             
10089  4139             ;        RTS
10090  4139             
10091  4139             ;SERIAL.CLOSE$
10092  4139             ;        LDA #$05      ; FILENUMBER 5
10093  4139             ;        JSR $FFC3     ; CALL CLOSE
10094  4139             
10095  4139             ;        JSR $FFCC     ; CALL CLRCHN
10096  4139             
10097  4139             ;        LDA SERIAL.PREV_DEVICE
10098  4139             ;        STA $BA
10099  4139             
10100  4139             ;        RTS
10101  4139             
10102  4139             SERIAL.CLOSE$ 
10103  4139  A9 05                 LDA #$05      ; FILENUMBER 5
10104  413B  20 C3 FF              JSR $FFC3     ; CALL CLOSE
10105  413E             
10106  413E  20 CC FF              JSR $FFCC     ; CALL CLRCHN
10107  4141             
10108  4141  AD 34 41              LDA SERIAL.PREV_DEVICE
10109  4144  85 BA                 STA $BA
10110  4146             
10111  4146  60                    RTS
10112  4147             
10113  4147             SERIAL.SET_BAUD 
10114  4147  AD 38 41              LDA SERIAL.BAUD$
10115  414A                        
10116  414A             ;        CMP #14 ; 14 = 9600
10117  414A             ;        BNE @SET_BAUD
10118  414A             ;        JSR UP9600.INIT
10119  414A             ;@SET_BAUD
10120  414A             
10121  414A  8D 93 02              STA $0293
10122  414D  60                    RTS
10123  414E             
10124  414E             
10125  414E             SERIAL.SEND.ADDRESS$ = $22 ; 2 BYTES
10126  414E             SERIAL.SEND$ 
10127  414E             
10128  414E  A5 22                 LDA SERIAL.SEND.ADDRESS$       ; SET BUFFER ADDRESS
10129  4150  85 AE                 STA $AE
10130  4152  A5 23                 LDA SERIAL.SEND.ADDRESS$+1
10131  4154  85 AF                 STA $AF
10132  4156             
10133  4156  A2 05                 LDX #$05      ; FILENUMBER 5
10134  4158  20 C9 FF              JSR $FFC9     ; CALL CHKOUT (FILE 5 NOW USED AS OUTPUT)
10135  415B             
10136  415B             @SEND
10137  415B             
10138  415B  AD 35 41              LDA SERIAL.DISCARD_BYTE$
10139  415E  F0 05                 BEQ @NO_DISCARD
10140  4160  A9 FE                 LDA #SERIAL.SKIP
10141  4162  20 D2 FF              JSR $FFD2     ; THROW AWAY FIRST BYTE
10142  4165             @NO_DISCARD 
10143  4165             
10144  4165  A0 00                 LDY #$00
10145  4167             @WLOOP     
10146  4167  B1 AE                 LDA ($AE),Y   ; GET BYTE FROM MEMORY
10147  4169             
10148  4169  C9 FF                 CMP #SERIAL.EOT$
10149  416B  D0 0D                 BNE @WJSR
10150  416D  AD 37 41              LDA SERIAL.SEND_EOT$
10151  4170  F0 11                 BEQ @WEND
10152  4172  A9 0D                 LDA #13
10153  4174  20 D2 FF              JSR $FFD2
10154  4177  4C 83 41              JMP @WEND
10155  417A             @WJSR
10156  417A  20 D2 FF              JSR $FFD2     ; CALL CHROUT (WRITE BYTE TO FILE)
10157  417D                        
10158  417D                        ;CMP #SERIAL.EOT$
10159  417D                        ;BEQ @WEND
10160  417D             
10161  417D                        ;LDA SERIAL.CHECK_FOR_EOT$
10162  417D                        ;BEQ @WEND
10163  417D             
10164  417D  C8                    INY
10165  417E  F0 03                 BEQ @WEND
10166  4180  4C 67 41              JMP @WLOOP
10167  4183             @WEND
10168  4183             
10169  4183  A2 03                 LDX #$03      ; FILENUMBER 3 (SCREEN OUTPUT)
10170  4185  20 C9 FF              JSR $FFC9     ; CALL CHKOUT (FILE 3 NOW USED AS OUTPUT)
10171  4188             
10172  4188  60                    RTS
10173  4189             
10174  4189             SERIAL.RECV.ADDRESS$ = $22 ; 2 BYTES
10175  4189  00         SERIAL.RECV.FIRST_BYTE BYTE $00
10176  418A             SERIAL.RECV$ 
10177  418A             
10178  418A  A5 22                 LDA SERIAL.RECV.ADDRESS$       ; SET BUFFER ADDRESS
10179  418C  85 AE                 STA $AE
10180  418E  A5 23                 LDA SERIAL.RECV.ADDRESS$+1
10181  4190  85 AF                 STA $AF
10182  4192             
10183  4192  A9 00                 LDA #$00
10184  4194  8D 89 41              STA SERIAL.RECV.FIRST_BYTE
10185  4197                        
10186  4197  A2 05                 LDX #$05      ; FILENUMBER 5
10187  4199  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 5 NOW USED AS INPUT)
10188  419C                        
10189  419C                        ;LDA $0297 ; IS THE RS-232 INPUT BUFFER EMPTY OR STOP BIT PRESENT
10190  419C                        ;AND #%00001010
10191  419C                        ;BEQ @BUFFER_OK
10192  419C                        ;JMP @DONE
10193  419C             
10194  419C             @BUFFER_OK 
10195  419C             
10196  419C  AD 35 41              LDA SERIAL.DISCARD_BYTE$
10197  419F  F0 03                 BEQ @NO_DISCARD
10198  41A1  20 CF FF              JSR $FFCF     ; THROW AWAY FIRST BYTE
10199  41A4             @NO_DISCARD 
10200  41A4             
10201  41A4  A0 00                 LDY #$00
10202  41A6             @RLOOP     
10203  41A6             
10204  41A6  AD 89 41              LDA SERIAL.RECV.FIRST_BYTE
10205  41A9  D0 03                 BNE @CHRIN_WAIT
10206  41AB  4C B7 41              JMP @CHRIN_NO_WAIT
10207  41AE             
10208  41AE             @CHRIN_WAIT 
10209  41AE  20 CF FF              JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
10210  41B1  EE 89 41              INC SERIAL.RECV.FIRST_BYTE
10211  41B4  4C CB 41              JMP @CHIN_DONE
10212  41B7             
10213  41B7             @CHRIN_NO_WAIT 
10214  41B7                        ;JSR $FFCF     ; CALL CHRIN (GET A BYTE FROM FILE)
10215  41B7  20 4E F1              JSR $F14E
10216  41BA             
10217  41BA  AA                    TAX
10218  41BB  AD 97 02              LDA $0297
10219  41BE                        ;AND #%00001010 ; IS THE RS-232 INPUT BUFFER EMPTY OR STOP BIT PRESENT
10220  41BE  29 08                 AND #%00001000 ; IS THE RS-232 INPUT BUFFER EMPTY
10221  41C0  F0 08                 BEQ @BUFFER_OK2
10222  41C2             
10223  41C2  AD 36 41              LDA SERIAL.RECV_EOT$
10224  41C5  D0 F0                 BNE @CHRIN_NO_WAIT
10225  41C7             
10226  41C7  4C E0 41              JMP @DONE
10227  41CA             @BUFFER_OK2 
10228  41CA             
10229  41CA                        ;LDA #$01
10230  41CA                        ;STA SERIAL.RECV.FIRST_BYTE
10231  41CA  8A                    TXA
10232  41CB             
10233  41CB             @CHIN_DONE 
10234  41CB             
10235  41CB             ;        CMP #13
10236  41CB             ;        BNE @RJSR
10237  41CB             ;        LDA #SERIAL.EOT$
10238  41CB             ;@RJSR
10239  41CB             
10240  41CB                        ;BEQ @REND    ; NO DATA
10241  41CB             
10242  41CB  91 AE                 STA ($AE),Y   ; WRITE BYTE TO MEMORY
10243  41CD             
10244  41CD  C9 0A                 CMP #10
10245  41CF  D0 05                 BNE @RINC
10246  41D1  AD 36 41              LDA SERIAL.RECV_EOT$
10247  41D4  D0 06                 BNE @REND
10248  41D6                        ;CMP #SERIAL.EOT2
10249  41D6                        ;BEQ @REND
10250  41D6             
10251  41D6                        ;LDA SERIAL.WAIT_FOR_EOT$
10252  41D6                        ;BEQ @DONE
10253  41D6             
10254  41D6             @RINC
10255  41D6  C8                    INY
10256  41D7  F0 07                 BEQ @DONE
10257  41D9  4C A6 41              JMP @RLOOP     ; NEXT BYTE
10258  41DC             @REND
10259  41DC  A9 FF                 LDA #SERIAL.EOT$
10260  41DE  91 AE                 STA ($AE),Y
10261  41E0             
10262  41E0             @DONE
10263  41E0  A2 03                 LDX #$03      ; FILENUMBER 3
10264  41E2  20 C6 FF              JSR $FFC6     ; CALL CHKIN (FILE 3 NOW USED AS INPUT)
10265  41E5             
10266  41E5  60                    RTS
10267  41E6             
10268  41E6             
10269  41E6             
10270  41E6             
10271  41E6             *=$5000
10272  5000             
10273  5000             CONVERT.STR2ASCII.STR$ = $E0 ; 2 BYTES
10274  5000             CONVERT.STR2ASCII$ 
10275  5000             
10276  5000  A5 E0                 LDA CONVERT.STR2ASCII.STR$
10277  5002  85 AE                 STA $AE
10278  5004  A5 E1                 LDA CONVERT.STR2ASCII.STR$+1
10279  5006  85 AF                 STA $AF
10280  5008             
10281  5008             @SKIP
10282  5008             
10283  5008  A0 00                 LDY #$00
10284  500A             @LOOP
10285  500A  B1 AE                 LDA ($AE),Y
10286  500C             
10287  500C  C9 FF                 CMP #CONSOLE.NULL$
10288  500E  F0 03                 BEQ @NULL_YES
10289  5010  4C 16 50              JMP @NULL_NO
10290  5013             @NULL_YES
10291  5013  4C 50 50              JMP @DONE
10292  5016             @NULL_NO
10293  5016             
10294  5016  C9 FE                 CMP #CONSOLE.NEWLINE$
10295  5018  F0 03                 BEQ @NEWLINE_YES
10296  501A  4C 22 50              JMP @NEWLINE_NO
10297  501D             @NEWLINE_YES 
10298  501D  A9 0D                 LDA #13
10299  501F  4C 42 50              JMP @NEXTCHAR
10300  5022             @NEWLINE_NO 
10301  5022             
10302  5022  C9 FD                 CMP #CONSOLE.BACKSPACE$
10303  5024  F0 03                 BEQ @BACKSPACE_YES
10304  5026  4C 2E 50              JMP @BACKSPACE_NO
10305  5029             @BACKSPACE_YES 
10306  5029             
10307  5029  A9 14                 LDA #20
10308  502B             
10309  502B  4C 42 50              JMP @NEXTCHAR
10310  502E             @BACKSPACE_NO 
10311  502E             
10312  502E  C9 01                 CMP #$01
10313  5030  B0 03                 BCS @ALPHA1 ; A >= $01
10314  5032  4C 42 50              JMP @NOTALPHA1
10315  5035             @ALPHA1
10316  5035  C9 1B                 CMP #$1B
10317  5037  90 03                 BCC @ALPHA2 ; A < $1B
10318  5039  4C 42 50              JMP @NOTALPHA2
10319  503C             @ALPHA2
10320  503C  18                    CLC
10321  503D                        ;ADC #$40
10322  503D  69 60                 ADC #$60
10323  503F  4C 42 50              JMP @NEXTCHAR
10324  5042             @NOTALPHA1 
10325  5042             @NOTALPHA2 
10326  5042             
10327  5042             ;        CMP #$41
10328  5042             ;        BCS @ALPHA12 ; A >= $41
10329  5042             ;        JMP @NOTALPHA12
10330  5042             ;@ALPHA12
10331  5042             ;        CMP #$5B
10332  5042             ;        BCC @ALPHA22 ; A < $5B
10333  5042             ;        JMP @NOTALPHA22
10334  5042             ;@ALPHA22
10335  5042             ;        CLC
10336  5042             ;        ADC #$20
10337  5042             ;        JMP @NEXTCHAR
10338  5042             ;@NOTALPHA12
10339  5042             ;@NOTALPHA22
10340  5042             
10341  5042             @NEXTCHAR
10342  5042  91 AE                 STA ($AE),Y
10343  5044             
10344  5044  E6 AE                 INC $AE
10345  5046  F0 03                 BEQ @INC_AF
10346  5048  4C 0A 50              JMP @LOOP
10347  504B             @INC_AF
10348  504B  E6 AF                 INC $AF
10349  504D  4C 0A 50              JMP @LOOP
10350  5050             
10351  5050             @DONE
10352  5050             
10353  5050  A9 FF                 LDA #$FF
10354  5052  91 AE                 STA ($AE),Y
10355  5054             
10356  5054  60                    RTS
10357  5055             
10358  5055             CONVERT.ASCII2STR.ASCII$ = $E0 ; 2 BYTES
10359  5055             CONVERT.ASCII2STR$ 
10360  5055             
10361  5055  A5 E0                 LDA CONVERT.ASCII2STR.ASCII$
10362  5057  85 AE                 STA $AE
10363  5059  A5 E1                 LDA CONVERT.ASCII2STR.ASCII$+1
10364  505B  85 AF                 STA $AF
10365  505D             
10366  505D             @SKIP
10367  505D             
10368  505D  A0 00                 LDY #$00
10369  505F             @LOOP
10370  505F  B1 AE                 LDA ($AE),Y
10371  5061             
10372  5061  C9 FF                 CMP #$FF
10373  5063  F0 03                 BEQ @NULL_YES
10374  5065  4C 6B 50              JMP @NULL_NO
10375  5068             @NULL_YES
10376  5068  4C B1 50              JMP @DONE
10377  506B             @NULL_NO
10378  506B             
10379  506B  C9 0A                 CMP #10
10380  506D  F0 03                 BEQ @SKIP_YES
10381  506F  4C 77 50              JMP @SKIP_NO
10382  5072             @SKIP_YES
10383  5072  A5 00                 LDA '-'
10384  5074  4C A3 50              JMP @NEXTCHAR
10385  5077             @SKIP_NO
10386  5077             
10387  5077  C9 0D                 CMP #13
10388  5079  F0 03                 BEQ @NEWLINE_YES
10389  507B  4C 83 50              JMP @NEWLINE_NO
10390  507E             @NEWLINE_YES 
10391  507E  A9 FE                 LDA #CONSOLE.NEWLINE$
10392  5080  4C A3 50              JMP @NEXTCHAR
10393  5083             @NEWLINE_NO 
10394  5083             
10395  5083  C9 14                 CMP #20
10396  5085  F0 03                 BEQ @BACKSPACE_YES
10397  5087  4C 8F 50              JMP @BACKSPACE_NO
10398  508A             @BACKSPACE_YES 
10399  508A             
10400  508A             ;        LDA #CONSOLE.BACKSPACE$
10401  508A             ;        STA CONSOLE.WRITECHR.CHAR$
10402  508A             ;        JSR CONSOLE.WRITECHR$
10403  508A             
10404  508A             ;        LDA #' '
10405  508A             ;        STA CONSOLE.WRITECHR.CHAR$
10406  508A             ;        JSR CONSOLE.WRITECHR$
10407  508A             
10408  508A  A9 FD                 LDA #CONSOLE.BACKSPACE$
10409  508C             
10410  508C  4C A3 50              JMP @NEXTCHAR
10411  508F             @BACKSPACE_NO 
10412  508F             
10413  508F             ;        CMP #$41
10414  508F             ;        BCS @ALPHA1 ; A >= $41
10415  508F             ;        JMP @NOTALPHA1
10416  508F             ;@ALPHA1
10417  508F             ;        CMP #$5B
10418  508F             ;        BCC @ALPHA2 ; A < $5B
10419  508F             ;        JMP @NOTALPHA2
10420  508F             ;@ALPHA2
10421  508F             ;        SEC
10422  508F             ;        SBC #$40
10423  508F             ;        JMP @NEXTCHAR
10424  508F             ;@NOTALPHA1
10425  508F             ;@NOTALPHA2
10426  508F             
10427  508F  C9 61                 CMP #$61
10428  5091  B0 03                 BCS @ALPHA12 ; A >= $61
10429  5093  4C A3 50              JMP @NOTALPHA12
10430  5096             @ALPHA12
10431  5096  C9 7B                 CMP #$7B
10432  5098  90 03                 BCC @ALPHA22 ; A < $7B
10433  509A  4C A3 50              JMP @NOTALPHA22
10434  509D             @ALPHA22
10435  509D  38                    SEC
10436  509E                        ;SBC #$20
10437  509E  E9 60                 SBC #$60
10438  50A0  4C A3 50              JMP @NEXTCHAR
10439  50A3             @NOTALPHA12 
10440  50A3             @NOTALPHA22 
10441  50A3             
10442  50A3             @NEXTCHAR
10443  50A3  91 AE                 STA ($AE),Y
10444  50A5             
10445  50A5  E6 AE                 INC $AE
10446  50A7  F0 03                 BEQ @INC_AF
10447  50A9  4C 5F 50              JMP @LOOP
10448  50AC             @INC_AF
10449  50AC  E6 AF                 INC $AF
10450  50AE  4C 5F 50              JMP @LOOP
10451  50B1             
10452  50B1             @DONE
10453  50B1             
10454  50B1  A9 FF                 LDA #CONSOLE.NULL$
10455  50B3  91 AE                 STA ($AE),Y
10456  50B5             
10457  50B5  60                    RTS
10458  50B6             
10459  50B6             
10460  50B6             ;ALIGN $100 ; ALIGN THE MAIN ENTRY POINT
10461  50B6             *=$C000
10462  C000             
10463  C000                        
10464  C000             

******* 300 Label(s) *******
audio._digioff = $3B09 
audio._digion = $3AB7 
audio.beep$ = $38D2 
audio.digi_nib = $3AE3 
audio.digi_s1 = $3AF2 
audio.digi_s2 = $3AFC 
audio.digi_SK1 = $3AE1 
audio.digid418nmi = $3ABF 
audio.digiend$ = $39EF 
audio.digiendaddress$ = $39D5 
audio.digifinished$ = $39D9 
audio.digiinit$ = $39F8 
audio.digioff$ = $3A5B 
audio.digion$ = $3A43 
audio.digiplay$ = $3A84 
audio.digisamplerate$ = $39D7 
audio.digistart$ = $39DA 
audio.digistartaddress$ = $39D3 
audio.digistophi = $3AC6 
audio.digistoplo = $3ACC 
audio.getvoiceaddress = $387D 
audio.setattackdecay$ = $38A3 
audio.setfrequency$ = $38BF 
audio.setsustainrelease$ = $38B1 
audio.setvolume$ = $3877 
audio.setwaveform$ = $3895 
audio.sid_init = $391D 
audio.sid_off = $394B 
audio.sid_on = $392C 
audio.sid_play = $3991 
audio.sidend$ = $390F 
audio.sidfinished$ = $3900 
audio.sidinitaddress$ = $38FC 
audio.sidoff = $39D2 
audio.sidon = $39A4 
audio.sidplayaddress$ = $38FE 
audio.sidstart$ = $3903 
audio.sidtimer$ = $3901 
console.calc_currentaddress = $13C4 
console.caretchar$ = $1872 
console.caretstartaddress = $1873 
console.charactercolor = $12F4 
console.charactersinverted = $12F5 
console.clear$ = $1376 
console.currentaddress = $12EE 
console.currentcoloraddr = $12F2 
console.currentcolumn = $12F0 
console.currentrow = $12F1 
console.dec_memaddress = $1626 
console.dec_memaddress.dec_currentcolumn = $1690 
console.dec_memaddress.dec_currentrow = $168D 
console.dec_memaddress.end = $1693 
console.dec_memaddress.reset_lr = $166F 
console.end = $1335 
console.getcolumn$ = $13B5 
console.getkey = $1A6A 
console.getkey.Buffer = $1803 
console.getkey.BufferEmpty = $1B9D 
console.getkey.BufferOld = $1800 
console.getkey.BufferQuantity = $1807 
console.getkey.ControlPort = $1A66 
console.getkey.Exist = $1B80 
console.getkey.KeyFound = $1A3C 
console.getkey.KeyInRow = $1A04 
console.getkey.KeyTable = $1BC0 
console.getkey.KeyTableShift$ = $1809 
console.getkey.loop1 = $1A86 
console.getkey.loop2 = $1B5E 
console.getkey.NoActivityDetected = $1A54 
console.getkey.OverFlow = $1A4C 
console.getkey.Return = $1B9F 
console.getkey.SimultaneousAlphanumericKeysFlag = $1808 
console.getkey.TooManyNewKeys = $1BB4 
console.getrow$ = $13A6 
console.inc_memaddress = $15A5 
console.inc_memaddress.end = $1622 
console.inc_memaddress.inc_currentcolumn = $161F 
console.inc_memaddress.inc_currentrow = $161C 
console.inc_memaddress.inc_currentrow_skip = $1600 
console.inc_memaddress.reset_lr = $15F1 
console.readchr = $1882 
console.readchr$ = $1876 
console.readchr.caret = $16CE 
console.readchr.prev_chr = $1875 
console.readgen = $1969 
console.readgen.SkipAllowChr = $19BF 
console.readint.allowedchrs = $1752 
console.readint.copymem = $17BC 
console.readint16$ = $1778 
console.readint32$ = $1796 
console.readint8$ = $175E 
console.readkey$ = $1849 
console.readstr$ = $1923 
console.resetbufaddress = $19EF 
console.scrollup$ = $142D 
console.scrollupchrs = $1463 
console.setbackgroundcolor$ = $1697 
console.setbordercolor$ = $169D 
console.setcharactercolor$ = $16B7 
console.setcharacterinverted$ = $16BD 
console.setcolumn$ = $13BB 
console.setforegroundcolor$ = $16A3 
console.setrow$ = $13AC 
console.start = $12F6 
console.writechr$ = $1519 
console.writechr.offset = $1517 
console.writeint = $1500 
console.writeint16$ = $14D7 
console.writeint32$ = $14DF 
console.writeint8$ = $14CF 
console.writeln$ = $14AF 
console.writestr$ = $14B7 
convert.ascii2str$ = $5055 
convert.dec2hex16 = $1CB9 
convert.dec2hex32 = $1D2D 
convert.dec2hex8 = $1C65 
convert.hex2dec16 = $1C1F 
convert.hex2dec32 = $1C40 
convert.hex2dec8 = $1C00 
convert.str2ascii$ = $5000 
disk.checkerror = $1F8A 
disk.copyfile$ = $3FD7 
disk.error$ = $3B41 
disk.execmd = $3F4A 
disk.execmd.filename = $3F1E 
disk.execmd.len = $3F49 
disk.execmd.name = $3F21 
disk.execmd1 = $3F7E 
disk.execmd2 = $3FE7 
disk.fileexists$ = $3D1D 
disk.format$ = $3FB2 
disk.getdiskinfo$ = $3C95 
disk.getdiskinfo._setnam = $3E3E 
disk.getdiskinfo._setnam_all = $3E3C 
disk.getdiskinfo.blocksfree$ = $3C93 
disk.getdiskinfo.filename = $3C7F 
disk.getdiskinfo.label$ = $3C82 
disk.getdiskinfo.reset = $3E3C 
disk.getfileinfo$ = $3DCE 
disk.getfileinfo.blocks$ = $3DA9 
disk.getfileinfo.buf1 = $3DAA 
disk.getfileinfo.buf2 = $3DBF 
disk.getfileinfo.buf3 = $3DC4 
disk.getfileinfo.cbm = $3DA5 
disk.getfileinfo.cbm2 = $3DA7 
disk.getfileinfo.extension = $3DC1 
disk.getfileinfo.filename = $3DAD 
disk.getfileinfo.len = $3DA3 
disk.getfileinfo.name$ = $3DAF 
disk.getfileinfo.offset = $3DA4 
disk.getfileinfo.type$ = $3DC8 
disk.getfileinfo.typemap = $3DC9 
disk.getfileinfoclose$ = $3D4D 
disk.getnextfileinfo$ = $3E7D 
disk.loadfile$ = $404B 
disk.readerrorchannel = $3C2F 
disk.readerrorchannel.errordec = $3C2D 
disk.readfile = $3BA1 
disk.readfile$ = $3B6E 
disk.renamefile$ = $3FDF 
disk.reset$ = $1FA9 
disk.reset.string = $1FA7 
disk.scratchfile = $3FCF 
disk.scratchfile$ = $3FBA 
disk.setnam = $3B42 
disk.validate$ = $1F9A 
disk.writefile$ = $3D56 
djr0 = $3B24 
djr1 = $3B28 
djr2 = $3B2C 
djr3 = $3B30 
djrrb = $3B1C 
graphics.clear$ = $2EC7 
graphics.createtable = $2F83 
graphics.currentaddress = $2DBF 
graphics.currentcoloraddr = $2DC1 
graphics.drawbox$ = $33F6 
graphics.drawchr = $2FCA 
graphics.drawcircle$ = $3483 
graphics.drawfill$ = $3135 
graphics.drawline$ = $3184 
graphics.end = $2EA6 
graphics.enter$ = $2DC4 
graphics.getspriteandmask = $3778 
graphics.getspritecolor$ = $37FC 
graphics.getspritelocation$ = $3846 
graphics.getspriteormask = $3765 
graphics.hidesprite$ = $378C 
graphics.isactive$ = $2DC3 
graphics.leave$ = $2DC8 
graphics.plotcircle = $359C 
graphics.scrollup = $30AC 
graphics.setbitmapmode$ = $2DCC 
graphics.setcolor$ = $2EB0 
graphics.sethiresmode$ = $2E0E 
graphics.setmulticolormode$ = $2E37 
graphics.setpixel$ = $3107 
graphics.setspritecolor$ = $37EC 
graphics.setspritehires$ = $37A7 
graphics.setspritelocation$ = $380E 
graphics.setspritemulticolor$ = $379B 
graphics.settextmode$ = $2E7E 
graphics.showsprite$ = $3780 
graphics.start = $2E96 
graphics.stretchspritehorizontally$ = $37B6 
graphics.stretchspritevertically$ = $37D1 
graphics.tablecreated = $2F82 
graphics.unstretchspritehorizontally$ = $37C2 
graphics.unstretchspritevertically$ = $37DD 
joystick.getstate$ = $3B0A 
kernel.begin = $0F10 
kernel.debugmode$ = $0F0B 
kernel.end = $0F34 
kernel.halt$ = $0F49 
kernel.reset$ = $1F84 
kernel.start = $0F1A 
math.abs16$ = $2A73 
math.add16$ = $2800 
math.add24$ = $280E 
math.add32$ = $2822 
math.cmp16$ = $28E4 
math.cmp32$ = $2900 
math.dec16$ = $28BE 
math.divide16$ = $2A00 
math.divide32$ = $2A26 
math.divide8$ = $29DA 
math.exponent8$ = $2A90 
math.inc16$ = $283C 
math.inc24$ = $2862 
math.multiply16$ = $2967 
math.multiply32$ = $298D 
math.multiply8$ = $2948 
math.random16$ = $2926 
math.random8$ = $2917 
math.subtract16$ = $2896 
math.subtract32$ = $28A4 
memory.allocate$ = $109D 
memory.allocate.dec_length = $115A 
memory.allocate.find = $1176 
memory.allocate.inc_address = $1244 
memory.allocate.inc_length = $113E 
memory.backupzp = $0F61 
memory.calculate_free = $12CC 
memory.copy$ = $0F8A 
memory.copy16$ = $0F9C 
memory.deallocate$ = $1287 
memory.end = $0F5A 
memory.endheap$ = $1097 
memory.fill$ = $1003 
memory.fill16$ = $1015 
memory.free$ = $1063 
memory.heapadress = $105D 
memory.heapadress_lr = $105F 
memory.heapstarted = $1067 
memory.pullregs$ = $104D 
memory.pullzp$ = $1F31 
memory.pushregs$ = $1037 
memory.pushzp$ = $1F1B 
memory.restorezp = $0F6E 
memory.sizeof$ = $1260 
memory.start = $0F56 
memory.startheap$ = $1068 
memory.swap$ = $0FC0 
memory.swap16$ = $0FD7 
memory.total$ = $1061 
memory.used$ = $1065 
mouse.buttoncheck = $40FE 
mouse.getstate$ = $40CE 
mouse.movecheck = $410F 
mouse.oldx = $40CC 
mouse.oldy = $40CD 
printer.error$ = $4069 
printer.prev_devcice = $4068 
printer.printstr$ = $406A 
serial.baud$ = $4138 
serial.close$ = $4139 
serial.discard_byte$ = $4135 
serial.open$ = $1FC8 
serial.prev_device = $4134 
serial.recv$ = $418A 
serial.recv.first_byte = $4189 
serial.recv_eot$ = $4136 
serial.send$ = $414E 
serial.send_eot$ = $4137 
serial.set_baud = $4147 
string.concat$ = $2D11 
string.contains$ = $2C0D 
string.copy$ = $2BCF 
string.create$ = $2AAD 
string.create.dec_length = $2B1F 
string.create.inc_length = $2B03 
string.getlength$ = $2B72 
string.getlength_GetNullChar = $2B8D 
string.getlength_GetSizeOf = $2BA8 
string.indexof$ = $2C43 
string.isequal$ = $1F46 
string.isheap$ = $2B3B 
time.getticks$ = $1DD5 
time.halt$ = $1EA5 
time.wait$ = $1EB9 

******* 89 Unused label(s) *******
@again
@Alpha1
@Alpha12
@Alpha2
@Alpha22
@AtMax
@BackSpace_No
@BackSpace_No
@BackSpace_Yes
@BackSpace_Yes
@BackSpaced
@backup
@buffer_ok
@buffer_ok2
@CharOk
@CharOK
@check_blocks
@check_counter
@check_mem
@check_size
@check_y_x
@CheckSpecial
@chin_done
@chrin_no_wait
@chrin_wait
@chrout
@clear_lr
@ClearCarret
@ClearValue
@ClearXHi
@ClearXHi
@close
@close
@close
@close
@close
@cont
@cont
@cont
@cont
@cont
@cont2
@continue
@Continue
@copylow
@d_neg
@d_not_neg
@d_pos
@DigitOk
@DigitOk
@DigitOk
@div10_16
@div10_32
@div10_8
@divloop
@do_backspace
@do_newline
@doAdd
@DoCheck
@doEor
@doEor
@done
@done
@done
@done
@done
@done
@done
@done
@done
@Done
@Done
@Done
@Done
@Done
@Done
@Done
@done2
@DrawLine
@DrawPixelXY
@DrawPixelYX
@dstcont
@dstdone
@dstloop
@end
@end
@end
@end
@end
@end
@end
@end
@end
@end
@End
@End
@End
@End
@End
@End
@End
@End
@End
@End
@End2
@enterLoop
@eof
@eof
@eof
@error
@error
@error
@error
@error
@Factor
@Factor
@Factor
@FileExistOk
@FileExistOk
@FileExistOk
@FileExists
@FileExists
@FileScratched
@filllow
@find
@fire
@fname_cont
@fname_done
@fname_loop
@fname_loop2
@found
@FoundStr
@ftype_cont
@ftype_cont2
@ftype_done
@ftype_loop
@get_first_file
@GetSizeOf
@getstate
@Halt
@HideCaret
@inc_af
@inc_af
@inc_counter
@inc_mem
@IncY
@IncY
@init_mem
@InitAddresses
@isequal
@l
@l1
@l2
@l3
@l3
@l3
@l4
@l4
@l4
@LengthOK
@lenok
@LenOk
@LenOk
@LenOk
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@Loop
@loop_lr
@loop1
@loop1
@Loop1
@loop2
@loop2
@loop2
@Loop2
@Loop3
@lowZero
@movchk1
@movchk2
@NeedToCreate
@NewLine_No
@NewLine_No
@NewLine_Yes
@NewLine_Yes
@next_mem
@NextChar
@NextChar
@NextDigit
@NextDigit
@NextDigit
@no_cont
@no_discard
@no_discard
@noEor
@noEor
@NoFoundStr
@NoMatchChr
@NotAlpha1
@NotAlpha12
@NotAlpha2
@NotAlpha22
@noteof
@NoValidInput
@Null_No
@Null_No
@Null_Yes
@Null_Yes
@nz
@ok
@ok
@ok
@ok
@ok
@ok
@ok
@ok
@ok2
@ok2
@OkToDrawChr
@OkToScrollUp
@OkToStart
@poke_665_73
@port1
@port2
@ProcessLoop
@ProcessYError2
@ProcessYError2_1
@readerror
@readerror
@ReadKey
@ReadKey
@ReadKey_skip
@ReadKeyOk
@rend
@reset_counter
@reset_lr
@restore
@ReturnBackSpace
@ReturnNull
@rinc
@rloop
@rotate_r
@scratchok
@send
@set
@Set
@SetBtn
@setfire
@setnam_specific
@SetValue
@SetXHi
@SetXHi
@SetY_Offset1
@shift_r
@ShiftPressed
@ShowCarret
@SK
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip
@skip_check_d
@Skip_No
@Skip_Yes
@skip0
@skip1
@Skip1
@skip2
@skip2
@skip2
@skip2
@Skip2
@SkipChar
@SkipCLI
@SkipDrawPixel
@SkipFactor
@SkipFactor
@SkipFactor
@SkipFillStr
@SkipProcessLoop
@SkipProcessYError2
@SkipSetY_Offset
@SkipSwapX1X2_Y1Y2
@SkipSwapX1Y1_X2Y2
@SkipWriteChr
@SMC1
@srcdone
@srcloop
@sta_665
@swaplow
@SwapX1X2_Y1Y2
@SwapX1Y1_X2Y2
@unset
@wend
@wjsr
@wloop
@write_mem
@write_mem_ok1
@write_mem_ok2
@writeerror
audio.beep$
audio.digi_nib
audio.digid418nmi
audio.digiend$
audio.digiendaddress$
audio.digisamplerate$
audio.digistart$
audio.digistartaddress$
audio.digistophi
audio.digistoplo
audio.setattackdecay$
audio.setsustainrelease$
audio.setwaveform$
audio.sidend$
audio.sidinitaddress$
audio.sidplayaddress$
audio.sidstart$
console.dec_memaddress.reset_lr
console.getcolumn$
console.getrow$
console.inc_memaddress.end
console.readchr$
console.readint16$
console.readint32$
console.readint8$
console.readstr$
console.setcharactercolor$
console.setcolumn$
console.setforegroundcolor$
console.setrow$
console.writeint16$
console.writeint32$
console.writeint8$
console.writeln$
console.writestr$
convert.ascii2str$
convert.str2ascii$
disk.copyfile$
disk.format$
disk.getdiskinfo$
disk.getfileinfo.buf1
disk.getfileinfo.buf2
disk.getfileinfo.buf3
disk.getfileinfo.cbm2
disk.loadfile$
disk.readerrorchannel.errordec
disk.renamefile$
disk.scratchfile$
disk.validate$
disk.writefile$
djrrb
graphics.drawbox$
graphics.drawcircle$
graphics.drawfill$
graphics.enter$
graphics.getspritecolor$
graphics.getspritelocation$
graphics.hidesprite$
graphics.leave$
graphics.setmulticolormode$
graphics.setspritecolor$
graphics.setspritehires$
graphics.setspritelocation$
graphics.setspritemulticolor$
graphics.showsprite$
graphics.stretchspritehorizontally$
graphics.stretchspritevertically$
graphics.unstretchspritehorizontally$
graphics.unstretchspritevertically$
joystick.getstate$
kernel.halt$
math.divide16$
math.divide8$
math.inc24$
math.random16$
math.random8$
math.subtract32$
memory.deallocate$
memory.swap16$
mouse.getstate$
printer.printstr$
serial.close$
serial.open$
serial.recv$
serial.send$
string.concat$
string.contains$
string.copy$
string.isequal$

******* 486 Variable(s) *******
audio._digiabuffer  = $3B06
audio._digiybuffer  = $3B08
audio.attackhigh$  = $0080
audio.attacklow$  = $0020
audio.attacklowest$  = $0010
audio.attackmedium$  = $0040
audio.decayhigh$  = $0008
audio.decaylow$  = $0002
audio.decaylowest$  = $0001
audio.decaymedium$  = $0004
audio.digidb  = $0000
audio.digipoint  = $0032
audio.digisoundptr  = $0030
audio.digitable  = $39D3
audio.getvoiceaddress.address  = $0074
audio.getvoiceaddress.voice  = $0073
audio.noiseoff$  = $0080
audio.noiseon$  = $0081
audio.pulseoff$  = $0040
audio.pulseon$  = $0041
audio.releasehigh$  = $0008
audio.releaselow$  = $0002
audio.releaselowest$  = $0001
audio.releasemedium$  = $0004
audio.sawtoothoff$  = $0020
audio.sawtoothon$  = $0021
audio.setattackdecay.value$  = $0075
audio.setattackdecay.voice$  = $0073
audio.setfrequency.frequency$  = $0075
audio.setfrequency.voice$  = $0073
audio.setsustainrelease.value$  = $0075
audio.setsustainrelease.voice$  = $0073
audio.setvolume.value$  = $0073
audio.setwaveform.value$  = $0075
audio.setwaveform.voice$  = $0073
audio.sidabuff  = $39CD
audio.sidaddress  = $D400
audio.sidafterinijmp  = $392A
audio.sidafterplayjmp  = $39B5
audio.sidxbuff  = $39D1
audio.sidybuff  = $39CF
audio.sustainhigh$  = $0080
audio.sustainlow$  = $0020
audio.sustainlowest$  = $0010
audio.sustainmedium$  = $0040
audio.triangleoff$  = $0010
audio.triangleon$  = $0011
audio.voice1$  = $0001
audio.voice2$  = $0002
audio.voice3$  = $0003
audio.volumeaddress  = $D418
color.black$  = $0000
color.blue$  = $0006
color.brown$  = $0009
color.cyan$  = $0003
color.darkgrey$  = $000B
color.green$  = $0005
color.grey$  = $000C
color.lightblue$  = $000E
color.lightgreen$  = $000D
color.lightgrey$  = $000F
color.lightred$  = $000A
color.orange$  = $0008
color.purple$  = $0004
color.red$  = $0002
color.white$  = $0001
color.yellow$  = $0007
console.backspace$  = $00FD
console.calc_currentaddress.sum  = $0074
console.charmapaddress  = $2000
console.coloraddress  = $D800
console.coloraddress_lr  = $DBC0
console.getcolumn.column$  = $0073
console.getkey.BufferNew  = $007B
console.getkey.KeyQuantity  = $007E
console.getkey.MaxKeyRollover  = $0003
console.getkey.NonAlphaFlagX  = $007F
console.getkey.NonAlphaFlagY  = $0080
console.getkey.ScanResult  = $0073
console.getkey.SimultaneousKeys  = $0082
console.getkey.TempZP  = $0081
console.getrow.row$  = $0073
console.memoryaddress  = $0400
console.memoryaddress_lr  = $07C0
console.newline$  = $00FE
console.null$  = $00FF
console.quote$  = $0027
console.readchr.caretaddress  = $00D9
console.readchr.char$  = $00D0
console.readchr.milliseconds  = $00D4
console.readchr.togglecaret  = $00D8
console.readgen.allowedchrs  = $00EB
console.readgen.char  = $00EE
console.readgen.maxlen  = $00EA
console.readgen.skipchr  = $00ED
console.readint16.integer$  = $007A
console.readint32.integer$  = $007A
console.readint8.integer$  = $007A
console.readkey.char$  = $00D0
console.readkey.char.invalid$  = $00FF
console.readkey.processorstate  = $00DB
console.readkey.shift1$  = $00D1
console.readkey.shift1.f1$  = $0010
console.readkey.shift1.f3$  = $0020
console.readkey.shift1.f5$  = $0040
console.readkey.shift1.f7$  = $0008
console.readkey.shift1.insert_delete$  = $0001
console.readkey.shift1.left_right$  = $0004
console.readkey.shift1.return$  = $0002
console.readkey.shift1.up_down$  = $0080
console.readkey.shift2$  = $00D2
console.readkey.shift2.clear_home$  = $0008
console.readkey.shift2.commodore$  = $0020
console.readkey.shift2.control$  = $0004
console.readkey.shift2.left_shift$  = $0040
console.readkey.shift2.right_shift$  = $0010
console.readkey.shift2.run_stop$  = $0080
console.readkey.state$  = $00D3
console.readkey.state.awaiting_no_activity$  = $0005
console.readkey.state.control_port_1$  = $0002
console.readkey.state.multiplekeys$  = $0004
console.readkey.state.no_activity$  = $0001
console.readkey.state.ok$  = $0000
console.readkey.state.shadowing$  = $0003
console.readstr.bufaddress  = $0900
console.readstr.length  = $00FB
console.readstr.straddress$  = $007A
console.setbackgroundcolor.color$  = $0073
console.setbordercolor.color$  = $0073
console.setcharactercolor.color$  = $0073
console.setcharacterinverted.value$  = $0073
console.setcolumn.column$  = $0073
console.setforegroundcolor.color$  = $0073
console.setrow.row$  = $0073
console.writechr.address  = $00FB
console.writechr.char$  = $0002
console.writeint16.integer$  = $00E0
console.writeint32.integer$  = $00E0
console.writeint8.integer$  = $00E0
console.writestr.straddress$  = $00E0
convert.ascii2str.ascii$  = $00E0
convert.dec2hex.len  = $002A
convert.dec2hex.value  = $00E4
convert.dec2hex16.int  = $00FB
convert.dec2hex16.len  = $002A
convert.dec2hex16.offset  = $0052
convert.dec2hex16.result  = $00E0
convert.dec2hex16.value  = $00E4
convert.dec2hex32.int  = $00FB
convert.dec2hex32.len  = $002A
convert.dec2hex32.offset  = $0052
convert.dec2hex32.result  = $00E0
convert.dec2hex32.value  = $00E4
convert.dec2hex8.int  = $00FB
convert.dec2hex8.len  = $002A
convert.dec2hex8.offset  = $0052
convert.dec2hex8.result  = $00E0
convert.dec2hex8.value  = $00E4
convert.hex2dec.result  = $00E4
convert.hex2dec16.result  = $00E4
convert.hex2dec16.value  = $00E0
convert.hex2dec32.result  = $00E4
convert.hex2dec32.value  = $00E0
convert.hex2dec8.result  = $00E4
convert.hex2dec8.value  = $00E0
convert.str2ascii.str$  = $00E0
disk.copyfile.dstfilename$  = $0022
disk.copyfile.srcfilename$  = $0020
disk.execmd1.filename  = $0020
disk.execmd2.filename1  = $0020
disk.execmd2.filename2  = $0022
disk.execmd2.len1  = $0024
disk.execmd2.len2  = $0025
disk.fileexists.exists$  = $0026
disk.fileexists.filename$  = $0020
disk.format.labelname$  = $0020
disk.getfileinfo.filename$  = $0020
disk.loadfile.filename$  = $0020
disk.readfile.address$  = $0022
disk.readfile.filename$  = $0020
disk.readfile.length$  = $0024
disk.renamefile.newfilename$  = $0022
disk.renamefile.oldfilename$  = $0020
disk.scratchfile.filename$  = $0020
disk.setnam.filename$  = $0020
disk.writefile.address$  = $0022
disk.writefile.filename$  = $0020
disk.writefile.length$  = $0024
diskerror.block_header_not_found$  = $0014
diskerror.byte_decode_error$  = $0018
diskerror.checksum_error$  = $0017
diskerror.checksum_error_header$  = $001B
diskerror.cmd_file_not_found$  = $0027
diskerror.data_block_not_present$  = $0016
diskerror.data_extends_block$  = $001C
diskerror.device_not_present$  = $0005
diskerror.directory_error$  = $0047
diskerror.disk_directory_full$  = $0048
diskerror.disk_id_mismatch$  = $001D
diskerror.drive_not_ready$  = $004A
diskerror.file_exists$  = $003F
diskerror.file_not_found$  = $003E
diskerror.file_not_open$  = $003D
diskerror.file_open$  = $0002
diskerror.file_open_for_write$  = $003C
diskerror.file_scratched$  = $0001
diskerror.file_too_large$  = $0034
diskerror.file_type_mismatch$  = $0040
diskerror.general_syntax_error$  = $001E
diskerror.illegal_device_number$  = $0009
diskerror.illegal_sys_track_sector$  = $0043
diskerror.illegal_track_sector$  = $0042
diskerror.invalid_command$  = $001F
diskerror.invalid_filename$  = $0021
diskerror.long_line$  = $0020
diskerror.missing_file_name$  = $0008
diskerror.no_block$  = $0041
diskerror.no_channels$  = $0046
diskerror.no_file_given$  = $0022
diskerror.not_input_file$  = $0006
diskerror.not_output_file$  = $0007
diskerror.ok$  = $0000
diskerror.out_of_data$  = $000D
diskerror.out_of_memory$  = $0010
diskerror.overflow_in_rcd$  = $0033
diskerror.power_up$  = $0049
diskerror.rcd_not_present$  = $0032
diskerror.sync_char_not_found$  = $0015
diskerror.write_protect_on$  = $001A
diskerror.write_verify_error$  = $0019
diskfiletypes.del$  = $0005
diskfiletypes.none$  = $0000
diskfiletypes.prg$  = $0001
diskfiletypes.rel$  = $0004
diskfiletypes.seq$  = $0002
diskfiletypes.usr$  = $0003
firstnibble  = $0000
font.memoryaddress  = $2000
graphics.bitmapcoloraddress  = $7F40
graphics.BitMask  = $0D00
graphics.BitMask_address  = $0D00
graphics.coloraddress  = $4400
graphics.drawbox.color$  = $0024
graphics.drawbox.x1$  = $0025
graphics.drawbox.x2$  = $0029
graphics.drawbox.y1$  = $0027
graphics.drawbox.y2$  = $002B
graphics.drawchr.bmpaddress  = $0022
graphics.drawchr.chr  = $0028
graphics.drawchr.chraddress  = $0020
graphics.drawchr.col_offset  = $0024
graphics.drawchr.row_offset  = $0026
graphics.drawcircle.color$  = $0024
graphics.drawcircle.d  = $002E
graphics.drawcircle.radius$  = $0025
graphics.drawcircle.x  = $002A
graphics.drawcircle.xcenter$  = $0026
graphics.drawcircle.y  = $002C
graphics.drawcircle.ycenter$  = $0028
graphics.drawfill.color$  = $0024
graphics.drawfill.x1$  = $0025
graphics.drawfill.x2$  = $0029
graphics.drawfill.y  = $002D
graphics.drawfill.y1$  = $0027
graphics.drawfill.y2$  = $002B
graphics.drawline.color$  = $0024
graphics.drawline.derror2  = $00E8
graphics.drawline.dx  = $00D8
graphics.drawline.dx_2  = $00EE
graphics.drawline.dy  = $00DA
graphics.drawline.error2  = $00EA
graphics.drawline.steep  = $00DC
graphics.drawline.x  = $00E0
graphics.drawline.x1$  = $00D0
graphics.drawline.x1_x2  = $00E4
graphics.drawline.x2$  = $00D4
graphics.drawline.y  = $00E2
graphics.drawline.y_offset  = $00EC
graphics.drawline.y1$  = $00D2
graphics.drawline.y1_y2  = $00E6
graphics.drawline.y2$  = $00D6
graphics.getspriteandmask.number  = $0073
graphics.getspritecolor.address  = $0075
graphics.getspritecolor.color$  = $0074
graphics.getspritecolor.number$  = $0073
graphics.getspritelocation.address  = $0078
graphics.getspritelocation.number$  = $0073
graphics.getspritelocation.x$  = $0074
graphics.getspritelocation.y$  = $0076
graphics.getspriteormask.number  = $0073
graphics.hidesprite.number$  = $0073
graphics.imageaddress$  = $6000
graphics.memoryaddress  = $6000
graphics.memoryaddress_2r  = $6140
graphics.memoryaddress_lr  = $7E00
graphics.multibgcoloraddress  = $D021
graphics.multibgcolorfile  = $8710
graphics.multicoloraddress  = $D800
graphics.multicolorfile  = $8328
graphics.multivideoaddress  = $4400
graphics.multivideofile  = $7F40
graphics.setpixel.color$  = $0024
graphics.setpixel.x$  = $0020
graphics.setpixel.y$  = $0022
graphics.setspritecolor.address  = $0075
graphics.setspritecolor.color$  = $0074
graphics.setspritecolor.number$  = $0073
graphics.setspritehires.number$  = $0073
graphics.setspritelocation.address  = $0078
graphics.setspritelocation.number$  = $0073
graphics.setspritelocation.x$  = $0074
graphics.setspritelocation.y$  = $0076
graphics.setspritemulticolor.number$  = $0073
graphics.showsprite.number$  = $0073
graphics.sprite1$  = $0001
graphics.sprite1address$  = $4200
graphics.sprite2$  = $0002
graphics.sprite2address$  = $4240
graphics.sprite3$  = $0003
graphics.sprite3address$  = $4280
graphics.sprite4$  = $0004
graphics.sprite4address$  = $42C0
graphics.sprite5$  = $0005
graphics.sprite5address$  = $4300
graphics.sprite6$  = $0006
graphics.sprite6address$  = $4340
graphics.sprite7$  = $0007
graphics.sprite7address$  = $4380
graphics.sprite8$  = $0008
graphics.sprite8address$  = $43C0
graphics.spritemulticolor1address$  = $D025
graphics.spritemulticolor2address$  = $D026
graphics.stretchspritehorizontally.number$  = $0073
graphics.stretchspritevertically.number$  = $0073
graphics.unstretchspritehorizontally.number$  = $0073
graphics.unstretchspritevertically.number$  = $0073
graphics.X_Table  = $0C00
graphics.X_Table_address  = $0C00
graphics.Y_Table_Hi  = $0B00
graphics.Y_Table_Hi_address  = $0B00
graphics.Y_Table_Lo  = $0A00
graphics.Y_Table_Lo_address  = $0A00
joystick.getstate.deltax$  = $007C
joystick.getstate.deltay$  = $007D
joystick.getstate.fire$  = $007B
joystick.getstate.port$  = $007A
joystick.port1$  = $0001
joystick.port2$  = $0002
math.abs16.integer$  = $0080
math.abs16.value$  = $0084
math.add16.addend1$  = $0080
math.add16.addend2$  = $0082
math.add16.sum$  = $0084
math.add24.addend1$  = $0080
math.add24.addend2$  = $0083
math.add24.sum$  = $0086
math.add32.addend1$  = $0080
math.add32.addend2$  = $0084
math.add32.sum$  = $0088
math.cmp16.num1$  = $0080
math.cmp16.num2$  = $0082
math.cmp32.num1$  = $0080
math.cmp32.num2$  = $0084
math.dec16.address$  = $0086
math.divide16.dividend$  = $0082
math.divide16.divisor$  = $0080
math.divide16.quotient$  = $0082
math.divide16.remainder$  = $0084
math.divide32.dividend$  = $0084
math.divide32.divisor$  = $0080
math.divide32.quotient$  = $0084
math.divide32.remainder$  = $008C
math.divide32.temp1  = $00FB
math.divide32.temp2  = $00FE
math.divide8.dividend$  = $0081
math.divide8.divisor$  = $0080
math.divide8.quotient$  = $0081
math.divide8.remainder$  = $0082
math.exponent8.base$  = $008A
math.exponent8.power$  = $008B
math.exponent8.value$  = $008C
math.inc16.address$  = $0086
math.inc24.address$  = $0086
math.multiply16.factor1$  = $0080
math.multiply16.factor2$  = $0082
math.multiply16.product$  = $0084
math.multiply32.factor1$  = $0080
math.multiply32.factor2$  = $0084
math.multiply32.product$  = $0088
math.multiply8.factor1$  = $0080
math.multiply8.factor2$  = $0082
math.multiply8.product$  = $0083
math.random16.result$  = $0080
math.random16.seed$  = $0080
math.random8.result$  = $0080
math.random8.seed$  = $0080
math.subtract16.difference$  = $0084
math.subtract16.menuend$  = $0080
math.subtract16.subtrahend$  = $0082
math.subtract32.difference$  = $0088
math.subtract32.menuend$  = $0080
math.subtract32.subtrahend$  = $0084
memory.allocate.address$  = $007A
memory.allocate.counter  = $0077
memory.allocate.found  = $0079
memory.allocate.length$  = $0075
memory.backupzpaddress  = $0E00
memory.copy.destination$  = $0075
memory.copy.length$  = $0077
memory.copy.source$  = $0073
memory.copy16.destination$  = $0075
memory.copy16.length$  = $0078
memory.copy16.source$  = $0073
memory.deallocate.address$  = $007A
memory.fill.address$  = $0073
memory.fill.length$  = $0076
memory.fill.value$  = $0075
memory.fill16.address$  = $0073
memory.fill16.length$  = $0077
memory.fill16.value$  = $0075
memory.sizeof.address$  = $007A
memory.sizeof.length$  = $007C
memory.swap.address1$  = $0073
memory.swap.address2$  = $0075
memory.swap.length$  = $0077
memory.swap.temp  = $0079
memory.swap16.address1$  = $0073
memory.swap16.address2$  = $0075
memory.swap16.length$  = $0077
memory.swap16.temp  = $0079
mouse.buttoncheck.buttonmask  = $007E
mouse.getstate.deltax$  = $007C
mouse.getstate.deltay$  = $007D
mouse.getstate.leftbutton$  = $007A
mouse.getstate.rightbutton$  = $007B
mouse.movecheck.newdelta  = $007F
mouse.movecheck.olddelta  = $007E
nonibbles  = $0000
printer.carriage_return$  = $000D
printer.line_feed$  = $000A
printer.lower_case$  = $0011
printer.null$  = $00FF
printer.printstr.address$  = $0020
printer.upper_case$  = $0091
printererror.ok$  = $0000
printererror.open_error$  = $0001
printererror.print_error$  = $0002
serial.eot$  = $00FF
serial.recv.address$  = $0022
serial.send.address$  = $0022
serial.skip  = $00FE
string.concat.address  = $00EA
string.concat.dstaddress$  = $007A
string.concat.dstlength  = $00E8
string.concat.srcaddress1$  = $00E0
string.concat.srcaddress2$  = $00E2
string.concat.srclength1  = $00E4
string.concat.srclength2  = $00E6
string.contains.address1$  = $007A
string.contains.address2$  = $007C
string.contains.value$  = $0073
string.copy.dstaddress$  = $007A
string.copy.srcaddress$  = $007E
string.create.address$  = $007A
string.create.address_lr  = $00FD
string.create.character$  = $0002
string.create.length$  = $00FB
string.getlength.address$  = $007A
string.getlength.length$  = $00FB
string.indexof.address1$  = $007A
string.indexof.address1_org  = $00FB
string.indexof.address2$  = $007C
string.indexof.address2_org  = $00FD
string.indexof.chr1  = $0073
string.indexof.chr2  = $0074
string.indexof.index$  = $007E
string.isequal.address1$  = $007A
string.isequal.address2$  = $007C
string.isequal.char  = $007D
string.isequal.value$  = $007E
string.isheap.address$  = $007A
string.isheap.heap$  = $0073
tgt_c64  = $0001
time.getticks.result$  = $0073
time.wait.milliseconds$  = $0077
withsidplayer  = $0000
******* -171 Unused variables(s) *******
audio.attackhigh$
audio.attacklow$
audio.attacklowest$
audio.attackmedium$
audio.decayhigh$
audio.decaylow$
audio.decaylowest$
audio.decaymedium$
audio.digidb
audio.noiseoff$
audio.noiseon$
audio.pulseoff$
audio.pulseon$
audio.releasehigh$
audio.releaselow$
audio.releaselowest$
audio.releasemedium$
audio.sawtoothoff$
audio.sawtoothon$
audio.setattackdecay.voice$
audio.setsustainrelease.voice$
audio.setwaveform.voice$
audio.sidaddress
audio.sustainhigh$
audio.sustainlow$
audio.sustainlowest$
audio.sustainmedium$
audio.triangleoff$
audio.triangleon$
color.blue$
color.brown$
color.cyan$
color.darkgrey$
color.green$
color.grey$
color.lightblue$
color.lightgreen$
color.lightgrey$
color.lightred$
color.orange$
color.purple$
color.red$
color.yellow$
console.getkey.ScanResult
console.quote$
console.readkey.shift1.f1$
console.readkey.shift1.f3$
console.readkey.shift1.f5$
console.readkey.shift1.f7$
console.readkey.shift1.left_right$
console.readkey.shift1.up_down$
console.readkey.shift2.clear_home$
console.readkey.shift2.commodore$
console.readkey.shift2.control$
console.readkey.shift2.run_stop$
console.readkey.state.awaiting_no_activity$
console.readkey.state.control_port_1$
console.readkey.state.multiplekeys$
console.readkey.state.no_activity$
console.readkey.state.shadowing$
console.writeint16.integer$
console.writeint32.integer$
console.writeint8.integer$
console.writestr.straddress$
convert.dec2hex.value
convert.dec2hex16.value
convert.dec2hex32.value
convert.dec2hex8.value
convert.hex2dec.result
convert.hex2dec16.result
convert.hex2dec32.result
convert.hex2dec8.result
disk.copyfile.dstfilename$
disk.copyfile.srcfilename$
disk.fileexists.filename$
disk.format.labelname$
disk.loadfile.filename$
disk.renamefile.newfilename$
disk.renamefile.oldfilename$
disk.scratchfile.filename$
disk.writefile.filename$
diskerror.block_header_not_found$
diskerror.byte_decode_error$
diskerror.checksum_error$
diskerror.checksum_error_header$
diskerror.cmd_file_not_found$
diskerror.data_block_not_present$
diskerror.data_extends_block$
diskerror.device_not_present$
diskerror.directory_error$
diskerror.disk_directory_full$
diskerror.disk_id_mismatch$
diskerror.drive_not_ready$
diskerror.file_exists$
diskerror.file_not_open$
diskerror.file_open$
diskerror.file_open_for_write$
diskerror.file_too_large$
diskerror.file_type_mismatch$
diskerror.general_syntax_error$
diskerror.illegal_device_number$
diskerror.illegal_sys_track_sector$
diskerror.illegal_track_sector$
diskerror.invalid_command$
diskerror.invalid_filename$
diskerror.long_line$
diskerror.missing_file_name$
diskerror.no_block$
diskerror.no_channels$
diskerror.no_file_given$
diskerror.not_input_file$
diskerror.not_output_file$
diskerror.out_of_data$
diskerror.out_of_memory$
diskerror.overflow_in_rcd$
diskerror.power_up$
diskerror.rcd_not_present$
diskerror.sync_char_not_found$
diskerror.write_protect_on$
diskerror.write_verify_error$
diskfiletypes.del$
diskfiletypes.prg$
diskfiletypes.rel$
diskfiletypes.seq$
diskfiletypes.usr$
firstnibble
graphics.bitmapcoloraddress
graphics.BitMask
graphics.BitMask_address
graphics.drawbox.color$
graphics.drawcircle.color$
graphics.drawfill.color$
graphics.imageaddress$
graphics.multicoloraddress
graphics.multicolorfile
graphics.multivideoaddress
graphics.multivideofile
graphics.sprite1$
graphics.sprite1address$
graphics.sprite2$
graphics.sprite2address$
graphics.sprite3$
graphics.sprite3address$
graphics.sprite4$
graphics.sprite4address$
graphics.sprite5$
graphics.sprite5address$
graphics.sprite6$
graphics.sprite6address$
graphics.sprite7$
graphics.sprite7address$
graphics.sprite8$
graphics.sprite8address$
graphics.spritemulticolor1address$
graphics.spritemulticolor2address$
graphics.X_Table
graphics.X_Table_address
graphics.Y_Table_Hi
graphics.Y_Table_Hi_address
graphics.Y_Table_Lo
graphics.Y_Table_Lo_address
joystick.port2$
math.divide8.quotient$
math.inc24.address$
math.random16.result$
memory.backupzpaddress
memory.swap16.address1$
memory.swap16.address2$
nonibbles
printer.carriage_return$
printer.line_feed$
printer.lower_case$
printer.upper_case$
tgt_c64
withsidplayer

